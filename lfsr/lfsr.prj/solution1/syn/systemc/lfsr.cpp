// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lfsr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lfsr::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> lfsr::ap_const_lv32_10 = "10000";
const sc_lv<32> lfsr::ap_const_lv32_15 = "10101";
const sc_lv<32> lfsr::ap_const_lv32_17 = "10111";
const sc_lv<32> lfsr::ap_const_lv32_16 = "10110";
const sc_logic lfsr::ap_const_logic_0 = sc_dt::Log_0;
const bool lfsr::ap_const_boolean_1 = true;

lfsr::lfsr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( trunc_ln1356_fu_80_p1 );
    sensitive << ( feedback_V_fu_74_p2 );

    SC_METHOD(thread_feedback_V_fu_74_p2);
    sensitive << ( xor_ln301_1_fu_68_p2 );
    sensitive << ( xor_ln301_fu_62_p2 );

    SC_METHOD(thread_tmp_1_fu_38_p3);
    sensitive << ( seed_V );

    SC_METHOD(thread_tmp_2_fu_46_p3);
    sensitive << ( seed_V );

    SC_METHOD(thread_tmp_3_fu_54_p3);
    sensitive << ( seed_V );

    SC_METHOD(thread_tmp_fu_30_p3);
    sensitive << ( seed_V );

    SC_METHOD(thread_trunc_ln1356_fu_80_p1);
    sensitive << ( seed_V );

    SC_METHOD(thread_xor_ln301_1_fu_68_p2);
    sensitive << ( tmp_2_fu_46_p3 );
    sensitive << ( tmp_3_fu_54_p3 );

    SC_METHOD(thread_xor_ln301_fu_62_p2);
    sensitive << ( tmp_1_fu_38_p3 );
    sensitive << ( tmp_fu_30_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lfsr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, seed_V, "(port)seed_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_1_fu_38_p3, "tmp_1_fu_38_p3");
    sc_trace(mVcdFile, tmp_fu_30_p3, "tmp_fu_30_p3");
    sc_trace(mVcdFile, tmp_2_fu_46_p3, "tmp_2_fu_46_p3");
    sc_trace(mVcdFile, tmp_3_fu_54_p3, "tmp_3_fu_54_p3");
    sc_trace(mVcdFile, xor_ln301_1_fu_68_p2, "xor_ln301_1_fu_68_p2");
    sc_trace(mVcdFile, xor_ln301_fu_62_p2, "xor_ln301_fu_62_p2");
    sc_trace(mVcdFile, trunc_ln1356_fu_80_p1, "trunc_ln1356_fu_80_p1");
    sc_trace(mVcdFile, feedback_V_fu_74_p2, "feedback_V_fu_74_p2");
#endif

    }
    mHdltvinHandle.open("lfsr.hdltvin.dat");
    mHdltvoutHandle.open("lfsr.hdltvout.dat");
}

lfsr::~lfsr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void lfsr::thread_ap_done() {
    ap_done = ap_start.read();
}

void lfsr::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void lfsr::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void lfsr::thread_ap_return() {
    ap_return = esl_concat<23,1>(trunc_ln1356_fu_80_p1.read(), feedback_V_fu_74_p2.read());
}

void lfsr::thread_feedback_V_fu_74_p2() {
    feedback_V_fu_74_p2 = (xor_ln301_1_fu_68_p2.read() ^ xor_ln301_fu_62_p2.read());
}

void lfsr::thread_tmp_1_fu_38_p3() {
    tmp_1_fu_38_p3 = seed_V.read().range(21, 21);
}

void lfsr::thread_tmp_2_fu_46_p3() {
    tmp_2_fu_46_p3 = seed_V.read().range(23, 23);
}

void lfsr::thread_tmp_3_fu_54_p3() {
    tmp_3_fu_54_p3 = seed_V.read().range(22, 22);
}

void lfsr::thread_tmp_fu_30_p3() {
    tmp_fu_30_p3 = seed_V.read().range(16, 16);
}

void lfsr::thread_trunc_ln1356_fu_80_p1() {
    trunc_ln1356_fu_80_p1 = seed_V.read().range(23-1, 0);
}

void lfsr::thread_xor_ln301_1_fu_68_p2() {
    xor_ln301_1_fu_68_p2 = (tmp_2_fu_46_p3.read() ^ tmp_3_fu_54_p3.read());
}

void lfsr::thread_xor_ln301_fu_62_p2() {
    xor_ln301_fu_62_p2 = (tmp_1_fu_38_p3.read() ^ tmp_fu_30_p3.read());
}

void lfsr::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"seed_V\" :  \"" << seed_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

