// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_invMain_HH_
#define _aes_invMain_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "invMixColumns.h"
#include "invShiftRows.h"
#include "createRoundKey.h"
#include "aes_invMain_rsbox.h"
#include "aes_invMain_roundcud.h"

namespace ap_rtl {

struct aes_invMain : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;


    // Module declarations
    aes_invMain(sc_module_name name);
    SC_HAS_PROCESS(aes_invMain);

    ~aes_invMain();

    sc_trace_file* mVcdFile;

    aes_invMain_rsbox* rsbox_U;
    aes_invMain_roundcud* roundKey_U;
    invMixColumns* grp_invMixColumns_fu_204;
    invShiftRows* grp_invShiftRows_fu_210;
    createRoundKey* grp_createRoundKey_fu_216;
    sc_signal< sc_lv<18> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > rsbox_address0;
    sc_signal< sc_logic > rsbox_ce0;
    sc_signal< sc_lv<8> > rsbox_q0;
    sc_signal< sc_lv<5> > i_2_fu_240_p2;
    sc_signal< sc_lv<5> > i_2_reg_360;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > state_addr_reg_365;
    sc_signal< sc_lv<1> > icmp_ln299_fu_234_p2;
    sc_signal< sc_lv<9> > zext_ln605_fu_266_p1;
    sc_signal< sc_lv<9> > zext_ln605_reg_378;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln603_fu_252_p2;
    sc_signal< sc_lv<5> > i_4_fu_277_p2;
    sc_signal< sc_lv<5> > i_4_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > state_addr_5_reg_391;
    sc_signal< sc_lv<1> > icmp_ln508_fu_271_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<5> > i_6_fu_299_p2;
    sc_signal< sc_lv<5> > i_6_reg_404;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<4> > state_addr_7_reg_409;
    sc_signal< sc_lv<1> > icmp_ln299_1_fu_293_p2;
    sc_signal< sc_lv<4> > add_ln603_fu_311_p2;
    sc_signal< sc_lv<4> > add_ln603_reg_419;
    sc_signal< sc_lv<5> > i_3_fu_323_p2;
    sc_signal< sc_lv<5> > i_3_reg_427;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<4> > state_addr_6_reg_432;
    sc_signal< sc_lv<1> > icmp_ln508_1_fu_317_p2;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<5> > i_5_fu_345_p2;
    sc_signal< sc_lv<5> > i_5_reg_445;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<4> > state_addr_8_reg_450;
    sc_signal< sc_lv<1> > icmp_ln299_2_fu_339_p2;
    sc_signal< sc_lv<4> > roundKey_address0;
    sc_signal< sc_logic > roundKey_ce0;
    sc_signal< sc_logic > roundKey_we0;
    sc_signal< sc_lv<8> > roundKey_q0;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_ap_start;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_ap_done;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_ap_idle;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_ap_ready;
    sc_signal< sc_lv<4> > grp_invMixColumns_fu_204_state_address0;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_state_ce0;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_state_we0;
    sc_signal< sc_lv<8> > grp_invMixColumns_fu_204_state_d0;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_ap_start;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_ap_done;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_ap_idle;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_ap_ready;
    sc_signal< sc_lv<4> > grp_invShiftRows_fu_210_state_address0;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_state_ce0;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_state_we0;
    sc_signal< sc_lv<8> > grp_invShiftRows_fu_210_state_d0;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_ap_start;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_ap_done;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_ap_idle;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_ap_ready;
    sc_signal< sc_lv<9> > grp_createRoundKey_fu_216_expandedKey_offset;
    sc_signal< sc_lv<4> > grp_createRoundKey_fu_216_roundKey_address0;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_roundKey_ce0;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_roundKey_we0;
    sc_signal< sc_lv<8> > grp_createRoundKey_fu_216_roundKey_d0;
    sc_signal< sc_lv<5> > i_0_i_reg_137;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > i_reg_148;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<5> > i_0_i_i_reg_160;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_state6_on_subcall_done;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<5> > i_0_i2_i_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<5> > i_0_i1_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< bool > ap_block_state13_on_subcall_done;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<5> > i_0_i5_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_logic > grp_invMixColumns_fu_204_ap_start_reg;
    sc_signal< sc_logic > grp_invShiftRows_fu_210_ap_start_reg;
    sc_signal< sc_logic > grp_createRoundKey_fu_216_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln300_fu_246_p1;
    sc_signal< sc_lv<64> > zext_ln509_fu_283_p1;
    sc_signal< sc_lv<64> > zext_ln164_fu_288_p1;
    sc_signal< sc_lv<64> > zext_ln300_1_fu_305_p1;
    sc_signal< sc_lv<64> > zext_ln509_1_fu_329_p1;
    sc_signal< sc_lv<64> > zext_ln164_1_fu_334_p1;
    sc_signal< sc_lv<64> > zext_ln300_2_fu_351_p1;
    sc_signal< sc_lv<8> > grp_fu_227_p2;
    sc_signal< sc_lv<8> > shl_ln_fu_258_p3;
    sc_signal< sc_lv<18> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<18> ap_ST_fsm_state1;
    static const sc_lv<18> ap_ST_fsm_state2;
    static const sc_lv<18> ap_ST_fsm_state3;
    static const sc_lv<18> ap_ST_fsm_state4;
    static const sc_lv<18> ap_ST_fsm_state5;
    static const sc_lv<18> ap_ST_fsm_state6;
    static const sc_lv<18> ap_ST_fsm_state7;
    static const sc_lv<18> ap_ST_fsm_state8;
    static const sc_lv<18> ap_ST_fsm_state9;
    static const sc_lv<18> ap_ST_fsm_state10;
    static const sc_lv<18> ap_ST_fsm_state11;
    static const sc_lv<18> ap_ST_fsm_state12;
    static const sc_lv<18> ap_ST_fsm_state13;
    static const sc_lv<18> ap_ST_fsm_state14;
    static const sc_lv<18> ap_ST_fsm_state15;
    static const sc_lv<18> ap_ST_fsm_state16;
    static const sc_lv<18> ap_ST_fsm_state17;
    static const sc_lv<18> ap_ST_fsm_state18;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<9> ap_const_lv9_A0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln603_fu_311_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state13_on_subcall_done();
    void thread_ap_block_state6_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_createRoundKey_fu_216_ap_start();
    void thread_grp_createRoundKey_fu_216_expandedKey_offset();
    void thread_grp_fu_227_p2();
    void thread_grp_invMixColumns_fu_204_ap_start();
    void thread_grp_invShiftRows_fu_210_ap_start();
    void thread_i_2_fu_240_p2();
    void thread_i_3_fu_323_p2();
    void thread_i_4_fu_277_p2();
    void thread_i_5_fu_345_p2();
    void thread_i_6_fu_299_p2();
    void thread_icmp_ln299_1_fu_293_p2();
    void thread_icmp_ln299_2_fu_339_p2();
    void thread_icmp_ln299_fu_234_p2();
    void thread_icmp_ln508_1_fu_317_p2();
    void thread_icmp_ln508_fu_271_p2();
    void thread_icmp_ln603_fu_252_p2();
    void thread_roundKey_address0();
    void thread_roundKey_ce0();
    void thread_roundKey_we0();
    void thread_rsbox_address0();
    void thread_rsbox_ce0();
    void thread_shl_ln_fu_258_p3();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_zext_ln164_1_fu_334_p1();
    void thread_zext_ln164_fu_288_p1();
    void thread_zext_ln300_1_fu_305_p1();
    void thread_zext_ln300_2_fu_351_p1();
    void thread_zext_ln300_fu_246_p1();
    void thread_zext_ln509_1_fu_329_p1();
    void thread_zext_ln509_fu_283_p1();
    void thread_zext_ln605_fu_266_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
