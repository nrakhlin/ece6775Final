// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "invShiftRows.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic invShiftRows::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic invShiftRows::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> invShiftRows::ap_ST_fsm_state1 = "1";
const sc_lv<6> invShiftRows::ap_ST_fsm_state2 = "10";
const sc_lv<6> invShiftRows::ap_ST_fsm_state3 = "100";
const sc_lv<6> invShiftRows::ap_ST_fsm_state4 = "1000";
const sc_lv<6> invShiftRows::ap_ST_fsm_state5 = "10000";
const sc_lv<6> invShiftRows::ap_ST_fsm_state6 = "100000";
const sc_lv<32> invShiftRows::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> invShiftRows::ap_const_lv32_1 = "1";
const sc_lv<1> invShiftRows::ap_const_lv1_0 = "0";
const sc_lv<32> invShiftRows::ap_const_lv32_2 = "10";
const sc_lv<32> invShiftRows::ap_const_lv32_3 = "11";
const sc_lv<32> invShiftRows::ap_const_lv32_4 = "100";
const sc_lv<3> invShiftRows::ap_const_lv3_0 = "000";
const sc_lv<1> invShiftRows::ap_const_lv1_1 = "1";
const sc_lv<2> invShiftRows::ap_const_lv2_0 = "00";
const sc_lv<2> invShiftRows::ap_const_lv2_3 = "11";
const sc_lv<32> invShiftRows::ap_const_lv32_5 = "101";
const sc_lv<3> invShiftRows::ap_const_lv3_4 = "100";
const sc_lv<3> invShiftRows::ap_const_lv3_1 = "1";
const sc_lv<4> invShiftRows::ap_const_lv4_3 = "11";
const sc_lv<2> invShiftRows::ap_const_lv2_1 = "1";
const bool invShiftRows::ap_const_boolean_1 = true;

invShiftRows::invShiftRows(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln529_1_fu_159_p3);
    sensitive << ( trunc_ln517_reg_191 );
    sensitive << ( j_fu_153_p2 );

    SC_METHOD(thread_add_ln529_2_fu_171_p3);
    sensitive << ( trunc_ln517_reg_191 );
    sensitive << ( j_0_i_reg_84 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln516_fu_96_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln516_fu_96_p2 );

    SC_METHOD(thread_i_1_fu_141_p2);
    sensitive << ( i_0_i_reg_73 );

    SC_METHOD(thread_i_fu_102_p2);
    sensitive << ( i_0_reg_62 );

    SC_METHOD(thread_icmp_ln516_fu_96_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_62 );

    SC_METHOD(thread_icmp_ln525_fu_136_p2);
    sensitive << ( trunc_ln517_reg_191 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_reg_73 );

    SC_METHOD(thread_icmp_ln528_fu_147_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_0_i_reg_84 );

    SC_METHOD(thread_j_fu_153_p2);
    sensitive << ( j_0_i_reg_84 );

    SC_METHOD(thread_or_ln527_fu_125_p2);
    sensitive << ( shl_ln_fu_112_p3 );

    SC_METHOD(thread_shl_ln_fu_112_p3);
    sensitive << ( trunc_ln517_fu_108_p1 );

    SC_METHOD(thread_state_address0);
    sensitive << ( state_addr_reg_198 );
    sensitive << ( state_addr_1_reg_203 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln528_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln529_fu_166_p1 );
    sensitive << ( zext_ln529_1_fu_178_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln528_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_d0);
    sensitive << ( state_q0 );
    sensitive << ( tmp_reg_216 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln528_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln528_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_trunc_ln517_fu_108_p1);
    sensitive << ( i_0_reg_62 );

    SC_METHOD(thread_zext_ln517_fu_120_p1);
    sensitive << ( shl_ln_fu_112_p3 );

    SC_METHOD(thread_zext_ln527_fu_131_p1);
    sensitive << ( or_ln527_fu_125_p2 );

    SC_METHOD(thread_zext_ln529_1_fu_178_p1);
    sensitive << ( add_ln529_2_fu_171_p3 );

    SC_METHOD(thread_zext_ln529_fu_166_p1);
    sensitive << ( add_ln529_1_fu_159_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln516_fu_96_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln528_fu_147_p2 );
    sensitive << ( icmp_ln525_fu_136_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "invShiftRows_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_102_p2, "i_fu_102_p2");
    sc_trace(mVcdFile, i_reg_186, "i_reg_186");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln517_fu_108_p1, "trunc_ln517_fu_108_p1");
    sc_trace(mVcdFile, trunc_ln517_reg_191, "trunc_ln517_reg_191");
    sc_trace(mVcdFile, icmp_ln516_fu_96_p2, "icmp_ln516_fu_96_p2");
    sc_trace(mVcdFile, state_addr_reg_198, "state_addr_reg_198");
    sc_trace(mVcdFile, state_addr_1_reg_203, "state_addr_1_reg_203");
    sc_trace(mVcdFile, i_1_fu_141_p2, "i_1_fu_141_p2");
    sc_trace(mVcdFile, i_1_reg_211, "i_1_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_reg_216, "tmp_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_fu_153_p2, "j_fu_153_p2");
    sc_trace(mVcdFile, j_reg_224, "j_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln528_fu_147_p2, "icmp_ln528_fu_147_p2");
    sc_trace(mVcdFile, i_0_reg_62, "i_0_reg_62");
    sc_trace(mVcdFile, icmp_ln525_fu_136_p2, "icmp_ln525_fu_136_p2");
    sc_trace(mVcdFile, i_0_i_reg_73, "i_0_i_reg_73");
    sc_trace(mVcdFile, j_0_i_reg_84, "j_0_i_reg_84");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln517_fu_120_p1, "zext_ln517_fu_120_p1");
    sc_trace(mVcdFile, zext_ln527_fu_131_p1, "zext_ln527_fu_131_p1");
    sc_trace(mVcdFile, zext_ln529_fu_166_p1, "zext_ln529_fu_166_p1");
    sc_trace(mVcdFile, zext_ln529_1_fu_178_p1, "zext_ln529_1_fu_178_p1");
    sc_trace(mVcdFile, shl_ln_fu_112_p3, "shl_ln_fu_112_p3");
    sc_trace(mVcdFile, or_ln527_fu_125_p2, "or_ln527_fu_125_p2");
    sc_trace(mVcdFile, add_ln529_1_fu_159_p3, "add_ln529_1_fu_159_p3");
    sc_trace(mVcdFile, add_ln529_2_fu_171_p3, "add_ln529_2_fu_171_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

invShiftRows::~invShiftRows() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void invShiftRows::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_73 = i_1_reg_211.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln516_fu_96_p2.read(), ap_const_lv1_0))) {
        i_0_i_reg_73 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln525_fu_136_p2.read(), ap_const_lv1_1))) {
        i_0_reg_62 = i_reg_186.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_62 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_0_i_reg_84 = j_reg_224.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_i_reg_84 = ap_const_lv2_3;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_211 = i_1_fu_141_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_186 = i_fu_102_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln528_fu_147_p2.read()))) {
        j_reg_224 = j_fu_153_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln516_fu_96_p2.read(), ap_const_lv1_0))) {
        state_addr_1_reg_203 =  (sc_lv<4>) (zext_ln527_fu_131_p1.read());
        state_addr_reg_198 =  (sc_lv<4>) (zext_ln517_fu_120_p1.read());
        trunc_ln517_reg_191 = trunc_ln517_fu_108_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_reg_216 = state_q0.read();
    }
}

void invShiftRows::thread_add_ln529_1_fu_159_p3() {
    add_ln529_1_fu_159_p3 = esl_concat<2,2>(trunc_ln517_reg_191.read(), j_fu_153_p2.read());
}

void invShiftRows::thread_add_ln529_2_fu_171_p3() {
    add_ln529_2_fu_171_p3 = esl_concat<2,2>(trunc_ln517_reg_191.read(), j_0_i_reg_84.read());
}

void invShiftRows::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void invShiftRows::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void invShiftRows::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void invShiftRows::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void invShiftRows::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void invShiftRows::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void invShiftRows::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln516_fu_96_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void invShiftRows::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void invShiftRows::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln516_fu_96_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void invShiftRows::thread_i_1_fu_141_p2() {
    i_1_fu_141_p2 = (!i_0_i_reg_73.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_i_reg_73.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void invShiftRows::thread_i_fu_102_p2() {
    i_fu_102_p2 = (!i_0_reg_62.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_62.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void invShiftRows::thread_icmp_ln516_fu_96_p2() {
    icmp_ln516_fu_96_p2 = (!i_0_reg_62.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_62.read() == ap_const_lv3_4);
}

void invShiftRows::thread_icmp_ln525_fu_136_p2() {
    icmp_ln525_fu_136_p2 = (!i_0_i_reg_73.read().is_01() || !trunc_ln517_reg_191.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_73.read() == trunc_ln517_reg_191.read());
}

void invShiftRows::thread_icmp_ln528_fu_147_p2() {
    icmp_ln528_fu_147_p2 = (!j_0_i_reg_84.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_reg_84.read() == ap_const_lv2_0);
}

void invShiftRows::thread_j_fu_153_p2() {
    j_fu_153_p2 = (!j_0_i_reg_84.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_i_reg_84.read()) + sc_bigint<2>(ap_const_lv2_3));
}

void invShiftRows::thread_or_ln527_fu_125_p2() {
    or_ln527_fu_125_p2 = (shl_ln_fu_112_p3.read() | ap_const_lv4_3);
}

void invShiftRows::thread_shl_ln_fu_112_p3() {
    shl_ln_fu_112_p3 = esl_concat<2,2>(trunc_ln517_fu_108_p1.read(), ap_const_lv2_0);
}

void invShiftRows::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln529_1_fu_178_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1))) {
        state_address0 = state_addr_reg_198.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln528_fu_147_p2.read()))) {
        state_address0 =  (sc_lv<4>) (zext_ln529_fu_166_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 = state_addr_1_reg_203.read();
    } else {
        state_address0 = "XXXX";
    }
}

void invShiftRows::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln528_fu_147_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void invShiftRows::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_d0 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1))) {
        state_d0 = tmp_reg_216.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void invShiftRows::thread_state_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void invShiftRows::thread_trunc_ln517_fu_108_p1() {
    trunc_ln517_fu_108_p1 = i_0_reg_62.read().range(2-1, 0);
}

void invShiftRows::thread_zext_ln517_fu_120_p1() {
    zext_ln517_fu_120_p1 = esl_zext<64,4>(shl_ln_fu_112_p3.read());
}

void invShiftRows::thread_zext_ln527_fu_131_p1() {
    zext_ln527_fu_131_p1 = esl_zext<64,4>(or_ln527_fu_125_p2.read());
}

void invShiftRows::thread_zext_ln529_1_fu_178_p1() {
    zext_ln529_1_fu_178_p1 = esl_zext<64,4>(add_ln529_2_fu_171_p3.read());
}

void invShiftRows::thread_zext_ln529_fu_166_p1() {
    zext_ln529_fu_166_p1 = esl_zext<64,4>(add_ln529_1_fu_159_p3.read());
}

void invShiftRows::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln516_fu_96_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln525_fu_136_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln528_fu_147_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

