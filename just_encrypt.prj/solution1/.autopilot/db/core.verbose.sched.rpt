

================================================================
== Vivado HLS Report for 'core'
================================================================
* Date:           Thu Nov 14 13:06:45 2024

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        just_encrypt.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 5.212 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       17|       17| 0.170 us | 0.170 us |   17|   17|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |          |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1  |        6|        6|         2|          -|          -|     3|    no    |
        |- Loop 2  |        8|        8|         2|          -|          -|     4|    no    |
        +----------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 4 
3 --> 2 
4 --> 5 6 
5 --> 4 
6 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%iteration_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %iteration)" [just_encrypt.cpp:102]   --->   Operation 7 'read' 'iteration_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%word_3_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %word_3_read)" [just_encrypt.cpp:102]   --->   Operation 8 'read' 'word_3_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%word_2_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %word_2_read)" [just_encrypt.cpp:102]   --->   Operation 9 'read' 'word_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%word_1_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %word_1_read)" [just_encrypt.cpp:102]   --->   Operation 10 'read' 'word_1_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%word_0_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %word_0_read)" [just_encrypt.cpp:102]   --->   Operation 11 'read' 'word_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (1.76ns)   --->   "br label %branch0.i" [just_encrypt.cpp:92->just_encrypt.cpp:107]   --->   Operation 12 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 3.01>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%write_flag_0_i = phi i1 [ false, %0 ], [ %write_flag_0_be_i, %branch5.i ]" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 13 'phi' 'write_flag_0_i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%word_03_i = phi i8 [ undef, %0 ], [ %word_03_be_i, %branch5.i ]" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 14 'phi' 'word_03_i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%word2_0_i = phi i8 [ %word_2_read_1, %0 ], [ %word2_0_be_i, %branch5.i ]" [just_encrypt.cpp:102]   --->   Operation 15 'phi' 'word2_0_i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%word12_0_i = phi i8 [ %word_1_read_1, %0 ], [ %word12_0_be_i, %branch5.i ]" [just_encrypt.cpp:102]   --->   Operation 16 'phi' 'word12_0_i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%i_0_i = phi i2 [ 0, %0 ], [ %i_5, %branch5.i ]"   --->   Operation 17 'phi' 'i_0_i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.95ns)   --->   "%icmp_ln92 = icmp eq i2 %i_0_i, -1" [just_encrypt.cpp:92->just_encrypt.cpp:107]   --->   Operation 18 'icmp' 'icmp_ln92' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)"   --->   Operation 19 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (1.56ns)   --->   "%i_5 = add i2 %i_0_i, 1" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 20 'add' 'i_5' <Predicate = true> <Delay = 1.56> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "br i1 %icmp_ln92, label %rotate.exit, label %1" [just_encrypt.cpp:92->just_encrypt.cpp:107]   --->   Operation 21 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.81ns)   --->   "switch i2 %i_0_i, label %branch7.i [
    i2 0, label %branch5.i
    i2 1, label %branch6.i
  ]" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 22 'switch' <Predicate = (!icmp_ln92)> <Delay = 1.81>
ST_2 : Operation 23 [1/1] (1.81ns)   --->   "br label %branch5.i" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 23 'br' <Predicate = (!icmp_ln92 & i_0_i == 1)> <Delay = 1.81>
ST_2 : Operation 24 [1/1] (1.81ns)   --->   "br label %branch5.i" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 24 'br' <Predicate = (!icmp_ln92 & i_0_i != 0 & i_0_i != 1)> <Delay = 1.81>
ST_2 : Operation 25 [1/1] (1.95ns)   --->   "%write_flag_0_be_i = call i1 @_ssdm_op_Mux.ap_auto.4i1.i2(i1 true, i1 %write_flag_0_i, i1 %write_flag_0_i, i1 %write_flag_0_i, i2 %i_0_i)" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 25 'mux' 'write_flag_0_be_i' <Predicate = (!icmp_ln92)> <Delay = 1.95> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 1.95> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%word_load = alloca i8"   --->   Operation 26 'alloca' 'word_load' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%empty_14 = alloca i8"   --->   Operation 27 'alloca' 'empty_14' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%empty_15 = alloca i8"   --->   Operation 28 'alloca' 'empty_15' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%empty_16 = alloca i8"   --->   Operation 29 'alloca' 'empty_16' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%empty_17 = alloca i8"   --->   Operation 30 'alloca' 'empty_17' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%word_1_0 = alloca i8"   --->   Operation 31 'alloca' 'word_1_0' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%word_2_0 = alloca i8"   --->   Operation 32 'alloca' 'word_2_0' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%word_3_0 = alloca i8"   --->   Operation 33 'alloca' 'word_3_0' <Predicate = (icmp_ln92)> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (1.24ns)   --->   "%select_ln95 = select i1 %write_flag_0_i, i8 %word_03_i, i8 %word_0_read_1" [just_encrypt.cpp:95->just_encrypt.cpp:107]   --->   Operation 34 'select' 'select_ln95' <Predicate = (icmp_ln92)> <Delay = 1.24> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (1.76ns)   --->   "store i8 %word_0_read_1, i8* %word_3_0" [just_encrypt.cpp:110]   --->   Operation 35 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 36 [1/1] (1.76ns)   --->   "store i8 %word2_0_i, i8* %word_2_0" [just_encrypt.cpp:110]   --->   Operation 36 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 37 [1/1] (1.76ns)   --->   "store i8 %word12_0_i, i8* %word_1_0" [just_encrypt.cpp:110]   --->   Operation 37 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 38 [1/1] (1.76ns)   --->   "store i8 %word_0_read_1, i8* %empty_17" [just_encrypt.cpp:110]   --->   Operation 38 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 39 [1/1] (1.76ns)   --->   "store i8 %word2_0_i, i8* %empty_16" [just_encrypt.cpp:110]   --->   Operation 39 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 40 [1/1] (1.76ns)   --->   "store i8 %word12_0_i, i8* %empty_15" [just_encrypt.cpp:110]   --->   Operation 40 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 41 [1/1] (1.76ns)   --->   "store i8 %select_ln95, i8* %empty_14" [just_encrypt.cpp:110]   --->   Operation 41 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 42 [1/1] (1.76ns)   --->   "store i8 %select_ln95, i8* %word_load" [just_encrypt.cpp:110]   --->   Operation 42 'store' <Predicate = (icmp_ln92)> <Delay = 1.76>
ST_2 : Operation 43 [1/1] (1.76ns)   --->   "br label %branch0" [just_encrypt.cpp:110]   --->   Operation 43 'br' <Predicate = (icmp_ln92)> <Delay = 1.76>

State 3 <SV = 2> <Delay = 1.95>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%phi_ln93 = phi i8 [ %word2_0_i, %branch6.i ], [ %word_3_read_1, %branch7.i ], [ %word12_0_i, %1 ]" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 44 'phi' 'phi_ln93' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (1.95ns)   --->   "%word12_0_be_i = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %word12_0_i, i8 %phi_ln93, i8 %word12_0_i, i8 %word12_0_i, i2 %i_0_i)" [just_encrypt.cpp:102]   --->   Operation 45 'mux' 'word12_0_be_i' <Predicate = true> <Delay = 1.95> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 1.95> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 46 [1/1] (1.95ns)   --->   "%word2_0_be_i = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %word2_0_i, i8 %word2_0_i, i8 %phi_ln93, i8 %phi_ln93, i2 %i_0_i)" [just_encrypt.cpp:102]   --->   Operation 46 'mux' 'word2_0_be_i' <Predicate = true> <Delay = 1.95> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 1.95> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 47 [1/1] (1.95ns)   --->   "%word_03_be_i = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %phi_ln93, i8 %word_03_i, i8 %word_03_i, i8 %word_03_i, i2 %i_0_i)" [just_encrypt.cpp:93->just_encrypt.cpp:107]   --->   Operation 47 'mux' 'word_03_be_i' <Predicate = true> <Delay = 1.95> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 1.95> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "br label %branch0.i"   --->   Operation 48 'br' <Predicate = true> <Delay = 0.00>

State 4 <SV = 2> <Delay = 5.21>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%i_0 = phi i3 [ 0, %rotate.exit ], [ %i, %branch0.backedge ]"   --->   Operation 49 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 50 [1/1] (1.13ns)   --->   "%icmp_ln110 = icmp eq i3 %i_0, -4" [just_encrypt.cpp:110]   --->   Operation 50 'icmp' 'icmp_ln110' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "%empty_18 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 51 'speclooptripcount' 'empty_18' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 52 [1/1] (1.65ns)   --->   "%i = add i3 %i_0, 1" [just_encrypt.cpp:110]   --->   Operation 52 'add' 'i' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "br i1 %icmp_ln110, label %3, label %2" [just_encrypt.cpp:110]   --->   Operation 53 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (0.00ns)   --->   "%p_load11 = load i8* %empty_14" [just_encrypt.cpp:112]   --->   Operation 54 'load' 'p_load11' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "%p_load10 = load i8* %empty_15" [just_encrypt.cpp:112]   --->   Operation 55 'load' 'p_load10' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%p_load9 = load i8* %empty_16" [just_encrypt.cpp:112]   --->   Operation 56 'load' 'p_load9' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 57 [1/1] (0.00ns)   --->   "%p_load = load i8* %empty_17" [just_encrypt.cpp:112]   --->   Operation 57 'load' 'p_load' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 58 [1/1] (0.00ns)   --->   "%trunc_ln112 = trunc i3 %i_0 to i2" [just_encrypt.cpp:112]   --->   Operation 58 'trunc' 'trunc_ln112' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 59 [1/1] (1.95ns)   --->   "%num_assign_1 = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %p_load11, i8 %p_load10, i8 %p_load9, i8 %p_load, i2 %trunc_ln112)" [just_encrypt.cpp:112]   --->   Operation 59 'mux' 'num_assign_1' <Predicate = (!icmp_ln110)> <Delay = 1.95> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 1.95> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln71 = zext i8 %num_assign_1 to i64" [just_encrypt.cpp:71->just_encrypt.cpp:112]   --->   Operation 60 'zext' 'zext_ln71' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 61 [1/1] (0.00ns)   --->   "%sbox_addr = getelementptr inbounds [256 x i8]* @sbox, i64 0, i64 %zext_ln71" [just_encrypt.cpp:71->just_encrypt.cpp:112]   --->   Operation 61 'getelementptr' 'sbox_addr' <Predicate = (!icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 62 [2/2] (3.25ns)   --->   "%sbox_load = load i8* %sbox_addr, align 1" [just_encrypt.cpp:71->just_encrypt.cpp:112]   --->   Operation 62 'load' 'sbox_load' <Predicate = (!icmp_ln110)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 255> <ROM>
ST_4 : Operation 63 [1/1] (0.00ns)   --->   "%trunc_ln116 = trunc i32 %iteration_read to i8" [just_encrypt.cpp:116]   --->   Operation 63 'trunc' 'trunc_ln116' <Predicate = (icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 64 [1/1] (0.00ns)   --->   "%zext_ln99 = zext i8 %trunc_ln116 to i64" [just_encrypt.cpp:99->just_encrypt.cpp:116]   --->   Operation 64 'zext' 'zext_ln99' <Predicate = (icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 65 [1/1] (0.00ns)   --->   "%Rcon_addr = getelementptr inbounds [255 x i8]* @Rcon, i64 0, i64 %zext_ln99" [just_encrypt.cpp:99->just_encrypt.cpp:116]   --->   Operation 65 'getelementptr' 'Rcon_addr' <Predicate = (icmp_ln110)> <Delay = 0.00>
ST_4 : Operation 66 [2/2] (3.25ns)   --->   "%Rcon_load = load i8* %Rcon_addr, align 1" [just_encrypt.cpp:99->just_encrypt.cpp:116]   --->   Operation 66 'load' 'Rcon_load' <Predicate = (icmp_ln110)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 255> <ROM>

State 5 <SV = 3> <Delay = 5.02>
ST_5 : Operation 67 [1/2] (3.25ns)   --->   "%sbox_load = load i8* %sbox_addr, align 1" [just_encrypt.cpp:71->just_encrypt.cpp:112]   --->   Operation 67 'load' 'sbox_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 255> <ROM>
ST_5 : Operation 68 [1/1] (1.30ns)   --->   "switch i2 %trunc_ln112, label %branch3 [
    i2 0, label %.branch0.backedge_crit_edge
    i2 1, label %branch1
    i2 -2, label %branch2
  ]" [just_encrypt.cpp:112]   --->   Operation 68 'switch' <Predicate = true> <Delay = 1.30>
ST_5 : Operation 69 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %word_2_0" [just_encrypt.cpp:112]   --->   Operation 69 'store' <Predicate = (trunc_ln112 == 2)> <Delay = 1.76>
ST_5 : Operation 70 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %empty_16" [just_encrypt.cpp:112]   --->   Operation 70 'store' <Predicate = (trunc_ln112 == 2)> <Delay = 1.76>
ST_5 : Operation 71 [1/1] (0.00ns)   --->   "br label %branch0.backedge" [just_encrypt.cpp:112]   --->   Operation 71 'br' <Predicate = (trunc_ln112 == 2)> <Delay = 0.00>
ST_5 : Operation 72 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %word_1_0" [just_encrypt.cpp:112]   --->   Operation 72 'store' <Predicate = (trunc_ln112 == 1)> <Delay = 1.76>
ST_5 : Operation 73 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %empty_15" [just_encrypt.cpp:112]   --->   Operation 73 'store' <Predicate = (trunc_ln112 == 1)> <Delay = 1.76>
ST_5 : Operation 74 [1/1] (0.00ns)   --->   "br label %branch0.backedge" [just_encrypt.cpp:112]   --->   Operation 74 'br' <Predicate = (trunc_ln112 == 1)> <Delay = 0.00>
ST_5 : Operation 75 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %empty_14" [just_encrypt.cpp:112]   --->   Operation 75 'store' <Predicate = (trunc_ln112 == 0)> <Delay = 1.76>
ST_5 : Operation 76 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %word_load" [just_encrypt.cpp:112]   --->   Operation 76 'store' <Predicate = (trunc_ln112 == 0)> <Delay = 1.76>
ST_5 : Operation 77 [1/1] (0.00ns)   --->   "br label %branch0.backedge" [just_encrypt.cpp:112]   --->   Operation 77 'br' <Predicate = (trunc_ln112 == 0)> <Delay = 0.00>
ST_5 : Operation 78 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %word_3_0" [just_encrypt.cpp:112]   --->   Operation 78 'store' <Predicate = (trunc_ln112 == 3)> <Delay = 1.76>
ST_5 : Operation 79 [1/1] (1.76ns)   --->   "store i8 %sbox_load, i8* %empty_17" [just_encrypt.cpp:112]   --->   Operation 79 'store' <Predicate = (trunc_ln112 == 3)> <Delay = 1.76>
ST_5 : Operation 80 [1/1] (0.00ns)   --->   "br label %branch0.backedge" [just_encrypt.cpp:112]   --->   Operation 80 'br' <Predicate = (trunc_ln112 == 3)> <Delay = 0.00>
ST_5 : Operation 81 [1/1] (0.00ns)   --->   "br label %branch0"   --->   Operation 81 'br' <Predicate = true> <Delay = 0.00>

State 6 <SV = 3> <Delay = 4.24>
ST_6 : Operation 82 [1/1] (0.00ns)   --->   "%word_load_1 = load i8* %word_load" [just_encrypt.cpp:116]   --->   Operation 82 'load' 'word_load_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 83 [1/1] (0.00ns)   --->   "%word_1_0_load = load i8* %word_1_0" [just_encrypt.cpp:117]   --->   Operation 83 'load' 'word_1_0_load' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 84 [1/1] (0.00ns)   --->   "%word_2_0_load = load i8* %word_2_0" [just_encrypt.cpp:117]   --->   Operation 84 'load' 'word_2_0_load' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 85 [1/1] (0.00ns)   --->   "%word_3_0_load = load i8* %word_3_0" [just_encrypt.cpp:117]   --->   Operation 85 'load' 'word_3_0_load' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 86 [1/2] (3.25ns)   --->   "%Rcon_load = load i8* %Rcon_addr, align 1" [just_encrypt.cpp:99->just_encrypt.cpp:116]   --->   Operation 86 'load' 'Rcon_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 255> <ROM>
ST_6 : Operation 87 [1/1] (0.99ns)   --->   "%xor_ln116 = xor i8 %Rcon_load, %word_load_1" [just_encrypt.cpp:116]   --->   Operation 87 'xor' 'xor_ln116' <Predicate = true> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 88 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i8, i8, i8, i8 } undef, i8 %word_1_0_load, 0" [just_encrypt.cpp:117]   --->   Operation 88 'insertvalue' 'mrv_s' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 89 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i8, i8, i8, i8 } %mrv_s, i8 %word_2_0_load, 1" [just_encrypt.cpp:117]   --->   Operation 89 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 90 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i8, i8, i8, i8 } %mrv_1, i8 %word_3_0_load, 2" [just_encrypt.cpp:117]   --->   Operation 90 'insertvalue' 'mrv_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 91 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i8, i8, i8, i8 } %mrv_2, i8 %xor_ln116, 3" [just_encrypt.cpp:117]   --->   Operation 91 'insertvalue' 'mrv_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 92 [1/1] (0.00ns)   --->   "ret { i8, i8, i8, i8 } %mrv_3" [just_encrypt.cpp:117]   --->   Operation 92 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('write_flag_0_i', just_encrypt.cpp:93->just_encrypt.cpp:107) with incoming values : ('write_flag_0_be_i', just_encrypt.cpp:93->just_encrypt.cpp:107) [17]  (1.77 ns)

 <State 2>: 3.02ns
The critical path consists of the following:
	'phi' operation ('write_flag_0_i', just_encrypt.cpp:93->just_encrypt.cpp:107) with incoming values : ('write_flag_0_be_i', just_encrypt.cpp:93->just_encrypt.cpp:107) [17]  (0 ns)
	'select' operation ('word[0]', just_encrypt.cpp:95->just_encrypt.cpp:107) [48]  (1.25 ns)
	'store' operation ('store_ln110', just_encrypt.cpp:110) of variable 'word[0]', just_encrypt.cpp:95->just_encrypt.cpp:107 on local variable 'word[0]' [55]  (1.77 ns)

 <State 3>: 1.96ns
The critical path consists of the following:
	'phi' operation ('phi_ln93', just_encrypt.cpp:93->just_encrypt.cpp:107) with incoming values : ('word[3]', just_encrypt.cpp:102) ('word[2]', just_encrypt.cpp:102) ('word[1]', just_encrypt.cpp:102) ('word12_0_be_i', just_encrypt.cpp:102) ('word2_0_be_i', just_encrypt.cpp:102) [33]  (0 ns)
	'mux' operation ('word12_0_be_i', just_encrypt.cpp:102) [34]  (1.96 ns)

 <State 4>: 5.21ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', just_encrypt.cpp:110) [59]  (0 ns)
	'mux' operation ('num', just_encrypt.cpp:112) [70]  (1.96 ns)
	'getelementptr' operation ('sbox_addr', just_encrypt.cpp:71->just_encrypt.cpp:112) [72]  (0 ns)
	'load' operation ('sbox_load', just_encrypt.cpp:71->just_encrypt.cpp:112) on array 'sbox' [73]  (3.25 ns)

 <State 5>: 5.02ns
The critical path consists of the following:
	'load' operation ('sbox_load', just_encrypt.cpp:71->just_encrypt.cpp:112) on array 'sbox' [73]  (3.25 ns)
	'store' operation ('store_ln112', just_encrypt.cpp:112) of variable 'sbox_load', just_encrypt.cpp:71->just_encrypt.cpp:112 on local variable 'word[2]' [76]  (1.77 ns)

 <State 6>: 4.24ns
The critical path consists of the following:
	'load' operation ('Rcon_load', just_encrypt.cpp:99->just_encrypt.cpp:116) on array 'Rcon' [101]  (3.25 ns)
	'xor' operation ('word[0]', just_encrypt.cpp:116) [102]  (0.99 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
