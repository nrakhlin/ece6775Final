// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_round (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        roundKey_address0,
        roundKey_ce0,
        roundKey_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
input  [7:0] roundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg roundKey_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [4:0] i_fu_173_p2;
reg   [4:0] i_reg_258;
wire    ap_CS_fsm_state2;
reg   [3:0] state_addr_3_reg_263;
wire   [0:0] icmp_ln183_fu_167_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] k_fu_195_p2;
reg   [2:0] k_reg_286;
wire    ap_CS_fsm_state5;
reg   [7:0] tmp_reg_291;
wire    ap_CS_fsm_state6;
wire  signed [3:0] sext_ln202_fu_201_p1;
reg  signed [3:0] sext_ln202_reg_296;
wire    ap_CS_fsm_state7;
wire  signed [2:0] j_fu_211_p2;
reg  signed [2:0] j_reg_304;
wire   [0:0] icmp_ln202_fu_205_p2;
wire   [4:0] i_6_fu_236_p2;
reg   [4:0] i_6_reg_317;
wire    ap_CS_fsm_state10;
reg   [3:0] state_addr_4_reg_322;
wire   [0:0] icmp_ln228_fu_230_p2;
wire    grp_mixColumns_fu_161_ap_start;
wire    grp_mixColumns_fu_161_ap_done;
wire    grp_mixColumns_fu_161_ap_idle;
wire    grp_mixColumns_fu_161_ap_ready;
wire   [3:0] grp_mixColumns_fu_161_state_address0;
wire    grp_mixColumns_fu_161_state_ce0;
wire    grp_mixColumns_fu_161_state_we0;
wire   [7:0] grp_mixColumns_fu_161_state_d0;
reg   [4:0] i_0_i_reg_117;
wire    ap_CS_fsm_state4;
reg   [2:0] k_0_i_reg_128;
reg  signed [2:0] j_0_i_reg_139;
wire    ap_CS_fsm_state8;
reg   [4:0] i_0_i4_reg_150;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg    grp_mixColumns_fu_161_ap_start_reg;
wire   [0:0] icmp_ln199_fu_189_p2;
wire   [63:0] zext_ln184_fu_179_p1;
wire   [63:0] zext_ln71_fu_184_p1;
wire   [63:0] zext_ln203_fu_221_p1;
wire   [63:0] zext_ln203_1_fu_226_p1;
wire   [63:0] zext_ln229_fu_242_p1;
wire   [7:0] xor_ln229_fu_248_p2;
wire  signed [3:0] sext_ln203_fu_217_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_mixColumns_fu_161_ap_start_reg = 1'b0;
end

core_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

mixColumns grp_mixColumns_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mixColumns_fu_161_ap_start),
    .ap_done(grp_mixColumns_fu_161_ap_done),
    .ap_idle(grp_mixColumns_fu_161_ap_idle),
    .ap_ready(grp_mixColumns_fu_161_ap_ready),
    .state_address0(grp_mixColumns_fu_161_state_address0),
    .state_ce0(grp_mixColumns_fu_161_state_ce0),
    .state_we0(grp_mixColumns_fu_161_state_we0),
    .state_d0(grp_mixColumns_fu_161_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mixColumns_fu_161_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln199_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_mixColumns_fu_161_ap_start_reg <= 1'b1;
        end else if ((grp_mixColumns_fu_161_ap_ready == 1'b1)) begin
            grp_mixColumns_fu_161_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i4_reg_150 <= i_6_reg_317;
    end else if (((1'b1 == ap_CS_fsm_state9) & (grp_mixColumns_fu_161_ap_done == 1'b1))) begin
        i_0_i4_reg_150 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_117 <= i_reg_258;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_117 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_i_reg_139 <= j_reg_304;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_i_reg_139 <= 3'd4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_i_reg_128 <= 3'd0;
    end else if (((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        k_0_i_reg_128 <= k_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_6_reg_317 <= i_6_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_258 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_reg_304 <= j_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_286 <= k_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sext_ln202_reg_296 <= sext_ln202_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_addr_3_reg_263 <= zext_ln184_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        state_addr_4_reg_322 <= zext_ln229_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_291 <= state_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln228_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln228_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_4_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = zext_ln229_fu_242_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = zext_ln203_1_fu_226_p1;
    end else if (((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        state_address0 = 64'd15;
    end else if (((icmp_ln202_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        state_address0 = zext_ln203_fu_221_p1;
    end else if (((icmp_ln199_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = state_addr_3_reg_263;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln184_fu_179_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = grp_mixColumns_fu_161_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln202_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln199_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_ce0 = grp_mixColumns_fu_161_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = xor_ln229_fu_248_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d0 = state_q0;
    end else if (((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        state_d0 = tmp_reg_291;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = sbox_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = grp_mixColumns_fu_161_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_we0 = grp_mixColumns_fu_161_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln183_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln199_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln202_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_mixColumns_fu_161_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln228_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_mixColumns_fu_161_ap_start = grp_mixColumns_fu_161_ap_start_reg;

assign i_6_fu_236_p2 = (i_0_i4_reg_150 + 5'd1);

assign i_fu_173_p2 = (i_0_i_reg_117 + 5'd1);

assign icmp_ln183_fu_167_p2 = ((i_0_i_reg_117 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_189_p2 = ((k_0_i_reg_128 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_205_p2 = ((j_0_i_reg_139 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln228_fu_230_p2 = ((i_0_i4_reg_150 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_211_p2 = ($signed(j_0_i_reg_139) + $signed(3'd1));

assign k_fu_195_p2 = (k_0_i_reg_128 + 3'd1);

assign roundKey_address0 = zext_ln229_fu_242_p1;

assign sbox_address0 = zext_ln71_fu_184_p1;

assign sext_ln202_fu_201_p1 = j_0_i_reg_139;

assign sext_ln203_fu_217_p1 = j_fu_211_p2;

assign xor_ln229_fu_248_p2 = (state_q0 ^ roundKey_q0);

assign zext_ln184_fu_179_p1 = i_0_i_reg_117;

assign zext_ln203_1_fu_226_p1 = $unsigned(sext_ln202_reg_296);

assign zext_ln203_fu_221_p1 = $unsigned(sext_ln203_fu_217_p1);

assign zext_ln229_fu_242_p1 = i_0_i4_reg_150;

assign zext_ln71_fu_184_p1 = state_q0;

endmodule //aes_round
