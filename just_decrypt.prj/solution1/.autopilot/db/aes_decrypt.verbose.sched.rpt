

================================================================
== Vivado HLS Report for 'aes_decrypt'
================================================================
* Date:           Thu Nov 14 13:05:34 2024

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        just_decrypt.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 7.498 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+------+------+---------+
    |  Latency (cycles) |   Latency (absolute)  |   Interval  | Pipeline|
    |   min   |   max   |    min    |    max    |  min |  max |   Type  |
    +---------+---------+-----------+-----------+------+------+---------+
    |     4074|     4754| 40.740 us | 47.540 us |  4074|  4754|   none  |
    +---------+---------+-----------+-----------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |             |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1     |       40|       40|        10|          -|          -|     4|    no    |
        | + Loop 1.1  |        8|        8|         2|          -|          -|     4|    no    |
        |- Loop 2     |       40|       40|        10|          -|          -|     4|    no    |
        | + Loop 2.1  |        8|        8|         2|          -|          -|     4|    no    |
        +-------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 5 3 
3 --> 4 2 
4 --> 3 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 8 
10 --> 9 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%expandedKey = alloca [176 x i8], align 16" [just_decrypt.cpp:348]   --->   Operation 11 'alloca' 'expandedKey' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%block = alloca [16 x i8], align 16" [just_decrypt.cpp:351]   --->   Operation 12 'alloca' 'block' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_1 : Operation 13 [1/1] (1.76ns)   --->   "br label %.loopexit1" [just_decrypt.cpp:364]   --->   Operation 13 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 1.76>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%i_0 = phi i3 [ 0, %0 ], [ %i, %.loopexit1.loopexit ]"   --->   Operation 14 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%zext_ln364 = zext i3 %i_0 to i4" [just_decrypt.cpp:364]   --->   Operation 15 'zext' 'zext_ln364' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (1.13ns)   --->   "%icmp_ln364 = icmp eq i3 %i_0, -4" [just_decrypt.cpp:364]   --->   Operation 16 'icmp' 'icmp_ln364' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 17 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (1.65ns)   --->   "%i = add i3 %i_0, 1" [just_decrypt.cpp:364]   --->   Operation 18 'add' 'i' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "br i1 %icmp_ln364, label %2, label %.preheader1.preheader" [just_decrypt.cpp:364]   --->   Operation 19 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%trunc_ln368 = trunc i3 %i_0 to i2" [just_decrypt.cpp:368]   --->   Operation 20 'trunc' 'trunc_ln368' <Predicate = (!icmp_ln364)> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%shl_ln = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln368, i2 0)" [just_decrypt.cpp:368]   --->   Operation 21 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln364)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.76ns)   --->   "br label %.preheader1" [just_decrypt.cpp:367]   --->   Operation 22 'br' <Predicate = (!icmp_ln364)> <Delay = 1.76>
ST_2 : Operation 23 [2/2] (0.00ns)   --->   "call fastcc void @expandKey([176 x i8]* %expandedKey, [16 x i8]* %key)" [just_decrypt.cpp:372]   --->   Operation 23 'call' <Predicate = (icmp_ln364)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 4.05>
ST_3 : Operation 24 [1/1] (0.00ns)   --->   "%j_0 = phi i3 [ %j, %1 ], [ 0, %.preheader1.preheader ]"   --->   Operation 24 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 25 [1/1] (0.00ns)   --->   "%zext_ln367 = zext i3 %j_0 to i4" [just_decrypt.cpp:367]   --->   Operation 25 'zext' 'zext_ln367' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 26 [1/1] (1.13ns)   --->   "%icmp_ln367 = icmp eq i3 %j_0, -4" [just_decrypt.cpp:367]   --->   Operation 26 'icmp' 'icmp_ln367' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "%empty_27 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 27 'speclooptripcount' 'empty_27' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 28 [1/1] (1.65ns)   --->   "%j = add i3 %j_0, 1" [just_decrypt.cpp:367]   --->   Operation 28 'add' 'j' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "br i1 %icmp_ln367, label %.loopexit1.loopexit, label %1" [just_decrypt.cpp:367]   --->   Operation 29 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (1.73ns)   --->   "%add_ln368 = add i4 %zext_ln367, %shl_ln" [just_decrypt.cpp:368]   --->   Operation 30 'add' 'add_ln368' <Predicate = (!icmp_ln367)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%zext_ln368 = zext i4 %add_ln368 to i64" [just_decrypt.cpp:368]   --->   Operation 31 'zext' 'zext_ln368' <Predicate = (!icmp_ln367)> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%input_addr = getelementptr [16 x i8]* %input_r, i64 0, i64 %zext_ln368" [just_decrypt.cpp:368]   --->   Operation 32 'getelementptr' 'input_addr' <Predicate = (!icmp_ln367)> <Delay = 0.00>
ST_3 : Operation 33 [2/2] (2.32ns)   --->   "%input_load = load i8* %input_addr, align 1" [just_decrypt.cpp:368]   --->   Operation 33 'load' 'input_load' <Predicate = (!icmp_ln367)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%trunc_ln368_1 = trunc i3 %j_0 to i2" [just_decrypt.cpp:368]   --->   Operation 34 'trunc' 'trunc_ln368_1' <Predicate = (!icmp_ln367)> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%shl_ln368_1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln368_1, i2 0)" [just_decrypt.cpp:368]   --->   Operation 35 'bitconcatenate' 'shl_ln368_1' <Predicate = (!icmp_ln367)> <Delay = 0.00>
ST_3 : Operation 36 [1/1] (1.73ns)   --->   "%add_ln368_1 = add i4 %shl_ln368_1, %zext_ln364" [just_decrypt.cpp:368]   --->   Operation 36 'add' 'add_ln368_1' <Predicate = (!icmp_ln367)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "br label %.loopexit1"   --->   Operation 37 'br' <Predicate = (icmp_ln367)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 4.64>
ST_4 : Operation 38 [1/2] (2.32ns)   --->   "%input_load = load i8* %input_addr, align 1" [just_decrypt.cpp:368]   --->   Operation 38 'load' 'input_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "%zext_ln368_1 = zext i4 %add_ln368_1 to i64" [just_decrypt.cpp:368]   --->   Operation 39 'zext' 'zext_ln368_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 40 [1/1] (0.00ns)   --->   "%block_addr = getelementptr inbounds [16 x i8]* %block, i64 0, i64 %zext_ln368_1" [just_decrypt.cpp:368]   --->   Operation 40 'getelementptr' 'block_addr' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 41 [1/1] (2.32ns)   --->   "store i8 %input_load, i8* %block_addr, align 1" [just_decrypt.cpp:368]   --->   Operation 41 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_4 : Operation 42 [1/1] (0.00ns)   --->   "br label %.preheader1" [just_decrypt.cpp:367]   --->   Operation 42 'br' <Predicate = true> <Delay = 0.00>

State 5 <SV = 2> <Delay = 0.00>
ST_5 : Operation 43 [1/2] (0.00ns)   --->   "call fastcc void @expandKey([176 x i8]* %expandedKey, [16 x i8]* %key)" [just_decrypt.cpp:372]   --->   Operation 43 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 3> <Delay = 0.00>
ST_6 : Operation 44 [2/2] (0.00ns)   --->   "call fastcc void @aes_invMain([16 x i8]* %block, [176 x i8]* %expandedKey)" [just_decrypt.cpp:375]   --->   Operation 44 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 7 <SV = 4> <Delay = 1.76>
ST_7 : Operation 45 [1/2] (0.00ns)   --->   "call fastcc void @aes_invMain([16 x i8]* %block, [176 x i8]* %expandedKey)" [just_decrypt.cpp:375]   --->   Operation 45 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_7 : Operation 46 [1/1] (1.76ns)   --->   "br label %.loopexit" [just_decrypt.cpp:378]   --->   Operation 46 'br' <Predicate = true> <Delay = 1.76>

State 8 <SV = 5> <Delay = 1.76>
ST_8 : Operation 47 [1/1] (0.00ns)   --->   "%i_1 = phi i3 [ 0, %2 ], [ %i_10, %.loopexit.loopexit ]"   --->   Operation 47 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 48 [1/1] (0.00ns)   --->   "%zext_ln378 = zext i3 %i_1 to i4" [just_decrypt.cpp:378]   --->   Operation 48 'zext' 'zext_ln378' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 49 [1/1] (1.13ns)   --->   "%icmp_ln378 = icmp eq i3 %i_1, -4" [just_decrypt.cpp:378]   --->   Operation 49 'icmp' 'icmp_ln378' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 50 [1/1] (0.00ns)   --->   "%empty_28 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 50 'speclooptripcount' 'empty_28' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 51 [1/1] (1.65ns)   --->   "%i_10 = add i3 %i_1, 1" [just_decrypt.cpp:378]   --->   Operation 51 'add' 'i_10' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 52 [1/1] (0.00ns)   --->   "br i1 %icmp_ln378, label %4, label %.preheader.preheader" [just_decrypt.cpp:378]   --->   Operation 52 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 53 [1/1] (0.00ns)   --->   "%trunc_ln382 = trunc i3 %i_1 to i2" [just_decrypt.cpp:382]   --->   Operation 53 'trunc' 'trunc_ln382' <Predicate = (!icmp_ln378)> <Delay = 0.00>
ST_8 : Operation 54 [1/1] (0.00ns)   --->   "%shl_ln2 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln382, i2 0)" [just_decrypt.cpp:382]   --->   Operation 54 'bitconcatenate' 'shl_ln2' <Predicate = (!icmp_ln378)> <Delay = 0.00>
ST_8 : Operation 55 [1/1] (1.76ns)   --->   "br label %.preheader" [just_decrypt.cpp:381]   --->   Operation 55 'br' <Predicate = (!icmp_ln378)> <Delay = 1.76>
ST_8 : Operation 56 [1/1] (0.00ns)   --->   "ret void" [just_decrypt.cpp:385]   --->   Operation 56 'ret' <Predicate = (icmp_ln378)> <Delay = 0.00>

State 9 <SV = 6> <Delay = 4.05>
ST_9 : Operation 57 [1/1] (0.00ns)   --->   "%j_1 = phi i3 [ %j_3, %3 ], [ 0, %.preheader.preheader ]"   --->   Operation 57 'phi' 'j_1' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 58 [1/1] (0.00ns)   --->   "%zext_ln381 = zext i3 %j_1 to i4" [just_decrypt.cpp:381]   --->   Operation 58 'zext' 'zext_ln381' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 59 [1/1] (1.13ns)   --->   "%icmp_ln381 = icmp eq i3 %j_1, -4" [just_decrypt.cpp:381]   --->   Operation 59 'icmp' 'icmp_ln381' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 60 [1/1] (0.00ns)   --->   "%empty_29 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 60 'speclooptripcount' 'empty_29' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 61 [1/1] (1.65ns)   --->   "%j_3 = add i3 %j_1, 1" [just_decrypt.cpp:381]   --->   Operation 61 'add' 'j_3' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 62 [1/1] (0.00ns)   --->   "br i1 %icmp_ln381, label %.loopexit.loopexit, label %3" [just_decrypt.cpp:381]   --->   Operation 62 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 63 [1/1] (0.00ns)   --->   "%trunc_ln382_1 = trunc i3 %j_1 to i2" [just_decrypt.cpp:382]   --->   Operation 63 'trunc' 'trunc_ln382_1' <Predicate = (!icmp_ln381)> <Delay = 0.00>
ST_9 : Operation 64 [1/1] (0.00ns)   --->   "%shl_ln382_1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln382_1, i2 0)" [just_decrypt.cpp:382]   --->   Operation 64 'bitconcatenate' 'shl_ln382_1' <Predicate = (!icmp_ln381)> <Delay = 0.00>
ST_9 : Operation 65 [1/1] (1.73ns)   --->   "%add_ln382 = add i4 %shl_ln382_1, %zext_ln378" [just_decrypt.cpp:382]   --->   Operation 65 'add' 'add_ln382' <Predicate = (!icmp_ln381)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln382 = zext i4 %add_ln382 to i64" [just_decrypt.cpp:382]   --->   Operation 66 'zext' 'zext_ln382' <Predicate = (!icmp_ln381)> <Delay = 0.00>
ST_9 : Operation 67 [1/1] (0.00ns)   --->   "%block_addr_1 = getelementptr inbounds [16 x i8]* %block, i64 0, i64 %zext_ln382" [just_decrypt.cpp:382]   --->   Operation 67 'getelementptr' 'block_addr_1' <Predicate = (!icmp_ln381)> <Delay = 0.00>
ST_9 : Operation 68 [2/2] (2.32ns)   --->   "%block_load = load i8* %block_addr_1, align 1" [just_decrypt.cpp:382]   --->   Operation 68 'load' 'block_load' <Predicate = (!icmp_ln381)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_9 : Operation 69 [1/1] (1.73ns)   --->   "%add_ln382_1 = add i4 %zext_ln381, %shl_ln2" [just_decrypt.cpp:382]   --->   Operation 69 'add' 'add_ln382_1' <Predicate = (!icmp_ln381)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 70 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 70 'br' <Predicate = (icmp_ln381)> <Delay = 0.00>

State 10 <SV = 7> <Delay = 4.64>
ST_10 : Operation 71 [1/2] (2.32ns)   --->   "%block_load = load i8* %block_addr_1, align 1" [just_decrypt.cpp:382]   --->   Operation 71 'load' 'block_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_10 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln382_1 = zext i4 %add_ln382_1 to i64" [just_decrypt.cpp:382]   --->   Operation 72 'zext' 'zext_ln382_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 73 [1/1] (0.00ns)   --->   "%output_addr = getelementptr [16 x i8]* %output_r, i64 0, i64 %zext_ln382_1" [just_decrypt.cpp:382]   --->   Operation 73 'getelementptr' 'output_addr' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 74 [1/1] (2.32ns)   --->   "store i8 %block_load, i8* %output_addr, align 1" [just_decrypt.cpp:382]   --->   Operation 74 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_10 : Operation 75 [1/1] (0.00ns)   --->   "br label %.preheader" [just_decrypt.cpp:381]   --->   Operation 75 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', just_decrypt.cpp:364) [14]  (1.77 ns)

 <State 2>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', just_decrypt.cpp:367) [25]  (1.77 ns)

 <State 3>: 4.06ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', just_decrypt.cpp:367) [25]  (0 ns)
	'add' operation ('add_ln368', just_decrypt.cpp:368) [32]  (1.74 ns)
	'getelementptr' operation ('input_addr', just_decrypt.cpp:368) [34]  (0 ns)
	'load' operation ('input_load', just_decrypt.cpp:368) on array 'input_r' [35]  (2.32 ns)

 <State 4>: 4.64ns
The critical path consists of the following:
	'load' operation ('input_load', just_decrypt.cpp:368) on array 'input_r' [35]  (2.32 ns)
	'store' operation ('store_ln368', just_decrypt.cpp:368) of variable 'input_load', just_decrypt.cpp:368 on array 'block', just_decrypt.cpp:351 [41]  (2.32 ns)

 <State 5>: 0ns
The critical path consists of the following:

 <State 6>: 0ns
The critical path consists of the following:

 <State 7>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', just_decrypt.cpp:378) [50]  (1.77 ns)

 <State 8>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', just_decrypt.cpp:381) [61]  (1.77 ns)

 <State 9>: 4.06ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', just_decrypt.cpp:381) [61]  (0 ns)
	'add' operation ('add_ln382', just_decrypt.cpp:382) [70]  (1.74 ns)
	'getelementptr' operation ('block_addr_1', just_decrypt.cpp:382) [72]  (0 ns)
	'load' operation ('block_load', just_decrypt.cpp:382) on array 'block', just_decrypt.cpp:351 [73]  (2.32 ns)

 <State 10>: 4.64ns
The critical path consists of the following:
	'load' operation ('block_load', just_decrypt.cpp:382) on array 'block', just_decrypt.cpp:351 [73]  (2.32 ns)
	'store' operation ('store_ln382', just_decrypt.cpp:382) of variable 'block_load', just_decrypt.cpp:382 on array 'output_r' [77]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
