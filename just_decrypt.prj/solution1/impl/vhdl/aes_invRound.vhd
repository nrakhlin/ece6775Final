-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_invRound is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_ce0 : OUT STD_LOGIC;
    roundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_invRound is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rsbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rsbox_ce0 : STD_LOGIC;
    signal rsbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_173_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln232_fu_179_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln232_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_189_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln232_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_addr_3_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln213_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_6_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_317 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal state_addr_6_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln172_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_invMixColumns_fu_161_ap_start : STD_LOGIC;
    signal grp_invMixColumns_fu_161_ap_done : STD_LOGIC;
    signal grp_invMixColumns_fu_161_ap_idle : STD_LOGIC;
    signal grp_invMixColumns_fu_161_ap_ready : STD_LOGIC;
    signal grp_invMixColumns_fu_161_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_invMixColumns_fu_161_state_ce0 : STD_LOGIC;
    signal grp_invMixColumns_fu_161_state_we0 : STD_LOGIC;
    signal grp_invMixColumns_fu_161_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_i_reg_117 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_i_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_i_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln229_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i4_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_invMixColumns_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln233_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_1_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln173_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln233_fu_195_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component invMixColumns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_invRound_rsbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    rsbox_U : component aes_invRound_rsbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rsbox_address0,
        ce0 => rsbox_ce0,
        q0 => rsbox_q0);

    grp_invMixColumns_fu_161 : component invMixColumns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invMixColumns_fu_161_ap_start,
        ap_done => grp_invMixColumns_fu_161_ap_done,
        ap_idle => grp_invMixColumns_fu_161_ap_idle,
        ap_ready => grp_invMixColumns_fu_161_ap_ready,
        state_address0 => grp_invMixColumns_fu_161_state_address0,
        state_ce0 => grp_invMixColumns_fu_161_state_ce0,
        state_we0 => grp_invMixColumns_fu_161_state_we0,
        state_d0 => grp_invMixColumns_fu_161_state_d0,
        state_q0 => state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_invMixColumns_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invMixColumns_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln172_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_invMixColumns_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invMixColumns_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_invMixColumns_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i4_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i4_reg_150 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_i4_reg_150 <= i_6_reg_317;
            end if; 
        end if;
    end process;

    i_0_i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_139 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_139 <= i_reg_299;
            end if; 
        end if;
    end process;

    j_0_i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_i_reg_128 <= j_reg_286;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_i_reg_128 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    k_0_i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_i_reg_117 <= ap_const_lv3_0;
            elsif (((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_i_reg_117 <= k_reg_268;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_6_reg_317 <= i_6_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_299 <= i_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                j_reg_286 <= j_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_268 <= k_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sext_ln232_reg_278 <= sext_ln232_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                state_addr_3_reg_304 <= zext_ln214_fu_220_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                state_addr_6_reg_322 <= zext_ln173_fu_242_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_273 <= state_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln232_fu_183_p2, ap_CS_fsm_state6, icmp_ln213_fu_208_p2, ap_CS_fsm_state9, icmp_ln172_fu_230_p2, grp_invMixColumns_fu_161_ap_done, icmp_ln229_fu_167_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln229_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln213_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln172_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_invMixColumns_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_invMixColumns_fu_161_ap_done, ap_CS_fsm_state11)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_invMixColumns_fu_161_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_invMixColumns_fu_161_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_invMixColumns_fu_161_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_invMixColumns_fu_161_ap_start <= grp_invMixColumns_fu_161_ap_start_reg;
    i_6_fu_236_p2 <= std_logic_vector(unsigned(i_0_i4_reg_150) + unsigned(ap_const_lv5_1));
    i_fu_214_p2 <= std_logic_vector(unsigned(i_0_i_reg_139) + unsigned(ap_const_lv5_1));
    icmp_ln172_fu_230_p2 <= "1" when (i_0_i4_reg_150 = ap_const_lv5_10) else "0";
    icmp_ln213_fu_208_p2 <= "1" when (i_0_i_reg_139 = ap_const_lv5_10) else "0";
    icmp_ln229_fu_167_p2 <= "1" when (k_0_i_reg_117 = ap_const_lv3_4) else "0";
    icmp_ln232_fu_183_p2 <= "1" when (unsigned(j_0_i_reg_128) > unsigned(ap_const_lv3_4)) else "0";
    j_fu_189_p2 <= std_logic_vector(signed(j_0_i_reg_128) + signed(ap_const_lv3_7));
    k_fu_173_p2 <= std_logic_vector(unsigned(k_0_i_reg_117) + unsigned(ap_const_lv3_1));
    roundKey_address0 <= zext_ln173_fu_242_p1(4 - 1 downto 0);

    roundKey_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            roundKey_ce0 <= ap_const_logic_1;
        else 
            roundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rsbox_address0 <= zext_ln69_fu_225_p1(8 - 1 downto 0);

    rsbox_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rsbox_ce0 <= ap_const_logic_1;
        else 
            rsbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln232_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_0_i_reg_128),4));

        sext_ln233_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_189_p2),4));


    state_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln232_fu_183_p2, ap_CS_fsm_state6, state_addr_3_reg_304, ap_CS_fsm_state9, state_addr_6_reg_322, icmp_ln172_fu_230_p2, grp_invMixColumns_fu_161_state_address0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln233_fu_199_p1, zext_ln233_1_fu_204_p1, zext_ln214_fu_220_p1, zext_ln173_fu_242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_6_reg_322;
        elsif (((icmp_ln172_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_address0 <= zext_ln173_fu_242_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= state_addr_3_reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= zext_ln214_fu_220_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= zext_ln233_1_fu_204_p1(4 - 1 downto 0);
        elsif (((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((icmp_ln232_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_address0 <= zext_ln233_fu_199_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= grp_invMixColumns_fu_161_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln232_fu_183_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln172_fu_230_p2, grp_invMixColumns_fu_161_state_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln232_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln172_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_ce0 <= grp_invMixColumns_fu_161_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(state_q0, rsbox_q0, tmp_reg_273, ap_CS_fsm_state4, icmp_ln232_fu_183_p2, grp_invMixColumns_fu_161_state_d0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, xor_ln173_fu_248_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= xor_ln173_fu_248_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_d0 <= rsbox_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_d0 <= state_q0;
        elsif (((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_d0 <= tmp_reg_273;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= grp_invMixColumns_fu_161_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln232_fu_183_p2, grp_invMixColumns_fu_161_state_we0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln232_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_we0 <= grp_invMixColumns_fu_161_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln173_fu_248_p2 <= (state_q0 xor roundKey_q0);
    zext_ln173_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i4_reg_150),64));
    zext_ln214_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_139),64));
    zext_ln233_1_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_reg_278),64));
    zext_ln233_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln233_fu_195_p1),64));
    zext_ln69_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
end behav;
