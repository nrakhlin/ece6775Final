// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module expandKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_we0,
        expandedKey_d0,
        expandedKey_q0,
        key_address0,
        key_ce0,
        key_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
output   expandedKey_we0;
output  [7:0] expandedKey_d0;
input  [7:0] expandedKey_q0;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] expandedKey_address0;
reg expandedKey_ce0;
reg expandedKey_we0;
reg[7:0] expandedKey_d0;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln128_fu_433_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] t_0_1_fu_439_p6;
reg   [7:0] t_0_1_reg_724;
wire   [7:0] t_1_1_fu_453_p6;
reg   [7:0] t_1_1_reg_729;
wire   [7:0] t_2_1_fu_467_p6;
reg   [7:0] t_2_1_reg_734;
wire   [7:0] t_3_1_fu_481_p6;
reg   [7:0] t_3_1_reg_739;
wire   [4:0] i_fu_527_p2;
reg   [4:0] i_reg_750;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln132_fu_533_p1;
reg   [63:0] zext_ln132_reg_755;
wire   [0:0] icmp_ln131_fu_521_p2;
wire   [2:0] i_2_fu_555_p2;
reg   [2:0] i_2_reg_778;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln138_fu_549_p2;
wire   [1:0] trunc_ln140_fu_582_p1;
reg   [1:0] trunc_ln140_reg_788;
wire   [0:0] icmp_ln146_fu_590_p2;
reg   [0:0] icmp_ln146_reg_792;
reg   [31:0] rconIteration_1_load_reg_796;
wire    ap_CS_fsm_state7;
wire   [7:0] currentSize_fu_631_p2;
reg   [7:0] currentSize_reg_809;
wire    ap_CS_fsm_state9;
wire    grp_core_fu_404_ap_ready;
wire    grp_core_fu_404_ap_done;
reg    ap_block_state9_on_subcall_done;
wire   [2:0] i_4_fu_643_p2;
reg   [2:0] i_4_reg_817;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln161_fu_637_p2;
wire   [7:0] tmp_fu_664_p6;
reg   [7:0] tmp_reg_827;
wire   [7:0] add_ln164_fu_689_p2;
wire    ap_CS_fsm_state11;
wire    grp_core_fu_404_ap_start;
wire    grp_core_fu_404_ap_idle;
wire   [7:0] grp_core_fu_404_ap_return_0;
wire   [7:0] grp_core_fu_404_ap_return_1;
wire   [7:0] grp_core_fu_404_ap_return_2;
wire   [7:0] grp_core_fu_404_ap_return_3;
reg   [1:0] phi_ln128_reg_133;
wire   [0:0] icmp_ln128_fu_495_p2;
reg   [4:0] i_0_reg_144;
wire    ap_CS_fsm_state4;
reg   [7:0] t_3_2_reg_155;
reg   [7:0] t_3_5_reg_334;
reg   [7:0] t_2_2_reg_165;
reg   [7:0] t_2_5_reg_346;
reg   [7:0] t_1_2_reg_175;
reg   [7:0] t_1_5_reg_358;
reg   [7:0] t_0_26_reg_185;
reg   [7:0] t_0_5_reg_370;
reg   [7:0] currentSize_0_reg_195;
reg   [7:0] t_3_3_reg_207;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln135_fu_543_p2;
wire    ap_CS_fsm_state8;
reg   [7:0] t_2_3_reg_218;
reg   [7:0] t_1_3_reg_229;
reg   [7:0] t_0_3_reg_240;
reg   [2:0] i_1_reg_251;
reg   [7:0] t_3_3_be_reg_262;
reg   [7:0] t_2_3_be_reg_280;
reg   [7:0] t_1_3_be_reg_298;
reg   [7:0] t_0_3_be_reg_316;
reg   [7:0] currentSize_1_reg_382;
reg   [2:0] i_3_reg_393;
reg    grp_core_fu_404_ap_start_reg;
wire   [63:0] zext_ln140_fu_577_p1;
wire   [63:0] zext_ln163_fu_655_p1;
wire   [63:0] zext_ln163_1_fu_684_p1;
reg   [7:0] t_0_0_fu_62;
reg   [7:0] t_1_0_fu_66;
reg   [7:0] t_2_0_fu_70;
reg   [7:0] t_3_0_fu_74;
reg   [31:0] rconIteration_1_fu_78;
wire   [31:0] rconIteration_fu_600_p2;
wire   [7:0] xor_ln163_fu_678_p2;
wire   [2:0] xor_ln140_fu_561_p2;
wire  signed [7:0] sext_ln140_fu_567_p1;
wire   [7:0] add_ln140_fu_571_p2;
wire   [3:0] trunc_ln135_fu_586_p1;
wire   [7:0] add_ln163_fu_649_p2;
wire   [1:0] tmp_fu_664_p5;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_core_fu_404_ap_start_reg = 1'b0;
end

core grp_core_fu_404(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_core_fu_404_ap_start),
    .ap_done(grp_core_fu_404_ap_done),
    .ap_idle(grp_core_fu_404_ap_idle),
    .ap_ready(grp_core_fu_404_ap_ready),
    .word_0_read(t_0_3_reg_240),
    .word_1_read(t_1_3_reg_229),
    .word_2_read(t_2_3_reg_218),
    .word_3_read(t_3_3_reg_207),
    .iteration(rconIteration_1_load_reg_796),
    .ap_return_0(grp_core_fu_404_ap_return_0),
    .ap_return_1(grp_core_fu_404_ap_return_1),
    .ap_return_2(grp_core_fu_404_ap_return_2),
    .ap_return_3(grp_core_fu_404_ap_return_3)
);

decrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
decrypt_dut_mux_4cud_U15(
    .din0(8'd0),
    .din1(t_0_0_fu_62),
    .din2(t_0_0_fu_62),
    .din3(t_0_0_fu_62),
    .din4(phi_ln128_reg_133),
    .dout(t_0_1_fu_439_p6)
);

decrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
decrypt_dut_mux_4cud_U16(
    .din0(t_1_0_fu_66),
    .din1(8'd0),
    .din2(t_1_0_fu_66),
    .din3(t_1_0_fu_66),
    .din4(phi_ln128_reg_133),
    .dout(t_1_1_fu_453_p6)
);

decrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
decrypt_dut_mux_4cud_U17(
    .din0(t_2_0_fu_70),
    .din1(t_2_0_fu_70),
    .din2(8'd0),
    .din3(t_2_0_fu_70),
    .din4(phi_ln128_reg_133),
    .dout(t_2_1_fu_467_p6)
);

decrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
decrypt_dut_mux_4cud_U18(
    .din0(t_3_0_fu_74),
    .din1(t_3_0_fu_74),
    .din2(t_3_0_fu_74),
    .din3(8'd0),
    .din4(phi_ln128_reg_133),
    .dout(t_3_1_fu_481_p6)
);

decrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
decrypt_dut_mux_4cud_U19(
    .din0(t_0_5_reg_370),
    .din1(t_1_5_reg_358),
    .din2(t_2_5_reg_346),
    .din3(t_3_5_reg_334),
    .din4(tmp_fu_664_p5),
    .dout(tmp_fu_664_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_core_fu_404_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln146_fu_590_p2 == 1'd1) & (icmp_ln138_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_core_fu_404_ap_start_reg <= 1'b1;
        end else if ((grp_core_fu_404_ap_ready == 1'b1)) begin
            grp_core_fu_404_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        currentSize_0_reg_195 <= currentSize_reg_809;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        currentSize_0_reg_195 <= 8'd16;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        currentSize_1_reg_382 <= add_ln164_fu_689_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        currentSize_1_reg_382 <= currentSize_0_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_144 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_144 <= i_reg_750;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_251 <= i_2_reg_778;
    end else if (((icmp_ln135_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_251 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_393 <= i_4_reg_817;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        i_3_reg_393 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln128_reg_133 <= add_ln128_fu_433_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln128_reg_133 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln146_fu_590_p2 == 1'd1) & (icmp_ln138_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        rconIteration_1_fu_78 <= rconIteration_fu_600_p2;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        rconIteration_1_fu_78 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        t_0_26_reg_185 <= t_0_5_reg_370;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_0_26_reg_185 <= t_0_1_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln140_reg_788 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        t_0_3_be_reg_316 <= expandedKey_q0;
    end else if ((((trunc_ln140_reg_788 == 2'd1) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd2) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd3) & (1'b1 == ap_CS_fsm_state7)))) begin
        t_0_3_be_reg_316 <= t_0_3_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_0_3_reg_240 <= t_0_3_be_reg_316;
    end else if (((icmp_ln135_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_0_3_reg_240 <= t_0_26_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd1) & (icmp_ln146_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_0_5_reg_370 <= t_0_3_reg_240;
    end else if (((icmp_ln146_reg_792 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        t_0_5_reg_370 <= grp_core_fu_404_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        t_1_2_reg_175 <= t_1_5_reg_358;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_1_2_reg_175 <= t_1_1_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln140_reg_788 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        t_1_3_be_reg_298 <= expandedKey_q0;
    end else if ((((trunc_ln140_reg_788 == 2'd0) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd2) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd3) & (1'b1 == ap_CS_fsm_state7)))) begin
        t_1_3_be_reg_298 <= t_1_3_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_1_3_reg_229 <= t_1_3_be_reg_298;
    end else if (((icmp_ln135_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_1_3_reg_229 <= t_1_2_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd1) & (icmp_ln146_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_1_5_reg_358 <= t_1_3_reg_229;
    end else if (((icmp_ln146_reg_792 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        t_1_5_reg_358 <= grp_core_fu_404_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        t_2_2_reg_165 <= t_2_5_reg_346;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_2_2_reg_165 <= t_2_1_reg_734;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln140_reg_788 == 2'd2) & (1'b1 == ap_CS_fsm_state7))) begin
        t_2_3_be_reg_280 <= expandedKey_q0;
    end else if ((((trunc_ln140_reg_788 == 2'd0) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd1) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd3) & (1'b1 == ap_CS_fsm_state7)))) begin
        t_2_3_be_reg_280 <= t_2_3_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_2_3_reg_218 <= t_2_3_be_reg_280;
    end else if (((icmp_ln135_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_2_3_reg_218 <= t_2_2_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd1) & (icmp_ln146_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_2_5_reg_346 <= t_2_3_reg_218;
    end else if (((icmp_ln146_reg_792 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        t_2_5_reg_346 <= grp_core_fu_404_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        t_3_2_reg_155 <= t_3_5_reg_334;
    end else if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_3_2_reg_155 <= t_3_1_reg_739;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln140_reg_788 == 2'd0) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd1) & (1'b1 == ap_CS_fsm_state7)) | ((trunc_ln140_reg_788 == 2'd2) & (1'b1 == ap_CS_fsm_state7)))) begin
        t_3_3_be_reg_262 <= t_3_3_reg_207;
    end else if (((trunc_ln140_reg_788 == 2'd3) & (1'b1 == ap_CS_fsm_state7))) begin
        t_3_3_be_reg_262 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_3_3_reg_207 <= t_3_3_be_reg_262;
    end else if (((icmp_ln135_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_3_3_reg_207 <= t_3_2_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd1) & (icmp_ln146_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_3_5_reg_334 <= t_3_3_reg_207;
    end else if (((icmp_ln146_reg_792 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        t_3_5_reg_334 <= grp_core_fu_404_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        currentSize_reg_809 <= currentSize_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_778 <= i_2_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_817 <= i_4_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_750 <= i_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln146_reg_792 <= icmp_ln146_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln146_fu_590_p2 == 1'd1) & (icmp_ln138_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        rconIteration_1_load_reg_796 <= rconIteration_1_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_0_0_fu_62 <= t_0_1_fu_439_p6;
        t_0_1_reg_724 <= t_0_1_fu_439_p6;
        t_1_0_fu_66 <= t_1_1_fu_453_p6;
        t_1_1_reg_729 <= t_1_1_fu_453_p6;
        t_2_0_fu_70 <= t_2_1_fu_467_p6;
        t_2_1_reg_734 <= t_2_1_fu_467_p6;
        t_3_0_fu_74 <= t_3_1_fu_481_p6;
        t_3_1_reg_739 <= t_3_1_fu_481_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln161_fu_637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_reg_827 <= tmp_fu_664_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        trunc_ln140_reg_788 <= trunc_ln140_fu_582_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln132_reg_755[4 : 0] <= zext_ln132_fu_533_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln135_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_address0 = zext_ln163_1_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expandedKey_address0 = zext_ln163_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address0 = zext_ln140_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address0 = zext_ln132_reg_755;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_d0 = xor_ln163_fu_678_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_d0 = key_q0;
    end else begin
        expandedKey_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        expandedKey_we0 = 1'b1;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln128_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln131_fu_521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln135_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln138_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln161_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln128_fu_433_p2 = (phi_ln128_reg_133 + 2'd1);

assign add_ln140_fu_571_p2 = ($signed(currentSize_0_reg_195) + $signed(sext_ln140_fu_567_p1));

assign add_ln163_fu_649_p2 = ($signed(8'd240) + $signed(currentSize_1_reg_382));

assign add_ln164_fu_689_p2 = (8'd1 + currentSize_1_reg_382);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9_on_subcall_done = ((icmp_ln146_reg_792 == 1'd1) & (grp_core_fu_404_ap_done == 1'b0));
end

assign currentSize_fu_631_p2 = (currentSize_0_reg_195 + 8'd4);

assign grp_core_fu_404_ap_start = grp_core_fu_404_ap_start_reg;

assign i_2_fu_555_p2 = (i_1_reg_251 + 3'd1);

assign i_4_fu_643_p2 = (i_3_reg_393 + 3'd1);

assign i_fu_527_p2 = (i_0_reg_144 + 5'd1);

assign icmp_ln128_fu_495_p2 = ((phi_ln128_reg_133 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_521_p2 = ((i_0_reg_144 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_543_p2 = ((currentSize_0_reg_195 < 8'd176) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_549_p2 = ((i_1_reg_251 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_590_p2 = ((trunc_ln135_fu_586_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_637_p2 = ((i_3_reg_393 == 3'd4) ? 1'b1 : 1'b0);

assign key_address0 = zext_ln132_fu_533_p1;

assign rconIteration_fu_600_p2 = (rconIteration_1_fu_78 + 32'd1);

assign sext_ln140_fu_567_p1 = $signed(xor_ln140_fu_561_p2);

assign tmp_fu_664_p5 = i_3_reg_393[1:0];

assign trunc_ln135_fu_586_p1 = currentSize_0_reg_195[3:0];

assign trunc_ln140_fu_582_p1 = i_1_reg_251[1:0];

assign xor_ln140_fu_561_p2 = (i_1_reg_251 ^ 3'd4);

assign xor_ln163_fu_678_p2 = (tmp_reg_827 ^ expandedKey_q0);

assign zext_ln132_fu_533_p1 = i_0_reg_144;

assign zext_ln140_fu_577_p1 = add_ln140_fu_571_p2;

assign zext_ln163_1_fu_684_p1 = currentSize_1_reg_382;

assign zext_ln163_fu_655_p1 = add_ln163_fu_649_p2;

always @ (posedge ap_clk) begin
    zext_ln132_reg_755[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //expandKey
