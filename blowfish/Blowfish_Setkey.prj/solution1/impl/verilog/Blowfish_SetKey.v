// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Blowfish_SetKey,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.591000,HLS_SYN_LAT=43004,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1566,HLS_SYN_LUT=1915,HLS_VERSION=2019_2}" *)

module Blowfish_SetKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        key_size,
        P_address0,
        P_ce0,
        P_we0,
        P_d0,
        P_q0,
        P_address1,
        P_ce1,
        P_we1,
        P_d1,
        P_q1,
        S_address0,
        S_ce0,
        S_we0,
        S_d0,
        S_q0,
        S_address1,
        S_ce1,
        S_we1,
        S_d1,
        S_q1
);

parameter    ap_ST_fsm_state1 = 83'd1;
parameter    ap_ST_fsm_state2 = 83'd2;
parameter    ap_ST_fsm_state3 = 83'd4;
parameter    ap_ST_fsm_state4 = 83'd8;
parameter    ap_ST_fsm_state5 = 83'd16;
parameter    ap_ST_fsm_state6 = 83'd32;
parameter    ap_ST_fsm_state7 = 83'd64;
parameter    ap_ST_fsm_state8 = 83'd128;
parameter    ap_ST_fsm_state9 = 83'd256;
parameter    ap_ST_fsm_state10 = 83'd512;
parameter    ap_ST_fsm_state11 = 83'd1024;
parameter    ap_ST_fsm_state12 = 83'd2048;
parameter    ap_ST_fsm_state13 = 83'd4096;
parameter    ap_ST_fsm_state14 = 83'd8192;
parameter    ap_ST_fsm_state15 = 83'd16384;
parameter    ap_ST_fsm_state16 = 83'd32768;
parameter    ap_ST_fsm_state17 = 83'd65536;
parameter    ap_ST_fsm_state18 = 83'd131072;
parameter    ap_ST_fsm_state19 = 83'd262144;
parameter    ap_ST_fsm_state20 = 83'd524288;
parameter    ap_ST_fsm_state21 = 83'd1048576;
parameter    ap_ST_fsm_state22 = 83'd2097152;
parameter    ap_ST_fsm_state23 = 83'd4194304;
parameter    ap_ST_fsm_state24 = 83'd8388608;
parameter    ap_ST_fsm_state25 = 83'd16777216;
parameter    ap_ST_fsm_state26 = 83'd33554432;
parameter    ap_ST_fsm_state27 = 83'd67108864;
parameter    ap_ST_fsm_state28 = 83'd134217728;
parameter    ap_ST_fsm_state29 = 83'd268435456;
parameter    ap_ST_fsm_state30 = 83'd536870912;
parameter    ap_ST_fsm_state31 = 83'd1073741824;
parameter    ap_ST_fsm_state32 = 83'd2147483648;
parameter    ap_ST_fsm_state33 = 83'd4294967296;
parameter    ap_ST_fsm_state34 = 83'd8589934592;
parameter    ap_ST_fsm_state35 = 83'd17179869184;
parameter    ap_ST_fsm_state36 = 83'd34359738368;
parameter    ap_ST_fsm_state37 = 83'd68719476736;
parameter    ap_ST_fsm_state38 = 83'd137438953472;
parameter    ap_ST_fsm_state39 = 83'd274877906944;
parameter    ap_ST_fsm_state40 = 83'd549755813888;
parameter    ap_ST_fsm_state41 = 83'd1099511627776;
parameter    ap_ST_fsm_state42 = 83'd2199023255552;
parameter    ap_ST_fsm_state43 = 83'd4398046511104;
parameter    ap_ST_fsm_state44 = 83'd8796093022208;
parameter    ap_ST_fsm_state45 = 83'd17592186044416;
parameter    ap_ST_fsm_state46 = 83'd35184372088832;
parameter    ap_ST_fsm_state47 = 83'd70368744177664;
parameter    ap_ST_fsm_state48 = 83'd140737488355328;
parameter    ap_ST_fsm_state49 = 83'd281474976710656;
parameter    ap_ST_fsm_state50 = 83'd562949953421312;
parameter    ap_ST_fsm_state51 = 83'd1125899906842624;
parameter    ap_ST_fsm_state52 = 83'd2251799813685248;
parameter    ap_ST_fsm_state53 = 83'd4503599627370496;
parameter    ap_ST_fsm_state54 = 83'd9007199254740992;
parameter    ap_ST_fsm_state55 = 83'd18014398509481984;
parameter    ap_ST_fsm_state56 = 83'd36028797018963968;
parameter    ap_ST_fsm_state57 = 83'd72057594037927936;
parameter    ap_ST_fsm_state58 = 83'd144115188075855872;
parameter    ap_ST_fsm_state59 = 83'd288230376151711744;
parameter    ap_ST_fsm_state60 = 83'd576460752303423488;
parameter    ap_ST_fsm_state61 = 83'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 83'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 83'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 83'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 83'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 83'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 83'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 83'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 83'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 83'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 83'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 83'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 83'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 83'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 83'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 83'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 83'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 83'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 83'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 83'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 83'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 83'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 83'd4835703278458516698824704;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
input  [63:0] key_size;
output  [4:0] P_address0;
output   P_ce0;
output   P_we0;
output  [31:0] P_d0;
input  [31:0] P_q0;
output  [4:0] P_address1;
output   P_ce1;
output   P_we1;
output  [31:0] P_d1;
input  [31:0] P_q1;
output  [9:0] S_address0;
output   S_ce0;
output   S_we0;
output  [31:0] S_d0;
input  [31:0] S_q0;
output  [9:0] S_address1;
output   S_ce1;
output   S_we1;
output  [31:0] S_d1;
input  [31:0] S_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg[4:0] P_address0;
reg P_ce0;
reg P_we0;
reg[31:0] P_d0;
reg[4:0] P_address1;
reg P_ce1;
reg P_we1;
reg[9:0] S_address0;
reg S_ce0;
reg S_we0;
reg[31:0] S_d0;
reg[9:0] S_address1;
reg S_ce1;
reg S_we1;

(* fsm_encoding = "none" *) reg   [82:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] initial_parray_address0;
reg    initial_parray_ce0;
wire   [31:0] initial_parray_q0;
wire   [9:0] initial_sbox_address0;
reg    initial_sbox_ce0;
wire   [31:0] initial_sbox_q0;
reg   [31:0] reg_356;
wire    ap_CS_fsm_state78;
wire    grp_Encrypt_SetKey_fu_336_ap_ready;
wire    grp_Encrypt_SetKey_fu_336_ap_done;
wire    ap_CS_fsm_state82;
reg   [31:0] reg_363;
wire   [4:0] i_fu_376_p2;
reg   [4:0] i_reg_647;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln110_fu_382_p1;
reg   [63:0] zext_ln110_reg_652;
wire   [0:0] icmp_ln109_fu_370_p2;
wire   [2:0] i_1_fu_393_p2;
reg   [2:0] i_1_reg_665;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln115_fu_407_p1;
reg   [11:0] zext_ln115_reg_670;
wire   [0:0] icmp_ln114_fu_387_p2;
wire   [8:0] j_fu_422_p2;
reg   [8:0] j_reg_685;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln116_1_fu_437_p1;
reg   [63:0] zext_ln116_1_reg_690;
wire   [0:0] icmp_ln115_fu_416_p2;
wire   [4:0] i_3_fu_448_p2;
reg   [4:0] i_3_reg_703;
wire    ap_CS_fsm_state7;
wire   [2:0] j_1_fu_460_p2;
reg   [2:0] j_1_reg_711;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln125_fu_454_p2;
reg   [4:0] P_addr_5_reg_726;
wire   [31:0] data_fu_490_p3;
reg   [31:0] data_reg_731;
wire    ap_CS_fsm_state9;
wire   [4:0] i_2_fu_542_p2;
wire    ap_CS_fsm_state79;
wire   [2:0] i_4_fu_554_p2;
reg   [2:0] i_4_reg_761;
wire    ap_CS_fsm_state80;
wire   [11:0] zext_ln143_fu_568_p1;
reg   [11:0] zext_ln143_reg_766;
wire   [0:0] icmp_ln142_fu_548_p2;
wire    ap_CS_fsm_state81;
wire   [0:0] tmp_fu_572_p3;
wire   [11:0] add_ln145_fu_592_p2;
reg   [11:0] add_ln145_reg_784;
wire   [7:0] trunc_ln143_fu_597_p1;
reg   [7:0] trunc_ln143_reg_789;
wire   [8:0] j_2_fu_601_p2;
reg   [8:0] j_2_reg_794;
wire    grp_Encrypt_SetKey_fu_336_ap_start;
wire    grp_Encrypt_SetKey_fu_336_ap_idle;
reg   [31:0] grp_Encrypt_SetKey_fu_336_left_read;
reg   [31:0] grp_Encrypt_SetKey_fu_336_right_read;
wire   [4:0] grp_Encrypt_SetKey_fu_336_P_address0;
wire    grp_Encrypt_SetKey_fu_336_P_ce0;
wire   [4:0] grp_Encrypt_SetKey_fu_336_P_address1;
wire    grp_Encrypt_SetKey_fu_336_P_ce1;
wire   [9:0] grp_Encrypt_SetKey_fu_336_S_address0;
wire    grp_Encrypt_SetKey_fu_336_S_ce0;
wire   [9:0] grp_Encrypt_SetKey_fu_336_S_address1;
wire    grp_Encrypt_SetKey_fu_336_S_ce1;
wire   [31:0] grp_Encrypt_SetKey_fu_336_ap_return_0;
wire   [31:0] grp_Encrypt_SetKey_fu_336_ap_return_1;
reg   [4:0] i_0_reg_209;
wire    ap_CS_fsm_state3;
reg   [2:0] i1_0_reg_220;
reg   [8:0] j_0_reg_231;
wire    ap_CS_fsm_state6;
reg   [4:0] i2_0_reg_242;
wire    ap_CS_fsm_state76;
reg   [31:0] data_0_reg_254;
wire    ap_CS_fsm_state75;
wire   [0:0] icmp_ln123_fu_442_p2;
reg   [2:0] j3_0_reg_266;
reg   [31:0] right_0_reg_277;
reg   [31:0] left_0_reg_289;
reg   [4:0] i4_0_reg_301;
reg   [2:0] i5_0_reg_313;
wire    ap_CS_fsm_state77;
wire   [0:0] icmp_ln135_fu_510_p2;
reg   [8:0] j6_0_reg_325;
wire    ap_CS_fsm_state83;
reg    grp_Encrypt_SetKey_fu_336_ap_start_reg;
wire   [63:0] zext_ln129_fu_481_p1;
wire   [63:0] zext_ln137_fu_526_p1;
wire   [63:0] zext_ln138_fu_537_p1;
wire   [63:0] zext_ln145_1_fu_617_p1;
wire   [63:0] zext_ln146_fu_634_p1;
reg   [63:0] keyIndex_1_fu_76;
wire   [63:0] grp_fu_476_p2;
reg   [31:0] left_1_fu_80;
reg   [31:0] right_1_fu_84;
wire   [31:0] xor_ln129_fu_503_p2;
wire   [10:0] tmp_3_fu_399_p3;
wire   [11:0] zext_ln116_fu_428_p1;
wire   [11:0] add_ln116_fu_432_p2;
wire   [63:0] grp_fu_476_p0;
wire   [23:0] trunc_ln126_fu_486_p1;
wire   [4:0] or_ln138_fu_531_p2;
wire   [10:0] tmp_4_fu_560_p3;
wire   [11:0] zext_ln145_fu_588_p1;
wire   [7:0] or_ln146_fu_621_p2;
wire   [10:0] tmp_5_fu_626_p3;
reg    grp_fu_476_ap_start;
wire    grp_fu_476_ap_done;
reg   [82:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 83'd1;
#0 grp_Encrypt_SetKey_fu_336_ap_start_reg = 1'b0;
end

Blowfish_SetKey_ibkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
initial_parray_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(initial_parray_address0),
    .ce0(initial_parray_ce0),
    .q0(initial_parray_q0)
);

Blowfish_SetKey_icud #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
initial_sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(initial_sbox_address0),
    .ce0(initial_sbox_ce0),
    .q0(initial_sbox_q0)
);

Encrypt_SetKey grp_Encrypt_SetKey_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Encrypt_SetKey_fu_336_ap_start),
    .ap_done(grp_Encrypt_SetKey_fu_336_ap_done),
    .ap_idle(grp_Encrypt_SetKey_fu_336_ap_idle),
    .ap_ready(grp_Encrypt_SetKey_fu_336_ap_ready),
    .left_read(grp_Encrypt_SetKey_fu_336_left_read),
    .right_read(grp_Encrypt_SetKey_fu_336_right_read),
    .P_address0(grp_Encrypt_SetKey_fu_336_P_address0),
    .P_ce0(grp_Encrypt_SetKey_fu_336_P_ce0),
    .P_q0(P_q0),
    .P_address1(grp_Encrypt_SetKey_fu_336_P_address1),
    .P_ce1(grp_Encrypt_SetKey_fu_336_P_ce1),
    .P_q1(P_q1),
    .S_address0(grp_Encrypt_SetKey_fu_336_S_address0),
    .S_ce0(grp_Encrypt_SetKey_fu_336_S_ce0),
    .S_q0(S_q0),
    .S_address1(grp_Encrypt_SetKey_fu_336_S_address1),
    .S_ce1(grp_Encrypt_SetKey_fu_336_S_ce1),
    .S_q1(S_q1),
    .ap_return_0(grp_Encrypt_SetKey_fu_336_ap_return_0),
    .ap_return_1(grp_Encrypt_SetKey_fu_336_ap_return_1)
);

Blowfish_SetKey_udEe #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Blowfish_SetKey_udEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_476_ap_start),
    .done(grp_fu_476_ap_done),
    .din0(grp_fu_476_p0),
    .din1(key_size),
    .ce(1'b1),
    .dout(grp_fu_476_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Encrypt_SetKey_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln135_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77)) | ((1'b1 == ap_CS_fsm_state81) & (tmp_fu_572_p3 == 1'd0)))) begin
            grp_Encrypt_SetKey_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_Encrypt_SetKey_fu_336_ap_ready == 1'b1)) begin
            grp_Encrypt_SetKey_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln123_fu_442_p2 == 1'd0))) begin
        data_0_reg_254 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        data_0_reg_254 <= data_reg_731;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln109_fu_370_p2 == 1'd1))) begin
        i1_0_reg_220 <= 3'd0;
    end else if (((icmp_ln115_fu_416_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_reg_220 <= i_1_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln114_fu_387_p2 == 1'd1))) begin
        i2_0_reg_242 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        i2_0_reg_242 <= i_3_reg_703;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i4_0_reg_301 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        i4_0_reg_301 <= i_2_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_572_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        i5_0_reg_313 <= i_4_reg_761;
    end else if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln135_fu_510_p2 == 1'd0))) begin
        i5_0_reg_313 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_209 <= i_reg_647;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_209 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln123_fu_442_p2 == 1'd0))) begin
        j3_0_reg_266 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        j3_0_reg_266 <= j_1_reg_711;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        j6_0_reg_325 <= j_2_reg_794;
    end else if (((1'b1 == ap_CS_fsm_state80) & (icmp_ln142_fu_548_p2 == 1'd0))) begin
        j6_0_reg_325 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln114_fu_387_p2 == 1'd0))) begin
        j_0_reg_231 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_231 <= j_reg_685;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        keyIndex_1_fu_76 <= grp_fu_476_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln114_fu_387_p2 == 1'd1))) begin
        keyIndex_1_fu_76 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        left_0_reg_289 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        left_0_reg_289 <= reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1))) begin
        left_1_fu_80 <= grp_Encrypt_SetKey_fu_336_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln135_fu_510_p2 == 1'd0))) begin
        left_1_fu_80 <= left_0_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        right_0_reg_277 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        right_0_reg_277 <= reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1))) begin
        right_1_fu_84 <= grp_Encrypt_SetKey_fu_336_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln135_fu_510_p2 == 1'd0))) begin
        right_1_fu_84 <= right_0_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        P_addr_5_reg_726 <= zext_ln129_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (tmp_fu_572_p3 == 1'd0))) begin
        add_ln145_reg_784 <= add_ln145_fu_592_p2;
        j_2_reg_794 <= j_2_fu_601_p2;
        trunc_ln143_reg_789 <= trunc_ln143_fu_597_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_reg_731 <= data_fu_490_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_665 <= i_1_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_3_reg_703 <= i_3_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        i_4_reg_761 <= i_4_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_647 <= i_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_711 <= j_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_685 <= j_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state82) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state78) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1)))) begin
        reg_356 <= grp_Encrypt_SetKey_fu_336_ap_return_0;
        reg_363 <= grp_Encrypt_SetKey_fu_336_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln109_fu_370_p2 == 1'd0))) begin
        zext_ln110_reg_652[4 : 0] <= zext_ln110_fu_382_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln114_fu_387_p2 == 1'd0))) begin
        zext_ln115_reg_670[10 : 8] <= zext_ln115_fu_407_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_416_p2 == 1'd0))) begin
        zext_ln116_1_reg_690[11 : 0] <= zext_ln116_1_fu_437_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) & (icmp_ln142_fu_548_p2 == 1'd0))) begin
        zext_ln143_reg_766[10 : 8] <= zext_ln143_fu_568_p1[10 : 8];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        P_address0 = zext_ln137_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        P_address0 = P_addr_5_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        P_address0 = zext_ln129_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        P_address0 = zext_ln110_reg_652;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        P_address0 = grp_Encrypt_SetKey_fu_336_P_address0;
    end else begin
        P_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        P_address1 = zext_ln138_fu_537_p1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        P_address1 = grp_Encrypt_SetKey_fu_336_P_address1;
    end else begin
        P_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state8))) begin
        P_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        P_ce0 = grp_Encrypt_SetKey_fu_336_P_ce0;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        P_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        P_ce1 = grp_Encrypt_SetKey_fu_336_P_ce1;
    end else begin
        P_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        P_d0 = reg_356;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        P_d0 = xor_ln129_fu_503_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        P_d0 = initial_parray_q0;
    end else begin
        P_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state79))) begin
        P_we0 = 1'b1;
    end else begin
        P_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        P_we1 = 1'b1;
    end else begin
        P_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        S_address0 = zext_ln145_1_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        S_address0 = zext_ln116_1_reg_690;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        S_address0 = grp_Encrypt_SetKey_fu_336_S_address0;
    end else begin
        S_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        S_address1 = zext_ln146_fu_634_p1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        S_address1 = grp_Encrypt_SetKey_fu_336_S_address1;
    end else begin
        S_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state6))) begin
        S_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        S_ce0 = grp_Encrypt_SetKey_fu_336_S_ce0;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        S_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state78))) begin
        S_ce1 = grp_Encrypt_SetKey_fu_336_S_ce1;
    end else begin
        S_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        S_d0 = reg_356;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        S_d0 = initial_sbox_q0;
    end else begin
        S_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state6))) begin
        S_we0 = 1'b1;
    end else begin
        S_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        S_we1 = 1'b1;
    end else begin
        S_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_Encrypt_SetKey_fu_336_left_read = left_1_fu_80;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_Encrypt_SetKey_fu_336_left_read = left_0_reg_289;
    end else begin
        grp_Encrypt_SetKey_fu_336_left_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_Encrypt_SetKey_fu_336_right_read = right_1_fu_84;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_Encrypt_SetKey_fu_336_right_read = right_0_reg_277;
    end else begin
        grp_Encrypt_SetKey_fu_336_right_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln125_fu_454_p2 == 1'd0))) begin
        grp_fu_476_ap_start = 1'b1;
    end else begin
        grp_fu_476_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        initial_parray_ce0 = 1'b1;
    end else begin
        initial_parray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        initial_sbox_ce0 = 1'b1;
    end else begin
        initial_sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln109_fu_370_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln114_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln115_fu_416_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln123_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln125_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln135_fu_510_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_ln142_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((tmp_fu_572_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (grp_Encrypt_SetKey_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_d1 = reg_363;

assign S_d1 = reg_363;

assign add_ln116_fu_432_p2 = (zext_ln115_reg_670 + zext_ln116_fu_428_p1);

assign add_ln145_fu_592_p2 = (zext_ln145_fu_588_p1 + zext_ln143_reg_766);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_fu_490_p3 = {{trunc_ln126_fu_486_p1}, {key_q0}};

assign grp_Encrypt_SetKey_fu_336_ap_start = grp_Encrypt_SetKey_fu_336_ap_start_reg;

assign grp_fu_476_p0 = (64'd1 + keyIndex_1_fu_76);

assign i_1_fu_393_p2 = (i1_0_reg_220 + 3'd1);

assign i_2_fu_542_p2 = (i4_0_reg_301 + 5'd2);

assign i_3_fu_448_p2 = (i2_0_reg_242 + 5'd1);

assign i_4_fu_554_p2 = (i5_0_reg_313 + 3'd1);

assign i_fu_376_p2 = (i_0_reg_209 + 5'd1);

assign icmp_ln109_fu_370_p2 = ((i_0_reg_209 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_387_p2 = ((i1_0_reg_220 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_416_p2 = ((j_0_reg_231 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_442_p2 = ((i2_0_reg_242 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_454_p2 = ((j3_0_reg_266 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_510_p2 = ((i4_0_reg_301 < 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln142_fu_548_p2 = ((i5_0_reg_313 == 3'd4) ? 1'b1 : 1'b0);

assign initial_parray_address0 = zext_ln110_fu_382_p1;

assign initial_sbox_address0 = zext_ln116_1_fu_437_p1;

assign j_1_fu_460_p2 = (j3_0_reg_266 + 3'd1);

assign j_2_fu_601_p2 = (9'd2 + j6_0_reg_325);

assign j_fu_422_p2 = (j_0_reg_231 + 9'd1);

assign key_address0 = keyIndex_1_fu_76;

assign or_ln138_fu_531_p2 = (i4_0_reg_301 | 5'd1);

assign or_ln146_fu_621_p2 = (trunc_ln143_reg_789 | 8'd1);

assign tmp_3_fu_399_p3 = {{i1_0_reg_220}, {8'd0}};

assign tmp_4_fu_560_p3 = {{i5_0_reg_313}, {8'd0}};

assign tmp_5_fu_626_p3 = {{i5_0_reg_313}, {or_ln146_fu_621_p2}};

assign tmp_fu_572_p3 = j6_0_reg_325[32'd8];

assign trunc_ln126_fu_486_p1 = data_0_reg_254[23:0];

assign trunc_ln143_fu_597_p1 = j6_0_reg_325[7:0];

assign xor_ln129_fu_503_p2 = (data_0_reg_254 ^ P_q0);

assign zext_ln110_fu_382_p1 = i_0_reg_209;

assign zext_ln115_fu_407_p1 = tmp_3_fu_399_p3;

assign zext_ln116_1_fu_437_p1 = add_ln116_fu_432_p2;

assign zext_ln116_fu_428_p1 = j_0_reg_231;

assign zext_ln129_fu_481_p1 = i2_0_reg_242;

assign zext_ln137_fu_526_p1 = i4_0_reg_301;

assign zext_ln138_fu_537_p1 = or_ln138_fu_531_p2;

assign zext_ln143_fu_568_p1 = tmp_4_fu_560_p3;

assign zext_ln145_1_fu_617_p1 = add_ln145_reg_784;

assign zext_ln145_fu_588_p1 = j6_0_reg_325;

assign zext_ln146_fu_634_p1 = tmp_5_fu_626_p3;

always @ (posedge ap_clk) begin
    zext_ln110_reg_652[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln115_reg_670[7:0] <= 8'b00000000;
    zext_ln115_reg_670[11] <= 1'b0;
    zext_ln116_1_reg_690[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln143_reg_766[7:0] <= 8'b00000000;
    zext_ln143_reg_766[11] <= 1'b0;
end

endmodule //Blowfish_SetKey
