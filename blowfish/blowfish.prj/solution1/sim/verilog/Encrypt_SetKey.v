// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Encrypt_SetKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_read,
        right_read,
        P_address0,
        P_ce0,
        P_q0,
        P_address1,
        P_ce1,
        P_q1,
        S_address0,
        S_ce0,
        S_q0,
        S_address1,
        S_ce1,
        S_q1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] left_read;
input  [31:0] right_read;
output  [4:0] P_address0;
output   P_ce0;
input  [31:0] P_q0;
output  [4:0] P_address1;
output   P_ce1;
input  [31:0] P_q1;
output  [9:0] S_address0;
output   S_ce0;
input  [31:0] S_q0;
output  [9:0] S_address1;
output   S_ce1;
input  [31:0] S_q1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] P_address0;
reg P_ce0;
reg P_ce1;
reg[9:0] S_address0;
reg S_ce0;
reg[9:0] S_address1;
reg S_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_183_p2;
reg   [4:0] i_reg_350;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_177_p2;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] p_tmp_1_reg_370;
wire    ap_CS_fsm_state3;
reg   [7:0] c_reg_375;
wire   [7:0] d_fu_260_p2;
reg   [7:0] d_reg_380;
wire   [31:0] add_ln65_fu_280_p2;
reg   [31:0] add_ln65_reg_395;
wire    ap_CS_fsm_state4;
wire   [31:0] xor_ln14_fu_313_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] p_tmp_reg_140;
reg   [31:0] p_b_read_assign_2_reg_150;
reg   [4:0] i_0_reg_160;
wire   [63:0] zext_ln13_fu_189_p1;
wire   [63:0] zext_ln65_fu_266_p1;
wire   [63:0] tmp_fu_271_p3;
wire   [63:0] tmp_1_fu_286_p3;
wire   [63:0] tmp_2_fu_294_p3;
wire    ap_CS_fsm_state6;
wire   [15:0] trunc_ln13_5_fu_214_p1;
wire   [15:0] trunc_ln13_4_fu_210_p1;
wire   [23:0] trunc_ln13_3_fu_206_p1;
wire   [23:0] trunc_ln13_2_fu_202_p1;
wire   [23:0] xor_ln60_1_fu_224_p2;
wire   [15:0] xor_ln60_fu_218_p2;
wire   [7:0] trunc_ln13_1_fu_198_p1;
wire   [7:0] trunc_ln13_fu_194_p1;
wire   [7:0] a_fu_230_p4;
wire   [7:0] b_fu_240_p4;
wire   [31:0] xor_ln65_fu_302_p2;
wire   [31:0] add_ln65_1_fu_307_p2;
wire   [31:0] xor_ln19_fu_319_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= xor_ln19_fu_319_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= grp_fu_171_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_160 <= i_reg_350;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_160 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_b_read_assign_2_reg_150 <= p_tmp_1_reg_370;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_b_read_assign_2_reg_150 <= right_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_tmp_reg_140 <= xor_ln14_fu_313_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_tmp_reg_140 <= left_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln65_reg_395 <= add_ln65_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_375 <= {{xor_ln60_fu_218_p2[15:8]}};
        d_reg_380 <= d_fu_260_p2;
        p_tmp_1_reg_370 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_350 <= i_fu_183_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln12_fu_177_p2 == 1'd1)) begin
            P_address0 = 64'd16;
        end else if ((icmp_ln12_fu_177_p2 == 1'd0)) begin
            P_address0 = zext_ln13_fu_189_p1;
        end else begin
            P_address0 = 'bx;
        end
    end else begin
        P_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln12_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln12_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        P_ce1 = 1'b1;
    end else begin
        P_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        S_address0 = tmp_1_fu_286_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        S_address0 = zext_ln65_fu_266_p1;
    end else begin
        S_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        S_address1 = tmp_2_fu_294_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        S_address1 = tmp_fu_271_p3;
    end else begin
        S_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        S_ce1 = 1'b1;
    end else begin
        S_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = xor_ln19_fu_319_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = grp_fu_171_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_address1 = 64'd17;

assign a_fu_230_p4 = {{grp_fu_171_p2[31:24]}};

assign add_ln65_1_fu_307_p2 = (S_q1 + xor_ln65_fu_302_p2);

assign add_ln65_fu_280_p2 = (S_q0 + S_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_fu_240_p4 = {{xor_ln60_1_fu_224_p2[23:16]}};

assign d_fu_260_p2 = (trunc_ln13_fu_194_p1 ^ trunc_ln13_1_fu_198_p1);

assign grp_fu_171_p2 = (p_tmp_reg_140 ^ P_q0);

assign i_fu_183_p2 = (i_0_reg_160 + 5'd1);

assign icmp_ln12_fu_177_p2 = ((i_0_reg_160 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_1_fu_286_p3 = {{56'd2}, {c_reg_375}};

assign tmp_2_fu_294_p3 = {{56'd3}, {d_reg_380}};

assign tmp_fu_271_p3 = {{56'd1}, {b_fu_240_p4}};

assign trunc_ln13_1_fu_198_p1 = p_tmp_reg_140[7:0];

assign trunc_ln13_2_fu_202_p1 = p_tmp_reg_140[23:0];

assign trunc_ln13_3_fu_206_p1 = P_q0[23:0];

assign trunc_ln13_4_fu_210_p1 = p_tmp_reg_140[15:0];

assign trunc_ln13_5_fu_214_p1 = P_q0[15:0];

assign trunc_ln13_fu_194_p1 = P_q0[7:0];

assign xor_ln14_fu_313_p2 = (p_b_read_assign_2_reg_150 ^ add_ln65_1_fu_307_p2);

assign xor_ln19_fu_319_p2 = (p_b_read_assign_2_reg_150 ^ P_q1);

assign xor_ln60_1_fu_224_p2 = (trunc_ln13_3_fu_206_p1 ^ trunc_ln13_2_fu_202_p1);

assign xor_ln60_fu_218_p2 = (trunc_ln13_5_fu_214_p1 ^ trunc_ln13_4_fu_210_p1);

assign xor_ln65_fu_302_p2 = (add_ln65_reg_395 ^ S_q0);

assign zext_ln13_fu_189_p1 = i_0_reg_160;

assign zext_ln65_fu_266_p1 = a_fu_230_p4;

endmodule //Encrypt_SetKey
