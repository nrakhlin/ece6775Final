-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_SetKey_Encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    set_key : IN STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_size : IN STD_LOGIC_VECTOR (63 downto 0);
    plaintext_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    plaintext_ce1 : OUT STD_LOGIC;
    plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_we0 : OUT STD_LOGIC;
    ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_we1 : OUT STD_LOGIC;
    ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce0 : OUT STD_LOGIC;
    P_we0 : OUT STD_LOGIC;
    P_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce1 : OUT STD_LOGIC;
    P_we1 : OUT STD_LOGIC;
    P_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_we0 : OUT STD_LOGIC;
    S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_we1 : OUT STD_LOGIC;
    S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_SetKey_Encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_SetKey_Encrypt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.591000,HLS_SYN_LAT=21578,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1819,HLS_SYN_LUT=2752,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_Blowfish_SetKey_fu_44_ap_start : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_ap_done : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_ap_idle : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_ap_ready : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_key_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Blowfish_SetKey_fu_44_key_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Blowfish_SetKey_fu_44_P_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_P_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_P_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_44_P_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Blowfish_SetKey_fu_44_P_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_P_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_P_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_44_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Blowfish_SetKey_fu_44_S_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_S_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_44_S_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Blowfish_SetKey_fu_44_S_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_S_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_S_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_ap_start : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ap_done : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_plaintext_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_plaintext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_plaintext_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_plaintext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_we0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_we1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_ciphertext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_P_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_S_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_60_S_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Blowfish_Encrypt_fu_60_S_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal set_key_read_read_fu_38_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Blowfish_Encrypt_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component Blowfish_SetKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_size : IN STD_LOGIC_VECTOR (63 downto 0);
        P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        P_ce0 : OUT STD_LOGIC;
        P_we0 : OUT STD_LOGIC;
        P_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        P_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        P_ce1 : OUT STD_LOGIC;
        P_we1 : OUT STD_LOGIC;
        P_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        P_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_we1 : OUT STD_LOGIC;
        S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        plaintext_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plaintext_ce1 : OUT STD_LOGIC;
        plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_we0 : OUT STD_LOGIC;
        ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_we1 : OUT STD_LOGIC;
        ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        P_ce0 : OUT STD_LOGIC;
        P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Blowfish_SetKey_fu_44 : component Blowfish_SetKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_SetKey_fu_44_ap_start,
        ap_done => grp_Blowfish_SetKey_fu_44_ap_done,
        ap_idle => grp_Blowfish_SetKey_fu_44_ap_idle,
        ap_ready => grp_Blowfish_SetKey_fu_44_ap_ready,
        key_address0 => grp_Blowfish_SetKey_fu_44_key_address0,
        key_ce0 => grp_Blowfish_SetKey_fu_44_key_ce0,
        key_q0 => key_q0,
        key_size => key_size,
        P_address0 => grp_Blowfish_SetKey_fu_44_P_address0,
        P_ce0 => grp_Blowfish_SetKey_fu_44_P_ce0,
        P_we0 => grp_Blowfish_SetKey_fu_44_P_we0,
        P_d0 => grp_Blowfish_SetKey_fu_44_P_d0,
        P_q0 => P_q0,
        P_address1 => grp_Blowfish_SetKey_fu_44_P_address1,
        P_ce1 => grp_Blowfish_SetKey_fu_44_P_ce1,
        P_we1 => grp_Blowfish_SetKey_fu_44_P_we1,
        P_d1 => grp_Blowfish_SetKey_fu_44_P_d1,
        P_q1 => P_q1,
        S_address0 => grp_Blowfish_SetKey_fu_44_S_address0,
        S_ce0 => grp_Blowfish_SetKey_fu_44_S_ce0,
        S_we0 => grp_Blowfish_SetKey_fu_44_S_we0,
        S_d0 => grp_Blowfish_SetKey_fu_44_S_d0,
        S_q0 => S_q0,
        S_address1 => grp_Blowfish_SetKey_fu_44_S_address1,
        S_ce1 => grp_Blowfish_SetKey_fu_44_S_ce1,
        S_we1 => grp_Blowfish_SetKey_fu_44_S_we1,
        S_d1 => grp_Blowfish_SetKey_fu_44_S_d1,
        S_q1 => S_q1);

    grp_Blowfish_Encrypt_fu_60 : component Blowfish_Encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Encrypt_fu_60_ap_start,
        ap_done => grp_Blowfish_Encrypt_fu_60_ap_done,
        ap_idle => grp_Blowfish_Encrypt_fu_60_ap_idle,
        ap_ready => grp_Blowfish_Encrypt_fu_60_ap_ready,
        plaintext_address0 => grp_Blowfish_Encrypt_fu_60_plaintext_address0,
        plaintext_ce0 => grp_Blowfish_Encrypt_fu_60_plaintext_ce0,
        plaintext_q0 => plaintext_q0,
        plaintext_address1 => grp_Blowfish_Encrypt_fu_60_plaintext_address1,
        plaintext_ce1 => grp_Blowfish_Encrypt_fu_60_plaintext_ce1,
        plaintext_q1 => plaintext_q1,
        ciphertext_address0 => grp_Blowfish_Encrypt_fu_60_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Encrypt_fu_60_ciphertext_ce0,
        ciphertext_we0 => grp_Blowfish_Encrypt_fu_60_ciphertext_we0,
        ciphertext_d0 => grp_Blowfish_Encrypt_fu_60_ciphertext_d0,
        ciphertext_address1 => grp_Blowfish_Encrypt_fu_60_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Encrypt_fu_60_ciphertext_ce1,
        ciphertext_we1 => grp_Blowfish_Encrypt_fu_60_ciphertext_we1,
        ciphertext_d1 => grp_Blowfish_Encrypt_fu_60_ciphertext_d1,
        P_address0 => grp_Blowfish_Encrypt_fu_60_P_address0,
        P_ce0 => grp_Blowfish_Encrypt_fu_60_P_ce0,
        P_q0 => P_q0,
        S_address0 => grp_Blowfish_Encrypt_fu_60_S_address0,
        S_ce0 => grp_Blowfish_Encrypt_fu_60_S_ce0,
        S_q0 => S_q0,
        S_address1 => grp_Blowfish_Encrypt_fu_60_S_address1,
        S_ce1 => grp_Blowfish_Encrypt_fu_60_S_ce1,
        S_q1 => S_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Blowfish_Encrypt_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Encrypt_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Blowfish_Encrypt_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Encrypt_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Encrypt_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Blowfish_SetKey_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_SetKey_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_38_p2 = ap_const_lv1_1))) then 
                    grp_Blowfish_SetKey_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_SetKey_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_SetKey_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Blowfish_SetKey_fu_44_ap_done, grp_Blowfish_Encrypt_fu_60_ap_done, set_key_read_read_fu_38_p2, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_38_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_38_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Blowfish_SetKey_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Blowfish_Encrypt_fu_60_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    P_address0_assign_proc : process(grp_Blowfish_SetKey_fu_44_P_address0, grp_Blowfish_Encrypt_fu_60_P_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P_address0 <= grp_Blowfish_Encrypt_fu_60_P_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_address0 <= grp_Blowfish_SetKey_fu_44_P_address0;
        else 
            P_address0 <= "XXXXX";
        end if; 
    end process;

    P_address1 <= grp_Blowfish_SetKey_fu_44_P_address1;

    P_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_44_P_ce0, grp_Blowfish_Encrypt_fu_60_P_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P_ce0 <= grp_Blowfish_Encrypt_fu_60_P_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_ce0 <= grp_Blowfish_SetKey_fu_44_P_ce0;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_44_P_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_ce1 <= grp_Blowfish_SetKey_fu_44_P_ce1;
        else 
            P_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    P_d0 <= grp_Blowfish_SetKey_fu_44_P_d0;
    P_d1 <= grp_Blowfish_SetKey_fu_44_P_d1;

    P_we0_assign_proc : process(grp_Blowfish_SetKey_fu_44_P_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_we0 <= grp_Blowfish_SetKey_fu_44_P_we0;
        else 
            P_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P_we1_assign_proc : process(grp_Blowfish_SetKey_fu_44_P_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_we1 <= grp_Blowfish_SetKey_fu_44_P_we1;
        else 
            P_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_address0, grp_Blowfish_Encrypt_fu_60_S_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_address0 <= grp_Blowfish_Encrypt_fu_60_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_address0 <= grp_Blowfish_SetKey_fu_44_S_address0;
        else 
            S_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_address1, grp_Blowfish_Encrypt_fu_60_S_address1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_address1 <= grp_Blowfish_Encrypt_fu_60_S_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_address1 <= grp_Blowfish_SetKey_fu_44_S_address1;
        else 
            S_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_ce0, grp_Blowfish_Encrypt_fu_60_S_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_ce0 <= grp_Blowfish_Encrypt_fu_60_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_ce0 <= grp_Blowfish_SetKey_fu_44_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_ce1, grp_Blowfish_Encrypt_fu_60_S_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_ce1 <= grp_Blowfish_Encrypt_fu_60_S_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_ce1 <= grp_Blowfish_SetKey_fu_44_S_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= grp_Blowfish_SetKey_fu_44_S_d0;
    S_d1 <= grp_Blowfish_SetKey_fu_44_S_d1;

    S_we0_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_we0 <= grp_Blowfish_SetKey_fu_44_S_we0;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_we1_assign_proc : process(grp_Blowfish_SetKey_fu_44_S_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_we1 <= grp_Blowfish_SetKey_fu_44_S_we1;
        else 
            S_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(grp_Blowfish_Encrypt_fu_60_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Blowfish_Encrypt_fu_60_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Blowfish_Encrypt_fu_60_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Blowfish_Encrypt_fu_60_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext_address0 <= grp_Blowfish_Encrypt_fu_60_ciphertext_address0;
    ciphertext_address1 <= grp_Blowfish_Encrypt_fu_60_ciphertext_address1;
    ciphertext_ce0 <= grp_Blowfish_Encrypt_fu_60_ciphertext_ce0;
    ciphertext_ce1 <= grp_Blowfish_Encrypt_fu_60_ciphertext_ce1;
    ciphertext_d0 <= grp_Blowfish_Encrypt_fu_60_ciphertext_d0;
    ciphertext_d1 <= grp_Blowfish_Encrypt_fu_60_ciphertext_d1;
    ciphertext_we0 <= grp_Blowfish_Encrypt_fu_60_ciphertext_we0;
    ciphertext_we1 <= grp_Blowfish_Encrypt_fu_60_ciphertext_we1;
    grp_Blowfish_Encrypt_fu_60_ap_start <= grp_Blowfish_Encrypt_fu_60_ap_start_reg;
    grp_Blowfish_SetKey_fu_44_ap_start <= grp_Blowfish_SetKey_fu_44_ap_start_reg;
    key_address0 <= grp_Blowfish_SetKey_fu_44_key_address0;
    key_ce0 <= grp_Blowfish_SetKey_fu_44_key_ce0;
    plaintext_address0 <= grp_Blowfish_Encrypt_fu_60_plaintext_address0;
    plaintext_address1 <= grp_Blowfish_Encrypt_fu_60_plaintext_address1;
    plaintext_ce0 <= grp_Blowfish_Encrypt_fu_60_plaintext_ce0;
    plaintext_ce1 <= grp_Blowfish_Encrypt_fu_60_plaintext_ce1;
    set_key_read_read_fu_38_p2 <= (0=>set_key, others=>'-');
end behav;
