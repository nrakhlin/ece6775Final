// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Blowfish_SetKey_Encrypt_HH_
#define _Blowfish_SetKey_Encrypt_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Blowfish_SetKey.h"
#include "Blowfish_Encrypt.h"

namespace ap_rtl {

struct Blowfish_SetKey_Encrypt : public sc_module {
    // Port declarations 45
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > set_key;
    sc_out< sc_lv<6> > key_address0;
    sc_out< sc_logic > key_ce0;
    sc_in< sc_lv<8> > key_q0;
    sc_in< sc_lv<64> > key_size;
    sc_out< sc_lv<4> > plaintext_address0;
    sc_out< sc_logic > plaintext_ce0;
    sc_in< sc_lv<8> > plaintext_q0;
    sc_out< sc_lv<4> > plaintext_address1;
    sc_out< sc_logic > plaintext_ce1;
    sc_in< sc_lv<8> > plaintext_q1;
    sc_out< sc_lv<4> > ciphertext_address0;
    sc_out< sc_logic > ciphertext_ce0;
    sc_out< sc_logic > ciphertext_we0;
    sc_out< sc_lv<8> > ciphertext_d0;
    sc_out< sc_lv<4> > ciphertext_address1;
    sc_out< sc_logic > ciphertext_ce1;
    sc_out< sc_logic > ciphertext_we1;
    sc_out< sc_lv<8> > ciphertext_d1;
    sc_out< sc_lv<5> > P_address0;
    sc_out< sc_logic > P_ce0;
    sc_out< sc_logic > P_we0;
    sc_out< sc_lv<32> > P_d0;
    sc_in< sc_lv<32> > P_q0;
    sc_out< sc_lv<5> > P_address1;
    sc_out< sc_logic > P_ce1;
    sc_out< sc_logic > P_we1;
    sc_out< sc_lv<32> > P_d1;
    sc_in< sc_lv<32> > P_q1;
    sc_out< sc_lv<10> > S_address0;
    sc_out< sc_logic > S_ce0;
    sc_out< sc_logic > S_we0;
    sc_out< sc_lv<32> > S_d0;
    sc_in< sc_lv<32> > S_q0;
    sc_out< sc_lv<10> > S_address1;
    sc_out< sc_logic > S_ce1;
    sc_out< sc_logic > S_we1;
    sc_out< sc_lv<32> > S_d1;
    sc_in< sc_lv<32> > S_q1;


    // Module declarations
    Blowfish_SetKey_Encrypt(sc_module_name name);
    SC_HAS_PROCESS(Blowfish_SetKey_Encrypt);

    ~Blowfish_SetKey_Encrypt();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Blowfish_SetKey* grp_Blowfish_SetKey_fu_44;
    Blowfish_Encrypt* grp_Blowfish_Encrypt_fu_60;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_ap_start;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_ap_done;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_ap_idle;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_ap_ready;
    sc_signal< sc_lv<6> > grp_Blowfish_SetKey_fu_44_key_address0;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_key_ce0;
    sc_signal< sc_lv<5> > grp_Blowfish_SetKey_fu_44_P_address0;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_P_ce0;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_P_we0;
    sc_signal< sc_lv<32> > grp_Blowfish_SetKey_fu_44_P_d0;
    sc_signal< sc_lv<5> > grp_Blowfish_SetKey_fu_44_P_address1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_P_ce1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_P_we1;
    sc_signal< sc_lv<32> > grp_Blowfish_SetKey_fu_44_P_d1;
    sc_signal< sc_lv<10> > grp_Blowfish_SetKey_fu_44_S_address0;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_S_ce0;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_S_we0;
    sc_signal< sc_lv<32> > grp_Blowfish_SetKey_fu_44_S_d0;
    sc_signal< sc_lv<10> > grp_Blowfish_SetKey_fu_44_S_address1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_S_ce1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_S_we1;
    sc_signal< sc_lv<32> > grp_Blowfish_SetKey_fu_44_S_d1;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ap_start;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ap_done;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ap_idle;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ap_ready;
    sc_signal< sc_lv<4> > grp_Blowfish_Encrypt_fu_60_plaintext_address0;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_plaintext_ce0;
    sc_signal< sc_lv<4> > grp_Blowfish_Encrypt_fu_60_plaintext_address1;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_plaintext_ce1;
    sc_signal< sc_lv<4> > grp_Blowfish_Encrypt_fu_60_ciphertext_address0;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ciphertext_ce0;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ciphertext_we0;
    sc_signal< sc_lv<8> > grp_Blowfish_Encrypt_fu_60_ciphertext_d0;
    sc_signal< sc_lv<4> > grp_Blowfish_Encrypt_fu_60_ciphertext_address1;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ciphertext_ce1;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ciphertext_we1;
    sc_signal< sc_lv<8> > grp_Blowfish_Encrypt_fu_60_ciphertext_d1;
    sc_signal< sc_lv<5> > grp_Blowfish_Encrypt_fu_60_P_address0;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_P_ce0;
    sc_signal< sc_lv<10> > grp_Blowfish_Encrypt_fu_60_S_address0;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_S_ce0;
    sc_signal< sc_lv<10> > grp_Blowfish_Encrypt_fu_60_S_address1;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_S_ce1;
    sc_signal< sc_logic > grp_Blowfish_SetKey_fu_44_ap_start_reg;
    sc_signal< sc_lv<1> > set_key_read_read_fu_38_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_Blowfish_Encrypt_fu_60_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_P_address0();
    void thread_P_address1();
    void thread_P_ce0();
    void thread_P_ce1();
    void thread_P_d0();
    void thread_P_d1();
    void thread_P_we0();
    void thread_P_we1();
    void thread_S_address0();
    void thread_S_address1();
    void thread_S_ce0();
    void thread_S_ce1();
    void thread_S_d0();
    void thread_S_d1();
    void thread_S_we0();
    void thread_S_we1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ciphertext_address0();
    void thread_ciphertext_address1();
    void thread_ciphertext_ce0();
    void thread_ciphertext_ce1();
    void thread_ciphertext_d0();
    void thread_ciphertext_d1();
    void thread_ciphertext_we0();
    void thread_ciphertext_we1();
    void thread_grp_Blowfish_Encrypt_fu_60_ap_start();
    void thread_grp_Blowfish_SetKey_fu_44_ap_start();
    void thread_key_address0();
    void thread_key_ce0();
    void thread_plaintext_address0();
    void thread_plaintext_address1();
    void thread_plaintext_ce0();
    void thread_plaintext_ce1();
    void thread_set_key_read_read_fu_38_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
