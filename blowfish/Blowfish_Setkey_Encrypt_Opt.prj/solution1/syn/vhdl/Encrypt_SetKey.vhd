-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Encrypt_SetKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_read : IN STD_LOGIC_VECTOR (31 downto 0);
    right_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Encrypt_SetKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_feistel_fu_174_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal xor_ln57_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_1_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_1_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln57_2_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_2_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xor_ln57_3_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_3_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xor_ln57_4_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_4_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal xor_ln57_5_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_5_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xor_ln57_6_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_6_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln57_7_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_7_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xor_ln57_8_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_8_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal xor_ln57_9_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_9_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xor_ln57_10_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_10_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln57_11_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_11_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln57_12_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_12_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal xor_ln57_13_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_13_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal xor_ln57_14_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_14_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal xor_ln57_30_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_30_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_feistel_fu_174_ap_start : STD_LOGIC;
    signal grp_feistel_fu_174_ap_done : STD_LOGIC;
    signal grp_feistel_fu_174_ap_idle : STD_LOGIC;
    signal grp_feistel_fu_174_ap_ready : STD_LOGIC;
    signal grp_feistel_fu_174_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feistel_fu_174_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_174_S_0_ce0 : STD_LOGIC;
    signal grp_feistel_fu_174_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_174_S_1_ce0 : STD_LOGIC;
    signal grp_feistel_fu_174_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_174_S_2_ce0 : STD_LOGIC;
    signal grp_feistel_fu_174_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_174_S_3_ce0 : STD_LOGIC;
    signal grp_feistel_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_NS_fsm_state5 : STD_LOGIC;
    signal ap_NS_fsm_state7 : STD_LOGIC;
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_NS_fsm_state13 : STD_LOGIC;
    signal ap_NS_fsm_state15 : STD_LOGIC;
    signal ap_NS_fsm_state17 : STD_LOGIC;
    signal ap_NS_fsm_state19 : STD_LOGIC;
    signal ap_NS_fsm_state21 : STD_LOGIC;
    signal ap_NS_fsm_state23 : STD_LOGIC;
    signal ap_NS_fsm_state25 : STD_LOGIC;
    signal ap_NS_fsm_state27 : STD_LOGIC;
    signal ap_NS_fsm_state29 : STD_LOGIC;
    signal ap_NS_fsm_state31 : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal xor_ln57_15_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_16_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_17_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_18_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_19_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_20_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_21_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_22_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_23_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_24_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_25_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_26_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_27_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_28_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln57_29_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln64_1_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln65_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln64_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    component feistel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_feistel_fu_174 : component feistel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feistel_fu_174_ap_start,
        ap_done => grp_feistel_fu_174_ap_done,
        ap_idle => grp_feistel_fu_174_ap_idle,
        ap_ready => grp_feistel_fu_174_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_feistel_fu_174_x,
        S_0_address0 => grp_feistel_fu_174_S_0_address0,
        S_0_ce0 => grp_feistel_fu_174_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_feistel_fu_174_S_1_address0,
        S_1_ce0 => grp_feistel_fu_174_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_feistel_fu_174_S_2_address0,
        S_2_ce0 => grp_feistel_fu_174_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_feistel_fu_174_S_3_address0,
        S_3_ce0 => grp_feistel_fu_174_S_3_ce0,
        S_3_q0 => S_3_q0,
        ap_return => grp_feistel_fu_174_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_return_0_preg <= xor_ln65_fu_390_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_return_1_preg <= xor_ln64_fu_385_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_feistel_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feistel_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state31) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_logic_1 = ap_NS_fsm_state29) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = ap_NS_fsm_state27) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = ap_NS_fsm_state25) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = ap_NS_fsm_state23) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_NS_fsm_state21) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_NS_fsm_state17) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_NS_fsm_state15) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_NS_fsm_state13) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_NS_fsm_state11) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_NS_fsm_state7) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_NS_fsm_state5) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_feistel_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feistel_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_feistel_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_187 <= grp_feistel_fu_174_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                xor_ln57_10_reg_467 <= xor_ln57_10_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                xor_ln57_11_reg_473 <= xor_ln57_11_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                xor_ln57_12_reg_479 <= xor_ln57_12_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                xor_ln57_13_reg_485 <= xor_ln57_13_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                xor_ln57_14_reg_491 <= xor_ln57_14_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xor_ln57_1_reg_413 <= xor_ln57_1_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                xor_ln57_2_reg_419 <= xor_ln57_2_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                xor_ln57_30_reg_497 <= xor_ln57_30_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xor_ln57_3_reg_425 <= xor_ln57_3_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                xor_ln57_4_reg_431 <= xor_ln57_4_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xor_ln57_5_reg_437 <= xor_ln57_5_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln57_6_reg_443 <= xor_ln57_6_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                xor_ln57_7_reg_449 <= xor_ln57_7_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                xor_ln57_8_reg_455 <= xor_ln57_8_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                xor_ln57_9_reg_461 <= xor_ln57_9_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xor_ln57_reg_407 <= xor_ln57_fu_191_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    S_0_address0 <= grp_feistel_fu_174_S_0_address0;

    S_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, grp_feistel_fu_174_S_0_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_0_ce0 <= grp_feistel_fu_174_S_0_ce0;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= grp_feistel_fu_174_S_1_address0;

    S_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, grp_feistel_fu_174_S_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_1_ce0 <= grp_feistel_fu_174_S_1_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= grp_feistel_fu_174_S_2_address0;

    S_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, grp_feistel_fu_174_S_2_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_2_ce0 <= grp_feistel_fu_174_S_2_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= grp_feistel_fu_174_S_3_address0;

    S_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, grp_feistel_fu_174_S_3_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_3_ce0 <= grp_feistel_fu_174_S_3_ce0;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);
    ap_NS_fsm_state13 <= ap_NS_fsm(12);
    ap_NS_fsm_state15 <= ap_NS_fsm(14);
    ap_NS_fsm_state17 <= ap_NS_fsm(16);
    ap_NS_fsm_state19 <= ap_NS_fsm(18);
    ap_NS_fsm_state21 <= ap_NS_fsm(20);
    ap_NS_fsm_state23 <= ap_NS_fsm(22);
    ap_NS_fsm_state25 <= ap_NS_fsm(24);
    ap_NS_fsm_state27 <= ap_NS_fsm(26);
    ap_NS_fsm_state29 <= ap_NS_fsm(28);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);
    ap_NS_fsm_state31 <= ap_NS_fsm(30);
    ap_NS_fsm_state5 <= ap_NS_fsm(4);
    ap_NS_fsm_state7 <= ap_NS_fsm(6);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state33, xor_ln65_fu_390_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_return_0 <= xor_ln65_fu_390_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state33, xor_ln64_fu_385_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_return_1 <= xor_ln64_fu_385_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    grp_feistel_fu_174_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_feistel_fu_174_ap_start_reg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_feistel_fu_174_ap_start <= ap_const_logic_1;
        else 
            grp_feistel_fu_174_ap_start <= grp_feistel_fu_174_ap_start_reg;
        end if; 
    end process;


    grp_feistel_fu_174_x_assign_proc : process(ap_CS_fsm_state1, xor_ln57_fu_191_p2, xor_ln57_1_fu_204_p2, ap_CS_fsm_state3, xor_ln57_2_fu_217_p2, ap_CS_fsm_state5, xor_ln57_3_fu_229_p2, ap_CS_fsm_state7, xor_ln57_4_fu_241_p2, ap_CS_fsm_state9, xor_ln57_5_fu_253_p2, ap_CS_fsm_state11, xor_ln57_6_fu_265_p2, ap_CS_fsm_state13, xor_ln57_7_fu_277_p2, ap_CS_fsm_state15, xor_ln57_8_fu_289_p2, ap_CS_fsm_state17, xor_ln57_9_fu_301_p2, ap_CS_fsm_state19, xor_ln57_10_fu_313_p2, ap_CS_fsm_state21, xor_ln57_11_fu_325_p2, ap_CS_fsm_state23, xor_ln57_12_fu_337_p2, ap_CS_fsm_state25, xor_ln57_13_fu_349_p2, ap_CS_fsm_state27, xor_ln57_14_fu_361_p2, ap_CS_fsm_state29, xor_ln57_30_fu_373_p2, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_feistel_fu_174_x <= xor_ln57_30_fu_373_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_feistel_fu_174_x <= xor_ln57_14_fu_361_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_feistel_fu_174_x <= xor_ln57_13_fu_349_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_feistel_fu_174_x <= xor_ln57_12_fu_337_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_feistel_fu_174_x <= xor_ln57_11_fu_325_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_feistel_fu_174_x <= xor_ln57_10_fu_313_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_feistel_fu_174_x <= xor_ln57_9_fu_301_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_feistel_fu_174_x <= xor_ln57_8_fu_289_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_feistel_fu_174_x <= xor_ln57_7_fu_277_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_feistel_fu_174_x <= xor_ln57_6_fu_265_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_feistel_fu_174_x <= xor_ln57_5_fu_253_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_feistel_fu_174_x <= xor_ln57_4_fu_241_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_feistel_fu_174_x <= xor_ln57_3_fu_229_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_feistel_fu_174_x <= xor_ln57_2_fu_217_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_feistel_fu_174_x <= xor_ln57_1_fu_204_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_feistel_fu_174_x <= xor_ln57_fu_191_p2;
        else 
            grp_feistel_fu_174_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    xor_ln57_10_fu_313_p2 <= (xor_ln57_8_reg_455 xor xor_ln57_24_fu_307_p2);
    xor_ln57_11_fu_325_p2 <= (xor_ln57_9_reg_461 xor xor_ln57_25_fu_319_p2);
    xor_ln57_12_fu_337_p2 <= (xor_ln57_26_fu_331_p2 xor xor_ln57_10_reg_467);
    xor_ln57_13_fu_349_p2 <= (xor_ln57_27_fu_343_p2 xor xor_ln57_11_reg_473);
    xor_ln57_14_fu_361_p2 <= (xor_ln57_28_fu_355_p2 xor xor_ln57_12_reg_479);
    xor_ln57_15_fu_198_p2 <= (right_read xor P_1_read);
    xor_ln57_16_fu_211_p2 <= (reg_187 xor P_2_read);
    xor_ln57_17_fu_223_p2 <= (reg_187 xor P_3_read);
    xor_ln57_18_fu_235_p2 <= (reg_187 xor P_4_read);
    xor_ln57_19_fu_247_p2 <= (reg_187 xor P_5_read);
    xor_ln57_1_fu_204_p2 <= (xor_ln57_15_fu_198_p2 xor reg_187);
    xor_ln57_20_fu_259_p2 <= (reg_187 xor P_6_read);
    xor_ln57_21_fu_271_p2 <= (reg_187 xor P_7_read);
    xor_ln57_22_fu_283_p2 <= (reg_187 xor P_8_read);
    xor_ln57_23_fu_295_p2 <= (reg_187 xor P_9_read);
    xor_ln57_24_fu_307_p2 <= (reg_187 xor P_10_read);
    xor_ln57_25_fu_319_p2 <= (reg_187 xor P_11_read);
    xor_ln57_26_fu_331_p2 <= (reg_187 xor P_12_read);
    xor_ln57_27_fu_343_p2 <= (reg_187 xor P_13_read);
    xor_ln57_28_fu_355_p2 <= (reg_187 xor P_14_read);
    xor_ln57_29_fu_367_p2 <= (reg_187 xor P_15_read);
    xor_ln57_2_fu_217_p2 <= (xor_ln57_reg_407 xor xor_ln57_16_fu_211_p2);
    xor_ln57_30_fu_373_p2 <= (xor_ln57_29_fu_367_p2 xor xor_ln57_13_reg_485);
    xor_ln57_3_fu_229_p2 <= (xor_ln57_1_reg_413 xor xor_ln57_17_fu_223_p2);
    xor_ln57_4_fu_241_p2 <= (xor_ln57_2_reg_419 xor xor_ln57_18_fu_235_p2);
    xor_ln57_5_fu_253_p2 <= (xor_ln57_3_reg_425 xor xor_ln57_19_fu_247_p2);
    xor_ln57_6_fu_265_p2 <= (xor_ln57_4_reg_431 xor xor_ln57_20_fu_259_p2);
    xor_ln57_7_fu_277_p2 <= (xor_ln57_5_reg_437 xor xor_ln57_21_fu_271_p2);
    xor_ln57_8_fu_289_p2 <= (xor_ln57_6_reg_443 xor xor_ln57_22_fu_283_p2);
    xor_ln57_9_fu_301_p2 <= (xor_ln57_7_reg_449 xor xor_ln57_23_fu_295_p2);
    xor_ln57_fu_191_p2 <= (left_read xor P_0_read);
    xor_ln64_1_fu_379_p2 <= (reg_187 xor P_16_read);
    xor_ln64_fu_385_p2 <= (xor_ln64_1_fu_379_p2 xor xor_ln57_14_reg_491);
    xor_ln65_fu_390_p2 <= (xor_ln57_30_reg_497 xor P_17_read);
end behav;
