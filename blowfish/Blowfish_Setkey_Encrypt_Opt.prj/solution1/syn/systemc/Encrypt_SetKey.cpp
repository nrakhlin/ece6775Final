// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Encrypt_SetKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Encrypt_SetKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Encrypt_SetKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state1 = "1";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state6 = "1000";
const bool Encrypt_SetKey::ap_const_boolean_1 = true;
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1 = "1";
const bool Encrypt_SetKey::ap_const_boolean_0 = false;
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2 = "10";
const sc_lv<1> Encrypt_SetKey::ap_const_lv1_0 = "0";
const sc_lv<1> Encrypt_SetKey::ap_const_lv1_1 = "1";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_0 = "00000";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_1 = "1";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_2 = "10";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_3 = "11";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_4 = "100";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_5 = "101";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_6 = "110";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_7 = "111";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_8 = "1000";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_9 = "1001";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_A = "1010";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_B = "1011";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_C = "1100";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_D = "1101";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_E = "1110";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_10 = "10000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_3 = "11";

Encrypt_SetKey::Encrypt_SetKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_feistel_fu_297 = new feistel("grp_feistel_fu_297");
    grp_feistel_fu_297->ap_clk(ap_clk);
    grp_feistel_fu_297->ap_rst(ap_rst);
    grp_feistel_fu_297->ap_start(grp_feistel_fu_297_ap_start);
    grp_feistel_fu_297->ap_done(grp_feistel_fu_297_ap_done);
    grp_feistel_fu_297->ap_idle(grp_feistel_fu_297_ap_idle);
    grp_feistel_fu_297->ap_ready(grp_feistel_fu_297_ap_ready);
    grp_feistel_fu_297->x(grp_feistel_fu_297_x);
    grp_feistel_fu_297->S_0_address0(grp_feistel_fu_297_S_0_address0);
    grp_feistel_fu_297->S_0_ce0(grp_feistel_fu_297_S_0_ce0);
    grp_feistel_fu_297->S_0_q0(S_0_q0);
    grp_feistel_fu_297->S_1_address0(grp_feistel_fu_297_S_1_address0);
    grp_feistel_fu_297->S_1_ce0(grp_feistel_fu_297_S_1_ce0);
    grp_feistel_fu_297->S_1_q0(S_1_q0);
    grp_feistel_fu_297->S_2_address0(grp_feistel_fu_297_S_2_address0);
    grp_feistel_fu_297->S_2_ce0(grp_feistel_fu_297_S_2_ce0);
    grp_feistel_fu_297->S_2_q0(S_2_q0);
    grp_feistel_fu_297->S_3_address0(grp_feistel_fu_297_S_3_address0);
    grp_feistel_fu_297->S_3_ce0(grp_feistel_fu_297_S_3_ce0);
    grp_feistel_fu_297->S_3_q0(S_3_q0);
    grp_feistel_fu_297->ap_return(grp_feistel_fu_297_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_0_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_0_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_1_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_1_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_2_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_2_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_3_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_297_S_3_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp0_stage1_iter1);

    SC_METHOD(thread_ap_condition_317);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln54_fu_310_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_condition_406);
    sensitive << ( ap_phi_mux_i_0_phi_fu_252_p4 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln54_fu_310_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_252_p4);
    sensitive << ( i_0_reg_248 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( i_reg_460 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_p_tmp_phi_fu_231_p4);
    sensitive << ( p_tmp_reg_228 );
    sensitive << ( icmp_ln54_reg_456_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( localRight_fu_329_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln63_fu_339_p2 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln62_fu_334_p2 );

    SC_METHOD(thread_grp_feistel_fu_297_ap_start);
    sensitive << ( grp_feistel_fu_297_ap_start_reg );

    SC_METHOD(thread_grp_feistel_fu_297_x);
    sensitive << ( icmp_ln54_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_phi_mux_p_tmp_phi_fu_231_p4 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_phi_reg_pp0_iter0_phi_ln55_reg_260 );

    SC_METHOD(thread_i_fu_316_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_252_p4 );

    SC_METHOD(thread_icmp_ln54_fu_310_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_252_p4 );

    SC_METHOD(thread_localLeft_fu_322_p2);
    sensitive << ( ap_phi_mux_p_tmp_phi_fu_231_p4 );
    sensitive << ( ap_phi_reg_pp0_iter0_phi_ln55_reg_260 );

    SC_METHOD(thread_localRight_fu_329_p2);
    sensitive << ( p_b_read_assign_reg_238 );
    sensitive << ( tmp_2_reg_471 );

    SC_METHOD(thread_xor_ln62_fu_334_p2);
    sensitive << ( P_16_read );
    sensitive << ( p_tmp_reg_228 );

    SC_METHOD(thread_xor_ln63_fu_339_p2);
    sensitive << ( P_17_read );
    sensitive << ( p_b_read_assign_reg_238 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln54_fu_310_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    grp_feistel_fu_297_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Encrypt_SetKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, left_read, "(port)left_read");
    sc_trace(mVcdFile, right_read, "(port)right_read");
    sc_trace(mVcdFile, P_0_read, "(port)P_0_read");
    sc_trace(mVcdFile, P_1_read, "(port)P_1_read");
    sc_trace(mVcdFile, P_2_read, "(port)P_2_read");
    sc_trace(mVcdFile, P_3_read, "(port)P_3_read");
    sc_trace(mVcdFile, P_4_read, "(port)P_4_read");
    sc_trace(mVcdFile, P_5_read, "(port)P_5_read");
    sc_trace(mVcdFile, P_6_read, "(port)P_6_read");
    sc_trace(mVcdFile, P_7_read, "(port)P_7_read");
    sc_trace(mVcdFile, P_8_read, "(port)P_8_read");
    sc_trace(mVcdFile, P_9_read, "(port)P_9_read");
    sc_trace(mVcdFile, P_10_read, "(port)P_10_read");
    sc_trace(mVcdFile, P_11_read, "(port)P_11_read");
    sc_trace(mVcdFile, P_12_read, "(port)P_12_read");
    sc_trace(mVcdFile, P_13_read, "(port)P_13_read");
    sc_trace(mVcdFile, P_14_read, "(port)P_14_read");
    sc_trace(mVcdFile, P_15_read, "(port)P_15_read");
    sc_trace(mVcdFile, P_16_read, "(port)P_16_read");
    sc_trace(mVcdFile, P_17_read, "(port)P_17_read");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_tmp_reg_228, "p_tmp_reg_228");
    sc_trace(mVcdFile, p_b_read_assign_reg_238, "p_b_read_assign_reg_238");
    sc_trace(mVcdFile, i_0_reg_248, "i_0_reg_248");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln54_fu_310_p2, "icmp_ln54_fu_310_p2");
    sc_trace(mVcdFile, icmp_ln54_reg_456, "icmp_ln54_reg_456");
    sc_trace(mVcdFile, icmp_ln54_reg_456_pp0_iter1_reg, "icmp_ln54_reg_456_pp0_iter1_reg");
    sc_trace(mVcdFile, i_fu_316_p2, "i_fu_316_p2");
    sc_trace(mVcdFile, i_reg_460, "i_reg_460");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, localLeft_fu_322_p2, "localLeft_fu_322_p2");
    sc_trace(mVcdFile, localLeft_reg_465, "localLeft_reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage1_iter1, "ap_block_state5_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_return, "grp_feistel_fu_297_ap_return");
    sc_trace(mVcdFile, tmp_2_reg_471, "tmp_2_reg_471");
    sc_trace(mVcdFile, localRight_fu_329_p2, "localRight_fu_329_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_start, "grp_feistel_fu_297_ap_start");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_done, "grp_feistel_fu_297_ap_done");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_idle, "grp_feistel_fu_297_ap_idle");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_ready, "grp_feistel_fu_297_ap_ready");
    sc_trace(mVcdFile, grp_feistel_fu_297_x, "grp_feistel_fu_297_x");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_0_address0, "grp_feistel_fu_297_S_0_address0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_0_ce0, "grp_feistel_fu_297_S_0_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_1_address0, "grp_feistel_fu_297_S_1_address0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_1_ce0, "grp_feistel_fu_297_S_1_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_2_address0, "grp_feistel_fu_297_S_2_address0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_2_ce0, "grp_feistel_fu_297_S_2_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_3_address0, "grp_feistel_fu_297_S_3_address0");
    sc_trace(mVcdFile, grp_feistel_fu_297_S_3_ce0, "grp_feistel_fu_297_S_3_ce0");
    sc_trace(mVcdFile, ap_phi_mux_p_tmp_phi_fu_231_p4, "ap_phi_mux_p_tmp_phi_fu_231_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_252_p4, "ap_phi_mux_i_0_phi_fu_252_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_phi_ln55_reg_260, "ap_phi_reg_pp0_iter0_phi_ln55_reg_260");
    sc_trace(mVcdFile, grp_feistel_fu_297_ap_start_reg, "grp_feistel_fu_297_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, xor_ln63_fu_339_p2, "xor_ln63_fu_339_p2");
    sc_trace(mVcdFile, xor_ln62_fu_334_p2, "xor_ln62_fu_334_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_406, "ap_condition_406");
    sc_trace(mVcdFile, ap_condition_317, "ap_condition_317");
#endif

    }
}

Encrypt_SetKey::~Encrypt_SetKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_feistel_fu_297;
}

void Encrypt_SetKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_317.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_252_p4.read())) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_0_read.read();
        } else if (esl_seteq<1,1,1>(ap_condition_406.read(), ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_15_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_E)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_14_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_D)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_13_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_C)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_12_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_B)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_11_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_A)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_10_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_9)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_9_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_8)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_8_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_7)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_7_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_6)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_6_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_5)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_5_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_4)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_4_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_3)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_3_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_2)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_2_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_1)) {
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 = P_1_read.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_feistel_fu_297_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
             esl_seteq<1,1,1>(icmp_ln54_fu_310_p2.read(), ap_const_lv1_0))) {
            grp_feistel_fu_297_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_feistel_fu_297_ap_ready.read())) {
            grp_feistel_fu_297_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln54_reg_456.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_reg_248 = i_reg_460.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_248 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_reg_456_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        p_b_read_assign_reg_238 = localLeft_reg_465.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_b_read_assign_reg_238 = right_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_reg_456_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        p_tmp_reg_228 = localRight_fu_329_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_tmp_reg_228 = left_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_460 = i_fu_316_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln54_reg_456 = icmp_ln54_fu_310_p2.read();
        icmp_ln54_reg_456_pp0_iter1_reg = icmp_ln54_reg_456.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln54_reg_456.read(), ap_const_lv1_0))) {
        localLeft_reg_465 = localLeft_fu_322_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln54_reg_456.read(), ap_const_lv1_0))) {
        tmp_2_reg_471 = grp_feistel_fu_297_ap_return.read();
    }
}

void Encrypt_SetKey::thread_S_0_address0() {
    S_0_address0 = grp_feistel_fu_297_S_0_address0.read();
}

void Encrypt_SetKey::thread_S_0_ce0() {
    S_0_ce0 = grp_feistel_fu_297_S_0_ce0.read();
}

void Encrypt_SetKey::thread_S_1_address0() {
    S_1_address0 = grp_feistel_fu_297_S_1_address0.read();
}

void Encrypt_SetKey::thread_S_1_ce0() {
    S_1_ce0 = grp_feistel_fu_297_S_1_ce0.read();
}

void Encrypt_SetKey::thread_S_2_address0() {
    S_2_address0 = grp_feistel_fu_297_S_2_address0.read();
}

void Encrypt_SetKey::thread_S_2_ce0() {
    S_2_ce0 = grp_feistel_fu_297_S_2_ce0.read();
}

void Encrypt_SetKey::thread_S_3_address0() {
    S_3_address0 = grp_feistel_fu_297_S_3_address0.read();
}

void Encrypt_SetKey::thread_S_3_ce0() {
    S_3_ce0 = grp_feistel_fu_297_S_3_ce0.read();
}

void Encrypt_SetKey::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Encrypt_SetKey::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void Encrypt_SetKey::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_block_state5_pp0_stage1_iter1() {
    ap_block_state5_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Encrypt_SetKey::thread_ap_condition_317() {
    ap_condition_317 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_310_p2.read(), ap_const_lv1_0));
}

void Encrypt_SetKey::thread_ap_condition_406() {
    ap_condition_406 = (!esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_252_p4.read()) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_1) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_2) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_3) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_4) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_5) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_6) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_7) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_8) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_9) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_A) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_B) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_C) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_D) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_252_p4.read(), ap_const_lv5_E));
}

void Encrypt_SetKey::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln54_fu_310_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Encrypt_SetKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_phi_mux_i_0_phi_fu_252_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_reg_456.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_252_p4 = i_reg_460.read();
    } else {
        ap_phi_mux_i_0_phi_fu_252_p4 = i_0_reg_248.read();
    }
}

void Encrypt_SetKey::thread_ap_phi_mux_p_tmp_phi_fu_231_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_reg_456_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        ap_phi_mux_p_tmp_phi_fu_231_p4 = localRight_fu_329_p2.read();
    } else {
        ap_phi_mux_p_tmp_phi_fu_231_p4 = p_tmp_reg_228.read();
    }
}

void Encrypt_SetKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_return_0() {
    ap_return_0 = xor_ln63_fu_339_p2.read();
}

void Encrypt_SetKey::thread_ap_return_1() {
    ap_return_1 = xor_ln62_fu_334_p2.read();
}

void Encrypt_SetKey::thread_grp_feistel_fu_297_ap_start() {
    grp_feistel_fu_297_ap_start = grp_feistel_fu_297_ap_start_reg.read();
}

void Encrypt_SetKey::thread_grp_feistel_fu_297_x() {
    grp_feistel_fu_297_x = (ap_phi_reg_pp0_iter0_phi_ln55_reg_260.read() ^ ap_phi_mux_p_tmp_phi_fu_231_p4.read());
}

void Encrypt_SetKey::thread_i_fu_316_p2() {
    i_fu_316_p2 = (!ap_phi_mux_i_0_phi_fu_252_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_0_phi_fu_252_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Encrypt_SetKey::thread_icmp_ln54_fu_310_p2() {
    icmp_ln54_fu_310_p2 = (!ap_phi_mux_i_0_phi_fu_252_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_phi_fu_252_p4.read() == ap_const_lv5_10);
}

void Encrypt_SetKey::thread_localLeft_fu_322_p2() {
    localLeft_fu_322_p2 = (ap_phi_reg_pp0_iter0_phi_ln55_reg_260.read() ^ ap_phi_mux_p_tmp_phi_fu_231_p4.read());
}

void Encrypt_SetKey::thread_localRight_fu_329_p2() {
    localRight_fu_329_p2 = (tmp_2_reg_471.read() ^ p_b_read_assign_reg_238.read());
}

void Encrypt_SetKey::thread_xor_ln62_fu_334_p2() {
    xor_ln62_fu_334_p2 = (p_tmp_reg_228.read() ^ P_16_read.read());
}

void Encrypt_SetKey::thread_xor_ln63_fu_339_p2() {
    xor_ln63_fu_339_p2 = (p_b_read_assign_reg_238.read() ^ P_17_read.read());
}

void Encrypt_SetKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln54_fu_310_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln54_fu_310_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

