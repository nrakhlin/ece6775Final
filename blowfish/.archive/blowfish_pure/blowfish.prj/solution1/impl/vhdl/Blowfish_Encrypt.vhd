-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce0 : OUT STD_LOGIC;
    Blowfish_pary_s_we0 : OUT STD_LOGIC;
    Blowfish_pary_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce1 : OUT STD_LOGIC;
    Blowfish_pary_s_we1 : OUT STD_LOGIC;
    Blowfish_pary_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
    Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
    Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Blowfish_Encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_Encrypt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.799000,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=308,HLS_SYN_LUT=560,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_547 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln119_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln118_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_load_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal dst_load_1_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_addr_2_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_addr_3_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_load_2_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dst_load_3_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_addr_4_reg_598 : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_addr_5_reg_603 : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_load_4_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dst_load_5_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_addr_6_reg_618 : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_addr_7_reg_623 : STD_LOGIC_VECTOR (2 downto 0);
    signal left_fu_298_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal right_fu_306_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln231_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln232_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln290_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal xor_ln233_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln7_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln143_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal pary_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pary_s_ce0 : STD_LOGIC;
    signal pary_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal temp_2_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_new_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln232_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln290_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_428_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_452_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln139_fu_497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln232_3_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln231_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln232_2_fu_359_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln231_1_fu_383_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln281_1_fu_387_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln281_fu_377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_fu_393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_403_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln232_1_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln290_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_1_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component Blowfish_Encrypt_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pary_s_U : component Blowfish_Encrypt_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pary_s_address0,
        ce0 => pary_s_ce0,
        q0 => pary_s_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i_reg_270 <= i_1_reg_641;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_270 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_239 <= i_reg_547;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_239 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    left_new_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                left_new_reg_260 <= temp_reg_656;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                left_new_reg_260 <= right_fu_306_p5;
            end if; 
        end if;
    end process;

    temp_2_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                temp_2_reg_250 <= xor_ln233_fu_480_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_2_reg_250 <= left_fu_298_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln290_reg_676 <= add_ln290_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                c_reg_661 <= xor_ln281_fu_377_p2(15 downto 8);
                temp_reg_656 <= temp_fu_367_p2;
                trunc_ln232_reg_651 <= trunc_ln232_fu_355_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dst_load_1_reg_573 <= dst_q1;
                dst_load_reg_568 <= dst_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dst_load_2_reg_588 <= dst_q1;
                dst_load_3_reg_593 <= dst_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                dst_load_4_reg_608 <= dst_q1;
                dst_load_5_reg_613 <= dst_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_1_reg_641 <= i_1_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_547 <= i_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln143_reg_701 <= trunc_ln143_fu_534_p1;
                trunc_ln7_reg_696 <= temp_2_reg_250(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln119_reg_552(3 downto 0) <= zext_ln119_fu_293_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln119_reg_552(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln118_fu_281_p2, ap_CS_fsm_state8, icmp_ln231_fu_316_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln118_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln231_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Blowfish_pary_s_address0 <= ap_const_lv5_0;
    Blowfish_pary_s_address1 <= ap_const_lv5_0;
    Blowfish_pary_s_ce0 <= ap_const_logic_0;
    Blowfish_pary_s_ce1 <= ap_const_logic_0;
    Blowfish_pary_s_d0 <= ap_const_lv32_0;
    Blowfish_pary_s_d1 <= ap_const_lv32_0;
    Blowfish_pary_s_we0 <= ap_const_logic_0;
    Blowfish_pary_s_we1 <= ap_const_logic_0;

    Blowfish_sbox_s_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln290_fu_423_p1, tmp_1_fu_452_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Blowfish_sbox_s_address0 <= tmp_1_fu_452_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Blowfish_sbox_s_address0 <= zext_ln290_fu_423_p1(10 - 1 downto 0);
        else 
            Blowfish_sbox_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_fu_428_p3, tmp_2_fu_460_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Blowfish_sbox_s_address1 <= tmp_2_fu_460_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Blowfish_sbox_s_address1 <= tmp_fu_428_p3(10 - 1 downto 0);
        else 
            Blowfish_sbox_s_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Blowfish_sbox_s_ce0 <= ap_const_logic_1;
        else 
            Blowfish_sbox_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Blowfish_sbox_s_ce1 <= ap_const_logic_1;
        else 
            Blowfish_sbox_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_393_p4 <= temp_fu_367_p2(31 downto 24);
    add_ln290_1_fu_474_p2 <= std_logic_vector(unsigned(Blowfish_sbox_s_q1) + unsigned(xor_ln290_fu_469_p2));
    add_ln290_fu_446_p2 <= std_logic_vector(unsigned(Blowfish_sbox_s_q0) + unsigned(Blowfish_sbox_s_q1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_403_p4 <= xor_ln281_1_fu_387_p2(23 downto 16);
    d_fu_441_p2 <= (trunc_ln232_reg_651 xor trunc_ln232_1_fu_437_p1);
    dst_addr_2_reg_578 <= ap_const_lv64_2(3 - 1 downto 0);
    dst_addr_3_reg_583 <= ap_const_lv64_3(3 - 1 downto 0);
    dst_addr_4_reg_598 <= ap_const_lv64_4(3 - 1 downto 0);
    dst_addr_5_reg_603 <= ap_const_lv64_5(3 - 1 downto 0);
    dst_addr_6_reg_618 <= ap_const_lv64_6(3 - 1 downto 0);
    dst_addr_7_reg_623 <= ap_const_lv64_7(3 - 1 downto 0);

    dst_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln119_reg_552, ap_CS_fsm_state4, dst_addr_3_reg_583, ap_CS_fsm_state5, dst_addr_5_reg_603, ap_CS_fsm_state6, dst_addr_7_reg_623, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_address0 <= dst_addr_7_reg_623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address0 <= dst_addr_5_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_address0 <= dst_addr_3_reg_583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_address0 <= zext_ln119_reg_552(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            dst_address0 <= "XXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, dst_addr_2_reg_578, ap_CS_fsm_state5, dst_addr_4_reg_598, ap_CS_fsm_state6, dst_addr_6_reg_618, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_address1 <= dst_addr_6_reg_618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address1 <= dst_addr_4_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_address1 <= dst_addr_2_reg_578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            dst_address1 <= "XXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(src_q0, ap_CS_fsm_state8, ap_CS_fsm_state13, trunc_ln143_reg_701, ap_CS_fsm_state3, temp_2_reg_250, left_new_reg_260, ap_CS_fsm_state12, trunc_ln139_fu_497_p1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_d0 <= trunc_ln143_reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_d0 <= temp_2_reg_250(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_d0 <= trunc_ln139_fu_497_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_d0 <= left_new_reg_260(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_state8, trunc_ln7_reg_696, ap_CS_fsm_state13, temp_2_reg_250, left_new_reg_260, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_d1 <= trunc_ln7_reg_696;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_d1 <= temp_2_reg_250(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_d1 <= left_new_reg_260(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_d1 <= left_new_reg_260(31 downto 24);
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln231_fu_316_p2, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln231_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_state8, icmp_ln231_fu_316_p2, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln231_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_322_p2 <= std_logic_vector(unsigned(i_0_i_reg_270) + unsigned(ap_const_lv5_1));
    i_fu_287_p2 <= std_logic_vector(unsigned(i_0_reg_239) + unsigned(ap_const_lv4_1));
    icmp_ln118_fu_281_p2 <= "1" when (i_0_reg_239 = ap_const_lv4_8) else "0";
    icmp_ln231_fu_316_p2 <= "1" when (i_0_i_reg_270 = ap_const_lv5_10) else "0";
    left_fu_298_p5 <= (((dst_load_reg_568 & dst_load_1_reg_573) & dst_load_2_reg_588) & dst_load_3_reg_593);
    pary_s_address0 <= zext_ln232_fu_328_p1(5 - 1 downto 0);

    pary_s_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pary_s_ce0 <= ap_const_logic_1;
        else 
            pary_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    right_fu_306_p5 <= (((dst_load_4_reg_608 & dst_load_5_reg_613) & dst_q1) & dst_q0);
    src_address0 <= zext_ln119_fu_293_p1(3 - 1 downto 0);

    src_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_367_p2 <= (temp_2_reg_250 xor pary_s_q0);
    tmp_1_fu_452_p3 <= (ap_const_lv56_2 & c_reg_661);
    tmp_2_fu_460_p3 <= (ap_const_lv56_3 & d_fu_441_p2);
    tmp_fu_428_p3 <= (ap_const_lv56_1 & b_fu_403_p4);
    trunc_ln139_fu_497_p1 <= left_new_reg_260(8 - 1 downto 0);
    trunc_ln143_fu_534_p1 <= temp_2_reg_250(8 - 1 downto 0);
    trunc_ln231_1_fu_383_p1 <= temp_2_reg_250(24 - 1 downto 0);
    trunc_ln231_fu_373_p1 <= temp_2_reg_250(16 - 1 downto 0);
    trunc_ln232_1_fu_437_p1 <= temp_2_reg_250(8 - 1 downto 0);
    trunc_ln232_2_fu_359_p1 <= pary_s_q0(24 - 1 downto 0);
    trunc_ln232_3_fu_363_p1 <= pary_s_q0(16 - 1 downto 0);
    trunc_ln232_fu_355_p1 <= pary_s_q0(8 - 1 downto 0);
    xor_ln233_fu_480_p2 <= (left_new_reg_260 xor add_ln290_1_fu_474_p2);
    xor_ln281_1_fu_387_p2 <= (trunc_ln232_2_fu_359_p1 xor trunc_ln231_1_fu_383_p1);
    xor_ln281_fu_377_p2 <= (trunc_ln232_3_fu_363_p1 xor trunc_ln231_fu_373_p1);
    xor_ln290_fu_469_p2 <= (add_ln290_reg_676 xor Blowfish_sbox_s_q0);
    zext_ln119_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_239),64));
    zext_ln232_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_270),64));
    zext_ln290_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_393_p4),64));
end behav;
