// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state1 = "1";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state2 = "10";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state3 = "100";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> Blowfish_Encrypt::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_1 = "1";
const sc_lv<1> Blowfish_Encrypt::ap_const_lv1_0 = "0";
const sc_lv<1> Blowfish_Encrypt::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_5 = "101";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_6 = "110";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_7 = "111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_A = "1010";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_C = "1100";
const sc_lv<4> Blowfish_Encrypt::ap_const_lv4_0 = "0000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_2 = "10";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_0 = "00000";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_7 = "111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_B = "1011";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_D = "1101";
const sc_lv<4> Blowfish_Encrypt::ap_const_lv4_8 = "1000";
const sc_lv<4> Blowfish_Encrypt::ap_const_lv4_1 = "1";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_1 = "1";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_1F = "11111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_F = "1111";
const sc_lv<56> Blowfish_Encrypt::ap_const_lv56_1 = "1";
const sc_lv<56> Blowfish_Encrypt::ap_const_lv56_2 = "10";
const sc_lv<56> Blowfish_Encrypt::ap_const_lv56_3 = "11";
const bool Blowfish_Encrypt::ap_const_boolean_1 = true;

Blowfish_Encrypt::Blowfish_Encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pary_s_U = new Blowfish_Encrypt_bkb("pary_s_U");
    pary_s_U->clk(ap_clk);
    pary_s_U->reset(ap_rst);
    pary_s_U->address0(pary_s_address0);
    pary_s_U->ce0(pary_s_ce0);
    pary_s_U->q0(pary_s_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Blowfish_pary_s_address0);

    SC_METHOD(thread_Blowfish_pary_s_address1);

    SC_METHOD(thread_Blowfish_pary_s_ce0);

    SC_METHOD(thread_Blowfish_pary_s_ce1);

    SC_METHOD(thread_Blowfish_pary_s_d0);

    SC_METHOD(thread_Blowfish_pary_s_d1);

    SC_METHOD(thread_Blowfish_pary_s_we0);

    SC_METHOD(thread_Blowfish_pary_s_we1);

    SC_METHOD(thread_Blowfish_sbox_s_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln290_fu_423_p1 );
    sensitive << ( tmp_1_fu_452_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_fu_428_p3 );
    sensitive << ( tmp_2_fu_460_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_Blowfish_sbox_s_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_a_fu_393_p4);
    sensitive << ( temp_fu_367_p2 );

    SC_METHOD(thread_add_ln290_1_fu_474_p2);
    sensitive << ( Blowfish_sbox_s_q1 );
    sensitive << ( xor_ln290_fu_469_p2 );

    SC_METHOD(thread_add_ln290_fu_446_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( Blowfish_sbox_s_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_b_fu_403_p4);
    sensitive << ( xor_ln281_1_fu_387_p2 );

    SC_METHOD(thread_d_fu_441_p2);
    sensitive << ( trunc_ln232_reg_651 );
    sensitive << ( trunc_ln232_1_fu_437_p1 );

    SC_METHOD(thread_dst_addr_2_reg_578);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_dst_addr_3_reg_583);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_dst_addr_4_reg_598);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_dst_addr_5_reg_603);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_dst_addr_6_reg_618);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_dst_addr_7_reg_623);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_dst_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln119_reg_552 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dst_addr_3_reg_583 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_addr_5_reg_603 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( dst_addr_7_reg_623 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dst_addr_2_reg_578 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_addr_4_reg_598 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( dst_addr_6_reg_618 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_d0);
    sensitive << ( src_q0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( trunc_ln143_reg_701 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( temp_2_reg_250 );
    sensitive << ( left_new_reg_260 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( trunc_ln139_fu_497_p1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_d1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( trunc_ln7_reg_696 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( temp_2_reg_250 );
    sensitive << ( left_new_reg_260 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln231_fu_316_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dst_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln231_fu_316_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_i_1_fu_322_p2);
    sensitive << ( i_0_i_reg_270 );

    SC_METHOD(thread_i_fu_287_p2);
    sensitive << ( i_0_reg_239 );

    SC_METHOD(thread_icmp_ln118_fu_281_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_239 );

    SC_METHOD(thread_icmp_ln231_fu_316_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_0_i_reg_270 );

    SC_METHOD(thread_left_fu_298_p5);
    sensitive << ( dst_load_reg_568 );
    sensitive << ( dst_load_1_reg_573 );
    sensitive << ( dst_load_2_reg_588 );
    sensitive << ( dst_load_3_reg_593 );

    SC_METHOD(thread_pary_s_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln232_fu_328_p1 );

    SC_METHOD(thread_pary_s_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_right_fu_306_p5);
    sensitive << ( dst_q0 );
    sensitive << ( dst_q1 );
    sensitive << ( dst_load_4_reg_608 );
    sensitive << ( dst_load_5_reg_613 );

    SC_METHOD(thread_src_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln119_fu_293_p1 );

    SC_METHOD(thread_src_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_temp_fu_367_p2);
    sensitive << ( pary_s_q0 );
    sensitive << ( temp_2_reg_250 );

    SC_METHOD(thread_tmp_1_fu_452_p3);
    sensitive << ( c_reg_661 );

    SC_METHOD(thread_tmp_2_fu_460_p3);
    sensitive << ( d_fu_441_p2 );

    SC_METHOD(thread_tmp_fu_428_p3);
    sensitive << ( b_fu_403_p4 );

    SC_METHOD(thread_trunc_ln139_fu_497_p1);
    sensitive << ( left_new_reg_260 );

    SC_METHOD(thread_trunc_ln143_fu_534_p1);
    sensitive << ( temp_2_reg_250 );

    SC_METHOD(thread_trunc_ln231_1_fu_383_p1);
    sensitive << ( temp_2_reg_250 );

    SC_METHOD(thread_trunc_ln231_fu_373_p1);
    sensitive << ( temp_2_reg_250 );

    SC_METHOD(thread_trunc_ln232_1_fu_437_p1);
    sensitive << ( temp_2_reg_250 );

    SC_METHOD(thread_trunc_ln232_2_fu_359_p1);
    sensitive << ( pary_s_q0 );

    SC_METHOD(thread_trunc_ln232_3_fu_363_p1);
    sensitive << ( pary_s_q0 );

    SC_METHOD(thread_trunc_ln232_fu_355_p1);
    sensitive << ( pary_s_q0 );

    SC_METHOD(thread_xor_ln233_fu_480_p2);
    sensitive << ( left_new_reg_260 );
    sensitive << ( add_ln290_1_fu_474_p2 );

    SC_METHOD(thread_xor_ln281_1_fu_387_p2);
    sensitive << ( trunc_ln232_2_fu_359_p1 );
    sensitive << ( trunc_ln231_1_fu_383_p1 );

    SC_METHOD(thread_xor_ln281_fu_377_p2);
    sensitive << ( trunc_ln232_3_fu_363_p1 );
    sensitive << ( trunc_ln231_fu_373_p1 );

    SC_METHOD(thread_xor_ln290_fu_469_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( add_ln290_reg_676 );

    SC_METHOD(thread_zext_ln119_fu_293_p1);
    sensitive << ( i_0_reg_239 );

    SC_METHOD(thread_zext_ln232_fu_328_p1);
    sensitive << ( i_0_i_reg_270 );

    SC_METHOD(thread_zext_ln290_fu_423_p1);
    sensitive << ( a_fu_393_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln118_fu_281_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln231_fu_316_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Blowfish_pary_s_address0, "(port)Blowfish_pary_s_address0");
    sc_trace(mVcdFile, Blowfish_pary_s_ce0, "(port)Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, Blowfish_pary_s_we0, "(port)Blowfish_pary_s_we0");
    sc_trace(mVcdFile, Blowfish_pary_s_d0, "(port)Blowfish_pary_s_d0");
    sc_trace(mVcdFile, Blowfish_pary_s_q0, "(port)Blowfish_pary_s_q0");
    sc_trace(mVcdFile, Blowfish_pary_s_address1, "(port)Blowfish_pary_s_address1");
    sc_trace(mVcdFile, Blowfish_pary_s_ce1, "(port)Blowfish_pary_s_ce1");
    sc_trace(mVcdFile, Blowfish_pary_s_we1, "(port)Blowfish_pary_s_we1");
    sc_trace(mVcdFile, Blowfish_pary_s_d1, "(port)Blowfish_pary_s_d1");
    sc_trace(mVcdFile, Blowfish_pary_s_q1, "(port)Blowfish_pary_s_q1");
    sc_trace(mVcdFile, Blowfish_sbox_s_address0, "(port)Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce0, "(port)Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, Blowfish_sbox_s_q0, "(port)Blowfish_sbox_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address1, "(port)Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce1, "(port)Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, Blowfish_sbox_s_q1, "(port)Blowfish_sbox_s_q1");
    sc_trace(mVcdFile, dst_address0, "(port)dst_address0");
    sc_trace(mVcdFile, dst_ce0, "(port)dst_ce0");
    sc_trace(mVcdFile, dst_we0, "(port)dst_we0");
    sc_trace(mVcdFile, dst_d0, "(port)dst_d0");
    sc_trace(mVcdFile, dst_q0, "(port)dst_q0");
    sc_trace(mVcdFile, dst_address1, "(port)dst_address1");
    sc_trace(mVcdFile, dst_ce1, "(port)dst_ce1");
    sc_trace(mVcdFile, dst_we1, "(port)dst_we1");
    sc_trace(mVcdFile, dst_d1, "(port)dst_d1");
    sc_trace(mVcdFile, dst_q1, "(port)dst_q1");
    sc_trace(mVcdFile, src_address0, "(port)src_address0");
    sc_trace(mVcdFile, src_ce0, "(port)src_ce0");
    sc_trace(mVcdFile, src_q0, "(port)src_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_287_p2, "i_fu_287_p2");
    sc_trace(mVcdFile, i_reg_547, "i_reg_547");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln119_fu_293_p1, "zext_ln119_fu_293_p1");
    sc_trace(mVcdFile, zext_ln119_reg_552, "zext_ln119_reg_552");
    sc_trace(mVcdFile, icmp_ln118_fu_281_p2, "icmp_ln118_fu_281_p2");
    sc_trace(mVcdFile, dst_load_reg_568, "dst_load_reg_568");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, dst_load_1_reg_573, "dst_load_1_reg_573");
    sc_trace(mVcdFile, dst_addr_2_reg_578, "dst_addr_2_reg_578");
    sc_trace(mVcdFile, dst_addr_3_reg_583, "dst_addr_3_reg_583");
    sc_trace(mVcdFile, dst_load_2_reg_588, "dst_load_2_reg_588");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, dst_load_3_reg_593, "dst_load_3_reg_593");
    sc_trace(mVcdFile, dst_addr_4_reg_598, "dst_addr_4_reg_598");
    sc_trace(mVcdFile, dst_addr_5_reg_603, "dst_addr_5_reg_603");
    sc_trace(mVcdFile, dst_load_4_reg_608, "dst_load_4_reg_608");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, dst_load_5_reg_613, "dst_load_5_reg_613");
    sc_trace(mVcdFile, dst_addr_6_reg_618, "dst_addr_6_reg_618");
    sc_trace(mVcdFile, dst_addr_7_reg_623, "dst_addr_7_reg_623");
    sc_trace(mVcdFile, left_fu_298_p5, "left_fu_298_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, right_fu_306_p5, "right_fu_306_p5");
    sc_trace(mVcdFile, i_1_fu_322_p2, "i_1_fu_322_p2");
    sc_trace(mVcdFile, i_1_reg_641, "i_1_reg_641");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln231_fu_316_p2, "icmp_ln231_fu_316_p2");
    sc_trace(mVcdFile, trunc_ln232_fu_355_p1, "trunc_ln232_fu_355_p1");
    sc_trace(mVcdFile, trunc_ln232_reg_651, "trunc_ln232_reg_651");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, temp_fu_367_p2, "temp_fu_367_p2");
    sc_trace(mVcdFile, temp_reg_656, "temp_reg_656");
    sc_trace(mVcdFile, c_reg_661, "c_reg_661");
    sc_trace(mVcdFile, add_ln290_fu_446_p2, "add_ln290_fu_446_p2");
    sc_trace(mVcdFile, add_ln290_reg_676, "add_ln290_reg_676");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, xor_ln233_fu_480_p2, "xor_ln233_fu_480_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, trunc_ln7_reg_696, "trunc_ln7_reg_696");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, trunc_ln143_fu_534_p1, "trunc_ln143_fu_534_p1");
    sc_trace(mVcdFile, trunc_ln143_reg_701, "trunc_ln143_reg_701");
    sc_trace(mVcdFile, pary_s_address0, "pary_s_address0");
    sc_trace(mVcdFile, pary_s_ce0, "pary_s_ce0");
    sc_trace(mVcdFile, pary_s_q0, "pary_s_q0");
    sc_trace(mVcdFile, i_0_reg_239, "i_0_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, temp_2_reg_250, "temp_2_reg_250");
    sc_trace(mVcdFile, left_new_reg_260, "left_new_reg_260");
    sc_trace(mVcdFile, i_0_i_reg_270, "i_0_i_reg_270");
    sc_trace(mVcdFile, zext_ln232_fu_328_p1, "zext_ln232_fu_328_p1");
    sc_trace(mVcdFile, zext_ln290_fu_423_p1, "zext_ln290_fu_423_p1");
    sc_trace(mVcdFile, tmp_fu_428_p3, "tmp_fu_428_p3");
    sc_trace(mVcdFile, tmp_1_fu_452_p3, "tmp_1_fu_452_p3");
    sc_trace(mVcdFile, tmp_2_fu_460_p3, "tmp_2_fu_460_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, trunc_ln139_fu_497_p1, "trunc_ln139_fu_497_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, trunc_ln232_3_fu_363_p1, "trunc_ln232_3_fu_363_p1");
    sc_trace(mVcdFile, trunc_ln231_fu_373_p1, "trunc_ln231_fu_373_p1");
    sc_trace(mVcdFile, trunc_ln232_2_fu_359_p1, "trunc_ln232_2_fu_359_p1");
    sc_trace(mVcdFile, trunc_ln231_1_fu_383_p1, "trunc_ln231_1_fu_383_p1");
    sc_trace(mVcdFile, xor_ln281_1_fu_387_p2, "xor_ln281_1_fu_387_p2");
    sc_trace(mVcdFile, xor_ln281_fu_377_p2, "xor_ln281_fu_377_p2");
    sc_trace(mVcdFile, a_fu_393_p4, "a_fu_393_p4");
    sc_trace(mVcdFile, b_fu_403_p4, "b_fu_403_p4");
    sc_trace(mVcdFile, trunc_ln232_1_fu_437_p1, "trunc_ln232_1_fu_437_p1");
    sc_trace(mVcdFile, d_fu_441_p2, "d_fu_441_p2");
    sc_trace(mVcdFile, xor_ln290_fu_469_p2, "xor_ln290_fu_469_p2");
    sc_trace(mVcdFile, add_ln290_1_fu_474_p2, "add_ln290_1_fu_474_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Blowfish_Encrypt.hdltvin.dat");
    mHdltvoutHandle.open("Blowfish_Encrypt.hdltvout.dat");
}

Blowfish_Encrypt::~Blowfish_Encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pary_s_U;
}

void Blowfish_Encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_0_i_reg_270 = i_1_reg_641.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_0_i_reg_270 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_239 = i_reg_547.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_239 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        left_new_reg_260 = temp_reg_656.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        left_new_reg_260 = right_fu_306_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_2_reg_250 = xor_ln233_fu_480_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_2_reg_250 = left_fu_298_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        add_ln290_reg_676 = add_ln290_fu_446_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        c_reg_661 = xor_ln281_fu_377_p2.read().range(15, 8);
        temp_reg_656 = temp_fu_367_p2.read();
        trunc_ln232_reg_651 = trunc_ln232_fu_355_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_load_1_reg_573 = dst_q1.read();
        dst_load_reg_568 = dst_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_load_2_reg_588 = dst_q1.read();
        dst_load_3_reg_593 = dst_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_load_4_reg_608 = dst_q1.read();
        dst_load_5_reg_613 = dst_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_1_reg_641 = i_1_fu_322_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_547 = i_fu_287_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        trunc_ln143_reg_701 = trunc_ln143_fu_534_p1.read();
        trunc_ln7_reg_696 = temp_2_reg_250.read().range(15, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln118_fu_281_p2.read(), ap_const_lv1_0))) {
        zext_ln119_reg_552 = zext_ln119_fu_293_p1.read();
    }
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_address0() {
    Blowfish_pary_s_address0 = ap_const_lv5_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_address1() {
    Blowfish_pary_s_address1 = ap_const_lv5_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_ce0() {
    Blowfish_pary_s_ce0 = ap_const_logic_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_ce1() {
    Blowfish_pary_s_ce1 = ap_const_logic_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_d0() {
    Blowfish_pary_s_d0 = ap_const_lv32_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_d1() {
    Blowfish_pary_s_d1 = ap_const_lv32_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_we0() {
    Blowfish_pary_s_we0 = ap_const_logic_0;
}

void Blowfish_Encrypt::thread_Blowfish_pary_s_we1() {
    Blowfish_pary_s_we1 = ap_const_logic_0;
}

void Blowfish_Encrypt::thread_Blowfish_sbox_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (tmp_1_fu_452_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (zext_ln290_fu_423_p1.read());
    } else {
        Blowfish_sbox_s_address0 = "XXXXXXXXXX";
    }
}

void Blowfish_Encrypt::thread_Blowfish_sbox_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_2_fu_460_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_fu_428_p3.read());
    } else {
        Blowfish_sbox_s_address1 = "XXXXXXXXXX";
    }
}

void Blowfish_Encrypt::thread_Blowfish_sbox_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        Blowfish_sbox_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_Blowfish_sbox_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        Blowfish_sbox_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_a_fu_393_p4() {
    a_fu_393_p4 = temp_fu_367_p2.read().range(31, 24);
}

void Blowfish_Encrypt::thread_add_ln290_1_fu_474_p2() {
    add_ln290_1_fu_474_p2 = (!Blowfish_sbox_s_q1.read().is_01() || !xor_ln290_fu_469_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q1.read()) + sc_biguint<32>(xor_ln290_fu_469_p2.read()));
}

void Blowfish_Encrypt::thread_add_ln290_fu_446_p2() {
    add_ln290_fu_446_p2 = (!Blowfish_sbox_s_q0.read().is_01() || !Blowfish_sbox_s_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q0.read()) + sc_biguint<32>(Blowfish_sbox_s_q1.read()));
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Blowfish_Encrypt::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_b_fu_403_p4() {
    b_fu_403_p4 = xor_ln281_1_fu_387_p2.read().range(23, 16);
}

void Blowfish_Encrypt::thread_d_fu_441_p2() {
    d_fu_441_p2 = (trunc_ln232_1_fu_437_p1.read() ^ trunc_ln232_reg_651.read());
}

void Blowfish_Encrypt::thread_dst_addr_2_reg_578() {
    dst_addr_2_reg_578 =  (sc_lv<3>) (ap_const_lv64_2);
}

void Blowfish_Encrypt::thread_dst_addr_3_reg_583() {
    dst_addr_3_reg_583 =  (sc_lv<3>) (ap_const_lv64_3);
}

void Blowfish_Encrypt::thread_dst_addr_4_reg_598() {
    dst_addr_4_reg_598 =  (sc_lv<3>) (ap_const_lv64_4);
}

void Blowfish_Encrypt::thread_dst_addr_5_reg_603() {
    dst_addr_5_reg_603 =  (sc_lv<3>) (ap_const_lv64_5);
}

void Blowfish_Encrypt::thread_dst_addr_6_reg_618() {
    dst_addr_6_reg_618 =  (sc_lv<3>) (ap_const_lv64_6);
}

void Blowfish_Encrypt::thread_dst_addr_7_reg_623() {
    dst_addr_7_reg_623 =  (sc_lv<3>) (ap_const_lv64_7);
}

void Blowfish_Encrypt::thread_dst_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_address0 = dst_addr_7_reg_623.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_address0 = dst_addr_5_reg_603.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_address0 = dst_addr_3_reg_583.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dst_address0 =  (sc_lv<3>) (zext_ln119_reg_552.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dst_address0 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Encrypt::thread_dst_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_address1 = dst_addr_6_reg_618.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_address1 = dst_addr_4_reg_598.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_address1 = dst_addr_2_reg_578.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        dst_address1 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Encrypt::thread_dst_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        dst_ce0 = ap_const_logic_1;
    } else {
        dst_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_dst_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        dst_ce1 = ap_const_logic_1;
    } else {
        dst_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_dst_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_d0 = trunc_ln143_reg_701.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_d0 = temp_2_reg_250.read().range(23, 16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_d0 = trunc_ln139_fu_497_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dst_d0 = left_new_reg_260.read().range(23, 16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dst_d0 = src_q0.read();
    } else {
        dst_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Encrypt::thread_dst_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_d1 = trunc_ln7_reg_696.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_d1 = temp_2_reg_250.read().range(31, 24);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_d1 = left_new_reg_260.read().range(15, 8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dst_d1 = left_new_reg_260.read().range(31, 24);
    } else {
        dst_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Encrypt::thread_dst_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln231_fu_316_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        dst_we0 = ap_const_logic_1;
    } else {
        dst_we0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_dst_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln231_fu_316_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        dst_we1 = ap_const_logic_1;
    } else {
        dst_we1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_i_1_fu_322_p2() {
    i_1_fu_322_p2 = (!i_0_i_reg_270.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_270.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Blowfish_Encrypt::thread_i_fu_287_p2() {
    i_fu_287_p2 = (!i_0_reg_239.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_239.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Blowfish_Encrypt::thread_icmp_ln118_fu_281_p2() {
    icmp_ln118_fu_281_p2 = (!i_0_reg_239.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_239.read() == ap_const_lv4_8);
}

void Blowfish_Encrypt::thread_icmp_ln231_fu_316_p2() {
    icmp_ln231_fu_316_p2 = (!i_0_i_reg_270.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_270.read() == ap_const_lv5_10);
}

void Blowfish_Encrypt::thread_left_fu_298_p5() {
    left_fu_298_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(dst_load_reg_568.read(), dst_load_1_reg_573.read()), dst_load_2_reg_588.read()), dst_load_3_reg_593.read());
}

void Blowfish_Encrypt::thread_pary_s_address0() {
    pary_s_address0 =  (sc_lv<5>) (zext_ln232_fu_328_p1.read());
}

void Blowfish_Encrypt::thread_pary_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pary_s_ce0 = ap_const_logic_1;
    } else {
        pary_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_right_fu_306_p5() {
    right_fu_306_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(dst_load_4_reg_608.read(), dst_load_5_reg_613.read()), dst_q1.read()), dst_q0.read());
}

void Blowfish_Encrypt::thread_src_address0() {
    src_address0 =  (sc_lv<3>) (zext_ln119_fu_293_p1.read());
}

void Blowfish_Encrypt::thread_src_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_ce0 = ap_const_logic_1;
    } else {
        src_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_temp_fu_367_p2() {
    temp_fu_367_p2 = (pary_s_q0.read() ^ temp_2_reg_250.read());
}

void Blowfish_Encrypt::thread_tmp_1_fu_452_p3() {
    tmp_1_fu_452_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_661.read());
}

void Blowfish_Encrypt::thread_tmp_2_fu_460_p3() {
    tmp_2_fu_460_p3 = esl_concat<56,8>(ap_const_lv56_3, d_fu_441_p2.read());
}

void Blowfish_Encrypt::thread_tmp_fu_428_p3() {
    tmp_fu_428_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_403_p4.read());
}

void Blowfish_Encrypt::thread_trunc_ln139_fu_497_p1() {
    trunc_ln139_fu_497_p1 = left_new_reg_260.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln143_fu_534_p1() {
    trunc_ln143_fu_534_p1 = temp_2_reg_250.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln231_1_fu_383_p1() {
    trunc_ln231_1_fu_383_p1 = temp_2_reg_250.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln231_fu_373_p1() {
    trunc_ln231_fu_373_p1 = temp_2_reg_250.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln232_1_fu_437_p1() {
    trunc_ln232_1_fu_437_p1 = temp_2_reg_250.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln232_2_fu_359_p1() {
    trunc_ln232_2_fu_359_p1 = pary_s_q0.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln232_3_fu_363_p1() {
    trunc_ln232_3_fu_363_p1 = pary_s_q0.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln232_fu_355_p1() {
    trunc_ln232_fu_355_p1 = pary_s_q0.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_xor_ln233_fu_480_p2() {
    xor_ln233_fu_480_p2 = (left_new_reg_260.read() ^ add_ln290_1_fu_474_p2.read());
}

void Blowfish_Encrypt::thread_xor_ln281_1_fu_387_p2() {
    xor_ln281_1_fu_387_p2 = (trunc_ln232_2_fu_359_p1.read() ^ trunc_ln231_1_fu_383_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln281_fu_377_p2() {
    xor_ln281_fu_377_p2 = (trunc_ln232_3_fu_363_p1.read() ^ trunc_ln231_fu_373_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln290_fu_469_p2() {
    xor_ln290_fu_469_p2 = (Blowfish_sbox_s_q0.read() ^ add_ln290_reg_676.read());
}

void Blowfish_Encrypt::thread_zext_ln119_fu_293_p1() {
    zext_ln119_fu_293_p1 = esl_zext<64,4>(i_0_reg_239.read());
}

void Blowfish_Encrypt::thread_zext_ln232_fu_328_p1() {
    zext_ln232_fu_328_p1 = esl_zext<64,5>(i_0_i_reg_270.read());
}

void Blowfish_Encrypt::thread_zext_ln290_fu_423_p1() {
    zext_ln290_fu_423_p1 = esl_zext<64,8>(a_fu_393_p4.read());
}

void Blowfish_Encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln118_fu_281_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln231_fu_316_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

void Blowfish_Encrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address0\" :  \"" << Blowfish_pary_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce0\" :  \"" << Blowfish_pary_s_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_we0\" :  \"" << Blowfish_pary_s_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_d0\" :  \"" << Blowfish_pary_s_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q0\" :  \"" << Blowfish_pary_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address1\" :  \"" << Blowfish_pary_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce1\" :  \"" << Blowfish_pary_s_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_we1\" :  \"" << Blowfish_pary_s_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_d1\" :  \"" << Blowfish_pary_s_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q1\" :  \"" << Blowfish_pary_s_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address0\" :  \"" << Blowfish_sbox_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce0\" :  \"" << Blowfish_sbox_s_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q0\" :  \"" << Blowfish_sbox_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address1\" :  \"" << Blowfish_sbox_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce1\" :  \"" << Blowfish_sbox_s_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q1\" :  \"" << Blowfish_sbox_s_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_address0\" :  \"" << dst_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_ce0\" :  \"" << dst_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_we0\" :  \"" << dst_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_d0\" :  \"" << dst_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_q0\" :  \"" << dst_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_address1\" :  \"" << dst_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_ce1\" :  \"" << dst_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_we1\" :  \"" << dst_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_d1\" :  \"" << dst_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_q1\" :  \"" << dst_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_address0\" :  \"" << src_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_ce0\" :  \"" << src_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_q0\" :  \"" << src_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

