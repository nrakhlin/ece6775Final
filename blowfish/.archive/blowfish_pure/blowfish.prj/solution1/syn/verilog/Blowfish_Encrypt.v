// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Blowfish_Encrypt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.799000,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=308,HLS_SYN_LUT=560,HLS_VERSION=2019_2}" *)

module Blowfish_Encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0,
        Blowfish_pary_s_we0,
        Blowfish_pary_s_d0,
        Blowfish_pary_s_q0,
        Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1,
        Blowfish_pary_s_we1,
        Blowfish_pary_s_d1,
        Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_q0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        dst_q1,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Blowfish_pary_s_address0;
output   Blowfish_pary_s_ce0;
output   Blowfish_pary_s_we0;
output  [31:0] Blowfish_pary_s_d0;
input  [31:0] Blowfish_pary_s_q0;
output  [4:0] Blowfish_pary_s_address1;
output   Blowfish_pary_s_ce1;
output   Blowfish_pary_s_we1;
output  [31:0] Blowfish_pary_s_d1;
input  [31:0] Blowfish_pary_s_q1;
output  [9:0] Blowfish_sbox_s_address0;
output   Blowfish_sbox_s_ce0;
input  [31:0] Blowfish_sbox_s_q0;
output  [9:0] Blowfish_sbox_s_address1;
output   Blowfish_sbox_s_ce1;
input  [31:0] Blowfish_sbox_s_q1;
output  [2:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
input  [7:0] dst_q0;
output  [2:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
input  [7:0] dst_q1;
output  [2:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] Blowfish_sbox_s_address0;
reg Blowfish_sbox_s_ce0;
reg[9:0] Blowfish_sbox_s_address1;
reg Blowfish_sbox_s_ce1;
reg[2:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[2:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg src_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_287_p2;
reg   [3:0] i_reg_547;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln119_fu_293_p1;
reg   [63:0] zext_ln119_reg_552;
wire   [0:0] icmp_ln118_fu_281_p2;
reg   [7:0] dst_load_reg_568;
wire    ap_CS_fsm_state4;
reg   [7:0] dst_load_1_reg_573;
wire   [2:0] dst_addr_2_reg_578;
wire   [2:0] dst_addr_3_reg_583;
reg   [7:0] dst_load_2_reg_588;
wire    ap_CS_fsm_state5;
reg   [7:0] dst_load_3_reg_593;
wire   [2:0] dst_addr_4_reg_598;
wire   [2:0] dst_addr_5_reg_603;
reg   [7:0] dst_load_4_reg_608;
wire    ap_CS_fsm_state6;
reg   [7:0] dst_load_5_reg_613;
wire   [2:0] dst_addr_6_reg_618;
wire   [2:0] dst_addr_7_reg_623;
wire   [31:0] left_fu_298_p5;
wire    ap_CS_fsm_state7;
wire   [31:0] right_fu_306_p5;
wire   [4:0] i_1_fu_322_p2;
reg   [4:0] i_1_reg_641;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln231_fu_316_p2;
wire   [7:0] trunc_ln232_fu_355_p1;
reg   [7:0] trunc_ln232_reg_651;
wire    ap_CS_fsm_state9;
wire   [31:0] temp_fu_367_p2;
reg   [31:0] temp_reg_656;
reg   [7:0] c_reg_661;
wire   [31:0] add_ln290_fu_446_p2;
reg   [31:0] add_ln290_reg_676;
wire    ap_CS_fsm_state10;
wire   [31:0] xor_ln233_fu_480_p2;
wire    ap_CS_fsm_state11;
reg   [7:0] trunc_ln7_reg_696;
wire    ap_CS_fsm_state13;
wire   [7:0] trunc_ln143_fu_534_p1;
reg   [7:0] trunc_ln143_reg_701;
wire   [4:0] pary_s_address0;
reg    pary_s_ce0;
wire   [31:0] pary_s_q0;
reg   [3:0] i_0_reg_239;
wire    ap_CS_fsm_state3;
reg   [31:0] temp_2_reg_250;
reg   [31:0] left_new_reg_260;
reg   [4:0] i_0_i_reg_270;
wire   [63:0] zext_ln232_fu_328_p1;
wire   [63:0] zext_ln290_fu_423_p1;
wire   [63:0] tmp_fu_428_p3;
wire   [63:0] tmp_1_fu_452_p3;
wire   [63:0] tmp_2_fu_460_p3;
wire    ap_CS_fsm_state12;
wire   [7:0] trunc_ln139_fu_497_p1;
wire    ap_CS_fsm_state14;
wire   [15:0] trunc_ln232_3_fu_363_p1;
wire   [15:0] trunc_ln231_fu_373_p1;
wire   [23:0] trunc_ln232_2_fu_359_p1;
wire   [23:0] trunc_ln231_1_fu_383_p1;
wire   [23:0] xor_ln281_1_fu_387_p2;
wire   [15:0] xor_ln281_fu_377_p2;
wire   [7:0] a_fu_393_p4;
wire   [7:0] b_fu_403_p4;
wire   [7:0] trunc_ln232_1_fu_437_p1;
wire   [7:0] d_fu_441_p2;
wire   [31:0] xor_ln290_fu_469_p2;
wire   [31:0] add_ln290_1_fu_474_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

Blowfish_Encrypt_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
pary_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pary_s_address0),
    .ce0(pary_s_ce0),
    .q0(pary_s_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i_reg_270 <= i_1_reg_641;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_270 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_239 <= i_reg_547;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_239 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        left_new_reg_260 <= temp_reg_656;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        left_new_reg_260 <= right_fu_306_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_2_reg_250 <= xor_ln233_fu_480_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_2_reg_250 <= left_fu_298_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln290_reg_676 <= add_ln290_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_reg_661 <= {{xor_ln281_fu_377_p2[15:8]}};
        temp_reg_656 <= temp_fu_367_p2;
        trunc_ln232_reg_651 <= trunc_ln232_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_load_1_reg_573 <= dst_q1;
        dst_load_reg_568 <= dst_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_load_2_reg_588 <= dst_q1;
        dst_load_3_reg_593 <= dst_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_load_4_reg_608 <= dst_q1;
        dst_load_5_reg_613 <= dst_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_641 <= i_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_547 <= i_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln143_reg_701 <= trunc_ln143_fu_534_p1;
        trunc_ln7_reg_696 <= {{temp_2_reg_250[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln119_reg_552[3 : 0] <= zext_ln119_fu_293_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Blowfish_sbox_s_address0 = tmp_1_fu_452_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Blowfish_sbox_s_address0 = zext_ln290_fu_423_p1;
    end else begin
        Blowfish_sbox_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Blowfish_sbox_s_address1 = tmp_2_fu_460_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Blowfish_sbox_s_address1 = tmp_fu_428_p3;
    end else begin
        Blowfish_sbox_s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Blowfish_sbox_s_ce0 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Blowfish_sbox_s_ce1 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_address0 = dst_addr_7_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_address0 = dst_addr_5_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_address0 = dst_addr_3_reg_583;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_address0 = zext_ln119_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_address0 = 64'd0;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_address1 = dst_addr_6_reg_618;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_address1 = dst_addr_4_reg_598;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_address1 = dst_addr_2_reg_578;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_address1 = 64'd1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_d0 = trunc_ln143_reg_701;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_d0 = {{temp_2_reg_250[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_d0 = trunc_ln139_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_d0 = {{left_new_reg_260[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_d1 = trunc_ln7_reg_696;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_d1 = {{temp_2_reg_250[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_d1 = {{left_new_reg_260[15:8]}};
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_d1 = {{left_new_reg_260[31:24]}};
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln231_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln231_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pary_s_ce0 = 1'b1;
    end else begin
        pary_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln118_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln231_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Blowfish_pary_s_address0 = 5'd0;

assign Blowfish_pary_s_address1 = 5'd0;

assign Blowfish_pary_s_ce0 = 1'b0;

assign Blowfish_pary_s_ce1 = 1'b0;

assign Blowfish_pary_s_d0 = 32'd0;

assign Blowfish_pary_s_d1 = 32'd0;

assign Blowfish_pary_s_we0 = 1'b0;

assign Blowfish_pary_s_we1 = 1'b0;

assign a_fu_393_p4 = {{temp_fu_367_p2[31:24]}};

assign add_ln290_1_fu_474_p2 = (Blowfish_sbox_s_q1 + xor_ln290_fu_469_p2);

assign add_ln290_fu_446_p2 = (Blowfish_sbox_s_q0 + Blowfish_sbox_s_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fu_403_p4 = {{xor_ln281_1_fu_387_p2[23:16]}};

assign d_fu_441_p2 = (trunc_ln232_reg_651 ^ trunc_ln232_1_fu_437_p1);

assign dst_addr_2_reg_578 = 64'd2;

assign dst_addr_3_reg_583 = 64'd3;

assign dst_addr_4_reg_598 = 64'd4;

assign dst_addr_5_reg_603 = 64'd5;

assign dst_addr_6_reg_618 = 64'd6;

assign dst_addr_7_reg_623 = 64'd7;

assign i_1_fu_322_p2 = (i_0_i_reg_270 + 5'd1);

assign i_fu_287_p2 = (i_0_reg_239 + 4'd1);

assign icmp_ln118_fu_281_p2 = ((i_0_reg_239 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_316_p2 = ((i_0_i_reg_270 == 5'd16) ? 1'b1 : 1'b0);

assign left_fu_298_p5 = {{{{dst_load_reg_568}, {dst_load_1_reg_573}}, {dst_load_2_reg_588}}, {dst_load_3_reg_593}};

assign pary_s_address0 = zext_ln232_fu_328_p1;

assign right_fu_306_p5 = {{{{dst_load_4_reg_608}, {dst_load_5_reg_613}}, {dst_q1}}, {dst_q0}};

assign src_address0 = zext_ln119_fu_293_p1;

assign temp_fu_367_p2 = (temp_2_reg_250 ^ pary_s_q0);

assign tmp_1_fu_452_p3 = {{56'd2}, {c_reg_661}};

assign tmp_2_fu_460_p3 = {{56'd3}, {d_fu_441_p2}};

assign tmp_fu_428_p3 = {{56'd1}, {b_fu_403_p4}};

assign trunc_ln139_fu_497_p1 = left_new_reg_260[7:0];

assign trunc_ln143_fu_534_p1 = temp_2_reg_250[7:0];

assign trunc_ln231_1_fu_383_p1 = temp_2_reg_250[23:0];

assign trunc_ln231_fu_373_p1 = temp_2_reg_250[15:0];

assign trunc_ln232_1_fu_437_p1 = temp_2_reg_250[7:0];

assign trunc_ln232_2_fu_359_p1 = pary_s_q0[23:0];

assign trunc_ln232_3_fu_363_p1 = pary_s_q0[15:0];

assign trunc_ln232_fu_355_p1 = pary_s_q0[7:0];

assign xor_ln233_fu_480_p2 = (left_new_reg_260 ^ add_ln290_1_fu_474_p2);

assign xor_ln281_1_fu_387_p2 = (trunc_ln232_2_fu_359_p1 ^ trunc_ln231_1_fu_383_p1);

assign xor_ln281_fu_377_p2 = (trunc_ln232_3_fu_363_p1 ^ trunc_ln231_fu_373_p1);

assign xor_ln290_fu_469_p2 = (add_ln290_reg_676 ^ Blowfish_sbox_s_q0);

assign zext_ln119_fu_293_p1 = i_0_reg_239;

assign zext_ln232_fu_328_p1 = i_0_i_reg_270;

assign zext_ln290_fu_423_p1 = a_fu_393_p4;

always @ (posedge ap_clk) begin
    zext_ln119_reg_552[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Blowfish_Encrypt
