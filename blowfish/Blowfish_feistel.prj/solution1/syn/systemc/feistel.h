// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _feistel_HH_
#define _feistel_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct feistel : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x;
    sc_out< sc_lv<10> > S_address0;
    sc_out< sc_logic > S_ce0;
    sc_in< sc_lv<32> > S_q0;
    sc_out< sc_lv<10> > S_address1;
    sc_out< sc_logic > S_ce1;
    sc_in< sc_lv<32> > S_q1;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    feistel(sc_module_name name);
    SC_HAS_PROCESS(feistel);

    ~feistel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > c_reg_166;
    sc_signal< sc_lv<8> > d_fu_115_p1;
    sc_signal< sc_lv<8> > d_reg_171;
    sc_signal< sc_lv<32> > add_ln108_fu_133_p2;
    sc_signal< sc_lv<32> > add_ln108_reg_186;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln108_fu_119_p1;
    sc_signal< sc_lv<64> > tmp_fu_124_p3;
    sc_signal< sc_lv<64> > tmp_1_fu_139_p3;
    sc_signal< sc_lv<64> > tmp_2_fu_147_p3;
    sc_signal< sc_lv<8> > a_fu_85_p4;
    sc_signal< sc_lv<8> > b_fu_95_p4;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > xor_ln108_fu_155_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<56> ap_const_lv56_1;
    static const sc_lv<56> ap_const_lv56_2;
    static const sc_lv<56> ap_const_lv56_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_S_address0();
    void thread_S_address1();
    void thread_S_ce0();
    void thread_S_ce1();
    void thread_a_fu_85_p4();
    void thread_add_ln108_fu_133_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_fu_95_p4();
    void thread_d_fu_115_p1();
    void thread_tmp_1_fu_139_p3();
    void thread_tmp_2_fu_147_p3();
    void thread_tmp_fu_124_p3();
    void thread_xor_ln108_fu_155_p2();
    void thread_zext_ln108_fu_119_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
