// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "feistel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic feistel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic feistel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> feistel::ap_ST_fsm_state1 = "1";
const sc_lv<3> feistel::ap_ST_fsm_state2 = "10";
const sc_lv<3> feistel::ap_ST_fsm_state3 = "100";
const sc_lv<32> feistel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> feistel::ap_const_lv32_1 = "1";
const sc_lv<32> feistel::ap_const_lv32_18 = "11000";
const sc_lv<32> feistel::ap_const_lv32_1F = "11111";
const sc_lv<32> feistel::ap_const_lv32_10 = "10000";
const sc_lv<32> feistel::ap_const_lv32_17 = "10111";
const sc_lv<32> feistel::ap_const_lv32_8 = "1000";
const sc_lv<32> feistel::ap_const_lv32_F = "1111";
const sc_lv<56> feistel::ap_const_lv56_1 = "1";
const sc_lv<56> feistel::ap_const_lv56_2 = "10";
const sc_lv<56> feistel::ap_const_lv56_3 = "11";
const sc_lv<32> feistel::ap_const_lv32_2 = "10";
const bool feistel::ap_const_boolean_1 = true;

feistel::feistel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln108_fu_119_p1 );
    sensitive << ( tmp_1_fu_139_p3 );

    SC_METHOD(thread_S_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_124_p3 );
    sensitive << ( tmp_2_fu_147_p3 );

    SC_METHOD(thread_S_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_S_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_a_fu_85_p4);
    sensitive << ( x );

    SC_METHOD(thread_add_ln108_fu_133_p2);
    sensitive << ( S_q0 );
    sensitive << ( S_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( S_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln108_fu_155_p2 );

    SC_METHOD(thread_b_fu_95_p4);
    sensitive << ( x );

    SC_METHOD(thread_d_fu_115_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_1_fu_139_p3);
    sensitive << ( c_reg_166 );

    SC_METHOD(thread_tmp_2_fu_147_p3);
    sensitive << ( d_reg_171 );

    SC_METHOD(thread_tmp_fu_124_p3);
    sensitive << ( b_fu_95_p4 );

    SC_METHOD(thread_xor_ln108_fu_155_p2);
    sensitive << ( S_q0 );
    sensitive << ( add_ln108_reg_186 );

    SC_METHOD(thread_zext_ln108_fu_119_p1);
    sensitive << ( a_fu_85_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "feistel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, S_address0, "(port)S_address0");
    sc_trace(mVcdFile, S_ce0, "(port)S_ce0");
    sc_trace(mVcdFile, S_q0, "(port)S_q0");
    sc_trace(mVcdFile, S_address1, "(port)S_address1");
    sc_trace(mVcdFile, S_ce1, "(port)S_ce1");
    sc_trace(mVcdFile, S_q1, "(port)S_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, c_reg_166, "c_reg_166");
    sc_trace(mVcdFile, d_fu_115_p1, "d_fu_115_p1");
    sc_trace(mVcdFile, d_reg_171, "d_reg_171");
    sc_trace(mVcdFile, add_ln108_fu_133_p2, "add_ln108_fu_133_p2");
    sc_trace(mVcdFile, add_ln108_reg_186, "add_ln108_reg_186");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln108_fu_119_p1, "zext_ln108_fu_119_p1");
    sc_trace(mVcdFile, tmp_fu_124_p3, "tmp_fu_124_p3");
    sc_trace(mVcdFile, tmp_1_fu_139_p3, "tmp_1_fu_139_p3");
    sc_trace(mVcdFile, tmp_2_fu_147_p3, "tmp_2_fu_147_p3");
    sc_trace(mVcdFile, a_fu_85_p4, "a_fu_85_p4");
    sc_trace(mVcdFile, b_fu_95_p4, "b_fu_95_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, xor_ln108_fu_155_p2, "xor_ln108_fu_155_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("feistel.hdltvin.dat");
    mHdltvoutHandle.open("feistel.hdltvout.dat");
}

feistel::~feistel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void feistel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln108_reg_186 = add_ln108_fu_133_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_reg_166 = x.read().range(15, 8);
        d_reg_171 = d_fu_115_p1.read();
    }
}

void feistel::thread_S_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_address0 =  (sc_lv<10>) (tmp_1_fu_139_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        S_address0 =  (sc_lv<10>) (zext_ln108_fu_119_p1.read());
    } else {
        S_address0 = "XXXXXXXXXX";
    }
}

void feistel::thread_S_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_address1 =  (sc_lv<10>) (tmp_2_fu_147_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        S_address1 =  (sc_lv<10>) (tmp_fu_124_p3.read());
    } else {
        S_address1 = "XXXXXXXXXX";
    }
}

void feistel::thread_S_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        S_ce0 = ap_const_logic_1;
    } else {
        S_ce0 = ap_const_logic_0;
    }
}

void feistel::thread_S_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        S_ce1 = ap_const_logic_1;
    } else {
        S_ce1 = ap_const_logic_0;
    }
}

void feistel::thread_a_fu_85_p4() {
    a_fu_85_p4 = x.read().range(31, 24);
}

void feistel::thread_add_ln108_fu_133_p2() {
    add_ln108_fu_133_p2 = (!S_q1.read().is_01() || !S_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_q1.read()) + sc_biguint<32>(S_q0.read()));
}

void feistel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void feistel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void feistel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void feistel::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void feistel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void feistel::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void feistel::thread_ap_return() {
    ap_return = (!S_q1.read().is_01() || !xor_ln108_fu_155_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_q1.read()) + sc_biguint<32>(xor_ln108_fu_155_p2.read()));
}

void feistel::thread_b_fu_95_p4() {
    b_fu_95_p4 = x.read().range(23, 16);
}

void feistel::thread_d_fu_115_p1() {
    d_fu_115_p1 = x.read().range(8-1, 0);
}

void feistel::thread_tmp_1_fu_139_p3() {
    tmp_1_fu_139_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_166.read());
}

void feistel::thread_tmp_2_fu_147_p3() {
    tmp_2_fu_147_p3 = esl_concat<56,8>(ap_const_lv56_3, d_reg_171.read());
}

void feistel::thread_tmp_fu_124_p3() {
    tmp_fu_124_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_95_p4.read());
}

void feistel::thread_xor_ln108_fu_155_p2() {
    xor_ln108_fu_155_p2 = (S_q0.read() ^ add_ln108_reg_186.read());
}

void feistel::thread_zext_ln108_fu_119_p1() {
    zext_ln108_fu_119_p1 = esl_zext<64,8>(a_fu_85_p4.read());
}

void feistel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void feistel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_address0\" :  \"" << S_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_ce0\" :  \"" << S_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_q0\" :  \"" << S_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_address1\" :  \"" << S_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_ce1\" :  \"" << S_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_q1\" :  \"" << S_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

