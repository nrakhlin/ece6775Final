// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Encrypt_SetKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_read,
        right_read,
        P_0_read,
        P_1_read,
        P_2_read,
        P_3_read,
        P_4_read,
        P_5_read,
        P_6_read,
        P_7_read,
        P_8_read,
        P_9_read,
        P_10_read,
        P_11_read,
        P_12_read,
        P_13_read,
        P_14_read,
        P_15_read,
        P_16_read,
        P_17_read,
        S_0_address0,
        S_0_ce0,
        S_0_q0,
        S_1_address0,
        S_1_ce0,
        S_1_q0,
        S_2_address0,
        S_2_ce0,
        S_2_q0,
        S_3_address0,
        S_3_ce0,
        S_3_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] left_read;
input  [31:0] right_read;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
input  [31:0] P_3_read;
input  [31:0] P_4_read;
input  [31:0] P_5_read;
input  [31:0] P_6_read;
input  [31:0] P_7_read;
input  [31:0] P_8_read;
input  [31:0] P_9_read;
input  [31:0] P_10_read;
input  [31:0] P_11_read;
input  [31:0] P_12_read;
input  [31:0] P_13_read;
input  [31:0] P_14_read;
input  [31:0] P_15_read;
input  [31:0] P_16_read;
input  [31:0] P_17_read;
output  [7:0] S_0_address0;
output   S_0_ce0;
input  [31:0] S_0_q0;
output  [7:0] S_1_address0;
output   S_1_ce0;
input  [31:0] S_1_q0;
output  [7:0] S_2_address0;
output   S_2_ce0;
input  [31:0] S_2_q0;
output  [7:0] S_3_address0;
output   S_3_ce0;
input  [31:0] S_3_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] p_tmp_reg_228;
reg   [31:0] p_b_read_assign_reg_238;
reg   [4:0] i_0_reg_248;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_310_p2;
reg   [0:0] icmp_ln54_reg_456;
reg   [0:0] icmp_ln54_reg_456_pp0_iter1_reg;
wire   [4:0] i_fu_316_p2;
reg   [4:0] i_reg_460;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] localLeft_fu_322_p2;
reg   [31:0] localLeft_reg_465;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_feistel_fu_297_ap_return;
reg   [31:0] tmp_1_reg_471;
wire   [31:0] localRight_fu_329_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
wire    grp_feistel_fu_297_ap_start;
wire    grp_feistel_fu_297_ap_done;
wire    grp_feistel_fu_297_ap_idle;
wire    grp_feistel_fu_297_ap_ready;
wire   [31:0] grp_feistel_fu_297_x;
wire   [7:0] grp_feistel_fu_297_S_0_address0;
wire    grp_feistel_fu_297_S_0_ce0;
wire   [7:0] grp_feistel_fu_297_S_1_address0;
wire    grp_feistel_fu_297_S_1_ce0;
wire   [7:0] grp_feistel_fu_297_S_2_address0;
wire    grp_feistel_fu_297_S_2_ce0;
wire   [7:0] grp_feistel_fu_297_S_3_address0;
wire    grp_feistel_fu_297_S_3_ce0;
reg   [31:0] ap_phi_mux_p_tmp_phi_fu_231_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_i_0_phi_fu_252_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_reg_pp0_iter0_phi_ln55_reg_260;
reg    grp_feistel_fu_297_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [31:0] xor_ln63_fu_339_p2;
wire   [31:0] xor_ln62_fu_334_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_406;
reg    ap_condition_317;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_feistel_fu_297_ap_start_reg = 1'b0;
end

feistel grp_feistel_fu_297(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_feistel_fu_297_ap_start),
    .ap_done(grp_feistel_fu_297_ap_done),
    .ap_idle(grp_feistel_fu_297_ap_idle),
    .ap_ready(grp_feistel_fu_297_ap_ready),
    .x(grp_feistel_fu_297_x),
    .S_0_address0(grp_feistel_fu_297_S_0_address0),
    .S_0_ce0(grp_feistel_fu_297_S_0_ce0),
    .S_0_q0(S_0_q0),
    .S_1_address0(grp_feistel_fu_297_S_1_address0),
    .S_1_ce0(grp_feistel_fu_297_S_1_ce0),
    .S_1_q0(S_1_q0),
    .S_2_address0(grp_feistel_fu_297_S_2_address0),
    .S_2_ce0(grp_feistel_fu_297_S_2_ce0),
    .S_2_q0(S_2_q0),
    .S_3_address0(grp_feistel_fu_297_S_3_address0),
    .S_3_ce0(grp_feistel_fu_297_S_3_ce0),
    .S_3_q0(S_3_q0),
    .ap_return(grp_feistel_fu_297_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_feistel_fu_297_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_310_p2 == 1'd0))) begin
            grp_feistel_fu_297_ap_start_reg <= 1'b1;
        end else if ((grp_feistel_fu_297_ap_ready == 1'b1)) begin
            grp_feistel_fu_297_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_317)) begin
        if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd0)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_0_read;
        end else if ((1'b1 == ap_condition_406)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_15_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd14)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_14_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd13)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_13_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd12)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_12_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd11)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_11_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd10)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_10_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd9)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_9_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd8)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_8_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd7)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_7_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd6)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_6_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd5)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_5_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd4)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_4_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd3)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_3_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd2)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_2_read;
        end else if ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd1)) begin
            ap_phi_reg_pp0_iter0_phi_ln55_reg_260 <= P_1_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln54_reg_456 == 1'd0))) begin
        i_0_reg_248 <= i_reg_460;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_248 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln54_reg_456_pp0_iter1_reg == 1'd0))) begin
        p_b_read_assign_reg_238 <= localLeft_reg_465;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_b_read_assign_reg_238 <= right_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln54_reg_456_pp0_iter1_reg == 1'd0))) begin
        p_tmp_reg_228 <= localRight_fu_329_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_tmp_reg_228 <= left_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_460 <= i_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_456 <= icmp_ln54_fu_310_p2;
        icmp_ln54_reg_456_pp0_iter1_reg <= icmp_ln54_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln54_reg_456 == 1'd0))) begin
        localLeft_reg_465 <= localLeft_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_456 == 1'd0))) begin
        tmp_1_reg_471 <= grp_feistel_fu_297_ap_return;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_310_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln54_reg_456 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_252_p4 = i_reg_460;
    end else begin
        ap_phi_mux_i_0_phi_fu_252_p4 = i_0_reg_248;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln54_reg_456_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_tmp_phi_fu_231_p4 = localRight_fu_329_p2;
    end else begin
        ap_phi_mux_p_tmp_phi_fu_231_p4 = p_tmp_reg_228;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_310_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_0_address0 = grp_feistel_fu_297_S_0_address0;

assign S_0_ce0 = grp_feistel_fu_297_S_0_ce0;

assign S_1_address0 = grp_feistel_fu_297_S_1_address0;

assign S_1_ce0 = grp_feistel_fu_297_S_1_ce0;

assign S_2_address0 = grp_feistel_fu_297_S_2_address0;

assign S_2_ce0 = grp_feistel_fu_297_S_2_ce0;

assign S_3_address0 = grp_feistel_fu_297_S_3_address0;

assign S_3_ce0 = grp_feistel_fu_297_S_3_ce0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_317 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_310_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_406 = (~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd0) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd14) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd13) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd12) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd11) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd10) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd9) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd8) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd7) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd6) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd5) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd4) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd3) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd2) & ~(ap_phi_mux_i_0_phi_fu_252_p4 == 5'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = xor_ln63_fu_339_p2;

assign ap_return_1 = xor_ln62_fu_334_p2;

assign grp_feistel_fu_297_ap_start = grp_feistel_fu_297_ap_start_reg;

assign grp_feistel_fu_297_x = (ap_phi_reg_pp0_iter0_phi_ln55_reg_260 ^ ap_phi_mux_p_tmp_phi_fu_231_p4);

assign i_fu_316_p2 = (ap_phi_mux_i_0_phi_fu_252_p4 + 5'd1);

assign icmp_ln54_fu_310_p2 = ((ap_phi_mux_i_0_phi_fu_252_p4 == 5'd16) ? 1'b1 : 1'b0);

assign localLeft_fu_322_p2 = (ap_phi_reg_pp0_iter0_phi_ln55_reg_260 ^ ap_phi_mux_p_tmp_phi_fu_231_p4);

assign localRight_fu_329_p2 = (tmp_1_reg_471 ^ p_b_read_assign_reg_238);

assign xor_ln62_fu_334_p2 = (p_tmp_reg_228 ^ P_16_read);

assign xor_ln63_fu_339_p2 = (p_b_read_assign_reg_238 ^ P_17_read);

endmodule //Encrypt_SetKey
