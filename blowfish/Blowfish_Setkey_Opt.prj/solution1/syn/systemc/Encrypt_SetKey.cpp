// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Encrypt_SetKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Encrypt_SetKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Encrypt_SetKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state1 = "1";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state2 = "10";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state3 = "100";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state4 = "1000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state5 = "10000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state6 = "100000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<50> Encrypt_SetKey::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1 = "1";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2 = "10";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_3 = "11";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_4 = "100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_6 = "110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_7 = "111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_9 = "1001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_A = "1010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_C = "1100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_D = "1101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_F = "1111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_10 = "10000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_12 = "10010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_13 = "10011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_15 = "10101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_16 = "10110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_18 = "11000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_19 = "11001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1B = "11011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1C = "11100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1E = "11110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1F = "11111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_21 = "100001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_22 = "100010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_24 = "100100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_25 = "100101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_27 = "100111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_28 = "101000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2A = "101010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2B = "101011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2D = "101101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2E = "101110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_30 = "110000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_5 = "101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_8 = "1000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_B = "1011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_E = "1110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_11 = "10001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_14 = "10100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_17 = "10111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1A = "11010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1D = "11101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_20 = "100000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_23 = "100011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_26 = "100110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_29 = "101001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2C = "101100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2F = "101111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_31 = "110001";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_1 = "1";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_2 = "10";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_3 = "11";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_4 = "100";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_5 = "101";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_6 = "110";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_7 = "111";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_8 = "1000";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_9 = "1001";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_A = "1010";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_B = "1011";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_C = "1100";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_D = "1101";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_E = "1110";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_F = "1111";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_10 = "10000";
const sc_lv<64> Encrypt_SetKey::ap_const_lv64_11 = "10001";
const bool Encrypt_SetKey::ap_const_boolean_1 = true;

Encrypt_SetKey::Encrypt_SetKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_feistel_fu_233 = new feistel("grp_feistel_fu_233");
    grp_feistel_fu_233->ap_clk(ap_clk);
    grp_feistel_fu_233->ap_rst(ap_rst);
    grp_feistel_fu_233->ap_start(grp_feistel_fu_233_ap_start);
    grp_feistel_fu_233->ap_done(grp_feistel_fu_233_ap_done);
    grp_feistel_fu_233->ap_idle(grp_feistel_fu_233_ap_idle);
    grp_feistel_fu_233->ap_ready(grp_feistel_fu_233_ap_ready);
    grp_feistel_fu_233->ap_ce(ap_var_for_const0);
    grp_feistel_fu_233->x(grp_feistel_fu_233_x);
    grp_feistel_fu_233->S_address0(grp_feistel_fu_233_S_address0);
    grp_feistel_fu_233->S_ce0(grp_feistel_fu_233_S_ce0);
    grp_feistel_fu_233->S_q0(S_q0);
    grp_feistel_fu_233->S_address1(grp_feistel_fu_233_S_address1);
    grp_feistel_fu_233->S_ce1(grp_feistel_fu_233_S_ce1);
    grp_feistel_fu_233->S_q1(S_q1);
    grp_feistel_fu_233->ap_return(grp_feistel_fu_233_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_P_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_P_address1);
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_P_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_P_ce1);
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_S_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( grp_feistel_fu_233_S_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_S_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( grp_feistel_fu_233_S_address1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_S_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( grp_feistel_fu_233_S_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_S_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( grp_feistel_fu_233_S_ce1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state12);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state15);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state18);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state21);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state24);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state27);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state3);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state30);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state33);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state36);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state39);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state42);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state45);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state48);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state6);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state9);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( xor_ln65_fu_423_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( xor_ln64_fu_417_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_grp_feistel_fu_233_ap_start);
    sensitive << ( grp_feistel_fu_233_ap_start_reg );

    SC_METHOD(thread_grp_feistel_fu_233_x);
    sensitive << ( xor_ln57_fu_240_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln57_1_reg_461 );
    sensitive << ( xor_ln57_2_reg_472 );
    sensitive << ( xor_ln57_3_reg_483 );
    sensitive << ( xor_ln57_4_reg_494 );
    sensitive << ( xor_ln57_5_reg_505 );
    sensitive << ( xor_ln57_6_reg_516 );
    sensitive << ( xor_ln57_7_reg_527 );
    sensitive << ( xor_ln57_8_reg_538 );
    sensitive << ( xor_ln57_9_reg_549 );
    sensitive << ( xor_ln57_10_reg_560 );
    sensitive << ( xor_ln57_11_reg_571 );
    sensitive << ( xor_ln57_12_reg_582 );
    sensitive << ( xor_ln57_13_reg_593 );
    sensitive << ( xor_ln57_14_reg_604 );
    sensitive << ( xor_ln57_30_reg_615 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_xor_ln57_10_fu_351_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_24_fu_346_p2 );

    SC_METHOD(thread_xor_ln57_11_fu_362_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_25_fu_357_p2 );

    SC_METHOD(thread_xor_ln57_12_fu_373_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_26_fu_368_p2 );

    SC_METHOD(thread_xor_ln57_13_fu_384_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_27_fu_379_p2 );

    SC_METHOD(thread_xor_ln57_14_fu_395_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_28_fu_390_p2 );

    SC_METHOD(thread_xor_ln57_15_fu_246_p2);
    sensitive << ( right_read );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_16_fu_258_p2);
    sensitive << ( xor_ln57_reg_450 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_17_fu_269_p2);
    sensitive << ( xor_ln57_1_reg_461 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_18_fu_280_p2);
    sensitive << ( xor_ln57_2_reg_472 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_19_fu_291_p2);
    sensitive << ( xor_ln57_3_reg_483 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_1_fu_252_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_15_fu_246_p2 );

    SC_METHOD(thread_xor_ln57_20_fu_302_p2);
    sensitive << ( xor_ln57_4_reg_494 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_21_fu_313_p2);
    sensitive << ( xor_ln57_5_reg_505 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_22_fu_324_p2);
    sensitive << ( xor_ln57_6_reg_516 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_23_fu_335_p2);
    sensitive << ( xor_ln57_7_reg_527 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_24_fu_346_p2);
    sensitive << ( xor_ln57_8_reg_538 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_25_fu_357_p2);
    sensitive << ( xor_ln57_9_reg_549 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_26_fu_368_p2);
    sensitive << ( xor_ln57_10_reg_560 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_27_fu_379_p2);
    sensitive << ( xor_ln57_11_reg_571 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_28_fu_390_p2);
    sensitive << ( xor_ln57_12_reg_582 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_29_fu_401_p2);
    sensitive << ( xor_ln57_13_reg_593 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln57_2_fu_263_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_16_fu_258_p2 );

    SC_METHOD(thread_xor_ln57_30_fu_406_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_29_fu_401_p2 );

    SC_METHOD(thread_xor_ln57_3_fu_274_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_17_fu_269_p2 );

    SC_METHOD(thread_xor_ln57_4_fu_285_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_18_fu_280_p2 );

    SC_METHOD(thread_xor_ln57_5_fu_296_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_19_fu_291_p2 );

    SC_METHOD(thread_xor_ln57_6_fu_307_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_20_fu_302_p2 );

    SC_METHOD(thread_xor_ln57_7_fu_318_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_21_fu_313_p2 );

    SC_METHOD(thread_xor_ln57_8_fu_329_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_22_fu_324_p2 );

    SC_METHOD(thread_xor_ln57_9_fu_340_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln57_23_fu_335_p2 );

    SC_METHOD(thread_xor_ln57_fu_240_p2);
    sensitive << ( left_read );
    sensitive << ( P_load_2_reg_445 );

    SC_METHOD(thread_xor_ln64_1_fu_412_p2);
    sensitive << ( xor_ln57_14_reg_604 );
    sensitive << ( grp_feistel_fu_233_ap_return );

    SC_METHOD(thread_xor_ln64_fu_417_p2);
    sensitive << ( P_q0 );
    sensitive << ( xor_ln64_1_fu_412_p2 );

    SC_METHOD(thread_xor_ln65_fu_423_p2);
    sensitive << ( P_q1 );
    sensitive << ( xor_ln57_30_reg_615 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000001";
    grp_feistel_fu_233_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Encrypt_SetKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, left_read, "(port)left_read");
    sc_trace(mVcdFile, right_read, "(port)right_read");
    sc_trace(mVcdFile, P_address0, "(port)P_address0");
    sc_trace(mVcdFile, P_ce0, "(port)P_ce0");
    sc_trace(mVcdFile, P_q0, "(port)P_q0");
    sc_trace(mVcdFile, P_address1, "(port)P_address1");
    sc_trace(mVcdFile, P_ce1, "(port)P_ce1");
    sc_trace(mVcdFile, P_q1, "(port)P_q1");
    sc_trace(mVcdFile, S_address0, "(port)S_address0");
    sc_trace(mVcdFile, S_ce0, "(port)S_ce0");
    sc_trace(mVcdFile, S_q0, "(port)S_q0");
    sc_trace(mVcdFile, S_address1, "(port)S_address1");
    sc_trace(mVcdFile, S_ce1, "(port)S_ce1");
    sc_trace(mVcdFile, S_q1, "(port)S_q1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, P_load_2_reg_445, "P_load_2_reg_445");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, xor_ln57_fu_240_p2, "xor_ln57_fu_240_p2");
    sc_trace(mVcdFile, xor_ln57_reg_450, "xor_ln57_reg_450");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, xor_ln57_1_fu_252_p2, "xor_ln57_1_fu_252_p2");
    sc_trace(mVcdFile, xor_ln57_1_reg_461, "xor_ln57_1_reg_461");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, xor_ln57_2_fu_263_p2, "xor_ln57_2_fu_263_p2");
    sc_trace(mVcdFile, xor_ln57_2_reg_472, "xor_ln57_2_reg_472");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, xor_ln57_3_fu_274_p2, "xor_ln57_3_fu_274_p2");
    sc_trace(mVcdFile, xor_ln57_3_reg_483, "xor_ln57_3_reg_483");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, xor_ln57_4_fu_285_p2, "xor_ln57_4_fu_285_p2");
    sc_trace(mVcdFile, xor_ln57_4_reg_494, "xor_ln57_4_reg_494");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, xor_ln57_5_fu_296_p2, "xor_ln57_5_fu_296_p2");
    sc_trace(mVcdFile, xor_ln57_5_reg_505, "xor_ln57_5_reg_505");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, xor_ln57_6_fu_307_p2, "xor_ln57_6_fu_307_p2");
    sc_trace(mVcdFile, xor_ln57_6_reg_516, "xor_ln57_6_reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, xor_ln57_7_fu_318_p2, "xor_ln57_7_fu_318_p2");
    sc_trace(mVcdFile, xor_ln57_7_reg_527, "xor_ln57_7_reg_527");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, xor_ln57_8_fu_329_p2, "xor_ln57_8_fu_329_p2");
    sc_trace(mVcdFile, xor_ln57_8_reg_538, "xor_ln57_8_reg_538");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, xor_ln57_9_fu_340_p2, "xor_ln57_9_fu_340_p2");
    sc_trace(mVcdFile, xor_ln57_9_reg_549, "xor_ln57_9_reg_549");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, xor_ln57_10_fu_351_p2, "xor_ln57_10_fu_351_p2");
    sc_trace(mVcdFile, xor_ln57_10_reg_560, "xor_ln57_10_reg_560");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, xor_ln57_11_fu_362_p2, "xor_ln57_11_fu_362_p2");
    sc_trace(mVcdFile, xor_ln57_11_reg_571, "xor_ln57_11_reg_571");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, xor_ln57_12_fu_373_p2, "xor_ln57_12_fu_373_p2");
    sc_trace(mVcdFile, xor_ln57_12_reg_582, "xor_ln57_12_reg_582");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, xor_ln57_13_fu_384_p2, "xor_ln57_13_fu_384_p2");
    sc_trace(mVcdFile, xor_ln57_13_reg_593, "xor_ln57_13_reg_593");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, xor_ln57_14_fu_395_p2, "xor_ln57_14_fu_395_p2");
    sc_trace(mVcdFile, xor_ln57_14_reg_604, "xor_ln57_14_reg_604");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, xor_ln57_30_fu_406_p2, "xor_ln57_30_fu_406_p2");
    sc_trace(mVcdFile, xor_ln57_30_reg_615, "xor_ln57_30_reg_615");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_start, "grp_feistel_fu_233_ap_start");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_done, "grp_feistel_fu_233_ap_done");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_idle, "grp_feistel_fu_233_ap_idle");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_ready, "grp_feistel_fu_233_ap_ready");
    sc_trace(mVcdFile, grp_feistel_fu_233_x, "grp_feistel_fu_233_x");
    sc_trace(mVcdFile, grp_feistel_fu_233_S_address0, "grp_feistel_fu_233_S_address0");
    sc_trace(mVcdFile, grp_feistel_fu_233_S_ce0, "grp_feistel_fu_233_S_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_233_S_address1, "grp_feistel_fu_233_S_address1");
    sc_trace(mVcdFile, grp_feistel_fu_233_S_ce1, "grp_feistel_fu_233_S_ce1");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_return, "grp_feistel_fu_233_ap_return");
    sc_trace(mVcdFile, grp_feistel_fu_233_ap_start_reg, "grp_feistel_fu_233_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state3, "ap_NS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm_state6, "ap_NS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm_state9, "ap_NS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm_state12, "ap_NS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm_state15, "ap_NS_fsm_state15");
    sc_trace(mVcdFile, ap_NS_fsm_state18, "ap_NS_fsm_state18");
    sc_trace(mVcdFile, ap_NS_fsm_state21, "ap_NS_fsm_state21");
    sc_trace(mVcdFile, ap_NS_fsm_state24, "ap_NS_fsm_state24");
    sc_trace(mVcdFile, ap_NS_fsm_state27, "ap_NS_fsm_state27");
    sc_trace(mVcdFile, ap_NS_fsm_state30, "ap_NS_fsm_state30");
    sc_trace(mVcdFile, ap_NS_fsm_state33, "ap_NS_fsm_state33");
    sc_trace(mVcdFile, ap_NS_fsm_state36, "ap_NS_fsm_state36");
    sc_trace(mVcdFile, ap_NS_fsm_state39, "ap_NS_fsm_state39");
    sc_trace(mVcdFile, ap_NS_fsm_state42, "ap_NS_fsm_state42");
    sc_trace(mVcdFile, ap_NS_fsm_state45, "ap_NS_fsm_state45");
    sc_trace(mVcdFile, ap_NS_fsm_state48, "ap_NS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, xor_ln57_15_fu_246_p2, "xor_ln57_15_fu_246_p2");
    sc_trace(mVcdFile, xor_ln57_16_fu_258_p2, "xor_ln57_16_fu_258_p2");
    sc_trace(mVcdFile, xor_ln57_17_fu_269_p2, "xor_ln57_17_fu_269_p2");
    sc_trace(mVcdFile, xor_ln57_18_fu_280_p2, "xor_ln57_18_fu_280_p2");
    sc_trace(mVcdFile, xor_ln57_19_fu_291_p2, "xor_ln57_19_fu_291_p2");
    sc_trace(mVcdFile, xor_ln57_20_fu_302_p2, "xor_ln57_20_fu_302_p2");
    sc_trace(mVcdFile, xor_ln57_21_fu_313_p2, "xor_ln57_21_fu_313_p2");
    sc_trace(mVcdFile, xor_ln57_22_fu_324_p2, "xor_ln57_22_fu_324_p2");
    sc_trace(mVcdFile, xor_ln57_23_fu_335_p2, "xor_ln57_23_fu_335_p2");
    sc_trace(mVcdFile, xor_ln57_24_fu_346_p2, "xor_ln57_24_fu_346_p2");
    sc_trace(mVcdFile, xor_ln57_25_fu_357_p2, "xor_ln57_25_fu_357_p2");
    sc_trace(mVcdFile, xor_ln57_26_fu_368_p2, "xor_ln57_26_fu_368_p2");
    sc_trace(mVcdFile, xor_ln57_27_fu_379_p2, "xor_ln57_27_fu_379_p2");
    sc_trace(mVcdFile, xor_ln57_28_fu_390_p2, "xor_ln57_28_fu_390_p2");
    sc_trace(mVcdFile, xor_ln57_29_fu_401_p2, "xor_ln57_29_fu_401_p2");
    sc_trace(mVcdFile, xor_ln64_1_fu_412_p2, "xor_ln64_1_fu_412_p2");
    sc_trace(mVcdFile, xor_ln65_fu_423_p2, "xor_ln65_fu_423_p2");
    sc_trace(mVcdFile, xor_ln64_fu_417_p2, "xor_ln64_fu_417_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
#endif

    }
}

Encrypt_SetKey::~Encrypt_SetKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_feistel_fu_233;
}

void Encrypt_SetKey::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Encrypt_SetKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            ap_return_0_preg = xor_ln65_fu_423_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            ap_return_1_preg = xor_ln64_fu_417_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_feistel_fu_233_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state6.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state9.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state12.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state15.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state18.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state21.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state24.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state27.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state30.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state33.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state36.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state39.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state42.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state45.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state48.read())))) {
            grp_feistel_fu_233_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_feistel_fu_233_ap_ready.read())) {
            grp_feistel_fu_233_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        P_load_2_reg_445 = P_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        xor_ln57_10_reg_560 = xor_ln57_10_fu_351_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        xor_ln57_11_reg_571 = xor_ln57_11_fu_362_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        xor_ln57_12_reg_582 = xor_ln57_12_fu_373_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        xor_ln57_13_reg_593 = xor_ln57_13_fu_384_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        xor_ln57_14_reg_604 = xor_ln57_14_fu_395_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        xor_ln57_1_reg_461 = xor_ln57_1_fu_252_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        xor_ln57_2_reg_472 = xor_ln57_2_fu_263_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        xor_ln57_30_reg_615 = xor_ln57_30_fu_406_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        xor_ln57_3_reg_483 = xor_ln57_3_fu_274_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        xor_ln57_4_reg_494 = xor_ln57_4_fu_285_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        xor_ln57_5_reg_505 = xor_ln57_5_fu_296_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        xor_ln57_6_reg_516 = xor_ln57_6_fu_307_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        xor_ln57_7_reg_527 = xor_ln57_7_fu_318_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        xor_ln57_8_reg_538 = xor_ln57_8_fu_329_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        xor_ln57_9_reg_549 = xor_ln57_9_fu_340_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        xor_ln57_reg_450 = xor_ln57_fu_240_p2.read();
    }
}

void Encrypt_SetKey::thread_P_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        P_address0 = "XXXXX";
    }
}

void Encrypt_SetKey::thread_P_address1() {
    P_address1 =  (sc_lv<5>) (ap_const_lv64_11);
}

void Encrypt_SetKey::thread_P_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        P_ce0 = ap_const_logic_1;
    } else {
        P_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_P_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        P_ce1 = ap_const_logic_1;
    } else {
        P_ce1 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_address0() {
    S_address0 = grp_feistel_fu_233_S_address0.read();
}

void Encrypt_SetKey::thread_S_address1() {
    S_address1 = grp_feistel_fu_233_S_address1.read();
}

void Encrypt_SetKey::thread_S_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        S_ce0 = grp_feistel_fu_233_S_ce0.read();
    } else {
        S_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        S_ce1 = grp_feistel_fu_233_S_ce1.read();
    } else {
        S_ce1 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state12() {
    ap_NS_fsm_state12 = ap_NS_fsm.read()[11];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state15() {
    ap_NS_fsm_state15 = ap_NS_fsm.read()[14];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state18() {
    ap_NS_fsm_state18 = ap_NS_fsm.read()[17];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state21() {
    ap_NS_fsm_state21 = ap_NS_fsm.read()[20];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state24() {
    ap_NS_fsm_state24 = ap_NS_fsm.read()[23];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state27() {
    ap_NS_fsm_state27 = ap_NS_fsm.read()[26];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state3() {
    ap_NS_fsm_state3 = ap_NS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state30() {
    ap_NS_fsm_state30 = ap_NS_fsm.read()[29];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state33() {
    ap_NS_fsm_state33 = ap_NS_fsm.read()[32];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state36() {
    ap_NS_fsm_state36 = ap_NS_fsm.read()[35];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state39() {
    ap_NS_fsm_state39 = ap_NS_fsm.read()[38];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state42() {
    ap_NS_fsm_state42 = ap_NS_fsm.read()[41];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state45() {
    ap_NS_fsm_state45 = ap_NS_fsm.read()[44];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state48() {
    ap_NS_fsm_state48 = ap_NS_fsm.read()[47];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state6() {
    ap_NS_fsm_state6 = ap_NS_fsm.read()[5];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state9() {
    ap_NS_fsm_state9 = ap_NS_fsm.read()[8];
}

void Encrypt_SetKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        ap_return_0 = xor_ln65_fu_423_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void Encrypt_SetKey::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        ap_return_1 = xor_ln64_fu_417_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void Encrypt_SetKey::thread_grp_feistel_fu_233_ap_start() {
    grp_feistel_fu_233_ap_start = grp_feistel_fu_233_ap_start_reg.read();
}

void Encrypt_SetKey::thread_grp_feistel_fu_233_x() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        grp_feistel_fu_233_x = xor_ln57_30_reg_615.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        grp_feistel_fu_233_x = xor_ln57_14_reg_604.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        grp_feistel_fu_233_x = xor_ln57_13_reg_593.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_feistel_fu_233_x = xor_ln57_12_reg_582.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        grp_feistel_fu_233_x = xor_ln57_11_reg_571.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_feistel_fu_233_x = xor_ln57_10_reg_560.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_feistel_fu_233_x = xor_ln57_9_reg_549.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_feistel_fu_233_x = xor_ln57_8_reg_538.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_feistel_fu_233_x = xor_ln57_7_reg_527.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        grp_feistel_fu_233_x = xor_ln57_6_reg_516.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_feistel_fu_233_x = xor_ln57_5_reg_505.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_feistel_fu_233_x = xor_ln57_4_reg_494.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_feistel_fu_233_x = xor_ln57_3_reg_483.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_feistel_fu_233_x = xor_ln57_2_reg_472.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_feistel_fu_233_x = xor_ln57_1_reg_461.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_feistel_fu_233_x = xor_ln57_fu_240_p2.read();
    } else {
        grp_feistel_fu_233_x =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Encrypt_SetKey::thread_xor_ln57_10_fu_351_p2() {
    xor_ln57_10_fu_351_p2 = (xor_ln57_24_fu_346_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_11_fu_362_p2() {
    xor_ln57_11_fu_362_p2 = (xor_ln57_25_fu_357_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_12_fu_373_p2() {
    xor_ln57_12_fu_373_p2 = (xor_ln57_26_fu_368_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_13_fu_384_p2() {
    xor_ln57_13_fu_384_p2 = (xor_ln57_27_fu_379_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_14_fu_395_p2() {
    xor_ln57_14_fu_395_p2 = (xor_ln57_28_fu_390_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_15_fu_246_p2() {
    xor_ln57_15_fu_246_p2 = (grp_feistel_fu_233_ap_return.read() ^ right_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_16_fu_258_p2() {
    xor_ln57_16_fu_258_p2 = (xor_ln57_reg_450.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_17_fu_269_p2() {
    xor_ln57_17_fu_269_p2 = (xor_ln57_1_reg_461.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_18_fu_280_p2() {
    xor_ln57_18_fu_280_p2 = (xor_ln57_2_reg_472.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_19_fu_291_p2() {
    xor_ln57_19_fu_291_p2 = (xor_ln57_3_reg_483.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_1_fu_252_p2() {
    xor_ln57_1_fu_252_p2 = (xor_ln57_15_fu_246_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_20_fu_302_p2() {
    xor_ln57_20_fu_302_p2 = (xor_ln57_4_reg_494.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_21_fu_313_p2() {
    xor_ln57_21_fu_313_p2 = (xor_ln57_5_reg_505.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_22_fu_324_p2() {
    xor_ln57_22_fu_324_p2 = (xor_ln57_6_reg_516.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_23_fu_335_p2() {
    xor_ln57_23_fu_335_p2 = (xor_ln57_7_reg_527.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_24_fu_346_p2() {
    xor_ln57_24_fu_346_p2 = (xor_ln57_8_reg_538.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_25_fu_357_p2() {
    xor_ln57_25_fu_357_p2 = (xor_ln57_9_reg_549.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_26_fu_368_p2() {
    xor_ln57_26_fu_368_p2 = (xor_ln57_10_reg_560.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_27_fu_379_p2() {
    xor_ln57_27_fu_379_p2 = (xor_ln57_11_reg_571.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_28_fu_390_p2() {
    xor_ln57_28_fu_390_p2 = (xor_ln57_12_reg_582.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_29_fu_401_p2() {
    xor_ln57_29_fu_401_p2 = (xor_ln57_13_reg_593.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln57_2_fu_263_p2() {
    xor_ln57_2_fu_263_p2 = (xor_ln57_16_fu_258_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_30_fu_406_p2() {
    xor_ln57_30_fu_406_p2 = (xor_ln57_29_fu_401_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_3_fu_274_p2() {
    xor_ln57_3_fu_274_p2 = (xor_ln57_17_fu_269_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_4_fu_285_p2() {
    xor_ln57_4_fu_285_p2 = (xor_ln57_18_fu_280_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_5_fu_296_p2() {
    xor_ln57_5_fu_296_p2 = (xor_ln57_19_fu_291_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_6_fu_307_p2() {
    xor_ln57_6_fu_307_p2 = (xor_ln57_20_fu_302_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_7_fu_318_p2() {
    xor_ln57_7_fu_318_p2 = (xor_ln57_21_fu_313_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_8_fu_329_p2() {
    xor_ln57_8_fu_329_p2 = (xor_ln57_22_fu_324_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_9_fu_340_p2() {
    xor_ln57_9_fu_340_p2 = (xor_ln57_23_fu_335_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln57_fu_240_p2() {
    xor_ln57_fu_240_p2 = (P_load_2_reg_445.read() ^ left_read.read());
}

void Encrypt_SetKey::thread_xor_ln64_1_fu_412_p2() {
    xor_ln64_1_fu_412_p2 = (xor_ln57_14_reg_604.read() ^ grp_feistel_fu_233_ap_return.read());
}

void Encrypt_SetKey::thread_xor_ln64_fu_417_p2() {
    xor_ln64_fu_417_p2 = (xor_ln64_1_fu_412_p2.read() ^ P_q0.read());
}

void Encrypt_SetKey::thread_xor_ln65_fu_423_p2() {
    xor_ln65_fu_423_p2 = (P_q1.read() ^ xor_ln57_30_reg_615.read());
}

void Encrypt_SetKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<50>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

