// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Decrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Decrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Decrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state1 = "1";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state2 = "10";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state3 = "100";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> Blowfish_Decrypt::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_5 = "101";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_0 = "0";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_6 = "110";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_7 = "111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_A = "1010";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_B = "1011";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_11 = "10001";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_7 = "111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_C = "1100";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1F = "11111";
const sc_lv<4> Blowfish_Decrypt::ap_const_lv4_0 = "0000";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_1F = "11111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_F = "1111";
const sc_lv<56> Blowfish_Decrypt::ap_const_lv56_1 = "1";
const sc_lv<56> Blowfish_Decrypt::ap_const_lv56_2 = "10";
const sc_lv<56> Blowfish_Decrypt::ap_const_lv56_3 = "11";
const bool Blowfish_Decrypt::ap_const_boolean_1 = true;

Blowfish_Decrypt::Blowfish_Decrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_P_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln84_fu_383_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln85_fu_389_p1 );

    SC_METHOD(thread_P_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln84_fu_383_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_S_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln102_fu_452_p1 );
    sensitive << ( tmp_1_fu_481_p3 );

    SC_METHOD(thread_S_address1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_fu_457_p3 );
    sensitive << ( tmp_2_fu_489_p3 );

    SC_METHOD(thread_S_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_S_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_add_ln102_1_fu_503_p2);
    sensitive << ( S_q1 );
    sensitive << ( xor_ln102_fu_498_p2 );

    SC_METHOD(thread_add_ln102_fu_475_p2);
    sensitive << ( S_q0 );
    sensitive << ( S_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_b_fu_432_p4);
    sensitive << ( xor_ln85_2_fu_426_p2 );

    SC_METHOD(thread_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_d_fu_470_p2);
    sensitive << ( trunc_ln85_reg_756 );
    sensitive << ( trunc_ln85_1_fu_466_p1 );

    SC_METHOD(thread_decryptedtext_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_decryptedtext_address1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_decryptedtext_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_decryptedtext_ce1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_decryptedtext_d0);
    sensitive << ( grp_fu_338_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( trunc_ln5_reg_806 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( trunc_ln8_reg_816 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( left_fu_535_p2 );

    SC_METHOD(thread_decryptedtext_d1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( xor_ln179_reg_821 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( xor_ln175_fu_589_p2 );
    sensitive << ( xor_ln91_2_fu_547_p2 );
    sensitive << ( xor_ln90_2_fu_625_p2 );

    SC_METHOD(thread_decryptedtext_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_decryptedtext_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_338_p2);
    sensitive << ( P_q0 );
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_grp_fu_344_p4);
    sensitive << ( grp_fu_338_p2 );

    SC_METHOD(thread_i_fu_394_p2);
    sensitive << ( i_0_reg_327 );

    SC_METHOD(thread_icmp_ln84_fu_383_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_fu_373_p4 );

    SC_METHOD(thread_left_1_fu_355_p5);
    sensitive << ( ciphertext_load_reg_668 );
    sensitive << ( ciphertext_load_1_reg_673 );
    sensitive << ( ciphertext_load_2_reg_688 );
    sensitive << ( ciphertext_load_3_reg_693 );

    SC_METHOD(thread_left_fu_535_p2);
    sensitive << ( P_q0 );
    sensitive << ( left_2_reg_307 );

    SC_METHOD(thread_right_1_fu_363_p5);
    sensitive << ( ciphertext_q0 );
    sensitive << ( ciphertext_q1 );
    sensitive << ( ciphertext_load_4_reg_708 );
    sensitive << ( ciphertext_load_5_reg_713 );

    SC_METHOD(thread_right_fu_509_p2);
    sensitive << ( left_2_reg_307 );
    sensitive << ( add_ln102_1_fu_503_p2 );

    SC_METHOD(thread_tmp_1_fu_481_p3);
    sensitive << ( c_reg_766 );

    SC_METHOD(thread_tmp_2_fu_489_p3);
    sensitive << ( d_fu_470_p2 );

    SC_METHOD(thread_tmp_3_fu_373_p4);
    sensitive << ( i_0_reg_327 );

    SC_METHOD(thread_tmp_fu_457_p3);
    sensitive << ( b_fu_432_p4 );

    SC_METHOD(thread_trunc_ln85_1_fu_466_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln85_2_fu_404_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln85_3_fu_408_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln85_4_fu_412_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln85_5_fu_416_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln85_fu_400_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln90_1_fu_599_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln90_2_fu_603_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln90_3_fu_607_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln90_4_fu_611_p1);
    sensitive << ( right_2_reg_317 );

    SC_METHOD(thread_trunc_ln90_5_fu_615_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln90_fu_595_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln91_1_fu_585_p1);
    sensitive << ( left_2_reg_307 );

    SC_METHOD(thread_trunc_ln91_2_fu_519_p1);
    sensitive << ( left_2_reg_307 );

    SC_METHOD(thread_trunc_ln91_3_fu_523_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln91_4_fu_527_p1);
    sensitive << ( left_2_reg_307 );

    SC_METHOD(thread_trunc_ln91_5_fu_531_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln91_fu_515_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_xor_ln102_fu_498_p2);
    sensitive << ( S_q0 );
    sensitive << ( add_ln102_reg_781 );

    SC_METHOD(thread_xor_ln175_fu_589_p2);
    sensitive << ( trunc_ln91_reg_801 );
    sensitive << ( trunc_ln91_1_fu_585_p1 );

    SC_METHOD(thread_xor_ln179_fu_652_p2);
    sensitive << ( trunc_ln90_1_fu_599_p1 );
    sensitive << ( trunc_ln90_fu_595_p1 );

    SC_METHOD(thread_xor_ln85_1_fu_420_p2);
    sensitive << ( trunc_ln85_5_fu_416_p1 );
    sensitive << ( trunc_ln85_4_fu_412_p1 );

    SC_METHOD(thread_xor_ln85_2_fu_426_p2);
    sensitive << ( trunc_ln85_3_fu_408_p1 );
    sensitive << ( trunc_ln85_2_fu_404_p1 );

    SC_METHOD(thread_xor_ln90_1_fu_619_p2);
    sensitive << ( trunc_ln90_5_fu_615_p1 );
    sensitive << ( trunc_ln90_4_fu_611_p1 );

    SC_METHOD(thread_xor_ln90_2_fu_625_p2);
    sensitive << ( trunc_ln90_3_fu_607_p1 );
    sensitive << ( trunc_ln90_2_fu_603_p1 );

    SC_METHOD(thread_xor_ln91_1_fu_541_p2);
    sensitive << ( trunc_ln91_5_fu_531_p1 );
    sensitive << ( trunc_ln91_4_fu_527_p1 );

    SC_METHOD(thread_xor_ln91_2_fu_547_p2);
    sensitive << ( trunc_ln91_3_fu_523_p1 );
    sensitive << ( trunc_ln91_2_fu_519_p1 );

    SC_METHOD(thread_zext_ln102_fu_452_p1);
    sensitive << ( grp_fu_344_p4 );

    SC_METHOD(thread_zext_ln85_fu_389_p1);
    sensitive << ( i_0_reg_327 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln84_fu_383_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Decrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ciphertext_address0, "(port)ciphertext_address0");
    sc_trace(mVcdFile, ciphertext_ce0, "(port)ciphertext_ce0");
    sc_trace(mVcdFile, ciphertext_q0, "(port)ciphertext_q0");
    sc_trace(mVcdFile, ciphertext_address1, "(port)ciphertext_address1");
    sc_trace(mVcdFile, ciphertext_ce1, "(port)ciphertext_ce1");
    sc_trace(mVcdFile, ciphertext_q1, "(port)ciphertext_q1");
    sc_trace(mVcdFile, decryptedtext_address0, "(port)decryptedtext_address0");
    sc_trace(mVcdFile, decryptedtext_ce0, "(port)decryptedtext_ce0");
    sc_trace(mVcdFile, decryptedtext_we0, "(port)decryptedtext_we0");
    sc_trace(mVcdFile, decryptedtext_d0, "(port)decryptedtext_d0");
    sc_trace(mVcdFile, decryptedtext_address1, "(port)decryptedtext_address1");
    sc_trace(mVcdFile, decryptedtext_ce1, "(port)decryptedtext_ce1");
    sc_trace(mVcdFile, decryptedtext_we1, "(port)decryptedtext_we1");
    sc_trace(mVcdFile, decryptedtext_d1, "(port)decryptedtext_d1");
    sc_trace(mVcdFile, P_address0, "(port)P_address0");
    sc_trace(mVcdFile, P_ce0, "(port)P_ce0");
    sc_trace(mVcdFile, P_q0, "(port)P_q0");
    sc_trace(mVcdFile, S_address0, "(port)S_address0");
    sc_trace(mVcdFile, S_ce0, "(port)S_ce0");
    sc_trace(mVcdFile, S_q0, "(port)S_q0");
    sc_trace(mVcdFile, S_address1, "(port)S_address1");
    sc_trace(mVcdFile, S_ce1, "(port)S_ce1");
    sc_trace(mVcdFile, S_q1, "(port)S_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ciphertext_load_reg_668, "ciphertext_load_reg_668");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ciphertext_load_1_reg_673, "ciphertext_load_1_reg_673");
    sc_trace(mVcdFile, ciphertext_load_2_reg_688, "ciphertext_load_2_reg_688");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ciphertext_load_3_reg_693, "ciphertext_load_3_reg_693");
    sc_trace(mVcdFile, ciphertext_load_4_reg_708, "ciphertext_load_4_reg_708");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ciphertext_load_5_reg_713, "ciphertext_load_5_reg_713");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, left_1_fu_355_p5, "left_1_fu_355_p5");
    sc_trace(mVcdFile, right_1_fu_363_p5, "right_1_fu_363_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln84_fu_383_p2, "icmp_ln84_fu_383_p2");
    sc_trace(mVcdFile, i_fu_394_p2, "i_fu_394_p2");
    sc_trace(mVcdFile, i_reg_751, "i_reg_751");
    sc_trace(mVcdFile, trunc_ln85_fu_400_p1, "trunc_ln85_fu_400_p1");
    sc_trace(mVcdFile, trunc_ln85_reg_756, "trunc_ln85_reg_756");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_338_p2, "grp_fu_338_p2");
    sc_trace(mVcdFile, left_5_reg_761, "left_5_reg_761");
    sc_trace(mVcdFile, c_reg_766, "c_reg_766");
    sc_trace(mVcdFile, add_ln102_fu_475_p2, "add_ln102_fu_475_p2");
    sc_trace(mVcdFile, add_ln102_reg_781, "add_ln102_reg_781");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, right_fu_509_p2, "right_fu_509_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln91_fu_515_p1, "trunc_ln91_fu_515_p1");
    sc_trace(mVcdFile, trunc_ln91_reg_801, "trunc_ln91_reg_801");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, trunc_ln5_reg_806, "trunc_ln5_reg_806");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, trunc_ln8_reg_816, "trunc_ln8_reg_816");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, xor_ln179_fu_652_p2, "xor_ln179_fu_652_p2");
    sc_trace(mVcdFile, xor_ln179_reg_821, "xor_ln179_reg_821");
    sc_trace(mVcdFile, left_2_reg_307, "left_2_reg_307");
    sc_trace(mVcdFile, right_2_reg_317, "right_2_reg_317");
    sc_trace(mVcdFile, i_0_reg_327, "i_0_reg_327");
    sc_trace(mVcdFile, zext_ln85_fu_389_p1, "zext_ln85_fu_389_p1");
    sc_trace(mVcdFile, zext_ln102_fu_452_p1, "zext_ln102_fu_452_p1");
    sc_trace(mVcdFile, tmp_fu_457_p3, "tmp_fu_457_p3");
    sc_trace(mVcdFile, tmp_1_fu_481_p3, "tmp_1_fu_481_p3");
    sc_trace(mVcdFile, tmp_2_fu_489_p3, "tmp_2_fu_489_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, xor_ln175_fu_589_p2, "xor_ln175_fu_589_p2");
    sc_trace(mVcdFile, grp_fu_344_p4, "grp_fu_344_p4");
    sc_trace(mVcdFile, tmp_3_fu_373_p4, "tmp_3_fu_373_p4");
    sc_trace(mVcdFile, trunc_ln85_5_fu_416_p1, "trunc_ln85_5_fu_416_p1");
    sc_trace(mVcdFile, trunc_ln85_4_fu_412_p1, "trunc_ln85_4_fu_412_p1");
    sc_trace(mVcdFile, trunc_ln85_3_fu_408_p1, "trunc_ln85_3_fu_408_p1");
    sc_trace(mVcdFile, trunc_ln85_2_fu_404_p1, "trunc_ln85_2_fu_404_p1");
    sc_trace(mVcdFile, xor_ln85_2_fu_426_p2, "xor_ln85_2_fu_426_p2");
    sc_trace(mVcdFile, xor_ln85_1_fu_420_p2, "xor_ln85_1_fu_420_p2");
    sc_trace(mVcdFile, b_fu_432_p4, "b_fu_432_p4");
    sc_trace(mVcdFile, trunc_ln85_1_fu_466_p1, "trunc_ln85_1_fu_466_p1");
    sc_trace(mVcdFile, d_fu_470_p2, "d_fu_470_p2");
    sc_trace(mVcdFile, xor_ln102_fu_498_p2, "xor_ln102_fu_498_p2");
    sc_trace(mVcdFile, add_ln102_1_fu_503_p2, "add_ln102_1_fu_503_p2");
    sc_trace(mVcdFile, trunc_ln91_5_fu_531_p1, "trunc_ln91_5_fu_531_p1");
    sc_trace(mVcdFile, trunc_ln91_4_fu_527_p1, "trunc_ln91_4_fu_527_p1");
    sc_trace(mVcdFile, trunc_ln91_3_fu_523_p1, "trunc_ln91_3_fu_523_p1");
    sc_trace(mVcdFile, trunc_ln91_2_fu_519_p1, "trunc_ln91_2_fu_519_p1");
    sc_trace(mVcdFile, left_fu_535_p2, "left_fu_535_p2");
    sc_trace(mVcdFile, xor_ln91_2_fu_547_p2, "xor_ln91_2_fu_547_p2");
    sc_trace(mVcdFile, xor_ln91_1_fu_541_p2, "xor_ln91_1_fu_541_p2");
    sc_trace(mVcdFile, trunc_ln91_1_fu_585_p1, "trunc_ln91_1_fu_585_p1");
    sc_trace(mVcdFile, trunc_ln90_5_fu_615_p1, "trunc_ln90_5_fu_615_p1");
    sc_trace(mVcdFile, trunc_ln90_4_fu_611_p1, "trunc_ln90_4_fu_611_p1");
    sc_trace(mVcdFile, trunc_ln90_3_fu_607_p1, "trunc_ln90_3_fu_607_p1");
    sc_trace(mVcdFile, trunc_ln90_2_fu_603_p1, "trunc_ln90_2_fu_603_p1");
    sc_trace(mVcdFile, xor_ln90_2_fu_625_p2, "xor_ln90_2_fu_625_p2");
    sc_trace(mVcdFile, xor_ln90_1_fu_619_p2, "xor_ln90_1_fu_619_p2");
    sc_trace(mVcdFile, trunc_ln90_1_fu_599_p1, "trunc_ln90_1_fu_599_p1");
    sc_trace(mVcdFile, trunc_ln90_fu_595_p1, "trunc_ln90_fu_595_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Blowfish_Decrypt.hdltvin.dat");
    mHdltvoutHandle.open("Blowfish_Decrypt.hdltvout.dat");
}

Blowfish_Decrypt::~Blowfish_Decrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Blowfish_Decrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_reg_327 = i_reg_751.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_327 = ap_const_lv5_11;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        left_2_reg_307 = left_5_reg_761.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        left_2_reg_307 = right_1_fu_363_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        right_2_reg_317 = right_fu_509_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_2_reg_317 = left_1_fu_355_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        add_ln102_reg_781 = add_ln102_fu_475_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        c_reg_766 = xor_ln85_1_fu_420_p2.read().range(15, 8);
        left_5_reg_761 = grp_fu_338_p2.read();
        trunc_ln85_reg_756 = trunc_ln85_fu_400_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_load_1_reg_673 = ciphertext_q1.read();
        ciphertext_load_reg_668 = ciphertext_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_load_2_reg_688 = ciphertext_q0.read();
        ciphertext_load_3_reg_693 = ciphertext_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_load_4_reg_708 = ciphertext_q0.read();
        ciphertext_load_5_reg_713 = ciphertext_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_0))) {
        i_reg_751 = i_fu_394_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        trunc_ln5_reg_806 = xor_ln91_1_fu_541_p2.read().range(15, 8);
        trunc_ln91_reg_801 = trunc_ln91_fu_515_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        trunc_ln8_reg_816 = xor_ln90_1_fu_619_p2.read().range(15, 8);
        xor_ln179_reg_821 = xor_ln179_fu_652_p2.read();
    }
}

void Blowfish_Decrypt::thread_P_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_1))) {
        P_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_0))) {
        P_address0 =  (sc_lv<5>) (zext_ln85_fu_389_p1.read());
    } else {
        P_address0 = "XXXXX";
    }
}

void Blowfish_Decrypt::thread_P_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_1)))) {
        P_ce0 = ap_const_logic_1;
    } else {
        P_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        S_address0 =  (sc_lv<10>) (tmp_1_fu_481_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_address0 =  (sc_lv<10>) (zext_ln102_fu_452_p1.read());
    } else {
        S_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_S_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        S_address1 =  (sc_lv<10>) (tmp_2_fu_489_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_address1 =  (sc_lv<10>) (tmp_fu_457_p3.read());
    } else {
        S_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_S_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        S_ce0 = ap_const_logic_1;
    } else {
        S_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        S_ce1 = ap_const_logic_1;
    } else {
        S_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_add_ln102_1_fu_503_p2() {
    add_ln102_1_fu_503_p2 = (!S_q1.read().is_01() || !xor_ln102_fu_498_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_q1.read()) + sc_biguint<32>(xor_ln102_fu_498_p2.read()));
}

void Blowfish_Decrypt::thread_add_ln102_fu_475_p2() {
    add_ln102_fu_475_p2 = (!S_q0.read().is_01() || !S_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_q0.read()) + sc_biguint<32>(S_q1.read()));
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Blowfish_Decrypt::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_b_fu_432_p4() {
    b_fu_432_p4 = xor_ln85_2_fu_426_p2.read().range(23, 16);
}

void Blowfish_Decrypt::thread_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        ciphertext_address0 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Decrypt::thread_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        ciphertext_address1 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce0 = ap_const_logic_1;
    } else {
        ciphertext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce1 = ap_const_logic_1;
    } else {
        ciphertext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_d_fu_470_p2() {
    d_fu_470_p2 = (trunc_ln85_1_fu_466_p1.read() ^ trunc_ln85_reg_756.read());
}

void Blowfish_Decrypt::thread_decryptedtext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        decryptedtext_address0 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        decryptedtext_address1 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        decryptedtext_ce0 = ap_const_logic_1;
    } else {
        decryptedtext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        decryptedtext_ce1 = ap_const_logic_1;
    } else {
        decryptedtext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        decryptedtext_d0 = trunc_ln8_reg_816.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d0 = grp_fu_338_p2.read().range(31, 24);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d0 = trunc_ln5_reg_806.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d0 = left_fu_535_p2.read().range(31, 24);
    } else {
        decryptedtext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        decryptedtext_d1 = xor_ln179_reg_821.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d1 = xor_ln90_2_fu_625_p2.read().range(23, 16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d1 = xor_ln175_fu_589_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d1 = xor_ln91_2_fu_547_p2.read().range(23, 16);
    } else {
        decryptedtext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        decryptedtext_we0 = ap_const_logic_1;
    } else {
        decryptedtext_we0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        decryptedtext_we1 = ap_const_logic_1;
    } else {
        decryptedtext_we1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_grp_fu_338_p2() {
    grp_fu_338_p2 = (P_q0.read() ^ right_2_reg_317.read());
}

void Blowfish_Decrypt::thread_grp_fu_344_p4() {
    grp_fu_344_p4 = grp_fu_338_p2.read().range(31, 24);
}

void Blowfish_Decrypt::thread_i_fu_394_p2() {
    i_fu_394_p2 = (!ap_const_lv5_1F.is_01() || !i_0_reg_327.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(i_0_reg_327.read()));
}

void Blowfish_Decrypt::thread_icmp_ln84_fu_383_p2() {
    icmp_ln84_fu_383_p2 = (!tmp_3_fu_373_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_373_p4.read() == ap_const_lv4_0);
}

void Blowfish_Decrypt::thread_left_1_fu_355_p5() {
    left_1_fu_355_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_reg_668.read(), ciphertext_load_1_reg_673.read()), ciphertext_load_2_reg_688.read()), ciphertext_load_3_reg_693.read());
}

void Blowfish_Decrypt::thread_left_fu_535_p2() {
    left_fu_535_p2 = (P_q0.read() ^ left_2_reg_307.read());
}

void Blowfish_Decrypt::thread_right_1_fu_363_p5() {
    right_1_fu_363_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_4_reg_708.read(), ciphertext_load_5_reg_713.read()), ciphertext_q0.read()), ciphertext_q1.read());
}

void Blowfish_Decrypt::thread_right_fu_509_p2() {
    right_fu_509_p2 = (left_2_reg_307.read() ^ add_ln102_1_fu_503_p2.read());
}

void Blowfish_Decrypt::thread_tmp_1_fu_481_p3() {
    tmp_1_fu_481_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_766.read());
}

void Blowfish_Decrypt::thread_tmp_2_fu_489_p3() {
    tmp_2_fu_489_p3 = esl_concat<56,8>(ap_const_lv56_3, d_fu_470_p2.read());
}

void Blowfish_Decrypt::thread_tmp_3_fu_373_p4() {
    tmp_3_fu_373_p4 = i_0_reg_327.read().range(4, 1);
}

void Blowfish_Decrypt::thread_tmp_fu_457_p3() {
    tmp_fu_457_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_432_p4.read());
}

void Blowfish_Decrypt::thread_trunc_ln85_1_fu_466_p1() {
    trunc_ln85_1_fu_466_p1 = right_2_reg_317.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln85_2_fu_404_p1() {
    trunc_ln85_2_fu_404_p1 = right_2_reg_317.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln85_3_fu_408_p1() {
    trunc_ln85_3_fu_408_p1 = P_q0.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln85_4_fu_412_p1() {
    trunc_ln85_4_fu_412_p1 = right_2_reg_317.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln85_5_fu_416_p1() {
    trunc_ln85_5_fu_416_p1 = P_q0.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln85_fu_400_p1() {
    trunc_ln85_fu_400_p1 = P_q0.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_1_fu_599_p1() {
    trunc_ln90_1_fu_599_p1 = right_2_reg_317.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_2_fu_603_p1() {
    trunc_ln90_2_fu_603_p1 = right_2_reg_317.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_3_fu_607_p1() {
    trunc_ln90_3_fu_607_p1 = P_q0.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_4_fu_611_p1() {
    trunc_ln90_4_fu_611_p1 = right_2_reg_317.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_5_fu_615_p1() {
    trunc_ln90_5_fu_615_p1 = P_q0.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln90_fu_595_p1() {
    trunc_ln90_fu_595_p1 = P_q0.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_1_fu_585_p1() {
    trunc_ln91_1_fu_585_p1 = left_2_reg_307.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_2_fu_519_p1() {
    trunc_ln91_2_fu_519_p1 = left_2_reg_307.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_3_fu_523_p1() {
    trunc_ln91_3_fu_523_p1 = P_q0.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_4_fu_527_p1() {
    trunc_ln91_4_fu_527_p1 = left_2_reg_307.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_5_fu_531_p1() {
    trunc_ln91_5_fu_531_p1 = P_q0.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln91_fu_515_p1() {
    trunc_ln91_fu_515_p1 = P_q0.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_xor_ln102_fu_498_p2() {
    xor_ln102_fu_498_p2 = (S_q0.read() ^ add_ln102_reg_781.read());
}

void Blowfish_Decrypt::thread_xor_ln175_fu_589_p2() {
    xor_ln175_fu_589_p2 = (trunc_ln91_1_fu_585_p1.read() ^ trunc_ln91_reg_801.read());
}

void Blowfish_Decrypt::thread_xor_ln179_fu_652_p2() {
    xor_ln179_fu_652_p2 = (trunc_ln90_1_fu_599_p1.read() ^ trunc_ln90_fu_595_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln85_1_fu_420_p2() {
    xor_ln85_1_fu_420_p2 = (trunc_ln85_5_fu_416_p1.read() ^ trunc_ln85_4_fu_412_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln85_2_fu_426_p2() {
    xor_ln85_2_fu_426_p2 = (trunc_ln85_3_fu_408_p1.read() ^ trunc_ln85_2_fu_404_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln90_1_fu_619_p2() {
    xor_ln90_1_fu_619_p2 = (trunc_ln90_5_fu_615_p1.read() ^ trunc_ln90_4_fu_611_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln90_2_fu_625_p2() {
    xor_ln90_2_fu_625_p2 = (trunc_ln90_3_fu_607_p1.read() ^ trunc_ln90_2_fu_603_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln91_1_fu_541_p2() {
    xor_ln91_1_fu_541_p2 = (trunc_ln91_5_fu_531_p1.read() ^ trunc_ln91_4_fu_527_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln91_2_fu_547_p2() {
    xor_ln91_2_fu_547_p2 = (trunc_ln91_3_fu_523_p1.read() ^ trunc_ln91_2_fu_519_p1.read());
}

void Blowfish_Decrypt::thread_zext_ln102_fu_452_p1() {
    zext_ln102_fu_452_p1 = esl_zext<64,8>(grp_fu_344_p4.read());
}

void Blowfish_Decrypt::thread_zext_ln85_fu_389_p1() {
    zext_ln85_fu_389_p1 = esl_zext<64,5>(i_0_reg_327.read());
}

void Blowfish_Decrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln84_fu_383_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void Blowfish_Decrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_address0\" :  \"" << ciphertext_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_ce0\" :  \"" << ciphertext_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_q0\" :  \"" << ciphertext_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_address1\" :  \"" << ciphertext_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_ce1\" :  \"" << ciphertext_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_q1\" :  \"" << ciphertext_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_address0\" :  \"" << decryptedtext_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_ce0\" :  \"" << decryptedtext_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_we0\" :  \"" << decryptedtext_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_d0\" :  \"" << decryptedtext_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_address1\" :  \"" << decryptedtext_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_ce1\" :  \"" << decryptedtext_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_we1\" :  \"" << decryptedtext_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decryptedtext_d1\" :  \"" << decryptedtext_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_address0\" :  \"" << P_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_ce0\" :  \"" << P_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"P_q0\" :  \"" << P_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_address0\" :  \"" << S_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_ce0\" :  \"" << S_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_q0\" :  \"" << S_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_address1\" :  \"" << S_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"S_ce1\" :  \"" << S_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S_q1\" :  \"" << S_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

