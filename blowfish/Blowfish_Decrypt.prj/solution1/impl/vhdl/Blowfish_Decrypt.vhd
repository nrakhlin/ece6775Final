-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce0 : OUT STD_LOGIC;
    decryptedtext_we0 : OUT STD_LOGIC;
    decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce1 : OUT STD_LOGIC;
    decryptedtext_we1 : OUT STD_LOGIC;
    decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce0 : OUT STD_LOGIC;
    P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_Decrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_Decrypt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.799000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=673,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ciphertext_load_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ciphertext_load_1_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_2_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ciphertext_load_3_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_4_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ciphertext_load_5_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal left_1_fu_355_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_1_fu_363_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln84_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_751 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln85_fu_400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_5_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln102_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal right_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln91_fu_515_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln91_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln5_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln8_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln179_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_reg_821 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_2_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_2_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_327 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln85_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_481_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_489_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln175_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_373_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln85_5_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln85_4_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln85_3_fu_408_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln85_2_fu_404_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln85_2_fu_426_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln85_1_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_1_fu_466_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln102_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln102_1_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln91_5_fu_531_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln91_4_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln91_3_fu_523_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln91_2_fu_519_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal left_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln91_2_fu_547_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln91_1_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln91_1_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln90_5_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln90_4_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln90_3_fu_607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln90_2_fu_603_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln90_2_fu_625_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln90_1_fu_619_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln90_1_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln90_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_327 <= i_reg_751;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_327 <= ap_const_lv5_11;
            end if; 
        end if;
    end process;

    left_2_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                left_2_reg_307 <= left_5_reg_761;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                left_2_reg_307 <= right_1_fu_363_p5;
            end if; 
        end if;
    end process;

    right_2_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                right_2_reg_317 <= right_fu_509_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                right_2_reg_317 <= left_1_fu_355_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln102_reg_781 <= add_ln102_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_reg_766 <= xor_ln85_1_fu_420_p2(15 downto 8);
                left_5_reg_761 <= grp_fu_338_p2;
                trunc_ln85_reg_756 <= trunc_ln85_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ciphertext_load_1_reg_673 <= ciphertext_q1;
                ciphertext_load_reg_668 <= ciphertext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ciphertext_load_2_reg_688 <= ciphertext_q0;
                ciphertext_load_3_reg_693 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ciphertext_load_4_reg_708 <= ciphertext_q0;
                ciphertext_load_5_reg_713 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_0))) then
                i_reg_751 <= i_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln5_reg_806 <= xor_ln91_1_fu_541_p2(15 downto 8);
                trunc_ln91_reg_801 <= trunc_ln91_fu_515_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln8_reg_816 <= xor_ln90_1_fu_619_p2(15 downto 8);
                xor_ln179_reg_821 <= xor_ln179_fu_652_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln84_fu_383_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    P_address0_assign_proc : process(ap_CS_fsm_state6, icmp_ln84_fu_383_p2, ap_CS_fsm_state11, zext_ln85_fu_389_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            P_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_1))) then 
            P_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_0))) then 
            P_address0 <= zext_ln85_fu_389_p1(5 - 1 downto 0);
        else 
            P_address0 <= "XXXXX";
        end if; 
    end process;


    P_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln84_fu_383_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln84_fu_383_p2 = ap_const_lv1_0)))) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln102_fu_452_p1, tmp_1_fu_481_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_address0 <= tmp_1_fu_481_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_address0 <= zext_ln102_fu_452_p1(10 - 1 downto 0);
        else 
            S_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_fu_457_p3, tmp_2_fu_489_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_address1 <= tmp_2_fu_489_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_address1 <= tmp_fu_457_p3(10 - 1 downto 0);
        else 
            S_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln102_1_fu_503_p2 <= std_logic_vector(unsigned(S_q1) + unsigned(xor_ln102_fu_498_p2));
    add_ln102_fu_475_p2 <= std_logic_vector(unsigned(S_q0) + unsigned(S_q1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_432_p4 <= xor_ln85_2_fu_426_p2(23 downto 16);

    ciphertext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_470_p2 <= (trunc_ln85_reg_756 xor trunc_ln85_1_fu_466_p1);

    decryptedtext_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            decryptedtext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            decryptedtext_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            decryptedtext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            decryptedtext_address1 <= "XXX";
        end if; 
    end process;


    decryptedtext_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            decryptedtext_ce0 <= ap_const_logic_1;
        else 
            decryptedtext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            decryptedtext_ce1 <= ap_const_logic_1;
        else 
            decryptedtext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_d0_assign_proc : process(grp_fu_338_p2, ap_CS_fsm_state10, trunc_ln5_reg_806, ap_CS_fsm_state11, trunc_ln8_reg_816, ap_CS_fsm_state12, ap_CS_fsm_state13, left_fu_535_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            decryptedtext_d0 <= trunc_ln8_reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d0 <= grp_fu_338_p2(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d0 <= trunc_ln5_reg_806;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d0 <= left_fu_535_p2(31 downto 24);
        else 
            decryptedtext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_d1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, xor_ln179_reg_821, ap_CS_fsm_state13, xor_ln175_fu_589_p2, xor_ln91_2_fu_547_p2, xor_ln90_2_fu_625_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            decryptedtext_d1 <= xor_ln179_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d1 <= xor_ln90_2_fu_625_p2(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d1 <= xor_ln175_fu_589_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d1 <= xor_ln91_2_fu_547_p2(23 downto 16);
        else 
            decryptedtext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            decryptedtext_we0 <= ap_const_logic_1;
        else 
            decryptedtext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            decryptedtext_we1 <= ap_const_logic_1;
        else 
            decryptedtext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_338_p2 <= (right_2_reg_317 xor P_q0);
    grp_fu_344_p4 <= grp_fu_338_p2(31 downto 24);
    i_fu_394_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(i_0_reg_327));
    icmp_ln84_fu_383_p2 <= "1" when (tmp_3_fu_373_p4 = ap_const_lv4_0) else "0";
    left_1_fu_355_p5 <= (((ciphertext_load_reg_668 & ciphertext_load_1_reg_673) & ciphertext_load_2_reg_688) & ciphertext_load_3_reg_693);
    left_fu_535_p2 <= (left_2_reg_307 xor P_q0);
    right_1_fu_363_p5 <= (((ciphertext_load_4_reg_708 & ciphertext_load_5_reg_713) & ciphertext_q0) & ciphertext_q1);
    right_fu_509_p2 <= (left_2_reg_307 xor add_ln102_1_fu_503_p2);
    tmp_1_fu_481_p3 <= (ap_const_lv56_2 & c_reg_766);
    tmp_2_fu_489_p3 <= (ap_const_lv56_3 & d_fu_470_p2);
    tmp_3_fu_373_p4 <= i_0_reg_327(4 downto 1);
    tmp_fu_457_p3 <= (ap_const_lv56_1 & b_fu_432_p4);
    trunc_ln85_1_fu_466_p1 <= right_2_reg_317(8 - 1 downto 0);
    trunc_ln85_2_fu_404_p1 <= right_2_reg_317(24 - 1 downto 0);
    trunc_ln85_3_fu_408_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln85_4_fu_412_p1 <= right_2_reg_317(16 - 1 downto 0);
    trunc_ln85_5_fu_416_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln85_fu_400_p1 <= P_q0(8 - 1 downto 0);
    trunc_ln90_1_fu_599_p1 <= right_2_reg_317(8 - 1 downto 0);
    trunc_ln90_2_fu_603_p1 <= right_2_reg_317(24 - 1 downto 0);
    trunc_ln90_3_fu_607_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln90_4_fu_611_p1 <= right_2_reg_317(16 - 1 downto 0);
    trunc_ln90_5_fu_615_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln90_fu_595_p1 <= P_q0(8 - 1 downto 0);
    trunc_ln91_1_fu_585_p1 <= left_2_reg_307(8 - 1 downto 0);
    trunc_ln91_2_fu_519_p1 <= left_2_reg_307(24 - 1 downto 0);
    trunc_ln91_3_fu_523_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln91_4_fu_527_p1 <= left_2_reg_307(16 - 1 downto 0);
    trunc_ln91_5_fu_531_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln91_fu_515_p1 <= P_q0(8 - 1 downto 0);
    xor_ln102_fu_498_p2 <= (add_ln102_reg_781 xor S_q0);
    xor_ln175_fu_589_p2 <= (trunc_ln91_reg_801 xor trunc_ln91_1_fu_585_p1);
    xor_ln179_fu_652_p2 <= (trunc_ln90_fu_595_p1 xor trunc_ln90_1_fu_599_p1);
    xor_ln85_1_fu_420_p2 <= (trunc_ln85_5_fu_416_p1 xor trunc_ln85_4_fu_412_p1);
    xor_ln85_2_fu_426_p2 <= (trunc_ln85_3_fu_408_p1 xor trunc_ln85_2_fu_404_p1);
    xor_ln90_1_fu_619_p2 <= (trunc_ln90_5_fu_615_p1 xor trunc_ln90_4_fu_611_p1);
    xor_ln90_2_fu_625_p2 <= (trunc_ln90_3_fu_607_p1 xor trunc_ln90_2_fu_603_p1);
    xor_ln91_1_fu_541_p2 <= (trunc_ln91_5_fu_531_p1 xor trunc_ln91_4_fu_527_p1);
    xor_ln91_2_fu_547_p2 <= (trunc_ln91_3_fu_523_p1 xor trunc_ln91_2_fu_519_p1);
    zext_ln102_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_344_p4),64));
    zext_ln85_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_327),64));
end behav;
