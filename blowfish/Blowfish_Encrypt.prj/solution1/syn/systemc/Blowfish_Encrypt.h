// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Blowfish_Encrypt_HH_
#define _Blowfish_Encrypt_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Blowfish_Encrypt : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > plaintext_address0;
    sc_out< sc_logic > plaintext_ce0;
    sc_in< sc_lv<8> > plaintext_q0;
    sc_out< sc_lv<3> > plaintext_address1;
    sc_out< sc_logic > plaintext_ce1;
    sc_in< sc_lv<8> > plaintext_q1;
    sc_out< sc_lv<3> > ciphertext_address0;
    sc_out< sc_logic > ciphertext_ce0;
    sc_out< sc_logic > ciphertext_we0;
    sc_out< sc_lv<8> > ciphertext_d0;
    sc_out< sc_lv<3> > ciphertext_address1;
    sc_out< sc_logic > ciphertext_ce1;
    sc_out< sc_logic > ciphertext_we1;
    sc_out< sc_lv<8> > ciphertext_d1;
    sc_out< sc_lv<5> > P_address0;
    sc_out< sc_logic > P_ce0;
    sc_in< sc_lv<32> > P_q0;
    sc_out< sc_lv<10> > S_address0;
    sc_out< sc_logic > S_ce0;
    sc_in< sc_lv<32> > S_q0;
    sc_out< sc_lv<10> > S_address1;
    sc_out< sc_logic > S_ce1;
    sc_in< sc_lv<32> > S_q1;


    // Module declarations
    Blowfish_Encrypt(sc_module_name name);
    SC_HAS_PROCESS(Blowfish_Encrypt);

    ~Blowfish_Encrypt();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > plaintext_load_reg_655;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > plaintext_load_1_reg_660;
    sc_signal< sc_lv<8> > plaintext_load_2_reg_675;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > plaintext_load_3_reg_680;
    sc_signal< sc_lv<8> > plaintext_load_4_reg_695;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > plaintext_load_5_reg_700;
    sc_signal< sc_lv<32> > left_1_fu_352_p5;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > right_1_fu_360_p5;
    sc_signal< sc_lv<5> > i_fu_376_p2;
    sc_signal< sc_lv<5> > i_reg_728;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln65_fu_370_p2;
    sc_signal< sc_lv<8> > trunc_ln66_fu_387_p1;
    sc_signal< sc_lv<8> > trunc_ln66_reg_743;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > grp_fu_335_p2;
    sc_signal< sc_lv<32> > left_5_reg_748;
    sc_signal< sc_lv<8> > c_reg_753;
    sc_signal< sc_lv<32> > add_ln102_fu_462_p2;
    sc_signal< sc_lv<32> > add_ln102_reg_768;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > right_fu_496_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > trunc_ln72_fu_502_p1;
    sc_signal< sc_lv<8> > trunc_ln72_reg_788;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<8> > trunc_ln4_reg_793;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<8> > trunc_ln7_reg_803;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<8> > xor_ln179_fu_639_p2;
    sc_signal< sc_lv<8> > xor_ln179_reg_808;
    sc_signal< sc_lv<32> > left_2_reg_304;
    sc_signal< sc_lv<32> > right_2_reg_314;
    sc_signal< sc_lv<5> > i_0_reg_324;
    sc_signal< sc_lv<64> > zext_ln66_fu_382_p1;
    sc_signal< sc_lv<64> > zext_ln102_fu_439_p1;
    sc_signal< sc_lv<64> > tmp_fu_444_p3;
    sc_signal< sc_lv<64> > tmp_1_fu_468_p3;
    sc_signal< sc_lv<64> > tmp_2_fu_476_p3;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<8> > xor_ln175_fu_576_p2;
    sc_signal< sc_lv<8> > grp_fu_341_p4;
    sc_signal< sc_lv<16> > trunc_ln66_5_fu_403_p1;
    sc_signal< sc_lv<16> > trunc_ln66_4_fu_399_p1;
    sc_signal< sc_lv<24> > trunc_ln66_3_fu_395_p1;
    sc_signal< sc_lv<24> > trunc_ln66_2_fu_391_p1;
    sc_signal< sc_lv<24> > xor_ln66_2_fu_413_p2;
    sc_signal< sc_lv<16> > xor_ln66_1_fu_407_p2;
    sc_signal< sc_lv<8> > b_fu_419_p4;
    sc_signal< sc_lv<8> > trunc_ln66_1_fu_453_p1;
    sc_signal< sc_lv<8> > d_fu_457_p2;
    sc_signal< sc_lv<32> > xor_ln102_fu_485_p2;
    sc_signal< sc_lv<32> > add_ln102_1_fu_490_p2;
    sc_signal< sc_lv<16> > trunc_ln72_5_fu_518_p1;
    sc_signal< sc_lv<16> > trunc_ln72_4_fu_514_p1;
    sc_signal< sc_lv<24> > trunc_ln72_3_fu_510_p1;
    sc_signal< sc_lv<24> > trunc_ln72_2_fu_506_p1;
    sc_signal< sc_lv<32> > left_fu_522_p2;
    sc_signal< sc_lv<24> > xor_ln72_2_fu_534_p2;
    sc_signal< sc_lv<16> > xor_ln72_1_fu_528_p2;
    sc_signal< sc_lv<8> > trunc_ln72_1_fu_572_p1;
    sc_signal< sc_lv<16> > trunc_ln71_5_fu_602_p1;
    sc_signal< sc_lv<16> > trunc_ln71_4_fu_598_p1;
    sc_signal< sc_lv<24> > trunc_ln71_3_fu_594_p1;
    sc_signal< sc_lv<24> > trunc_ln71_2_fu_590_p1;
    sc_signal< sc_lv<24> > xor_ln71_2_fu_612_p2;
    sc_signal< sc_lv<16> > xor_ln71_1_fu_606_p2;
    sc_signal< sc_lv<8> > trunc_ln71_1_fu_586_p1;
    sc_signal< sc_lv<8> > trunc_ln71_fu_582_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_11;
    static const sc_lv<64> ap_const_lv64_10;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<56> ap_const_lv56_1;
    static const sc_lv<56> ap_const_lv56_2;
    static const sc_lv<56> ap_const_lv56_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_P_address0();
    void thread_P_ce0();
    void thread_S_address0();
    void thread_S_address1();
    void thread_S_ce0();
    void thread_S_ce1();
    void thread_add_ln102_1_fu_490_p2();
    void thread_add_ln102_fu_462_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_fu_419_p4();
    void thread_ciphertext_address0();
    void thread_ciphertext_address1();
    void thread_ciphertext_ce0();
    void thread_ciphertext_ce1();
    void thread_ciphertext_d0();
    void thread_ciphertext_d1();
    void thread_ciphertext_we0();
    void thread_ciphertext_we1();
    void thread_d_fu_457_p2();
    void thread_grp_fu_335_p2();
    void thread_grp_fu_341_p4();
    void thread_i_fu_376_p2();
    void thread_icmp_ln65_fu_370_p2();
    void thread_left_1_fu_352_p5();
    void thread_left_fu_522_p2();
    void thread_plaintext_address0();
    void thread_plaintext_address1();
    void thread_plaintext_ce0();
    void thread_plaintext_ce1();
    void thread_right_1_fu_360_p5();
    void thread_right_fu_496_p2();
    void thread_tmp_1_fu_468_p3();
    void thread_tmp_2_fu_476_p3();
    void thread_tmp_fu_444_p3();
    void thread_trunc_ln66_1_fu_453_p1();
    void thread_trunc_ln66_2_fu_391_p1();
    void thread_trunc_ln66_3_fu_395_p1();
    void thread_trunc_ln66_4_fu_399_p1();
    void thread_trunc_ln66_5_fu_403_p1();
    void thread_trunc_ln66_fu_387_p1();
    void thread_trunc_ln71_1_fu_586_p1();
    void thread_trunc_ln71_2_fu_590_p1();
    void thread_trunc_ln71_3_fu_594_p1();
    void thread_trunc_ln71_4_fu_598_p1();
    void thread_trunc_ln71_5_fu_602_p1();
    void thread_trunc_ln71_fu_582_p1();
    void thread_trunc_ln72_1_fu_572_p1();
    void thread_trunc_ln72_2_fu_506_p1();
    void thread_trunc_ln72_3_fu_510_p1();
    void thread_trunc_ln72_4_fu_514_p1();
    void thread_trunc_ln72_5_fu_518_p1();
    void thread_trunc_ln72_fu_502_p1();
    void thread_xor_ln102_fu_485_p2();
    void thread_xor_ln175_fu_576_p2();
    void thread_xor_ln179_fu_639_p2();
    void thread_xor_ln66_1_fu_407_p2();
    void thread_xor_ln66_2_fu_413_p2();
    void thread_xor_ln71_1_fu_606_p2();
    void thread_xor_ln71_2_fu_612_p2();
    void thread_xor_ln72_1_fu_528_p2();
    void thread_xor_ln72_2_fu_534_p2();
    void thread_zext_ln102_fu_439_p1();
    void thread_zext_ln66_fu_382_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
