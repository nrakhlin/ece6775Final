// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Encrypt_SetKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Encrypt_SetKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Encrypt_SetKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state1 = "1";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state2 = "10";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state3 = "100";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state4 = "1000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state5 = "10000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state6 = "100000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<33> Encrypt_SetKey::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1 = "1";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_3 = "11";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_5 = "101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_7 = "111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_9 = "1001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_B = "1011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_D = "1101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_F = "1111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_11 = "10001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_13 = "10011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_15 = "10101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_17 = "10111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_19 = "11001";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1B = "11011";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1D = "11101";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1F = "11111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2 = "10";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_4 = "100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_6 = "110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_8 = "1000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_A = "1010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_C = "1100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_E = "1110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_10 = "10000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_12 = "10010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_14 = "10100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_16 = "10110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_18 = "11000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1A = "11010";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1C = "11100";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1E = "11110";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_20 = "100000";
const bool Encrypt_SetKey::ap_const_boolean_1 = true;

Encrypt_SetKey::Encrypt_SetKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_feistel_fu_174 = new feistel("grp_feistel_fu_174");
    grp_feistel_fu_174->ap_clk(ap_clk);
    grp_feistel_fu_174->ap_rst(ap_rst);
    grp_feistel_fu_174->ap_start(grp_feistel_fu_174_ap_start);
    grp_feistel_fu_174->ap_done(grp_feistel_fu_174_ap_done);
    grp_feistel_fu_174->ap_idle(grp_feistel_fu_174_ap_idle);
    grp_feistel_fu_174->ap_ready(grp_feistel_fu_174_ap_ready);
    grp_feistel_fu_174->ap_ce(ap_var_for_const0);
    grp_feistel_fu_174->x(grp_feistel_fu_174_x);
    grp_feistel_fu_174->S_0_address0(grp_feistel_fu_174_S_0_address0);
    grp_feistel_fu_174->S_0_ce0(grp_feistel_fu_174_S_0_ce0);
    grp_feistel_fu_174->S_0_q0(S_0_q0);
    grp_feistel_fu_174->S_1_address0(grp_feistel_fu_174_S_1_address0);
    grp_feistel_fu_174->S_1_ce0(grp_feistel_fu_174_S_1_ce0);
    grp_feistel_fu_174->S_1_q0(S_1_q0);
    grp_feistel_fu_174->S_2_address0(grp_feistel_fu_174_S_2_address0);
    grp_feistel_fu_174->S_2_ce0(grp_feistel_fu_174_S_2_ce0);
    grp_feistel_fu_174->S_2_q0(S_2_q0);
    grp_feistel_fu_174->S_3_address0(grp_feistel_fu_174_S_3_address0);
    grp_feistel_fu_174->S_3_ce0(grp_feistel_fu_174_S_3_ce0);
    grp_feistel_fu_174->S_3_q0(S_3_q0);
    grp_feistel_fu_174->ap_return(grp_feistel_fu_174_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_0_address0 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_0_ce0 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_1_address0 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_1_ce0 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_2_address0 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_2_ce0 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_3_address0 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_feistel_fu_174_S_3_ce0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state11);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state13);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state15);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state17);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state19);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state21);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state23);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state25);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state27);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state29);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state3);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state31);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state5);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state7);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state9);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( xor_ln65_fu_390_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( xor_ln64_fu_385_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_grp_feistel_fu_174_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_feistel_fu_174_ap_start_reg );

    SC_METHOD(thread_grp_feistel_fu_174_x);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xor_ln57_fu_191_p2 );
    sensitive << ( xor_ln57_1_fu_204_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln57_2_fu_217_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( xor_ln57_3_fu_229_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( xor_ln57_4_fu_241_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln57_5_fu_253_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( xor_ln57_6_fu_265_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( xor_ln57_7_fu_277_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( xor_ln57_8_fu_289_p2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( xor_ln57_9_fu_301_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( xor_ln57_10_fu_313_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( xor_ln57_11_fu_325_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( xor_ln57_12_fu_337_p2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( xor_ln57_13_fu_349_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( xor_ln57_14_fu_361_p2 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( xor_ln57_30_fu_373_p2 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_xor_ln57_10_fu_313_p2);
    sensitive << ( xor_ln57_8_reg_455 );
    sensitive << ( xor_ln57_24_fu_307_p2 );

    SC_METHOD(thread_xor_ln57_11_fu_325_p2);
    sensitive << ( xor_ln57_9_reg_461 );
    sensitive << ( xor_ln57_25_fu_319_p2 );

    SC_METHOD(thread_xor_ln57_12_fu_337_p2);
    sensitive << ( xor_ln57_10_reg_467 );
    sensitive << ( xor_ln57_26_fu_331_p2 );

    SC_METHOD(thread_xor_ln57_13_fu_349_p2);
    sensitive << ( xor_ln57_11_reg_473 );
    sensitive << ( xor_ln57_27_fu_343_p2 );

    SC_METHOD(thread_xor_ln57_14_fu_361_p2);
    sensitive << ( xor_ln57_12_reg_479 );
    sensitive << ( xor_ln57_28_fu_355_p2 );

    SC_METHOD(thread_xor_ln57_15_fu_198_p2);
    sensitive << ( right_read );
    sensitive << ( P_1_read );

    SC_METHOD(thread_xor_ln57_16_fu_211_p2);
    sensitive << ( P_2_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_17_fu_223_p2);
    sensitive << ( P_3_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_18_fu_235_p2);
    sensitive << ( P_4_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_19_fu_247_p2);
    sensitive << ( P_5_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_1_fu_204_p2);
    sensitive << ( reg_187 );
    sensitive << ( xor_ln57_15_fu_198_p2 );

    SC_METHOD(thread_xor_ln57_20_fu_259_p2);
    sensitive << ( P_6_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_21_fu_271_p2);
    sensitive << ( P_7_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_22_fu_283_p2);
    sensitive << ( P_8_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_23_fu_295_p2);
    sensitive << ( P_9_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_24_fu_307_p2);
    sensitive << ( P_10_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_25_fu_319_p2);
    sensitive << ( P_11_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_26_fu_331_p2);
    sensitive << ( P_12_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_27_fu_343_p2);
    sensitive << ( P_13_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_28_fu_355_p2);
    sensitive << ( P_14_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_29_fu_367_p2);
    sensitive << ( P_15_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln57_2_fu_217_p2);
    sensitive << ( xor_ln57_reg_407 );
    sensitive << ( xor_ln57_16_fu_211_p2 );

    SC_METHOD(thread_xor_ln57_30_fu_373_p2);
    sensitive << ( xor_ln57_13_reg_485 );
    sensitive << ( xor_ln57_29_fu_367_p2 );

    SC_METHOD(thread_xor_ln57_3_fu_229_p2);
    sensitive << ( xor_ln57_1_reg_413 );
    sensitive << ( xor_ln57_17_fu_223_p2 );

    SC_METHOD(thread_xor_ln57_4_fu_241_p2);
    sensitive << ( xor_ln57_2_reg_419 );
    sensitive << ( xor_ln57_18_fu_235_p2 );

    SC_METHOD(thread_xor_ln57_5_fu_253_p2);
    sensitive << ( xor_ln57_3_reg_425 );
    sensitive << ( xor_ln57_19_fu_247_p2 );

    SC_METHOD(thread_xor_ln57_6_fu_265_p2);
    sensitive << ( xor_ln57_4_reg_431 );
    sensitive << ( xor_ln57_20_fu_259_p2 );

    SC_METHOD(thread_xor_ln57_7_fu_277_p2);
    sensitive << ( xor_ln57_5_reg_437 );
    sensitive << ( xor_ln57_21_fu_271_p2 );

    SC_METHOD(thread_xor_ln57_8_fu_289_p2);
    sensitive << ( xor_ln57_6_reg_443 );
    sensitive << ( xor_ln57_22_fu_283_p2 );

    SC_METHOD(thread_xor_ln57_9_fu_301_p2);
    sensitive << ( xor_ln57_7_reg_449 );
    sensitive << ( xor_ln57_23_fu_295_p2 );

    SC_METHOD(thread_xor_ln57_fu_191_p2);
    sensitive << ( left_read );
    sensitive << ( P_0_read );

    SC_METHOD(thread_xor_ln64_1_fu_379_p2);
    sensitive << ( P_16_read );
    sensitive << ( reg_187 );

    SC_METHOD(thread_xor_ln64_fu_385_p2);
    sensitive << ( xor_ln57_14_reg_491 );
    sensitive << ( xor_ln64_1_fu_379_p2 );

    SC_METHOD(thread_xor_ln65_fu_390_p2);
    sensitive << ( P_17_read );
    sensitive << ( xor_ln57_30_reg_497 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000001";
    grp_feistel_fu_174_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Encrypt_SetKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, left_read, "(port)left_read");
    sc_trace(mVcdFile, right_read, "(port)right_read");
    sc_trace(mVcdFile, P_0_read, "(port)P_0_read");
    sc_trace(mVcdFile, P_1_read, "(port)P_1_read");
    sc_trace(mVcdFile, P_2_read, "(port)P_2_read");
    sc_trace(mVcdFile, P_3_read, "(port)P_3_read");
    sc_trace(mVcdFile, P_4_read, "(port)P_4_read");
    sc_trace(mVcdFile, P_5_read, "(port)P_5_read");
    sc_trace(mVcdFile, P_6_read, "(port)P_6_read");
    sc_trace(mVcdFile, P_7_read, "(port)P_7_read");
    sc_trace(mVcdFile, P_8_read, "(port)P_8_read");
    sc_trace(mVcdFile, P_9_read, "(port)P_9_read");
    sc_trace(mVcdFile, P_10_read, "(port)P_10_read");
    sc_trace(mVcdFile, P_11_read, "(port)P_11_read");
    sc_trace(mVcdFile, P_12_read, "(port)P_12_read");
    sc_trace(mVcdFile, P_13_read, "(port)P_13_read");
    sc_trace(mVcdFile, P_14_read, "(port)P_14_read");
    sc_trace(mVcdFile, P_15_read, "(port)P_15_read");
    sc_trace(mVcdFile, P_16_read, "(port)P_16_read");
    sc_trace(mVcdFile, P_17_read, "(port)P_17_read");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_return, "grp_feistel_fu_174_ap_return");
    sc_trace(mVcdFile, reg_187, "reg_187");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, xor_ln57_fu_191_p2, "xor_ln57_fu_191_p2");
    sc_trace(mVcdFile, xor_ln57_reg_407, "xor_ln57_reg_407");
    sc_trace(mVcdFile, xor_ln57_1_fu_204_p2, "xor_ln57_1_fu_204_p2");
    sc_trace(mVcdFile, xor_ln57_1_reg_413, "xor_ln57_1_reg_413");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, xor_ln57_2_fu_217_p2, "xor_ln57_2_fu_217_p2");
    sc_trace(mVcdFile, xor_ln57_2_reg_419, "xor_ln57_2_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, xor_ln57_3_fu_229_p2, "xor_ln57_3_fu_229_p2");
    sc_trace(mVcdFile, xor_ln57_3_reg_425, "xor_ln57_3_reg_425");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, xor_ln57_4_fu_241_p2, "xor_ln57_4_fu_241_p2");
    sc_trace(mVcdFile, xor_ln57_4_reg_431, "xor_ln57_4_reg_431");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, xor_ln57_5_fu_253_p2, "xor_ln57_5_fu_253_p2");
    sc_trace(mVcdFile, xor_ln57_5_reg_437, "xor_ln57_5_reg_437");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, xor_ln57_6_fu_265_p2, "xor_ln57_6_fu_265_p2");
    sc_trace(mVcdFile, xor_ln57_6_reg_443, "xor_ln57_6_reg_443");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, xor_ln57_7_fu_277_p2, "xor_ln57_7_fu_277_p2");
    sc_trace(mVcdFile, xor_ln57_7_reg_449, "xor_ln57_7_reg_449");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, xor_ln57_8_fu_289_p2, "xor_ln57_8_fu_289_p2");
    sc_trace(mVcdFile, xor_ln57_8_reg_455, "xor_ln57_8_reg_455");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, xor_ln57_9_fu_301_p2, "xor_ln57_9_fu_301_p2");
    sc_trace(mVcdFile, xor_ln57_9_reg_461, "xor_ln57_9_reg_461");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, xor_ln57_10_fu_313_p2, "xor_ln57_10_fu_313_p2");
    sc_trace(mVcdFile, xor_ln57_10_reg_467, "xor_ln57_10_reg_467");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, xor_ln57_11_fu_325_p2, "xor_ln57_11_fu_325_p2");
    sc_trace(mVcdFile, xor_ln57_11_reg_473, "xor_ln57_11_reg_473");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, xor_ln57_12_fu_337_p2, "xor_ln57_12_fu_337_p2");
    sc_trace(mVcdFile, xor_ln57_12_reg_479, "xor_ln57_12_reg_479");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, xor_ln57_13_fu_349_p2, "xor_ln57_13_fu_349_p2");
    sc_trace(mVcdFile, xor_ln57_13_reg_485, "xor_ln57_13_reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, xor_ln57_14_fu_361_p2, "xor_ln57_14_fu_361_p2");
    sc_trace(mVcdFile, xor_ln57_14_reg_491, "xor_ln57_14_reg_491");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, xor_ln57_30_fu_373_p2, "xor_ln57_30_fu_373_p2");
    sc_trace(mVcdFile, xor_ln57_30_reg_497, "xor_ln57_30_reg_497");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_start, "grp_feistel_fu_174_ap_start");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_done, "grp_feistel_fu_174_ap_done");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_idle, "grp_feistel_fu_174_ap_idle");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_ready, "grp_feistel_fu_174_ap_ready");
    sc_trace(mVcdFile, grp_feistel_fu_174_x, "grp_feistel_fu_174_x");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_0_address0, "grp_feistel_fu_174_S_0_address0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_0_ce0, "grp_feistel_fu_174_S_0_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_1_address0, "grp_feistel_fu_174_S_1_address0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_1_ce0, "grp_feistel_fu_174_S_1_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_2_address0, "grp_feistel_fu_174_S_2_address0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_2_ce0, "grp_feistel_fu_174_S_2_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_3_address0, "grp_feistel_fu_174_S_3_address0");
    sc_trace(mVcdFile, grp_feistel_fu_174_S_3_ce0, "grp_feistel_fu_174_S_3_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_174_ap_start_reg, "grp_feistel_fu_174_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state3, "ap_NS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm_state5, "ap_NS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm_state7, "ap_NS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm_state9, "ap_NS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm_state11, "ap_NS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm_state13, "ap_NS_fsm_state13");
    sc_trace(mVcdFile, ap_NS_fsm_state15, "ap_NS_fsm_state15");
    sc_trace(mVcdFile, ap_NS_fsm_state17, "ap_NS_fsm_state17");
    sc_trace(mVcdFile, ap_NS_fsm_state19, "ap_NS_fsm_state19");
    sc_trace(mVcdFile, ap_NS_fsm_state21, "ap_NS_fsm_state21");
    sc_trace(mVcdFile, ap_NS_fsm_state23, "ap_NS_fsm_state23");
    sc_trace(mVcdFile, ap_NS_fsm_state25, "ap_NS_fsm_state25");
    sc_trace(mVcdFile, ap_NS_fsm_state27, "ap_NS_fsm_state27");
    sc_trace(mVcdFile, ap_NS_fsm_state29, "ap_NS_fsm_state29");
    sc_trace(mVcdFile, ap_NS_fsm_state31, "ap_NS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, xor_ln57_15_fu_198_p2, "xor_ln57_15_fu_198_p2");
    sc_trace(mVcdFile, xor_ln57_16_fu_211_p2, "xor_ln57_16_fu_211_p2");
    sc_trace(mVcdFile, xor_ln57_17_fu_223_p2, "xor_ln57_17_fu_223_p2");
    sc_trace(mVcdFile, xor_ln57_18_fu_235_p2, "xor_ln57_18_fu_235_p2");
    sc_trace(mVcdFile, xor_ln57_19_fu_247_p2, "xor_ln57_19_fu_247_p2");
    sc_trace(mVcdFile, xor_ln57_20_fu_259_p2, "xor_ln57_20_fu_259_p2");
    sc_trace(mVcdFile, xor_ln57_21_fu_271_p2, "xor_ln57_21_fu_271_p2");
    sc_trace(mVcdFile, xor_ln57_22_fu_283_p2, "xor_ln57_22_fu_283_p2");
    sc_trace(mVcdFile, xor_ln57_23_fu_295_p2, "xor_ln57_23_fu_295_p2");
    sc_trace(mVcdFile, xor_ln57_24_fu_307_p2, "xor_ln57_24_fu_307_p2");
    sc_trace(mVcdFile, xor_ln57_25_fu_319_p2, "xor_ln57_25_fu_319_p2");
    sc_trace(mVcdFile, xor_ln57_26_fu_331_p2, "xor_ln57_26_fu_331_p2");
    sc_trace(mVcdFile, xor_ln57_27_fu_343_p2, "xor_ln57_27_fu_343_p2");
    sc_trace(mVcdFile, xor_ln57_28_fu_355_p2, "xor_ln57_28_fu_355_p2");
    sc_trace(mVcdFile, xor_ln57_29_fu_367_p2, "xor_ln57_29_fu_367_p2");
    sc_trace(mVcdFile, xor_ln64_1_fu_379_p2, "xor_ln64_1_fu_379_p2");
    sc_trace(mVcdFile, xor_ln65_fu_390_p2, "xor_ln65_fu_390_p2");
    sc_trace(mVcdFile, xor_ln64_fu_385_p2, "xor_ln64_fu_385_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
#endif

    }
}

Encrypt_SetKey::~Encrypt_SetKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_feistel_fu_174;
}

void Encrypt_SetKey::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Encrypt_SetKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
            ap_return_0_preg = xor_ln65_fu_390_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
            ap_return_1_preg = xor_ln64_fu_385_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_feistel_fu_174_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state5.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state7.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state9.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state11.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state13.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state15.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state17.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state19.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state21.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state23.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state25.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state27.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state29.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state31.read())))) {
            grp_feistel_fu_174_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_feistel_fu_174_ap_ready.read())) {
            grp_feistel_fu_174_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        reg_187 = grp_feistel_fu_174_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        xor_ln57_10_reg_467 = xor_ln57_10_fu_313_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        xor_ln57_11_reg_473 = xor_ln57_11_fu_325_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        xor_ln57_12_reg_479 = xor_ln57_12_fu_337_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        xor_ln57_13_reg_485 = xor_ln57_13_fu_349_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        xor_ln57_14_reg_491 = xor_ln57_14_fu_361_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        xor_ln57_1_reg_413 = xor_ln57_1_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        xor_ln57_2_reg_419 = xor_ln57_2_fu_217_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        xor_ln57_30_reg_497 = xor_ln57_30_fu_373_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        xor_ln57_3_reg_425 = xor_ln57_3_fu_229_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        xor_ln57_4_reg_431 = xor_ln57_4_fu_241_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        xor_ln57_5_reg_437 = xor_ln57_5_fu_253_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        xor_ln57_6_reg_443 = xor_ln57_6_fu_265_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        xor_ln57_7_reg_449 = xor_ln57_7_fu_277_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        xor_ln57_8_reg_455 = xor_ln57_8_fu_289_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        xor_ln57_9_reg_461 = xor_ln57_9_fu_301_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        xor_ln57_reg_407 = xor_ln57_fu_191_p2.read();
    }
}

void Encrypt_SetKey::thread_S_0_address0() {
    S_0_address0 = grp_feistel_fu_174_S_0_address0.read();
}

void Encrypt_SetKey::thread_S_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        S_0_ce0 = grp_feistel_fu_174_S_0_ce0.read();
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_1_address0() {
    S_1_address0 = grp_feistel_fu_174_S_1_address0.read();
}

void Encrypt_SetKey::thread_S_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        S_1_ce0 = grp_feistel_fu_174_S_1_ce0.read();
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_2_address0() {
    S_2_address0 = grp_feistel_fu_174_S_2_address0.read();
}

void Encrypt_SetKey::thread_S_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        S_2_ce0 = grp_feistel_fu_174_S_2_ce0.read();
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_3_address0() {
    S_3_address0 = grp_feistel_fu_174_S_3_address0.read();
}

void Encrypt_SetKey::thread_S_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        S_3_ce0 = grp_feistel_fu_174_S_3_ce0.read();
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state11() {
    ap_NS_fsm_state11 = ap_NS_fsm.read()[10];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state13() {
    ap_NS_fsm_state13 = ap_NS_fsm.read()[12];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state15() {
    ap_NS_fsm_state15 = ap_NS_fsm.read()[14];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state17() {
    ap_NS_fsm_state17 = ap_NS_fsm.read()[16];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state19() {
    ap_NS_fsm_state19 = ap_NS_fsm.read()[18];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state21() {
    ap_NS_fsm_state21 = ap_NS_fsm.read()[20];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state23() {
    ap_NS_fsm_state23 = ap_NS_fsm.read()[22];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state25() {
    ap_NS_fsm_state25 = ap_NS_fsm.read()[24];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state27() {
    ap_NS_fsm_state27 = ap_NS_fsm.read()[26];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state29() {
    ap_NS_fsm_state29 = ap_NS_fsm.read()[28];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state3() {
    ap_NS_fsm_state3 = ap_NS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state31() {
    ap_NS_fsm_state31 = ap_NS_fsm.read()[30];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state5() {
    ap_NS_fsm_state5 = ap_NS_fsm.read()[4];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state7() {
    ap_NS_fsm_state7 = ap_NS_fsm.read()[6];
}

void Encrypt_SetKey::thread_ap_NS_fsm_state9() {
    ap_NS_fsm_state9 = ap_NS_fsm.read()[8];
}

void Encrypt_SetKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ap_return_0 = xor_ln65_fu_390_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void Encrypt_SetKey::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ap_return_1 = xor_ln64_fu_385_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void Encrypt_SetKey::thread_grp_feistel_fu_174_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_feistel_fu_174_ap_start = ap_const_logic_1;
    } else {
        grp_feistel_fu_174_ap_start = grp_feistel_fu_174_ap_start_reg.read();
    }
}

void Encrypt_SetKey::thread_grp_feistel_fu_174_x() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_feistel_fu_174_x = xor_ln57_30_fu_373_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        grp_feistel_fu_174_x = xor_ln57_14_fu_361_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_feistel_fu_174_x = xor_ln57_13_fu_349_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        grp_feistel_fu_174_x = xor_ln57_12_fu_337_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_feistel_fu_174_x = xor_ln57_11_fu_325_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        grp_feistel_fu_174_x = xor_ln57_10_fu_313_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_feistel_fu_174_x = xor_ln57_9_fu_301_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_feistel_fu_174_x = xor_ln57_8_fu_289_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_feistel_fu_174_x = xor_ln57_7_fu_277_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_feistel_fu_174_x = xor_ln57_6_fu_265_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_feistel_fu_174_x = xor_ln57_5_fu_253_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_feistel_fu_174_x = xor_ln57_4_fu_241_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_feistel_fu_174_x = xor_ln57_3_fu_229_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_feistel_fu_174_x = xor_ln57_2_fu_217_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_feistel_fu_174_x = xor_ln57_1_fu_204_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_feistel_fu_174_x = xor_ln57_fu_191_p2.read();
    } else {
        grp_feistel_fu_174_x = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Encrypt_SetKey::thread_xor_ln57_10_fu_313_p2() {
    xor_ln57_10_fu_313_p2 = (xor_ln57_24_fu_307_p2.read() ^ xor_ln57_8_reg_455.read());
}

void Encrypt_SetKey::thread_xor_ln57_11_fu_325_p2() {
    xor_ln57_11_fu_325_p2 = (xor_ln57_25_fu_319_p2.read() ^ xor_ln57_9_reg_461.read());
}

void Encrypt_SetKey::thread_xor_ln57_12_fu_337_p2() {
    xor_ln57_12_fu_337_p2 = (xor_ln57_26_fu_331_p2.read() ^ xor_ln57_10_reg_467.read());
}

void Encrypt_SetKey::thread_xor_ln57_13_fu_349_p2() {
    xor_ln57_13_fu_349_p2 = (xor_ln57_27_fu_343_p2.read() ^ xor_ln57_11_reg_473.read());
}

void Encrypt_SetKey::thread_xor_ln57_14_fu_361_p2() {
    xor_ln57_14_fu_361_p2 = (xor_ln57_28_fu_355_p2.read() ^ xor_ln57_12_reg_479.read());
}

void Encrypt_SetKey::thread_xor_ln57_15_fu_198_p2() {
    xor_ln57_15_fu_198_p2 = (right_read.read() ^ P_1_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_16_fu_211_p2() {
    xor_ln57_16_fu_211_p2 = (reg_187.read() ^ P_2_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_17_fu_223_p2() {
    xor_ln57_17_fu_223_p2 = (reg_187.read() ^ P_3_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_18_fu_235_p2() {
    xor_ln57_18_fu_235_p2 = (reg_187.read() ^ P_4_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_19_fu_247_p2() {
    xor_ln57_19_fu_247_p2 = (reg_187.read() ^ P_5_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_1_fu_204_p2() {
    xor_ln57_1_fu_204_p2 = (xor_ln57_15_fu_198_p2.read() ^ reg_187.read());
}

void Encrypt_SetKey::thread_xor_ln57_20_fu_259_p2() {
    xor_ln57_20_fu_259_p2 = (reg_187.read() ^ P_6_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_21_fu_271_p2() {
    xor_ln57_21_fu_271_p2 = (reg_187.read() ^ P_7_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_22_fu_283_p2() {
    xor_ln57_22_fu_283_p2 = (reg_187.read() ^ P_8_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_23_fu_295_p2() {
    xor_ln57_23_fu_295_p2 = (reg_187.read() ^ P_9_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_24_fu_307_p2() {
    xor_ln57_24_fu_307_p2 = (reg_187.read() ^ P_10_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_25_fu_319_p2() {
    xor_ln57_25_fu_319_p2 = (reg_187.read() ^ P_11_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_26_fu_331_p2() {
    xor_ln57_26_fu_331_p2 = (reg_187.read() ^ P_12_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_27_fu_343_p2() {
    xor_ln57_27_fu_343_p2 = (reg_187.read() ^ P_13_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_28_fu_355_p2() {
    xor_ln57_28_fu_355_p2 = (reg_187.read() ^ P_14_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_29_fu_367_p2() {
    xor_ln57_29_fu_367_p2 = (reg_187.read() ^ P_15_read.read());
}

void Encrypt_SetKey::thread_xor_ln57_2_fu_217_p2() {
    xor_ln57_2_fu_217_p2 = (xor_ln57_16_fu_211_p2.read() ^ xor_ln57_reg_407.read());
}

void Encrypt_SetKey::thread_xor_ln57_30_fu_373_p2() {
    xor_ln57_30_fu_373_p2 = (xor_ln57_29_fu_367_p2.read() ^ xor_ln57_13_reg_485.read());
}

void Encrypt_SetKey::thread_xor_ln57_3_fu_229_p2() {
    xor_ln57_3_fu_229_p2 = (xor_ln57_17_fu_223_p2.read() ^ xor_ln57_1_reg_413.read());
}

void Encrypt_SetKey::thread_xor_ln57_4_fu_241_p2() {
    xor_ln57_4_fu_241_p2 = (xor_ln57_18_fu_235_p2.read() ^ xor_ln57_2_reg_419.read());
}

void Encrypt_SetKey::thread_xor_ln57_5_fu_253_p2() {
    xor_ln57_5_fu_253_p2 = (xor_ln57_19_fu_247_p2.read() ^ xor_ln57_3_reg_425.read());
}

void Encrypt_SetKey::thread_xor_ln57_6_fu_265_p2() {
    xor_ln57_6_fu_265_p2 = (xor_ln57_20_fu_259_p2.read() ^ xor_ln57_4_reg_431.read());
}

void Encrypt_SetKey::thread_xor_ln57_7_fu_277_p2() {
    xor_ln57_7_fu_277_p2 = (xor_ln57_21_fu_271_p2.read() ^ xor_ln57_5_reg_437.read());
}

void Encrypt_SetKey::thread_xor_ln57_8_fu_289_p2() {
    xor_ln57_8_fu_289_p2 = (xor_ln57_22_fu_283_p2.read() ^ xor_ln57_6_reg_443.read());
}

void Encrypt_SetKey::thread_xor_ln57_9_fu_301_p2() {
    xor_ln57_9_fu_301_p2 = (xor_ln57_23_fu_295_p2.read() ^ xor_ln57_7_reg_449.read());
}

void Encrypt_SetKey::thread_xor_ln57_fu_191_p2() {
    xor_ln57_fu_191_p2 = (P_0_read.read() ^ left_read.read());
}

void Encrypt_SetKey::thread_xor_ln64_1_fu_379_p2() {
    xor_ln64_1_fu_379_p2 = (reg_187.read() ^ P_16_read.read());
}

void Encrypt_SetKey::thread_xor_ln64_fu_385_p2() {
    xor_ln64_fu_385_p2 = (xor_ln64_1_fu_379_p2.read() ^ xor_ln57_14_reg_491.read());
}

void Encrypt_SetKey::thread_xor_ln65_fu_390_p2() {
    xor_ln65_fu_390_p2 = (xor_ln57_30_reg_497.read() ^ P_17_read.read());
}

void Encrypt_SetKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<33>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

