-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce0 : OUT STD_LOGIC;
    decryptedtext_we0 : OUT STD_LOGIC;
    decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce1 : OUT STD_LOGIC;
    decryptedtext_we1 : OUT STD_LOGIC;
    decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_Decrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_feistel_fu_362_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ciphertext_load_1_reg_1702 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_2_reg_1718 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ciphertext_load_3_reg_1725 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_5_reg_1750 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_tmp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ciphertext_load_6_reg_1772 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_7_reg_1779 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_tmp_16_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_16_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_tmp_17_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_17_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_tmp_18_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_18_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_23_fu_548_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_23_reg_1824 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_25_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_25_reg_1829 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_tmp_19_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_19_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_29_fu_669_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_29_reg_1845 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_31_fu_675_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_31_reg_1850 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_tmp_20_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_20_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_tmp_21_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_21_reg_1875 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_22_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_22_reg_1881 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal xor_ln96_47_fu_810_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_47_reg_1887 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_49_fu_816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_49_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln242_24_fu_863_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_24_reg_1897 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_tmp_23_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_23_reg_1907 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_53_fu_973_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_53_reg_1913 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_55_fu_979_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_55_reg_1918 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln246_24_fu_1026_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_24_reg_1923 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal p_tmp_24_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_24_reg_1935 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_tmp_25_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_25_reg_1948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal p_tmp_26_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_26_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_71_fu_1132_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_71_reg_1965 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_73_fu_1138_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_73_reg_1970 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_tmp_27_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_27_reg_1980 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_77_fu_1220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_77_reg_1986 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_79_fu_1226_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_79_reg_1991 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_tmp_28_fu_1238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_28_reg_2003 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_tmp_29_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_29_reg_2016 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_reg_2022 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal xor_ln242_fu_1483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_reg_2027 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_2032 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal xor_ln246_fu_1687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_reg_2037 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_362_ap_start : STD_LOGIC;
    signal grp_feistel_fu_362_ap_done : STD_LOGIC;
    signal grp_feistel_fu_362_ap_idle : STD_LOGIC;
    signal grp_feistel_fu_362_ap_ready : STD_LOGIC;
    signal grp_feistel_fu_362_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feistel_fu_362_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_362_S_0_ce0 : STD_LOGIC;
    signal grp_feistel_fu_362_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_362_S_1_ce0 : STD_LOGIC;
    signal grp_feistel_fu_362_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_362_S_2_ce0 : STD_LOGIC;
    signal grp_feistel_fu_362_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_362_S_3_ce0 : STD_LOGIC;
    signal grp_feistel_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_NS_fsm_state6 : STD_LOGIC;
    signal ap_NS_fsm_state8 : STD_LOGIC;
    signal ap_NS_fsm_state10 : STD_LOGIC;
    signal ap_NS_fsm_state12 : STD_LOGIC;
    signal ap_NS_fsm_state14 : STD_LOGIC;
    signal ap_NS_fsm_state16 : STD_LOGIC;
    signal ap_NS_fsm_state18 : STD_LOGIC;
    signal ap_NS_fsm_state20 : STD_LOGIC;
    signal ap_NS_fsm_state22 : STD_LOGIC;
    signal ap_NS_fsm_state24 : STD_LOGIC;
    signal ap_NS_fsm_state26 : STD_LOGIC;
    signal ap_NS_fsm_state28 : STD_LOGIC;
    signal ap_NS_fsm_state30 : STD_LOGIC;
    signal ap_NS_fsm_state32 : STD_LOGIC;
    signal ap_NS_fsm_state34 : STD_LOGIC;
    signal left_4_fu_1355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal left_3_fu_407_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_2_fu_423_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_4_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln96_7_fu_467_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_6_fu_464_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_5_fu_460_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_4_fu_457_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_2_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_484_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_17_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_16_fu_504_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_1_fu_478_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_68_fu_471_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_15_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_14_fu_496_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_10_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_14_fu_536_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_13_fu_530_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_12_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_11_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_fu_573_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_2_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_12_fu_589_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_11_fu_586_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_563_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_1_fu_560_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_10_fu_582_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_9_fu_579_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_8_fu_611_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_7_fu_605_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_22_fu_629_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_21_fu_625_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_6_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_5_fu_593_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_20_fu_621_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_19_fu_617_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_16_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_20_fu_657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_19_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_18_fu_645_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_17_fu_639_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_22_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_28_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln96_27_fu_736_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_26_fu_733_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_25_fu_729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_24_fu_726_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_26_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_37_fu_772_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_36_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_24_fu_740_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_35_fu_764_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_34_fu_760_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_34_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_38_fu_798_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_37_fu_793_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_36_fu_787_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_35_fu_782_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln97_fu_705_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_3_fu_709_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_fu_712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_18_fu_827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_17_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_13_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_4_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_6_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_33_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_21_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_23_fu_723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_22_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_20_fu_839_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_23_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_19_fu_833_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_32_fu_903_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_31_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_30_fu_896_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_29_fu_893_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_32_fu_913_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_42_fu_935_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_41_fu_931_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_30_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_40_fu_927_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_39_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_40_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_44_fu_961_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_43_fu_956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_42_fu_950_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_41_fu_945_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_1_fu_872_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_8_fu_876_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_18_fu_990_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_17_fu_985_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_3_fu_879_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_18_fu_883_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_28_fu_890_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_7_fu_919_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_21_fu_1008_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_5_fu_886_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_22_fu_1014_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_20_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_23_fu_1020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_19_fu_996_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln96_46_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_52_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln96_47_fu_1066_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_46_fu_1063_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_45_fu_1059_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_44_fu_1056_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_50_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_57_fu_1094_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_56_fu_1090_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_48_fu_1070_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_55_fu_1086_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_54_fu_1082_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_58_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_62_fu_1120_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_61_fu_1115_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_60_fu_1109_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_59_fu_1104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_52_fu_1154_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_51_fu_1151_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_50_fu_1147_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_49_fu_1144_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_56_fu_1164_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_62_fu_1182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_61_fu_1178_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_54_fu_1158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_60_fu_1174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_59_fu_1170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_64_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_68_fu_1208_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_67_fu_1203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_66_fu_1197_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_65_fu_1192_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_70_fu_1232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_76_fu_1244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln96_67_fu_1287_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_66_fu_1284_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_65_fu_1280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_64_fu_1277_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_74_fu_1297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_77_fu_1323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_76_fu_1319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_72_fu_1291_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_75_fu_1315_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_74_fu_1311_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_82_fu_1327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_86_fu_1349_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_85_fu_1344_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_84_fu_1338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln96_83_fu_1333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln102_1_fu_1379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln102_2_fu_1375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln102_fu_1369_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln102_1_fu_1365_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal left_fu_1385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln102_4_fu_1397_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln102_3_fu_1391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln97_8_fu_1256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_43_fu_1260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_10_fu_1263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_53_fu_1267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_26_fu_1441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_25_fu_1435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_12_fu_1270_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_63_fu_1274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_73_fu_1307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln102_fu_1361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_29_fu_1459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_14_fu_1303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_30_fu_1465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_28_fu_1453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_31_fu_1471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_27_fu_1447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_32_fu_1477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_72_fu_1522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_71_fu_1519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_70_fu_1515_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_69_fu_1512_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_80_fu_1532_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln101_4_fu_1558_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln101_3_fu_1554_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_78_fu_1526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln101_2_fu_1550_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln101_1_fu_1546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln101_fu_1562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln101_4_fu_1584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln101_3_fu_1579_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln101_2_fu_1573_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln101_1_fu_1568_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal right_fu_1590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln101_7_fu_1601_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln101_6_fu_1595_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_38_fu_1488_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_9_fu_1491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_48_fu_1495_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_11_fu_1498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_26_fu_1645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_25_fu_1639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_58_fu_1502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_13_fu_1505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_15_fu_1538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_fu_1542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_29_fu_1663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_68_fu_1509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_30_fu_1669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_28_fu_1657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_31_fu_1675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_27_fu_1651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln246_32_fu_1681_p2 : STD_LOGIC_VECTOR (7 downto 0);

    component feistel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_feistel_fu_362 : component feistel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feistel_fu_362_ap_start,
        ap_done => grp_feistel_fu_362_ap_done,
        ap_idle => grp_feistel_fu_362_ap_idle,
        ap_ready => grp_feistel_fu_362_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_feistel_fu_362_x,
        S_0_address0 => grp_feistel_fu_362_S_0_address0,
        S_0_ce0 => grp_feistel_fu_362_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_feistel_fu_362_S_1_address0,
        S_1_ce0 => grp_feistel_fu_362_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_feistel_fu_362_S_2_address0,
        S_2_ce0 => grp_feistel_fu_362_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_feistel_fu_362_S_3_address0,
        S_3_ce0 => grp_feistel_fu_362_S_3_ce0,
        S_3_q0 => S_3_q0,
        ap_return => grp_feistel_fu_362_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_feistel_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feistel_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_NS_fsm_state34) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_NS_fsm_state32) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_NS_fsm_state16) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_NS_fsm_state30) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = ap_NS_fsm_state14) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_NS_fsm_state28) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = ap_NS_fsm_state12) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_NS_fsm_state26) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = ap_NS_fsm_state10) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_NS_fsm_state24) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = ap_NS_fsm_state8) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_NS_fsm_state22) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_NS_fsm_state20) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_NS_fsm_state6) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_feistel_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feistel_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_feistel_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ciphertext_load_1_reg_1702 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ciphertext_load_2_reg_1718 <= ciphertext_q0;
                ciphertext_load_3_reg_1725 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ciphertext_load_5_reg_1750 <= ciphertext_q1;
                p_tmp_reg_1766 <= p_tmp_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ciphertext_load_6_reg_1772 <= ciphertext_q0;
                ciphertext_load_7_reg_1779 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_tmp_16_reg_1794 <= p_tmp_16_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_tmp_17_reg_1807 <= p_tmp_17_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_tmp_18_reg_1818 <= p_tmp_18_fu_542_p2;
                xor_ln96_23_reg_1824 <= xor_ln96_23_fu_548_p2;
                xor_ln96_25_reg_1829 <= xor_ln96_25_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_tmp_19_reg_1839 <= p_tmp_19_fu_663_p2;
                xor_ln96_29_reg_1845 <= xor_ln96_29_fu_669_p2;
                xor_ln96_31_reg_1850 <= xor_ln96_31_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_tmp_20_reg_1862 <= p_tmp_20_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_tmp_21_reg_1875 <= p_tmp_21_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_tmp_22_reg_1881 <= p_tmp_22_fu_804_p2;
                xor_ln242_24_reg_1897 <= xor_ln242_24_fu_863_p2;
                xor_ln96_47_reg_1887 <= xor_ln96_47_fu_810_p2;
                xor_ln96_49_reg_1892 <= xor_ln96_49_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                p_tmp_23_reg_1907 <= p_tmp_23_fu_967_p2;
                xor_ln246_24_reg_1923 <= xor_ln246_24_fu_1026_p2;
                xor_ln96_53_reg_1913 <= xor_ln96_53_fu_973_p2;
                xor_ln96_55_reg_1918 <= xor_ln96_55_fu_979_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_tmp_24_reg_1935 <= p_tmp_24_fu_1038_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_tmp_25_reg_1948 <= p_tmp_25_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_tmp_26_reg_1959 <= p_tmp_26_fu_1126_p2;
                xor_ln96_71_reg_1965 <= xor_ln96_71_fu_1132_p2;
                xor_ln96_73_reg_1970 <= xor_ln96_73_fu_1138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                p_tmp_27_reg_1980 <= p_tmp_27_fu_1214_p2;
                xor_ln96_77_reg_1986 <= xor_ln96_77_fu_1220_p2;
                xor_ln96_79_reg_1991 <= xor_ln96_79_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                p_tmp_28_reg_2003 <= p_tmp_28_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                p_tmp_29_reg_2016 <= p_tmp_29_fu_1250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_375 <= ciphertext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_379 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_383 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_387 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_391 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_395 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_399 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_403 <= grp_feistel_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                trunc_ln2_reg_2022 <= xor_ln102_3_fu_1391_p2(15 downto 8);
                xor_ln242_reg_2027 <= xor_ln242_fu_1483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                trunc_ln5_reg_2032 <= xor_ln101_6_fu_1595_p2(15 downto 8);
                xor_ln246_reg_2037 <= xor_ln246_fu_1687_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    S_0_address0 <= grp_feistel_fu_362_S_0_address0;

    S_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state25, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, grp_feistel_fu_362_S_0_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_0_ce0 <= grp_feistel_fu_362_S_0_ce0;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= grp_feistel_fu_362_S_1_address0;

    S_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state25, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, grp_feistel_fu_362_S_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_1_ce0 <= grp_feistel_fu_362_S_1_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= grp_feistel_fu_362_S_2_address0;

    S_2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state25, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, grp_feistel_fu_362_S_2_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_2_ce0 <= grp_feistel_fu_362_S_2_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= grp_feistel_fu_362_S_3_address0;

    S_3_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state25, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state29, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, grp_feistel_fu_362_S_3_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_3_ce0 <= grp_feistel_fu_362_S_3_ce0;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state10 <= ap_NS_fsm(9);
    ap_NS_fsm_state12 <= ap_NS_fsm(11);
    ap_NS_fsm_state14 <= ap_NS_fsm(13);
    ap_NS_fsm_state16 <= ap_NS_fsm(15);
    ap_NS_fsm_state18 <= ap_NS_fsm(17);
    ap_NS_fsm_state20 <= ap_NS_fsm(19);
    ap_NS_fsm_state22 <= ap_NS_fsm(21);
    ap_NS_fsm_state24 <= ap_NS_fsm(23);
    ap_NS_fsm_state26 <= ap_NS_fsm(25);
    ap_NS_fsm_state28 <= ap_NS_fsm(27);
    ap_NS_fsm_state30 <= ap_NS_fsm(29);
    ap_NS_fsm_state32 <= ap_NS_fsm(31);
    ap_NS_fsm_state34 <= ap_NS_fsm(33);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state6 <= ap_NS_fsm(5);
    ap_NS_fsm_state8 <= ap_NS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_address0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            decryptedtext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            decryptedtext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            decryptedtext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            decryptedtext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            decryptedtext_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext_address1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            decryptedtext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            decryptedtext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            decryptedtext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            decryptedtext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            decryptedtext_address1 <= "XXX";
        end if; 
    end process;


    decryptedtext_ce0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            decryptedtext_ce0 <= ap_const_logic_1;
        else 
            decryptedtext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_ce1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            decryptedtext_ce1 <= ap_const_logic_1;
        else 
            decryptedtext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_d0_assign_proc : process(ap_CS_fsm_state35, trunc_ln2_reg_2022, ap_CS_fsm_state34, trunc_ln5_reg_2032, ap_CS_fsm_state36, ap_CS_fsm_state37, left_fu_1385_p2, right_fu_1590_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            decryptedtext_d0 <= trunc_ln5_reg_2032;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            decryptedtext_d0 <= right_fu_1590_p2(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            decryptedtext_d0 <= trunc_ln2_reg_2022;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            decryptedtext_d0 <= left_fu_1385_p2(31 downto 24);
        else 
            decryptedtext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_d1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, xor_ln242_reg_2027, ap_CS_fsm_state36, xor_ln246_reg_2037, ap_CS_fsm_state37, xor_ln102_4_fu_1397_p2, xor_ln101_7_fu_1601_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            decryptedtext_d1 <= xor_ln246_reg_2037;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            decryptedtext_d1 <= xor_ln101_7_fu_1601_p2(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            decryptedtext_d1 <= xor_ln242_reg_2027;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            decryptedtext_d1 <= xor_ln102_4_fu_1397_p2(23 downto 16);
        else 
            decryptedtext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_we0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            decryptedtext_we0 <= ap_const_logic_1;
        else 
            decryptedtext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_we1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            decryptedtext_we1 <= ap_const_logic_1;
        else 
            decryptedtext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_feistel_fu_362_ap_start <= grp_feistel_fu_362_ap_start_reg;

    grp_feistel_fu_362_x_assign_proc : process(ap_CS_fsm_state4, p_tmp_fu_416_p2, ap_CS_fsm_state6, p_tmp_16_fu_438_p2, ap_CS_fsm_state8, p_tmp_17_fu_451_p2, ap_CS_fsm_state10, p_tmp_18_fu_542_p2, ap_CS_fsm_state12, p_tmp_19_fu_663_p2, ap_CS_fsm_state14, p_tmp_20_fu_687_p2, ap_CS_fsm_state16, p_tmp_21_fu_699_p2, p_tmp_22_fu_804_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, p_tmp_23_fu_967_p2, ap_CS_fsm_state22, p_tmp_24_fu_1038_p2, ap_CS_fsm_state24, p_tmp_25_fu_1050_p2, ap_CS_fsm_state26, p_tmp_26_fu_1126_p2, ap_CS_fsm_state28, p_tmp_27_fu_1214_p2, ap_CS_fsm_state30, p_tmp_28_fu_1238_p2, ap_CS_fsm_state32, p_tmp_29_fu_1250_p2, ap_CS_fsm_state34, left_4_fu_1355_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_feistel_fu_362_x <= left_4_fu_1355_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_feistel_fu_362_x <= p_tmp_29_fu_1250_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_feistel_fu_362_x <= p_tmp_28_fu_1238_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_feistel_fu_362_x <= p_tmp_27_fu_1214_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_feistel_fu_362_x <= p_tmp_26_fu_1126_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_feistel_fu_362_x <= p_tmp_25_fu_1050_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_feistel_fu_362_x <= p_tmp_24_fu_1038_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_feistel_fu_362_x <= p_tmp_23_fu_967_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_feistel_fu_362_x <= p_tmp_22_fu_804_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_feistel_fu_362_x <= p_tmp_21_fu_699_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_feistel_fu_362_x <= p_tmp_20_fu_687_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_feistel_fu_362_x <= p_tmp_19_fu_663_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_feistel_fu_362_x <= p_tmp_18_fu_542_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_feistel_fu_362_x <= p_tmp_17_fu_451_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_feistel_fu_362_x <= p_tmp_16_fu_438_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_feistel_fu_362_x <= p_tmp_fu_416_p2;
        else 
            grp_feistel_fu_362_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    left_3_fu_407_p5 <= (((reg_375 & ciphertext_load_1_reg_1702) & ciphertext_load_2_reg_1718) & ciphertext_load_3_reg_1725);
    left_4_fu_1355_p2 <= (xor_ln96_82_fu_1327_p2 xor p_tmp_28_reg_2003);
    left_fu_1385_p2 <= (left_4_fu_1355_p2 xor P_0_read);
    p_tmp_16_fu_438_p2 <= (xor_ln96_fu_432_p2 xor right_2_fu_423_p5);
    p_tmp_17_fu_451_p2 <= (xor_ln96_4_fu_445_p2 xor p_tmp_reg_1766);
    p_tmp_18_fu_542_p2 <= (xor_ln96_10_fu_512_p2 xor p_tmp_16_reg_1794);
    p_tmp_19_fu_663_p2 <= (xor_ln96_16_fu_633_p2 xor p_tmp_17_reg_1807);
    p_tmp_20_fu_687_p2 <= (xor_ln96_22_fu_681_p2 xor p_tmp_18_reg_1818);
    p_tmp_21_fu_699_p2 <= (xor_ln96_28_fu_693_p2 xor p_tmp_19_reg_1839);
    p_tmp_22_fu_804_p2 <= (xor_ln96_34_fu_776_p2 xor p_tmp_20_reg_1862);
    p_tmp_23_fu_967_p2 <= (xor_ln96_40_fu_939_p2 xor p_tmp_21_reg_1875);
    p_tmp_24_fu_1038_p2 <= (xor_ln96_46_fu_1032_p2 xor p_tmp_22_reg_1881);
    p_tmp_25_fu_1050_p2 <= (xor_ln96_52_fu_1044_p2 xor p_tmp_23_reg_1907);
    p_tmp_26_fu_1126_p2 <= (xor_ln96_58_fu_1098_p2 xor p_tmp_24_reg_1935);
    p_tmp_27_fu_1214_p2 <= (xor_ln96_64_fu_1186_p2 xor p_tmp_25_reg_1948);
    p_tmp_28_fu_1238_p2 <= (xor_ln96_70_fu_1232_p2 xor p_tmp_26_reg_1959);
    p_tmp_29_fu_1250_p2 <= (xor_ln96_76_fu_1244_p2 xor p_tmp_27_reg_1980);
    p_tmp_fu_416_p2 <= (left_3_fu_407_p5 xor P_17_read);
    right_2_fu_423_p5 <= (((reg_375 & ciphertext_load_5_reg_1750) & ciphertext_load_6_reg_1772) & ciphertext_load_7_reg_1779);
    right_fu_1590_p2 <= (xor_ln101_fu_1562_p2 xor p_tmp_29_reg_2016);
    tmp_66_fu_563_p4 <= ((ciphertext_load_1_reg_1702 & ciphertext_load_2_reg_1718) & ciphertext_load_3_reg_1725);
    tmp_67_fu_573_p3 <= (ciphertext_load_2_reg_1718 & ciphertext_load_3_reg_1725);
    tmp_68_fu_471_p4 <= ((ciphertext_load_5_reg_1750 & ciphertext_load_6_reg_1772) & ciphertext_load_7_reg_1779);
    tmp_69_fu_484_p3 <= (ciphertext_load_6_reg_1772 & ciphertext_load_7_reg_1779);
    trunc_ln101_1_fu_1546_p1 <= P_1_read(16 - 1 downto 0);
    trunc_ln101_2_fu_1550_p1 <= reg_379(16 - 1 downto 0);
    trunc_ln101_3_fu_1554_p1 <= P_1_read(24 - 1 downto 0);
    trunc_ln101_4_fu_1558_p1 <= reg_379(24 - 1 downto 0);
    trunc_ln101_fu_1542_p1 <= P_1_read(8 - 1 downto 0);
    trunc_ln102_1_fu_1365_p1 <= P_0_read(24 - 1 downto 0);
    trunc_ln102_2_fu_1375_p1 <= P_0_read(16 - 1 downto 0);
    trunc_ln102_fu_1361_p1 <= P_0_read(8 - 1 downto 0);
    trunc_ln96_10_fu_582_p1 <= reg_383(24 - 1 downto 0);
    trunc_ln96_11_fu_586_p1 <= P_15_read(16 - 1 downto 0);
    trunc_ln96_12_fu_589_p1 <= reg_383(16 - 1 downto 0);
    trunc_ln96_13_fu_716_p1 <= P_14_read(8 - 1 downto 0);
    trunc_ln96_14_fu_496_p1 <= P_14_read(24 - 1 downto 0);
    trunc_ln96_15_fu_500_p1 <= reg_387(24 - 1 downto 0);
    trunc_ln96_16_fu_504_p1 <= P_14_read(16 - 1 downto 0);
    trunc_ln96_17_fu_508_p1 <= reg_387(16 - 1 downto 0);
    trunc_ln96_18_fu_883_p1 <= P_13_read(8 - 1 downto 0);
    trunc_ln96_19_fu_617_p1 <= P_13_read(16 - 1 downto 0);
    trunc_ln96_1_fu_560_p1 <= P_17_read(24 - 1 downto 0);
    trunc_ln96_20_fu_621_p1 <= reg_391(16 - 1 downto 0);
    trunc_ln96_21_fu_625_p1 <= P_13_read(24 - 1 downto 0);
    trunc_ln96_22_fu_629_p1 <= reg_391(24 - 1 downto 0);
    trunc_ln96_23_fu_723_p1 <= P_12_read(8 - 1 downto 0);
    trunc_ln96_24_fu_726_p1 <= P_12_read(16 - 1 downto 0);
    trunc_ln96_25_fu_729_p1 <= reg_395(16 - 1 downto 0);
    trunc_ln96_26_fu_733_p1 <= P_12_read(24 - 1 downto 0);
    trunc_ln96_27_fu_736_p1 <= reg_395(24 - 1 downto 0);
    trunc_ln96_28_fu_890_p1 <= P_11_read(8 - 1 downto 0);
    trunc_ln96_29_fu_893_p1 <= P_11_read(24 - 1 downto 0);
    trunc_ln96_2_fu_570_p1 <= P_17_read(16 - 1 downto 0);
    trunc_ln96_30_fu_896_p1 <= reg_399(24 - 1 downto 0);
    trunc_ln96_31_fu_900_p1 <= P_11_read(16 - 1 downto 0);
    trunc_ln96_32_fu_903_p1 <= reg_399(16 - 1 downto 0);
    trunc_ln96_33_fu_756_p1 <= P_10_read(8 - 1 downto 0);
    trunc_ln96_34_fu_760_p1 <= P_10_read(24 - 1 downto 0);
    trunc_ln96_35_fu_764_p1 <= reg_403(24 - 1 downto 0);
    trunc_ln96_36_fu_768_p1 <= P_10_read(16 - 1 downto 0);
    trunc_ln96_37_fu_772_p1 <= reg_403(16 - 1 downto 0);
    trunc_ln96_38_fu_1488_p1 <= P_9_read(8 - 1 downto 0);
    trunc_ln96_39_fu_923_p1 <= P_9_read(16 - 1 downto 0);
    trunc_ln96_3_fu_709_p1 <= P_16_read(8 - 1 downto 0);
    trunc_ln96_40_fu_927_p1 <= reg_379(16 - 1 downto 0);
    trunc_ln96_41_fu_931_p1 <= P_9_read(24 - 1 downto 0);
    trunc_ln96_42_fu_935_p1 <= reg_379(24 - 1 downto 0);
    trunc_ln96_43_fu_1260_p1 <= P_8_read(8 - 1 downto 0);
    trunc_ln96_44_fu_1056_p1 <= P_8_read(16 - 1 downto 0);
    trunc_ln96_45_fu_1059_p1 <= reg_379(16 - 1 downto 0);
    trunc_ln96_46_fu_1063_p1 <= P_8_read(24 - 1 downto 0);
    trunc_ln96_47_fu_1066_p1 <= reg_379(24 - 1 downto 0);
    trunc_ln96_48_fu_1495_p1 <= P_7_read(8 - 1 downto 0);
    trunc_ln96_49_fu_1144_p1 <= P_7_read(24 - 1 downto 0);
    trunc_ln96_4_fu_457_p1 <= P_16_read(16 - 1 downto 0);
    trunc_ln96_50_fu_1147_p1 <= reg_383(24 - 1 downto 0);
    trunc_ln96_51_fu_1151_p1 <= P_7_read(16 - 1 downto 0);
    trunc_ln96_52_fu_1154_p1 <= reg_383(16 - 1 downto 0);
    trunc_ln96_53_fu_1267_p1 <= P_6_read(8 - 1 downto 0);
    trunc_ln96_54_fu_1082_p1 <= P_6_read(24 - 1 downto 0);
    trunc_ln96_55_fu_1086_p1 <= reg_387(24 - 1 downto 0);
    trunc_ln96_56_fu_1090_p1 <= P_6_read(16 - 1 downto 0);
    trunc_ln96_57_fu_1094_p1 <= reg_387(16 - 1 downto 0);
    trunc_ln96_58_fu_1502_p1 <= P_5_read(8 - 1 downto 0);
    trunc_ln96_59_fu_1170_p1 <= P_5_read(16 - 1 downto 0);
    trunc_ln96_5_fu_460_p1 <= reg_379(16 - 1 downto 0);
    trunc_ln96_60_fu_1174_p1 <= reg_391(16 - 1 downto 0);
    trunc_ln96_61_fu_1178_p1 <= P_5_read(24 - 1 downto 0);
    trunc_ln96_62_fu_1182_p1 <= reg_391(24 - 1 downto 0);
    trunc_ln96_63_fu_1274_p1 <= P_4_read(8 - 1 downto 0);
    trunc_ln96_64_fu_1277_p1 <= P_4_read(16 - 1 downto 0);
    trunc_ln96_65_fu_1280_p1 <= reg_395(16 - 1 downto 0);
    trunc_ln96_66_fu_1284_p1 <= P_4_read(24 - 1 downto 0);
    trunc_ln96_67_fu_1287_p1 <= reg_395(24 - 1 downto 0);
    trunc_ln96_68_fu_1509_p1 <= P_3_read(8 - 1 downto 0);
    trunc_ln96_69_fu_1512_p1 <= P_3_read(24 - 1 downto 0);
    trunc_ln96_6_fu_464_p1 <= P_16_read(24 - 1 downto 0);
    trunc_ln96_70_fu_1515_p1 <= reg_399(24 - 1 downto 0);
    trunc_ln96_71_fu_1519_p1 <= P_3_read(16 - 1 downto 0);
    trunc_ln96_72_fu_1522_p1 <= reg_399(16 - 1 downto 0);
    trunc_ln96_73_fu_1307_p1 <= P_2_read(8 - 1 downto 0);
    trunc_ln96_74_fu_1311_p1 <= P_2_read(24 - 1 downto 0);
    trunc_ln96_75_fu_1315_p1 <= reg_403(24 - 1 downto 0);
    trunc_ln96_76_fu_1319_p1 <= P_2_read(16 - 1 downto 0);
    trunc_ln96_77_fu_1323_p1 <= reg_403(16 - 1 downto 0);
    trunc_ln96_7_fu_467_p1 <= reg_379(24 - 1 downto 0);
    trunc_ln96_8_fu_876_p1 <= P_15_read(8 - 1 downto 0);
    trunc_ln96_9_fu_579_p1 <= P_15_read(24 - 1 downto 0);
    trunc_ln96_fu_869_p1 <= P_17_read(8 - 1 downto 0);
    trunc_ln97_10_fu_1263_p1 <= reg_387(8 - 1 downto 0);
    trunc_ln97_11_fu_1498_p1 <= reg_391(8 - 1 downto 0);
    trunc_ln97_12_fu_1270_p1 <= reg_395(8 - 1 downto 0);
    trunc_ln97_13_fu_1505_p1 <= reg_399(8 - 1 downto 0);
    trunc_ln97_14_fu_1303_p1 <= reg_403(8 - 1 downto 0);
    trunc_ln97_15_fu_1538_p1 <= reg_379(8 - 1 downto 0);
    trunc_ln97_1_fu_872_p1 <= reg_383(8 - 1 downto 0);
    trunc_ln97_2_fu_712_p1 <= reg_387(8 - 1 downto 0);
    trunc_ln97_3_fu_879_p1 <= reg_391(8 - 1 downto 0);
    trunc_ln97_4_fu_719_p1 <= reg_395(8 - 1 downto 0);
    trunc_ln97_5_fu_886_p1 <= reg_399(8 - 1 downto 0);
    trunc_ln97_6_fu_752_p1 <= reg_403(8 - 1 downto 0);
    trunc_ln97_7_fu_919_p1 <= reg_379(8 - 1 downto 0);
    trunc_ln97_8_fu_1256_p1 <= reg_379(8 - 1 downto 0);
    trunc_ln97_9_fu_1491_p1 <= reg_383(8 - 1 downto 0);
    trunc_ln97_fu_705_p1 <= reg_379(8 - 1 downto 0);
    xor_ln101_1_fu_1568_p2 <= (xor_ln96_80_fu_1532_p2 xor xor_ln96_79_reg_1991);
    xor_ln101_2_fu_1573_p2 <= (trunc_ln101_4_fu_1558_p1 xor trunc_ln101_3_fu_1554_p1);
    xor_ln101_3_fu_1579_p2 <= (xor_ln96_78_fu_1526_p2 xor xor_ln96_77_reg_1986);
    xor_ln101_4_fu_1584_p2 <= (trunc_ln101_2_fu_1550_p1 xor trunc_ln101_1_fu_1546_p1);
    xor_ln101_6_fu_1595_p2 <= (xor_ln101_4_fu_1584_p2 xor xor_ln101_3_fu_1579_p2);
    xor_ln101_7_fu_1601_p2 <= (xor_ln101_2_fu_1573_p2 xor xor_ln101_1_fu_1568_p2);
    xor_ln101_fu_1562_p2 <= (reg_379 xor P_1_read);
    xor_ln102_1_fu_1379_p2 <= (xor_ln96_84_fu_1338_p2 xor xor_ln96_83_fu_1333_p2);
    xor_ln102_3_fu_1391_p2 <= (xor_ln102_1_fu_1379_p2 xor trunc_ln102_2_fu_1375_p1);
    xor_ln102_4_fu_1397_p2 <= (xor_ln102_fu_1369_p2 xor trunc_ln102_1_fu_1365_p1);
    xor_ln102_fu_1369_p2 <= (xor_ln96_86_fu_1349_p2 xor xor_ln96_85_fu_1344_p2);
    xor_ln242_17_fu_822_p2 <= (trunc_ln97_fu_705_p1 xor ciphertext_load_7_reg_1779);
    xor_ln242_18_fu_827_p2 <= (trunc_ln97_2_fu_712_p1 xor trunc_ln96_3_fu_709_p1);
    xor_ln242_19_fu_833_p2 <= (xor_ln242_18_fu_827_p2 xor xor_ln242_17_fu_822_p2);
    xor_ln242_20_fu_839_p2 <= (trunc_ln97_4_fu_719_p1 xor trunc_ln96_13_fu_716_p1);
    xor_ln242_21_fu_845_p2 <= (trunc_ln97_6_fu_752_p1 xor trunc_ln96_33_fu_756_p1);
    xor_ln242_22_fu_851_p2 <= (xor_ln242_21_fu_845_p2 xor trunc_ln96_23_fu_723_p1);
    xor_ln242_23_fu_857_p2 <= (xor_ln242_22_fu_851_p2 xor xor_ln242_20_fu_839_p2);
    xor_ln242_24_fu_863_p2 <= (xor_ln242_23_fu_857_p2 xor xor_ln242_19_fu_833_p2);
    xor_ln242_25_fu_1435_p2 <= (trunc_ln97_8_fu_1256_p1 xor trunc_ln96_43_fu_1260_p1);
    xor_ln242_26_fu_1441_p2 <= (trunc_ln97_10_fu_1263_p1 xor trunc_ln96_53_fu_1267_p1);
    xor_ln242_27_fu_1447_p2 <= (xor_ln242_26_fu_1441_p2 xor xor_ln242_25_fu_1435_p2);
    xor_ln242_28_fu_1453_p2 <= (trunc_ln97_12_fu_1270_p1 xor trunc_ln96_63_fu_1274_p1);
    xor_ln242_29_fu_1459_p2 <= (trunc_ln96_73_fu_1307_p1 xor trunc_ln102_fu_1361_p1);
    xor_ln242_30_fu_1465_p2 <= (xor_ln242_29_fu_1459_p2 xor trunc_ln97_14_fu_1303_p1);
    xor_ln242_31_fu_1471_p2 <= (xor_ln242_30_fu_1465_p2 xor xor_ln242_28_fu_1453_p2);
    xor_ln242_32_fu_1477_p2 <= (xor_ln242_31_fu_1471_p2 xor xor_ln242_27_fu_1447_p2);
    xor_ln242_fu_1483_p2 <= (xor_ln242_32_fu_1477_p2 xor xor_ln242_24_reg_1897);
    xor_ln246_17_fu_985_p2 <= (trunc_ln96_fu_869_p1 xor ciphertext_load_3_reg_1725);
    xor_ln246_18_fu_990_p2 <= (trunc_ln97_1_fu_872_p1 xor trunc_ln96_8_fu_876_p1);
    xor_ln246_19_fu_996_p2 <= (xor_ln246_18_fu_990_p2 xor xor_ln246_17_fu_985_p2);
    xor_ln246_20_fu_1002_p2 <= (trunc_ln97_3_fu_879_p1 xor trunc_ln96_18_fu_883_p1);
    xor_ln246_21_fu_1008_p2 <= (trunc_ln97_7_fu_919_p1 xor trunc_ln96_28_fu_890_p1);
    xor_ln246_22_fu_1014_p2 <= (xor_ln246_21_fu_1008_p2 xor trunc_ln97_5_fu_886_p1);
    xor_ln246_23_fu_1020_p2 <= (xor_ln246_22_fu_1014_p2 xor xor_ln246_20_fu_1002_p2);
    xor_ln246_24_fu_1026_p2 <= (xor_ln246_23_fu_1020_p2 xor xor_ln246_19_fu_996_p2);
    xor_ln246_25_fu_1639_p2 <= (trunc_ln97_9_fu_1491_p1 xor trunc_ln96_38_fu_1488_p1);
    xor_ln246_26_fu_1645_p2 <= (trunc_ln97_11_fu_1498_p1 xor trunc_ln96_48_fu_1495_p1);
    xor_ln246_27_fu_1651_p2 <= (xor_ln246_26_fu_1645_p2 xor xor_ln246_25_fu_1639_p2);
    xor_ln246_28_fu_1657_p2 <= (trunc_ln97_13_fu_1505_p1 xor trunc_ln96_58_fu_1502_p1);
    xor_ln246_29_fu_1663_p2 <= (trunc_ln97_15_fu_1538_p1 xor trunc_ln101_fu_1542_p1);
    xor_ln246_30_fu_1669_p2 <= (xor_ln246_29_fu_1663_p2 xor trunc_ln96_68_fu_1509_p1);
    xor_ln246_31_fu_1675_p2 <= (xor_ln246_30_fu_1669_p2 xor xor_ln246_28_fu_1657_p2);
    xor_ln246_32_fu_1681_p2 <= (xor_ln246_31_fu_1675_p2 xor xor_ln246_27_fu_1651_p2);
    xor_ln246_fu_1687_p2 <= (xor_ln246_32_fu_1681_p2 xor xor_ln246_24_reg_1923);
    xor_ln96_10_fu_512_p2 <= (reg_387 xor P_14_read);
    xor_ln96_11_fu_518_p2 <= (xor_ln96_2_fu_490_p2 xor tmp_69_fu_484_p3);
    xor_ln96_12_fu_524_p2 <= (trunc_ln96_17_fu_508_p1 xor trunc_ln96_16_fu_504_p1);
    xor_ln96_13_fu_530_p2 <= (xor_ln96_1_fu_478_p2 xor tmp_68_fu_471_p4);
    xor_ln96_14_fu_536_p2 <= (trunc_ln96_15_fu_500_p1 xor trunc_ln96_14_fu_496_p1);
    xor_ln96_16_fu_633_p2 <= (reg_391 xor P_13_read);
    xor_ln96_17_fu_639_p2 <= (xor_ln96_8_fu_611_p2 xor xor_ln96_7_fu_605_p2);
    xor_ln96_18_fu_645_p2 <= (trunc_ln96_22_fu_629_p1 xor trunc_ln96_21_fu_625_p1);
    xor_ln96_19_fu_651_p2 <= (xor_ln96_6_fu_599_p2 xor xor_ln96_5_fu_593_p2);
    xor_ln96_1_fu_478_p2 <= (trunc_ln96_7_fu_467_p1 xor trunc_ln96_6_fu_464_p1);
    xor_ln96_20_fu_657_p2 <= (trunc_ln96_20_fu_621_p1 xor trunc_ln96_19_fu_617_p1);
    xor_ln96_22_fu_681_p2 <= (reg_395 xor P_12_read);
    xor_ln96_23_fu_548_p2 <= (xor_ln96_14_fu_536_p2 xor xor_ln96_13_fu_530_p2);
    xor_ln96_24_fu_740_p2 <= (trunc_ln96_27_fu_736_p1 xor trunc_ln96_26_fu_733_p1);
    xor_ln96_25_fu_554_p2 <= (xor_ln96_12_fu_524_p2 xor xor_ln96_11_fu_518_p2);
    xor_ln96_26_fu_746_p2 <= (trunc_ln96_25_fu_729_p1 xor trunc_ln96_24_fu_726_p1);
    xor_ln96_28_fu_693_p2 <= (reg_399 xor P_11_read);
    xor_ln96_29_fu_669_p2 <= (xor_ln96_20_fu_657_p2 xor xor_ln96_19_fu_651_p2);
    xor_ln96_2_fu_490_p2 <= (trunc_ln96_5_fu_460_p1 xor trunc_ln96_4_fu_457_p1);
    xor_ln96_30_fu_907_p2 <= (trunc_ln96_32_fu_903_p1 xor trunc_ln96_31_fu_900_p1);
    xor_ln96_31_fu_675_p2 <= (xor_ln96_18_fu_645_p2 xor xor_ln96_17_fu_639_p2);
    xor_ln96_32_fu_913_p2 <= (trunc_ln96_30_fu_896_p1 xor trunc_ln96_29_fu_893_p1);
    xor_ln96_34_fu_776_p2 <= (reg_403 xor P_10_read);
    xor_ln96_35_fu_782_p2 <= (xor_ln96_26_fu_746_p2 xor xor_ln96_25_reg_1829);
    xor_ln96_36_fu_787_p2 <= (trunc_ln96_37_fu_772_p1 xor trunc_ln96_36_fu_768_p1);
    xor_ln96_37_fu_793_p2 <= (xor_ln96_24_fu_740_p2 xor xor_ln96_23_reg_1824);
    xor_ln96_38_fu_798_p2 <= (trunc_ln96_35_fu_764_p1 xor trunc_ln96_34_fu_760_p1);
    xor_ln96_40_fu_939_p2 <= (reg_379 xor P_9_read);
    xor_ln96_41_fu_945_p2 <= (xor_ln96_32_fu_913_p2 xor xor_ln96_31_reg_1850);
    xor_ln96_42_fu_950_p2 <= (trunc_ln96_42_fu_935_p1 xor trunc_ln96_41_fu_931_p1);
    xor_ln96_43_fu_956_p2 <= (xor_ln96_30_fu_907_p2 xor xor_ln96_29_reg_1845);
    xor_ln96_44_fu_961_p2 <= (trunc_ln96_40_fu_927_p1 xor trunc_ln96_39_fu_923_p1);
    xor_ln96_46_fu_1032_p2 <= (reg_379 xor P_8_read);
    xor_ln96_47_fu_810_p2 <= (xor_ln96_38_fu_798_p2 xor xor_ln96_37_fu_793_p2);
    xor_ln96_48_fu_1070_p2 <= (trunc_ln96_47_fu_1066_p1 xor trunc_ln96_46_fu_1063_p1);
    xor_ln96_49_fu_816_p2 <= (xor_ln96_36_fu_787_p2 xor xor_ln96_35_fu_782_p2);
    xor_ln96_4_fu_445_p2 <= (reg_383 xor P_15_read);
    xor_ln96_50_fu_1076_p2 <= (trunc_ln96_45_fu_1059_p1 xor trunc_ln96_44_fu_1056_p1);
    xor_ln96_52_fu_1044_p2 <= (reg_383 xor P_7_read);
    xor_ln96_53_fu_973_p2 <= (xor_ln96_44_fu_961_p2 xor xor_ln96_43_fu_956_p2);
    xor_ln96_54_fu_1158_p2 <= (trunc_ln96_52_fu_1154_p1 xor trunc_ln96_51_fu_1151_p1);
    xor_ln96_55_fu_979_p2 <= (xor_ln96_42_fu_950_p2 xor xor_ln96_41_fu_945_p2);
    xor_ln96_56_fu_1164_p2 <= (trunc_ln96_50_fu_1147_p1 xor trunc_ln96_49_fu_1144_p1);
    xor_ln96_58_fu_1098_p2 <= (reg_387 xor P_6_read);
    xor_ln96_59_fu_1104_p2 <= (xor_ln96_50_fu_1076_p2 xor xor_ln96_49_reg_1892);
    xor_ln96_5_fu_593_p2 <= (trunc_ln96_2_fu_570_p1 xor tmp_67_fu_573_p3);
    xor_ln96_60_fu_1109_p2 <= (trunc_ln96_57_fu_1094_p1 xor trunc_ln96_56_fu_1090_p1);
    xor_ln96_61_fu_1115_p2 <= (xor_ln96_48_fu_1070_p2 xor xor_ln96_47_reg_1887);
    xor_ln96_62_fu_1120_p2 <= (trunc_ln96_55_fu_1086_p1 xor trunc_ln96_54_fu_1082_p1);
    xor_ln96_64_fu_1186_p2 <= (reg_391 xor P_5_read);
    xor_ln96_65_fu_1192_p2 <= (xor_ln96_56_fu_1164_p2 xor xor_ln96_55_reg_1918);
    xor_ln96_66_fu_1197_p2 <= (trunc_ln96_62_fu_1182_p1 xor trunc_ln96_61_fu_1178_p1);
    xor_ln96_67_fu_1203_p2 <= (xor_ln96_54_fu_1158_p2 xor xor_ln96_53_reg_1913);
    xor_ln96_68_fu_1208_p2 <= (trunc_ln96_60_fu_1174_p1 xor trunc_ln96_59_fu_1170_p1);
    xor_ln96_6_fu_599_p2 <= (trunc_ln96_12_fu_589_p1 xor trunc_ln96_11_fu_586_p1);
    xor_ln96_70_fu_1232_p2 <= (reg_395 xor P_4_read);
    xor_ln96_71_fu_1132_p2 <= (xor_ln96_62_fu_1120_p2 xor xor_ln96_61_fu_1115_p2);
    xor_ln96_72_fu_1291_p2 <= (trunc_ln96_67_fu_1287_p1 xor trunc_ln96_66_fu_1284_p1);
    xor_ln96_73_fu_1138_p2 <= (xor_ln96_60_fu_1109_p2 xor xor_ln96_59_fu_1104_p2);
    xor_ln96_74_fu_1297_p2 <= (trunc_ln96_65_fu_1280_p1 xor trunc_ln96_64_fu_1277_p1);
    xor_ln96_76_fu_1244_p2 <= (reg_399 xor P_3_read);
    xor_ln96_77_fu_1220_p2 <= (xor_ln96_68_fu_1208_p2 xor xor_ln96_67_fu_1203_p2);
    xor_ln96_78_fu_1526_p2 <= (trunc_ln96_72_fu_1522_p1 xor trunc_ln96_71_fu_1519_p1);
    xor_ln96_79_fu_1226_p2 <= (xor_ln96_66_fu_1197_p2 xor xor_ln96_65_fu_1192_p2);
    xor_ln96_7_fu_605_p2 <= (trunc_ln96_1_fu_560_p1 xor tmp_66_fu_563_p4);
    xor_ln96_80_fu_1532_p2 <= (trunc_ln96_70_fu_1515_p1 xor trunc_ln96_69_fu_1512_p1);
    xor_ln96_82_fu_1327_p2 <= (reg_403 xor P_2_read);
    xor_ln96_83_fu_1333_p2 <= (xor_ln96_74_fu_1297_p2 xor xor_ln96_73_reg_1970);
    xor_ln96_84_fu_1338_p2 <= (trunc_ln96_77_fu_1323_p1 xor trunc_ln96_76_fu_1319_p1);
    xor_ln96_85_fu_1344_p2 <= (xor_ln96_72_fu_1291_p2 xor xor_ln96_71_reg_1965);
    xor_ln96_86_fu_1349_p2 <= (trunc_ln96_75_fu_1315_p1 xor trunc_ln96_74_fu_1311_p1);
    xor_ln96_8_fu_611_p2 <= (trunc_ln96_9_fu_579_p1 xor trunc_ln96_10_fu_582_p1);
    xor_ln96_fu_432_p2 <= (reg_379 xor P_16_read);
end behav;
