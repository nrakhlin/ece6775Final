-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_SetKey_Encrypt_Decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    set_key : IN STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_size : IN STD_LOGIC_VECTOR (63 downto 0);
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce1 : OUT STD_LOGIC;
    plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce0 : OUT STD_LOGIC;
    decryptedtext_we0 : OUT STD_LOGIC;
    decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce1 : OUT STD_LOGIC;
    decryptedtext_we1 : OUT STD_LOGIC;
    decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_0_o_ap_vld : OUT STD_LOGIC;
    P_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_1_o_ap_vld : OUT STD_LOGIC;
    P_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_2_o_ap_vld : OUT STD_LOGIC;
    P_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_3_o_ap_vld : OUT STD_LOGIC;
    P_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_4_o_ap_vld : OUT STD_LOGIC;
    P_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_5_o_ap_vld : OUT STD_LOGIC;
    P_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_6_o_ap_vld : OUT STD_LOGIC;
    P_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_7_o_ap_vld : OUT STD_LOGIC;
    P_8_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_8_o_ap_vld : OUT STD_LOGIC;
    P_9_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_9_o_ap_vld : OUT STD_LOGIC;
    P_10_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_10_o_ap_vld : OUT STD_LOGIC;
    P_11_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_11_o_ap_vld : OUT STD_LOGIC;
    P_12_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_12_o_ap_vld : OUT STD_LOGIC;
    P_13_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_13_o_ap_vld : OUT STD_LOGIC;
    P_14_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_14_o_ap_vld : OUT STD_LOGIC;
    P_15_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_15_o_ap_vld : OUT STD_LOGIC;
    P_16_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_16_o_ap_vld : OUT STD_LOGIC;
    P_17_i : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_17_o_ap_vld : OUT STD_LOGIC;
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_we0 : OUT STD_LOGIC;
    S_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce1 : OUT STD_LOGIC;
    S_0_we1 : OUT STD_LOGIC;
    S_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_we0 : OUT STD_LOGIC;
    S_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce1 : OUT STD_LOGIC;
    S_1_we1 : OUT STD_LOGIC;
    S_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_we0 : OUT STD_LOGIC;
    S_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce1 : OUT STD_LOGIC;
    S_2_we1 : OUT STD_LOGIC;
    S_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_we0 : OUT STD_LOGIC;
    S_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce1 : OUT STD_LOGIC;
    S_3_we1 : OUT STD_LOGIC;
    S_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_SetKey_Encrypt_Decrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_SetKey_Encrypt_Decrypt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.714650,HLS_SYN_LAT=9695,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=9035,HLS_SYN_LUT=17863,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext_ce0 : STD_LOGIC;
    signal ciphertext_we0 : STD_LOGIC;
    signal ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext_ce1 : STD_LOGIC;
    signal ciphertext_we1 : STD_LOGIC;
    signal ciphertext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_start : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_ap_done : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_ap_idle : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_ap_ready : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_key_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Blowfish_SetKey_fu_328_key_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_key_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Blowfish_SetKey_fu_328_key_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_0_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_0_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_0_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_0_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_1_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_1_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_1_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_1_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_2_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_2_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_2_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_2_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_3_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_3_we0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_SetKey_fu_328_S_3_ce1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_3_we1 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_S_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_SetKey_fu_328_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_ap_start : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ap_done : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_plaintext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_plaintext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_plaintext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_we0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_we1 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_ciphertext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_S_0_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_S_1_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_S_2_ce0 : STD_LOGIC;
    signal grp_Blowfish_Encrypt_fu_346_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Encrypt_fu_346_S_3_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ap_start : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ap_done : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_we0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_we1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_decryptedtext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_S_0_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_S_1_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_S_2_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_397_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_397_S_3_ce0 : STD_LOGIC;
    signal grp_Blowfish_SetKey_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal set_key_read_read_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Blowfish_Encrypt_fu_346_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_Blowfish_Decrypt_fu_397_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component Blowfish_SetKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_size : IN STD_LOGIC_VECTOR (63 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_we0 : OUT STD_LOGIC;
        S_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce1 : OUT STD_LOGIC;
        S_0_we1 : OUT STD_LOGIC;
        S_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_we0 : OUT STD_LOGIC;
        S_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce1 : OUT STD_LOGIC;
        S_1_we1 : OUT STD_LOGIC;
        S_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_we0 : OUT STD_LOGIC;
        S_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce1 : OUT STD_LOGIC;
        S_2_we1 : OUT STD_LOGIC;
        S_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_we0 : OUT STD_LOGIC;
        S_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce1 : OUT STD_LOGIC;
        S_3_we1 : OUT STD_LOGIC;
        S_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce1 : OUT STD_LOGIC;
        plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_we0 : OUT STD_LOGIC;
        ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_we1 : OUT STD_LOGIC;
        ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce0 : OUT STD_LOGIC;
        decryptedtext_we0 : OUT STD_LOGIC;
        decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce1 : OUT STD_LOGIC;
        decryptedtext_we1 : OUT STD_LOGIC;
        decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_SetKey_EfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ciphertext_U : component Blowfish_SetKey_EfYi
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ciphertext_address0,
        ce0 => ciphertext_ce0,
        we0 => ciphertext_we0,
        d0 => grp_Blowfish_Encrypt_fu_346_ciphertext_d0,
        q0 => ciphertext_q0,
        address1 => ciphertext_address1,
        ce1 => ciphertext_ce1,
        we1 => ciphertext_we1,
        d1 => grp_Blowfish_Encrypt_fu_346_ciphertext_d1,
        q1 => ciphertext_q1);

    grp_Blowfish_SetKey_fu_328 : component Blowfish_SetKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_SetKey_fu_328_ap_start,
        ap_done => grp_Blowfish_SetKey_fu_328_ap_done,
        ap_idle => grp_Blowfish_SetKey_fu_328_ap_idle,
        ap_ready => grp_Blowfish_SetKey_fu_328_ap_ready,
        key_address0 => grp_Blowfish_SetKey_fu_328_key_address0,
        key_ce0 => grp_Blowfish_SetKey_fu_328_key_ce0,
        key_q0 => key_q0,
        key_address1 => grp_Blowfish_SetKey_fu_328_key_address1,
        key_ce1 => grp_Blowfish_SetKey_fu_328_key_ce1,
        key_q1 => key_q1,
        key_size => key_size,
        S_0_address0 => grp_Blowfish_SetKey_fu_328_S_0_address0,
        S_0_ce0 => grp_Blowfish_SetKey_fu_328_S_0_ce0,
        S_0_we0 => grp_Blowfish_SetKey_fu_328_S_0_we0,
        S_0_d0 => grp_Blowfish_SetKey_fu_328_S_0_d0,
        S_0_q0 => S_0_q0,
        S_0_address1 => grp_Blowfish_SetKey_fu_328_S_0_address1,
        S_0_ce1 => grp_Blowfish_SetKey_fu_328_S_0_ce1,
        S_0_we1 => grp_Blowfish_SetKey_fu_328_S_0_we1,
        S_0_d1 => grp_Blowfish_SetKey_fu_328_S_0_d1,
        S_1_address0 => grp_Blowfish_SetKey_fu_328_S_1_address0,
        S_1_ce0 => grp_Blowfish_SetKey_fu_328_S_1_ce0,
        S_1_we0 => grp_Blowfish_SetKey_fu_328_S_1_we0,
        S_1_d0 => grp_Blowfish_SetKey_fu_328_S_1_d0,
        S_1_q0 => S_1_q0,
        S_1_address1 => grp_Blowfish_SetKey_fu_328_S_1_address1,
        S_1_ce1 => grp_Blowfish_SetKey_fu_328_S_1_ce1,
        S_1_we1 => grp_Blowfish_SetKey_fu_328_S_1_we1,
        S_1_d1 => grp_Blowfish_SetKey_fu_328_S_1_d1,
        S_2_address0 => grp_Blowfish_SetKey_fu_328_S_2_address0,
        S_2_ce0 => grp_Blowfish_SetKey_fu_328_S_2_ce0,
        S_2_we0 => grp_Blowfish_SetKey_fu_328_S_2_we0,
        S_2_d0 => grp_Blowfish_SetKey_fu_328_S_2_d0,
        S_2_q0 => S_2_q0,
        S_2_address1 => grp_Blowfish_SetKey_fu_328_S_2_address1,
        S_2_ce1 => grp_Blowfish_SetKey_fu_328_S_2_ce1,
        S_2_we1 => grp_Blowfish_SetKey_fu_328_S_2_we1,
        S_2_d1 => grp_Blowfish_SetKey_fu_328_S_2_d1,
        S_3_address0 => grp_Blowfish_SetKey_fu_328_S_3_address0,
        S_3_ce0 => grp_Blowfish_SetKey_fu_328_S_3_ce0,
        S_3_we0 => grp_Blowfish_SetKey_fu_328_S_3_we0,
        S_3_d0 => grp_Blowfish_SetKey_fu_328_S_3_d0,
        S_3_q0 => S_3_q0,
        S_3_address1 => grp_Blowfish_SetKey_fu_328_S_3_address1,
        S_3_ce1 => grp_Blowfish_SetKey_fu_328_S_3_ce1,
        S_3_we1 => grp_Blowfish_SetKey_fu_328_S_3_we1,
        S_3_d1 => grp_Blowfish_SetKey_fu_328_S_3_d1,
        ap_return_0 => grp_Blowfish_SetKey_fu_328_ap_return_0,
        ap_return_1 => grp_Blowfish_SetKey_fu_328_ap_return_1,
        ap_return_2 => grp_Blowfish_SetKey_fu_328_ap_return_2,
        ap_return_3 => grp_Blowfish_SetKey_fu_328_ap_return_3,
        ap_return_4 => grp_Blowfish_SetKey_fu_328_ap_return_4,
        ap_return_5 => grp_Blowfish_SetKey_fu_328_ap_return_5,
        ap_return_6 => grp_Blowfish_SetKey_fu_328_ap_return_6,
        ap_return_7 => grp_Blowfish_SetKey_fu_328_ap_return_7,
        ap_return_8 => grp_Blowfish_SetKey_fu_328_ap_return_8,
        ap_return_9 => grp_Blowfish_SetKey_fu_328_ap_return_9,
        ap_return_10 => grp_Blowfish_SetKey_fu_328_ap_return_10,
        ap_return_11 => grp_Blowfish_SetKey_fu_328_ap_return_11,
        ap_return_12 => grp_Blowfish_SetKey_fu_328_ap_return_12,
        ap_return_13 => grp_Blowfish_SetKey_fu_328_ap_return_13,
        ap_return_14 => grp_Blowfish_SetKey_fu_328_ap_return_14,
        ap_return_15 => grp_Blowfish_SetKey_fu_328_ap_return_15,
        ap_return_16 => grp_Blowfish_SetKey_fu_328_ap_return_16,
        ap_return_17 => grp_Blowfish_SetKey_fu_328_ap_return_17);

    grp_Blowfish_Encrypt_fu_346 : component Blowfish_Encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Encrypt_fu_346_ap_start,
        ap_done => grp_Blowfish_Encrypt_fu_346_ap_done,
        ap_idle => grp_Blowfish_Encrypt_fu_346_ap_idle,
        ap_ready => grp_Blowfish_Encrypt_fu_346_ap_ready,
        plaintext_address0 => grp_Blowfish_Encrypt_fu_346_plaintext_address0,
        plaintext_ce0 => grp_Blowfish_Encrypt_fu_346_plaintext_ce0,
        plaintext_q0 => plaintext_q0,
        plaintext_address1 => grp_Blowfish_Encrypt_fu_346_plaintext_address1,
        plaintext_ce1 => grp_Blowfish_Encrypt_fu_346_plaintext_ce1,
        plaintext_q1 => plaintext_q1,
        ciphertext_address0 => grp_Blowfish_Encrypt_fu_346_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Encrypt_fu_346_ciphertext_ce0,
        ciphertext_we0 => grp_Blowfish_Encrypt_fu_346_ciphertext_we0,
        ciphertext_d0 => grp_Blowfish_Encrypt_fu_346_ciphertext_d0,
        ciphertext_address1 => grp_Blowfish_Encrypt_fu_346_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Encrypt_fu_346_ciphertext_ce1,
        ciphertext_we1 => grp_Blowfish_Encrypt_fu_346_ciphertext_we1,
        ciphertext_d1 => grp_Blowfish_Encrypt_fu_346_ciphertext_d1,
        P_0_read => reg_448,
        P_1_read => reg_454,
        P_2_read => reg_460,
        P_3_read => reg_466,
        P_4_read => reg_472,
        P_5_read => reg_478,
        P_6_read => reg_484,
        P_7_read => reg_490,
        P_8_read => reg_496,
        P_9_read => reg_502,
        P_10_read => reg_508,
        P_11_read => reg_514,
        P_12_read => reg_520,
        P_13_read => reg_526,
        P_14_read => reg_532,
        P_15_read => reg_538,
        P_16_read => reg_544,
        P_17_read => reg_550,
        S_0_address0 => grp_Blowfish_Encrypt_fu_346_S_0_address0,
        S_0_ce0 => grp_Blowfish_Encrypt_fu_346_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_Blowfish_Encrypt_fu_346_S_1_address0,
        S_1_ce0 => grp_Blowfish_Encrypt_fu_346_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_Blowfish_Encrypt_fu_346_S_2_address0,
        S_2_ce0 => grp_Blowfish_Encrypt_fu_346_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_Blowfish_Encrypt_fu_346_S_3_address0,
        S_3_ce0 => grp_Blowfish_Encrypt_fu_346_S_3_ce0,
        S_3_q0 => S_3_q0);

    grp_Blowfish_Decrypt_fu_397 : component Blowfish_Decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Decrypt_fu_397_ap_start,
        ap_done => grp_Blowfish_Decrypt_fu_397_ap_done,
        ap_idle => grp_Blowfish_Decrypt_fu_397_ap_idle,
        ap_ready => grp_Blowfish_Decrypt_fu_397_ap_ready,
        ciphertext_address0 => grp_Blowfish_Decrypt_fu_397_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Decrypt_fu_397_ciphertext_ce0,
        ciphertext_q0 => ciphertext_q0,
        ciphertext_address1 => grp_Blowfish_Decrypt_fu_397_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Decrypt_fu_397_ciphertext_ce1,
        ciphertext_q1 => ciphertext_q1,
        decryptedtext_address0 => grp_Blowfish_Decrypt_fu_397_decryptedtext_address0,
        decryptedtext_ce0 => grp_Blowfish_Decrypt_fu_397_decryptedtext_ce0,
        decryptedtext_we0 => grp_Blowfish_Decrypt_fu_397_decryptedtext_we0,
        decryptedtext_d0 => grp_Blowfish_Decrypt_fu_397_decryptedtext_d0,
        decryptedtext_address1 => grp_Blowfish_Decrypt_fu_397_decryptedtext_address1,
        decryptedtext_ce1 => grp_Blowfish_Decrypt_fu_397_decryptedtext_ce1,
        decryptedtext_we1 => grp_Blowfish_Decrypt_fu_397_decryptedtext_we1,
        decryptedtext_d1 => grp_Blowfish_Decrypt_fu_397_decryptedtext_d1,
        P_0_read => reg_448,
        P_1_read => reg_454,
        P_2_read => reg_460,
        P_3_read => reg_466,
        P_4_read => reg_472,
        P_5_read => reg_478,
        P_6_read => reg_484,
        P_7_read => reg_490,
        P_8_read => reg_496,
        P_9_read => reg_502,
        P_10_read => reg_508,
        P_11_read => reg_514,
        P_12_read => reg_520,
        P_13_read => reg_526,
        P_14_read => reg_532,
        P_15_read => reg_538,
        P_16_read => reg_544,
        P_17_read => reg_550,
        S_0_address0 => grp_Blowfish_Decrypt_fu_397_S_0_address0,
        S_0_ce0 => grp_Blowfish_Decrypt_fu_397_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_Blowfish_Decrypt_fu_397_S_1_address0,
        S_1_ce0 => grp_Blowfish_Decrypt_fu_397_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_Blowfish_Decrypt_fu_397_S_2_address0,
        S_2_ce0 => grp_Blowfish_Decrypt_fu_397_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_Blowfish_Decrypt_fu_397_S_3_address0,
        S_3_ce0 => grp_Blowfish_Decrypt_fu_397_S_3_ce0,
        S_3_q0 => S_3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Blowfish_Decrypt_fu_397_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Decrypt_fu_397_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Blowfish_Decrypt_fu_397_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Decrypt_fu_397_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Decrypt_fu_397_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Blowfish_Encrypt_fu_346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Encrypt_fu_346_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Blowfish_Encrypt_fu_346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Encrypt_fu_346_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Encrypt_fu_346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Blowfish_SetKey_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_SetKey_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if (((set_key_read_read_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Blowfish_SetKey_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_SetKey_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_SetKey_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_448 <= P_0_i;
                reg_454 <= P_1_i;
                reg_460 <= P_2_i;
                reg_466 <= P_3_i;
                reg_472 <= P_4_i;
                reg_478 <= P_5_i;
                reg_484 <= P_6_i;
                reg_490 <= P_7_i;
                reg_496 <= P_8_i;
                reg_502 <= P_9_i;
                reg_508 <= P_10_i;
                reg_514 <= P_11_i;
                reg_520 <= P_12_i;
                reg_526 <= P_13_i;
                reg_532 <= P_14_i;
                reg_538 <= P_15_i;
                reg_544 <= P_16_i;
                reg_550 <= P_17_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_Encrypt_fu_346_ap_done, grp_Blowfish_Decrypt_fu_397_ap_done, set_key_read_read_fu_88_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((set_key_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((set_key_read_read_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_Blowfish_Encrypt_fu_346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_Blowfish_Decrypt_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    P_0_o_assign_proc : process(P_0_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_0, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_0_o <= grp_Blowfish_SetKey_fu_328_ap_return_0;
        else 
            P_0_o <= P_0_i;
        end if; 
    end process;


    P_0_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_0_o_ap_vld <= ap_const_logic_1;
        else 
            P_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_10_o_assign_proc : process(P_10_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_10, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_10_o <= grp_Blowfish_SetKey_fu_328_ap_return_10;
        else 
            P_10_o <= P_10_i;
        end if; 
    end process;


    P_10_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_10_o_ap_vld <= ap_const_logic_1;
        else 
            P_10_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_11_o_assign_proc : process(P_11_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_11, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_11_o <= grp_Blowfish_SetKey_fu_328_ap_return_11;
        else 
            P_11_o <= P_11_i;
        end if; 
    end process;


    P_11_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_11_o_ap_vld <= ap_const_logic_1;
        else 
            P_11_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_12_o_assign_proc : process(P_12_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_12, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_12_o <= grp_Blowfish_SetKey_fu_328_ap_return_12;
        else 
            P_12_o <= P_12_i;
        end if; 
    end process;


    P_12_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_12_o_ap_vld <= ap_const_logic_1;
        else 
            P_12_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_13_o_assign_proc : process(P_13_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_13, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_13_o <= grp_Blowfish_SetKey_fu_328_ap_return_13;
        else 
            P_13_o <= P_13_i;
        end if; 
    end process;


    P_13_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_13_o_ap_vld <= ap_const_logic_1;
        else 
            P_13_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_14_o_assign_proc : process(P_14_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_14, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_14_o <= grp_Blowfish_SetKey_fu_328_ap_return_14;
        else 
            P_14_o <= P_14_i;
        end if; 
    end process;


    P_14_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_14_o_ap_vld <= ap_const_logic_1;
        else 
            P_14_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_15_o_assign_proc : process(P_15_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_15, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_15_o <= grp_Blowfish_SetKey_fu_328_ap_return_15;
        else 
            P_15_o <= P_15_i;
        end if; 
    end process;


    P_15_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_15_o_ap_vld <= ap_const_logic_1;
        else 
            P_15_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_16_o_assign_proc : process(P_16_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_16, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_16_o <= grp_Blowfish_SetKey_fu_328_ap_return_16;
        else 
            P_16_o <= P_16_i;
        end if; 
    end process;


    P_16_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_16_o_ap_vld <= ap_const_logic_1;
        else 
            P_16_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_17_o_assign_proc : process(P_17_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_17, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_17_o <= grp_Blowfish_SetKey_fu_328_ap_return_17;
        else 
            P_17_o <= P_17_i;
        end if; 
    end process;


    P_17_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_17_o_ap_vld <= ap_const_logic_1;
        else 
            P_17_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_1_o_assign_proc : process(P_1_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_1, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_1_o <= grp_Blowfish_SetKey_fu_328_ap_return_1;
        else 
            P_1_o <= P_1_i;
        end if; 
    end process;


    P_1_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_1_o_ap_vld <= ap_const_logic_1;
        else 
            P_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_2_o_assign_proc : process(P_2_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_2, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_2_o <= grp_Blowfish_SetKey_fu_328_ap_return_2;
        else 
            P_2_o <= P_2_i;
        end if; 
    end process;


    P_2_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_2_o_ap_vld <= ap_const_logic_1;
        else 
            P_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_3_o_assign_proc : process(P_3_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_3, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_3_o <= grp_Blowfish_SetKey_fu_328_ap_return_3;
        else 
            P_3_o <= P_3_i;
        end if; 
    end process;


    P_3_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_3_o_ap_vld <= ap_const_logic_1;
        else 
            P_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_4_o_assign_proc : process(P_4_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_4, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_4_o <= grp_Blowfish_SetKey_fu_328_ap_return_4;
        else 
            P_4_o <= P_4_i;
        end if; 
    end process;


    P_4_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_4_o_ap_vld <= ap_const_logic_1;
        else 
            P_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_5_o_assign_proc : process(P_5_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_5, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_5_o <= grp_Blowfish_SetKey_fu_328_ap_return_5;
        else 
            P_5_o <= P_5_i;
        end if; 
    end process;


    P_5_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_5_o_ap_vld <= ap_const_logic_1;
        else 
            P_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_6_o_assign_proc : process(P_6_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_6, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_6_o <= grp_Blowfish_SetKey_fu_328_ap_return_6;
        else 
            P_6_o <= P_6_i;
        end if; 
    end process;


    P_6_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_6_o_ap_vld <= ap_const_logic_1;
        else 
            P_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_7_o_assign_proc : process(P_7_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_7, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_7_o <= grp_Blowfish_SetKey_fu_328_ap_return_7;
        else 
            P_7_o <= P_7_i;
        end if; 
    end process;


    P_7_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_7_o_ap_vld <= ap_const_logic_1;
        else 
            P_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_8_o_assign_proc : process(P_8_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_8, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_8_o <= grp_Blowfish_SetKey_fu_328_ap_return_8;
        else 
            P_8_o <= P_8_i;
        end if; 
    end process;


    P_8_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_8_o_ap_vld <= ap_const_logic_1;
        else 
            P_8_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    P_9_o_assign_proc : process(P_9_i, grp_Blowfish_SetKey_fu_328_ap_done, grp_Blowfish_SetKey_fu_328_ap_return_9, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_9_o <= grp_Blowfish_SetKey_fu_328_ap_return_9;
        else 
            P_9_o <= P_9_i;
        end if; 
    end process;


    P_9_o_ap_vld_assign_proc : process(grp_Blowfish_SetKey_fu_328_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Blowfish_SetKey_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            P_9_o_ap_vld <= ap_const_logic_1;
        else 
            P_9_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    S_0_address0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_0_address0, grp_Blowfish_Encrypt_fu_346_S_0_address0, grp_Blowfish_Decrypt_fu_397_S_0_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_0_address0 <= grp_Blowfish_Decrypt_fu_397_S_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_0_address0 <= grp_Blowfish_Encrypt_fu_346_S_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_address0 <= grp_Blowfish_SetKey_fu_328_S_0_address0;
        else 
            S_0_address0 <= "XXXXXXXX";
        end if; 
    end process;

    S_0_address1 <= grp_Blowfish_SetKey_fu_328_S_0_address1;

    S_0_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_0_ce0, grp_Blowfish_Encrypt_fu_346_S_0_ce0, grp_Blowfish_Decrypt_fu_397_S_0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_0_ce0 <= grp_Blowfish_Decrypt_fu_397_S_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_0_ce0 <= grp_Blowfish_Encrypt_fu_346_S_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_ce0 <= grp_Blowfish_SetKey_fu_328_S_0_ce0;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_0_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_0_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_ce1 <= grp_Blowfish_SetKey_fu_328_S_0_ce1;
        else 
            S_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_d0 <= grp_Blowfish_SetKey_fu_328_S_0_d0;
    S_0_d1 <= grp_Blowfish_SetKey_fu_328_S_0_d1;

    S_0_we0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_we0 <= grp_Blowfish_SetKey_fu_328_S_0_we0;
        else 
            S_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_0_we1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_0_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_we1 <= grp_Blowfish_SetKey_fu_328_S_0_we1;
        else 
            S_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_address0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_1_address0, grp_Blowfish_Encrypt_fu_346_S_1_address0, grp_Blowfish_Decrypt_fu_397_S_1_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_1_address0 <= grp_Blowfish_Decrypt_fu_397_S_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_1_address0 <= grp_Blowfish_Encrypt_fu_346_S_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_address0 <= grp_Blowfish_SetKey_fu_328_S_1_address0;
        else 
            S_1_address0 <= "XXXXXXXX";
        end if; 
    end process;

    S_1_address1 <= grp_Blowfish_SetKey_fu_328_S_1_address1;

    S_1_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_1_ce0, grp_Blowfish_Encrypt_fu_346_S_1_ce0, grp_Blowfish_Decrypt_fu_397_S_1_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_1_ce0 <= grp_Blowfish_Decrypt_fu_397_S_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_1_ce0 <= grp_Blowfish_Encrypt_fu_346_S_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_ce0 <= grp_Blowfish_SetKey_fu_328_S_1_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_1_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_ce1 <= grp_Blowfish_SetKey_fu_328_S_1_ce1;
        else 
            S_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_d0 <= grp_Blowfish_SetKey_fu_328_S_1_d0;
    S_1_d1 <= grp_Blowfish_SetKey_fu_328_S_1_d1;

    S_1_we0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_1_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_we0 <= grp_Blowfish_SetKey_fu_328_S_1_we0;
        else 
            S_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_we1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_1_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_we1 <= grp_Blowfish_SetKey_fu_328_S_1_we1;
        else 
            S_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_address0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_2_address0, grp_Blowfish_Encrypt_fu_346_S_2_address0, grp_Blowfish_Decrypt_fu_397_S_2_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_2_address0 <= grp_Blowfish_Decrypt_fu_397_S_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_2_address0 <= grp_Blowfish_Encrypt_fu_346_S_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_address0 <= grp_Blowfish_SetKey_fu_328_S_2_address0;
        else 
            S_2_address0 <= "XXXXXXXX";
        end if; 
    end process;

    S_2_address1 <= grp_Blowfish_SetKey_fu_328_S_2_address1;

    S_2_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_2_ce0, grp_Blowfish_Encrypt_fu_346_S_2_ce0, grp_Blowfish_Decrypt_fu_397_S_2_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_2_ce0 <= grp_Blowfish_Decrypt_fu_397_S_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_2_ce0 <= grp_Blowfish_Encrypt_fu_346_S_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_ce0 <= grp_Blowfish_SetKey_fu_328_S_2_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_2_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_ce1 <= grp_Blowfish_SetKey_fu_328_S_2_ce1;
        else 
            S_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_d0 <= grp_Blowfish_SetKey_fu_328_S_2_d0;
    S_2_d1 <= grp_Blowfish_SetKey_fu_328_S_2_d1;

    S_2_we0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_2_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_we0 <= grp_Blowfish_SetKey_fu_328_S_2_we0;
        else 
            S_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_we1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_2_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_we1 <= grp_Blowfish_SetKey_fu_328_S_2_we1;
        else 
            S_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_3_address0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_3_address0, grp_Blowfish_Encrypt_fu_346_S_3_address0, grp_Blowfish_Decrypt_fu_397_S_3_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_3_address0 <= grp_Blowfish_Decrypt_fu_397_S_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_3_address0 <= grp_Blowfish_Encrypt_fu_346_S_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_address0 <= grp_Blowfish_SetKey_fu_328_S_3_address0;
        else 
            S_3_address0 <= "XXXXXXXX";
        end if; 
    end process;

    S_3_address1 <= grp_Blowfish_SetKey_fu_328_S_3_address1;

    S_3_ce0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_3_ce0, grp_Blowfish_Encrypt_fu_346_S_3_ce0, grp_Blowfish_Decrypt_fu_397_S_3_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_3_ce0 <= grp_Blowfish_Decrypt_fu_397_S_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_3_ce0 <= grp_Blowfish_Encrypt_fu_346_S_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_ce0 <= grp_Blowfish_SetKey_fu_328_S_3_ce0;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_3_ce1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_3_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_ce1 <= grp_Blowfish_SetKey_fu_328_S_3_ce1;
        else 
            S_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_d0 <= grp_Blowfish_SetKey_fu_328_S_3_d0;
    S_3_d1 <= grp_Blowfish_SetKey_fu_328_S_3_d1;

    S_3_we0_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_3_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_we0 <= grp_Blowfish_SetKey_fu_328_S_3_we0;
        else 
            S_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_3_we1_assign_proc : process(grp_Blowfish_SetKey_fu_328_S_3_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_we1 <= grp_Blowfish_SetKey_fu_328_S_3_we1;
        else 
            S_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_Blowfish_Decrypt_fu_397_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_Blowfish_Decrypt_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Blowfish_Decrypt_fu_397_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_Blowfish_Decrypt_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_address0_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_address0, grp_Blowfish_Decrypt_fu_397_ciphertext_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext_address0 <= grp_Blowfish_Decrypt_fu_397_ciphertext_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address0 <= grp_Blowfish_Encrypt_fu_346_ciphertext_address0;
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_address1, grp_Blowfish_Decrypt_fu_397_ciphertext_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext_address1 <= grp_Blowfish_Decrypt_fu_397_ciphertext_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address1 <= grp_Blowfish_Encrypt_fu_346_ciphertext_address1;
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_ce0, grp_Blowfish_Decrypt_fu_397_ciphertext_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext_ce0 <= grp_Blowfish_Decrypt_fu_397_ciphertext_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_ce0 <= grp_Blowfish_Encrypt_fu_346_ciphertext_ce0;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_ce1, grp_Blowfish_Decrypt_fu_397_ciphertext_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext_ce1 <= grp_Blowfish_Decrypt_fu_397_ciphertext_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_ce1 <= grp_Blowfish_Encrypt_fu_346_ciphertext_ce1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_we0_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_we0 <= grp_Blowfish_Encrypt_fu_346_ciphertext_we0;
        else 
            ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_we1_assign_proc : process(grp_Blowfish_Encrypt_fu_346_ciphertext_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_we1 <= grp_Blowfish_Encrypt_fu_346_ciphertext_we1;
        else 
            ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    decryptedtext_address0 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_address0;
    decryptedtext_address1 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_address1;
    decryptedtext_ce0 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_ce0;
    decryptedtext_ce1 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_ce1;
    decryptedtext_d0 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_d0;
    decryptedtext_d1 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_d1;
    decryptedtext_we0 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_we0;
    decryptedtext_we1 <= grp_Blowfish_Decrypt_fu_397_decryptedtext_we1;
    grp_Blowfish_Decrypt_fu_397_ap_start <= grp_Blowfish_Decrypt_fu_397_ap_start_reg;
    grp_Blowfish_Encrypt_fu_346_ap_start <= grp_Blowfish_Encrypt_fu_346_ap_start_reg;
    grp_Blowfish_SetKey_fu_328_ap_start <= grp_Blowfish_SetKey_fu_328_ap_start_reg;
    key_address0 <= grp_Blowfish_SetKey_fu_328_key_address0;
    key_address1 <= grp_Blowfish_SetKey_fu_328_key_address1;
    key_ce0 <= grp_Blowfish_SetKey_fu_328_key_ce0;
    key_ce1 <= grp_Blowfish_SetKey_fu_328_key_ce1;
    plaintext_address0 <= grp_Blowfish_Encrypt_fu_346_plaintext_address0;
    plaintext_address1 <= grp_Blowfish_Encrypt_fu_346_plaintext_address1;
    plaintext_ce0 <= grp_Blowfish_Encrypt_fu_346_plaintext_ce0;
    plaintext_ce1 <= grp_Blowfish_Encrypt_fu_346_plaintext_ce1;
    set_key_read_read_fu_88_p2 <= (0=>set_key, others=>'-');
end behav;
