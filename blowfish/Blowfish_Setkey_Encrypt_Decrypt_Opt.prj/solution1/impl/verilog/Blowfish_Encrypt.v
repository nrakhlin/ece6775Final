// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Blowfish_Encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        plaintext_address1,
        plaintext_ce1,
        plaintext_q1,
        ciphertext_address0,
        ciphertext_ce0,
        ciphertext_we0,
        ciphertext_d0,
        ciphertext_address1,
        ciphertext_ce1,
        ciphertext_we1,
        ciphertext_d1,
        P_0_read,
        P_1_read,
        P_2_read,
        P_3_read,
        P_4_read,
        P_5_read,
        P_6_read,
        P_7_read,
        P_8_read,
        P_9_read,
        P_10_read,
        P_11_read,
        P_12_read,
        P_13_read,
        P_14_read,
        P_15_read,
        P_16_read,
        P_17_read,
        S_0_address0,
        S_0_ce0,
        S_0_q0,
        S_1_address0,
        S_1_ce0,
        S_1_q0,
        S_2_address0,
        S_2_ce0,
        S_2_q0,
        S_3_address0,
        S_3_ce0,
        S_3_q0
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [7:0] plaintext_q0;
output  [2:0] plaintext_address1;
output   plaintext_ce1;
input  [7:0] plaintext_q1;
output  [2:0] ciphertext_address0;
output   ciphertext_ce0;
output   ciphertext_we0;
output  [7:0] ciphertext_d0;
output  [2:0] ciphertext_address1;
output   ciphertext_ce1;
output   ciphertext_we1;
output  [7:0] ciphertext_d1;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
input  [31:0] P_3_read;
input  [31:0] P_4_read;
input  [31:0] P_5_read;
input  [31:0] P_6_read;
input  [31:0] P_7_read;
input  [31:0] P_8_read;
input  [31:0] P_9_read;
input  [31:0] P_10_read;
input  [31:0] P_11_read;
input  [31:0] P_12_read;
input  [31:0] P_13_read;
input  [31:0] P_14_read;
input  [31:0] P_15_read;
input  [31:0] P_16_read;
input  [31:0] P_17_read;
output  [7:0] S_0_address0;
output   S_0_ce0;
input  [31:0] S_0_q0;
output  [7:0] S_1_address0;
output   S_1_ce0;
input  [31:0] S_1_q0;
output  [7:0] S_2_address0;
output   S_2_ce0;
input  [31:0] S_2_q0;
output  [7:0] S_3_address0;
output   S_3_ce0;
input  [31:0] S_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] plaintext_address0;
reg plaintext_ce0;
reg[2:0] plaintext_address1;
reg plaintext_ce1;
reg[2:0] ciphertext_address0;
reg ciphertext_ce0;
reg ciphertext_we0;
reg[7:0] ciphertext_d0;
reg[2:0] ciphertext_address1;
reg ciphertext_ce1;
reg ciphertext_we1;
reg[7:0] ciphertext_d1;
reg S_0_ce0;
reg S_1_ce0;
reg S_2_ce0;
reg S_3_ce0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_375;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_feistel_fu_362_ap_return;
reg   [31:0] reg_379;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state35;
reg   [31:0] reg_383;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state23;
reg   [31:0] reg_387;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state25;
reg   [31:0] reg_391;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_395;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state29;
reg   [31:0] reg_399;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state31;
reg   [31:0] reg_403;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state33;
reg   [7:0] plaintext_load_1_reg_1702;
reg   [7:0] plaintext_load_2_reg_1718;
wire    ap_CS_fsm_state3;
reg   [7:0] plaintext_load_3_reg_1725;
reg   [7:0] plaintext_load_5_reg_1750;
wire   [31:0] p_tmp_fu_416_p2;
reg   [31:0] p_tmp_reg_1766;
reg   [7:0] plaintext_load_6_reg_1772;
reg   [7:0] plaintext_load_7_reg_1779;
wire    ap_CS_fsm_state6;
wire   [31:0] p_tmp_1_fu_438_p2;
reg   [31:0] p_tmp_1_reg_1794;
wire    ap_CS_fsm_state8;
wire   [31:0] p_tmp_2_fu_451_p2;
reg   [31:0] p_tmp_2_reg_1807;
wire    ap_CS_fsm_state10;
wire   [31:0] p_tmp_3_fu_542_p2;
reg   [31:0] p_tmp_3_reg_1818;
wire   [23:0] xor_ln77_23_fu_548_p2;
reg   [23:0] xor_ln77_23_reg_1824;
wire   [15:0] xor_ln77_25_fu_554_p2;
reg   [15:0] xor_ln77_25_reg_1829;
wire    ap_CS_fsm_state12;
wire   [31:0] p_tmp_4_fu_663_p2;
reg   [31:0] p_tmp_4_reg_1839;
wire   [15:0] xor_ln77_29_fu_669_p2;
reg   [15:0] xor_ln77_29_reg_1845;
wire   [23:0] xor_ln77_31_fu_675_p2;
reg   [23:0] xor_ln77_31_reg_1850;
wire    ap_CS_fsm_state14;
wire   [31:0] p_tmp_5_fu_687_p2;
reg   [31:0] p_tmp_5_reg_1862;
wire    ap_CS_fsm_state16;
wire   [31:0] p_tmp_6_fu_699_p2;
reg   [31:0] p_tmp_6_reg_1875;
wire   [31:0] p_tmp_7_fu_804_p2;
reg   [31:0] p_tmp_7_reg_1881;
wire    ap_CS_fsm_state18;
wire   [23:0] xor_ln77_47_fu_810_p2;
reg   [23:0] xor_ln77_47_reg_1887;
wire   [15:0] xor_ln77_49_fu_816_p2;
reg   [15:0] xor_ln77_49_reg_1892;
wire   [7:0] xor_ln242_8_fu_863_p2;
reg   [7:0] xor_ln242_8_reg_1897;
wire    ap_CS_fsm_state20;
wire   [31:0] p_tmp_8_fu_967_p2;
reg   [31:0] p_tmp_8_reg_1907;
wire   [15:0] xor_ln77_53_fu_973_p2;
reg   [15:0] xor_ln77_53_reg_1913;
wire   [23:0] xor_ln77_55_fu_979_p2;
reg   [23:0] xor_ln77_55_reg_1918;
wire   [7:0] xor_ln246_8_fu_1026_p2;
reg   [7:0] xor_ln246_8_reg_1923;
wire    ap_CS_fsm_state22;
wire   [31:0] p_tmp_9_fu_1038_p2;
reg   [31:0] p_tmp_9_reg_1935;
wire    ap_CS_fsm_state24;
wire   [31:0] p_tmp_10_fu_1050_p2;
reg   [31:0] p_tmp_10_reg_1948;
wire    ap_CS_fsm_state26;
wire   [31:0] p_tmp_11_fu_1126_p2;
reg   [31:0] p_tmp_11_reg_1959;
wire   [23:0] xor_ln77_71_fu_1132_p2;
reg   [23:0] xor_ln77_71_reg_1965;
wire   [15:0] xor_ln77_73_fu_1138_p2;
reg   [15:0] xor_ln77_73_reg_1970;
wire    ap_CS_fsm_state28;
wire   [31:0] p_tmp_12_fu_1214_p2;
reg   [31:0] p_tmp_12_reg_1980;
wire   [15:0] xor_ln77_77_fu_1220_p2;
reg   [15:0] xor_ln77_77_reg_1986;
wire   [23:0] xor_ln77_79_fu_1226_p2;
reg   [23:0] xor_ln77_79_reg_1991;
wire    ap_CS_fsm_state30;
wire   [31:0] p_tmp_13_fu_1238_p2;
reg   [31:0] p_tmp_13_reg_2003;
wire    ap_CS_fsm_state32;
wire   [31:0] p_tmp_14_fu_1250_p2;
reg   [31:0] p_tmp_14_reg_2016;
reg   [7:0] trunc_ln7_reg_2022;
wire    ap_CS_fsm_state34;
wire   [7:0] xor_ln242_fu_1483_p2;
reg   [7:0] xor_ln242_reg_2027;
reg   [7:0] trunc_ln_reg_2032;
wire    ap_CS_fsm_state36;
wire   [7:0] xor_ln246_fu_1687_p2;
reg   [7:0] xor_ln246_reg_2037;
wire    grp_feistel_fu_362_ap_start;
wire    grp_feistel_fu_362_ap_done;
wire    grp_feistel_fu_362_ap_idle;
wire    grp_feistel_fu_362_ap_ready;
reg   [31:0] grp_feistel_fu_362_x;
wire   [7:0] grp_feistel_fu_362_S_0_address0;
wire    grp_feistel_fu_362_S_0_ce0;
wire   [7:0] grp_feistel_fu_362_S_1_address0;
wire    grp_feistel_fu_362_S_1_ce0;
wire   [7:0] grp_feistel_fu_362_S_2_address0;
wire    grp_feistel_fu_362_S_2_ce0;
wire   [7:0] grp_feistel_fu_362_S_3_address0;
wire    grp_feistel_fu_362_S_3_ce0;
reg    grp_feistel_fu_362_ap_start_reg;
reg   [36:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_NS_fsm_state6;
wire    ap_NS_fsm_state8;
wire    ap_NS_fsm_state10;
wire    ap_NS_fsm_state12;
wire    ap_NS_fsm_state14;
wire    ap_NS_fsm_state16;
wire    ap_NS_fsm_state18;
wire    ap_NS_fsm_state20;
wire    ap_NS_fsm_state22;
wire    ap_NS_fsm_state24;
wire    ap_NS_fsm_state26;
wire    ap_NS_fsm_state28;
wire    ap_NS_fsm_state30;
wire    ap_NS_fsm_state32;
wire    ap_NS_fsm_state34;
wire   [31:0] left_2_fu_1355_p2;
wire    ap_CS_fsm_state37;
wire   [31:0] left_1_fu_407_p5;
wire   [31:0] xor_ln77_fu_432_p2;
wire   [31:0] right_1_fu_423_p5;
wire   [31:0] xor_ln77_4_fu_445_p2;
wire   [23:0] trunc_ln77_7_fu_467_p1;
wire   [23:0] trunc_ln77_6_fu_464_p1;
wire   [15:0] trunc_ln77_5_fu_460_p1;
wire   [15:0] trunc_ln77_4_fu_457_p1;
wire   [15:0] xor_ln77_2_fu_490_p2;
wire   [15:0] tmp_55_fu_484_p3;
wire   [15:0] trunc_ln77_17_fu_508_p1;
wire   [15:0] trunc_ln77_16_fu_504_p1;
wire   [23:0] xor_ln77_1_fu_478_p2;
wire   [23:0] tmp_54_fu_471_p4;
wire   [23:0] trunc_ln77_15_fu_500_p1;
wire   [23:0] trunc_ln77_14_fu_496_p1;
wire   [31:0] xor_ln77_10_fu_512_p2;
wire   [23:0] xor_ln77_14_fu_536_p2;
wire   [23:0] xor_ln77_13_fu_530_p2;
wire   [15:0] xor_ln77_12_fu_524_p2;
wire   [15:0] xor_ln77_11_fu_518_p2;
wire   [15:0] tmp_53_fu_573_p3;
wire   [15:0] trunc_ln77_2_fu_570_p1;
wire   [15:0] trunc_ln77_12_fu_589_p1;
wire   [15:0] trunc_ln77_11_fu_586_p1;
wire   [23:0] tmp_52_fu_563_p4;
wire   [23:0] trunc_ln77_1_fu_560_p1;
wire   [23:0] trunc_ln77_10_fu_582_p1;
wire   [23:0] trunc_ln77_9_fu_579_p1;
wire   [23:0] xor_ln77_8_fu_611_p2;
wire   [23:0] xor_ln77_7_fu_605_p2;
wire   [23:0] trunc_ln77_22_fu_629_p1;
wire   [23:0] trunc_ln77_21_fu_625_p1;
wire   [15:0] xor_ln77_6_fu_599_p2;
wire   [15:0] xor_ln77_5_fu_593_p2;
wire   [15:0] trunc_ln77_20_fu_621_p1;
wire   [15:0] trunc_ln77_19_fu_617_p1;
wire   [31:0] xor_ln77_16_fu_633_p2;
wire   [15:0] xor_ln77_20_fu_657_p2;
wire   [15:0] xor_ln77_19_fu_651_p2;
wire   [23:0] xor_ln77_18_fu_645_p2;
wire   [23:0] xor_ln77_17_fu_639_p2;
wire   [31:0] xor_ln77_22_fu_681_p2;
wire   [31:0] xor_ln77_28_fu_693_p2;
wire   [23:0] trunc_ln77_27_fu_736_p1;
wire   [23:0] trunc_ln77_26_fu_733_p1;
wire   [15:0] trunc_ln77_25_fu_729_p1;
wire   [15:0] trunc_ln77_24_fu_726_p1;
wire   [15:0] xor_ln77_26_fu_746_p2;
wire   [15:0] trunc_ln77_37_fu_772_p1;
wire   [15:0] trunc_ln77_36_fu_768_p1;
wire   [23:0] xor_ln77_24_fu_740_p2;
wire   [23:0] trunc_ln77_35_fu_764_p1;
wire   [23:0] trunc_ln77_34_fu_760_p1;
wire   [31:0] xor_ln77_34_fu_776_p2;
wire   [23:0] xor_ln77_38_fu_798_p2;
wire   [23:0] xor_ln77_37_fu_793_p2;
wire   [15:0] xor_ln77_36_fu_787_p2;
wire   [15:0] xor_ln77_35_fu_782_p2;
wire   [7:0] trunc_ln78_fu_705_p1;
wire   [7:0] trunc_ln77_3_fu_709_p1;
wire   [7:0] trunc_ln78_2_fu_712_p1;
wire   [7:0] xor_ln242_2_fu_827_p2;
wire   [7:0] xor_ln242_1_fu_822_p2;
wire   [7:0] trunc_ln77_13_fu_716_p1;
wire   [7:0] trunc_ln78_4_fu_719_p1;
wire   [7:0] trunc_ln78_6_fu_752_p1;
wire   [7:0] trunc_ln77_33_fu_756_p1;
wire   [7:0] xor_ln242_5_fu_845_p2;
wire   [7:0] trunc_ln77_23_fu_723_p1;
wire   [7:0] xor_ln242_6_fu_851_p2;
wire   [7:0] xor_ln242_4_fu_839_p2;
wire   [7:0] xor_ln242_7_fu_857_p2;
wire   [7:0] xor_ln242_3_fu_833_p2;
wire   [15:0] trunc_ln77_32_fu_903_p1;
wire   [15:0] trunc_ln77_31_fu_900_p1;
wire   [23:0] trunc_ln77_30_fu_896_p1;
wire   [23:0] trunc_ln77_29_fu_893_p1;
wire   [23:0] xor_ln77_32_fu_913_p2;
wire   [23:0] trunc_ln77_42_fu_935_p1;
wire   [23:0] trunc_ln77_41_fu_931_p1;
wire   [15:0] xor_ln77_30_fu_907_p2;
wire   [15:0] trunc_ln77_40_fu_927_p1;
wire   [15:0] trunc_ln77_39_fu_923_p1;
wire   [31:0] xor_ln77_40_fu_939_p2;
wire   [15:0] xor_ln77_44_fu_961_p2;
wire   [15:0] xor_ln77_43_fu_956_p2;
wire   [23:0] xor_ln77_42_fu_950_p2;
wire   [23:0] xor_ln77_41_fu_945_p2;
wire   [7:0] trunc_ln77_fu_869_p1;
wire   [7:0] trunc_ln78_1_fu_872_p1;
wire   [7:0] trunc_ln77_8_fu_876_p1;
wire   [7:0] xor_ln246_2_fu_990_p2;
wire   [7:0] xor_ln246_1_fu_985_p2;
wire   [7:0] trunc_ln78_3_fu_879_p1;
wire   [7:0] trunc_ln77_18_fu_883_p1;
wire   [7:0] trunc_ln77_28_fu_890_p1;
wire   [7:0] trunc_ln78_7_fu_919_p1;
wire   [7:0] xor_ln246_5_fu_1008_p2;
wire   [7:0] trunc_ln78_5_fu_886_p1;
wire   [7:0] xor_ln246_6_fu_1014_p2;
wire   [7:0] xor_ln246_4_fu_1002_p2;
wire   [7:0] xor_ln246_7_fu_1020_p2;
wire   [7:0] xor_ln246_3_fu_996_p2;
wire   [31:0] xor_ln77_46_fu_1032_p2;
wire   [31:0] xor_ln77_52_fu_1044_p2;
wire   [23:0] trunc_ln77_47_fu_1066_p1;
wire   [23:0] trunc_ln77_46_fu_1063_p1;
wire   [15:0] trunc_ln77_45_fu_1059_p1;
wire   [15:0] trunc_ln77_44_fu_1056_p1;
wire   [15:0] xor_ln77_50_fu_1076_p2;
wire   [15:0] trunc_ln77_57_fu_1094_p1;
wire   [15:0] trunc_ln77_56_fu_1090_p1;
wire   [23:0] xor_ln77_48_fu_1070_p2;
wire   [23:0] trunc_ln77_55_fu_1086_p1;
wire   [23:0] trunc_ln77_54_fu_1082_p1;
wire   [31:0] xor_ln77_58_fu_1098_p2;
wire   [23:0] xor_ln77_62_fu_1120_p2;
wire   [23:0] xor_ln77_61_fu_1115_p2;
wire   [15:0] xor_ln77_60_fu_1109_p2;
wire   [15:0] xor_ln77_59_fu_1104_p2;
wire   [15:0] trunc_ln77_52_fu_1154_p1;
wire   [15:0] trunc_ln77_51_fu_1151_p1;
wire   [23:0] trunc_ln77_50_fu_1147_p1;
wire   [23:0] trunc_ln77_49_fu_1144_p1;
wire   [23:0] xor_ln77_56_fu_1164_p2;
wire   [23:0] trunc_ln77_62_fu_1182_p1;
wire   [23:0] trunc_ln77_61_fu_1178_p1;
wire   [15:0] xor_ln77_54_fu_1158_p2;
wire   [15:0] trunc_ln77_60_fu_1174_p1;
wire   [15:0] trunc_ln77_59_fu_1170_p1;
wire   [31:0] xor_ln77_64_fu_1186_p2;
wire   [15:0] xor_ln77_68_fu_1208_p2;
wire   [15:0] xor_ln77_67_fu_1203_p2;
wire   [23:0] xor_ln77_66_fu_1197_p2;
wire   [23:0] xor_ln77_65_fu_1192_p2;
wire   [31:0] xor_ln77_70_fu_1232_p2;
wire   [31:0] xor_ln77_76_fu_1244_p2;
wire   [23:0] trunc_ln77_67_fu_1287_p1;
wire   [23:0] trunc_ln77_66_fu_1284_p1;
wire   [15:0] trunc_ln77_65_fu_1280_p1;
wire   [15:0] trunc_ln77_64_fu_1277_p1;
wire   [15:0] xor_ln77_74_fu_1297_p2;
wire   [15:0] trunc_ln77_77_fu_1323_p1;
wire   [15:0] trunc_ln77_76_fu_1319_p1;
wire   [23:0] xor_ln77_72_fu_1291_p2;
wire   [23:0] trunc_ln77_75_fu_1315_p1;
wire   [23:0] trunc_ln77_74_fu_1311_p1;
wire   [31:0] xor_ln77_82_fu_1327_p2;
wire   [23:0] xor_ln77_86_fu_1349_p2;
wire   [23:0] xor_ln77_85_fu_1344_p2;
wire   [15:0] xor_ln77_84_fu_1338_p2;
wire   [15:0] xor_ln77_83_fu_1333_p2;
wire   [15:0] xor_ln83_1_fu_1379_p2;
wire   [15:0] trunc_ln83_2_fu_1375_p1;
wire   [23:0] xor_ln83_fu_1369_p2;
wire   [23:0] trunc_ln83_1_fu_1365_p1;
wire   [31:0] left_fu_1385_p2;
wire   [23:0] xor_ln83_4_fu_1397_p2;
wire   [15:0] xor_ln83_3_fu_1391_p2;
wire   [7:0] trunc_ln78_8_fu_1256_p1;
wire   [7:0] trunc_ln77_43_fu_1260_p1;
wire   [7:0] trunc_ln78_10_fu_1263_p1;
wire   [7:0] trunc_ln77_53_fu_1267_p1;
wire   [7:0] xor_ln242_10_fu_1441_p2;
wire   [7:0] xor_ln242_9_fu_1435_p2;
wire   [7:0] trunc_ln78_12_fu_1270_p1;
wire   [7:0] trunc_ln77_63_fu_1274_p1;
wire   [7:0] trunc_ln77_73_fu_1307_p1;
wire   [7:0] trunc_ln83_fu_1361_p1;
wire   [7:0] xor_ln242_13_fu_1459_p2;
wire   [7:0] trunc_ln78_14_fu_1303_p1;
wire   [7:0] xor_ln242_14_fu_1465_p2;
wire   [7:0] xor_ln242_12_fu_1453_p2;
wire   [7:0] xor_ln242_15_fu_1471_p2;
wire   [7:0] xor_ln242_11_fu_1447_p2;
wire   [7:0] xor_ln242_16_fu_1477_p2;
wire   [15:0] trunc_ln77_72_fu_1522_p1;
wire   [15:0] trunc_ln77_71_fu_1519_p1;
wire   [23:0] trunc_ln77_70_fu_1515_p1;
wire   [23:0] trunc_ln77_69_fu_1512_p1;
wire   [23:0] xor_ln77_80_fu_1532_p2;
wire   [23:0] trunc_ln82_4_fu_1558_p1;
wire   [23:0] trunc_ln82_3_fu_1554_p1;
wire   [15:0] xor_ln77_78_fu_1526_p2;
wire   [15:0] trunc_ln82_2_fu_1550_p1;
wire   [15:0] trunc_ln82_1_fu_1546_p1;
wire   [31:0] xor_ln82_fu_1562_p2;
wire   [15:0] xor_ln82_4_fu_1584_p2;
wire   [15:0] xor_ln82_3_fu_1579_p2;
wire   [23:0] xor_ln82_2_fu_1573_p2;
wire   [23:0] xor_ln82_1_fu_1568_p2;
wire   [31:0] right_fu_1590_p2;
wire   [23:0] xor_ln82_7_fu_1601_p2;
wire   [15:0] xor_ln82_6_fu_1595_p2;
wire   [7:0] trunc_ln77_38_fu_1488_p1;
wire   [7:0] trunc_ln78_9_fu_1491_p1;
wire   [7:0] trunc_ln77_48_fu_1495_p1;
wire   [7:0] trunc_ln78_11_fu_1498_p1;
wire   [7:0] xor_ln246_10_fu_1645_p2;
wire   [7:0] xor_ln246_9_fu_1639_p2;
wire   [7:0] trunc_ln77_58_fu_1502_p1;
wire   [7:0] trunc_ln78_13_fu_1505_p1;
wire   [7:0] trunc_ln78_15_fu_1538_p1;
wire   [7:0] trunc_ln82_fu_1542_p1;
wire   [7:0] xor_ln246_13_fu_1663_p2;
wire   [7:0] trunc_ln77_68_fu_1509_p1;
wire   [7:0] xor_ln246_14_fu_1669_p2;
wire   [7:0] xor_ln246_12_fu_1657_p2;
wire   [7:0] xor_ln246_15_fu_1675_p2;
wire   [7:0] xor_ln246_11_fu_1651_p2;
wire   [7:0] xor_ln246_16_fu_1681_p2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 grp_feistel_fu_362_ap_start_reg = 1'b0;
end

feistel grp_feistel_fu_362(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_feistel_fu_362_ap_start),
    .ap_done(grp_feistel_fu_362_ap_done),
    .ap_idle(grp_feistel_fu_362_ap_idle),
    .ap_ready(grp_feistel_fu_362_ap_ready),
    .ap_ce(1'b1),
    .x(grp_feistel_fu_362_x),
    .S_0_address0(grp_feistel_fu_362_S_0_address0),
    .S_0_ce0(grp_feistel_fu_362_S_0_ce0),
    .S_0_q0(S_0_q0),
    .S_1_address0(grp_feistel_fu_362_S_1_address0),
    .S_1_ce0(grp_feistel_fu_362_S_1_ce0),
    .S_1_q0(S_1_q0),
    .S_2_address0(grp_feistel_fu_362_S_2_address0),
    .S_2_ce0(grp_feistel_fu_362_S_2_ce0),
    .S_2_q0(S_2_q0),
    .S_3_address0(grp_feistel_fu_362_S_3_address0),
    .S_3_ce0(grp_feistel_fu_362_S_3_ce0),
    .S_3_q0(S_3_q0),
    .ap_return(grp_feistel_fu_362_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_feistel_fu_362_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_NS_fsm_state34) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == ap_NS_fsm_state18) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_NS_fsm_state32) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_NS_fsm_state16) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_NS_fsm_state30) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == ap_NS_fsm_state14) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_NS_fsm_state28) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == ap_NS_fsm_state12) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_NS_fsm_state26) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_NS_fsm_state10) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_NS_fsm_state24) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == ap_NS_fsm_state8) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_NS_fsm_state22) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_NS_fsm_state20) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_NS_fsm_state6) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_feistel_fu_362_ap_start_reg <= 1'b1;
        end else if ((grp_feistel_fu_362_ap_ready == 1'b1)) begin
            grp_feistel_fu_362_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_tmp_10_reg_1948 <= p_tmp_10_fu_1050_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        p_tmp_11_reg_1959 <= p_tmp_11_fu_1126_p2;
        xor_ln77_71_reg_1965 <= xor_ln77_71_fu_1132_p2;
        xor_ln77_73_reg_1970 <= xor_ln77_73_fu_1138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        p_tmp_12_reg_1980 <= p_tmp_12_fu_1214_p2;
        xor_ln77_77_reg_1986 <= xor_ln77_77_fu_1220_p2;
        xor_ln77_79_reg_1991 <= xor_ln77_79_fu_1226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        p_tmp_13_reg_2003 <= p_tmp_13_fu_1238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        p_tmp_14_reg_2016 <= p_tmp_14_fu_1250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_tmp_1_reg_1794 <= p_tmp_1_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_tmp_2_reg_1807 <= p_tmp_2_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_tmp_3_reg_1818 <= p_tmp_3_fu_542_p2;
        xor_ln77_23_reg_1824 <= xor_ln77_23_fu_548_p2;
        xor_ln77_25_reg_1829 <= xor_ln77_25_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_tmp_4_reg_1839 <= p_tmp_4_fu_663_p2;
        xor_ln77_29_reg_1845 <= xor_ln77_29_fu_669_p2;
        xor_ln77_31_reg_1850 <= xor_ln77_31_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_tmp_5_reg_1862 <= p_tmp_5_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_tmp_6_reg_1875 <= p_tmp_6_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_tmp_7_reg_1881 <= p_tmp_7_fu_804_p2;
        xor_ln242_8_reg_1897 <= xor_ln242_8_fu_863_p2;
        xor_ln77_47_reg_1887 <= xor_ln77_47_fu_810_p2;
        xor_ln77_49_reg_1892 <= xor_ln77_49_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_tmp_8_reg_1907 <= p_tmp_8_fu_967_p2;
        xor_ln246_8_reg_1923 <= xor_ln246_8_fu_1026_p2;
        xor_ln77_53_reg_1913 <= xor_ln77_53_fu_973_p2;
        xor_ln77_55_reg_1918 <= xor_ln77_55_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_tmp_9_reg_1935 <= p_tmp_9_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_tmp_reg_1766 <= p_tmp_fu_416_p2;
        plaintext_load_5_reg_1750 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_load_1_reg_1702 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_load_2_reg_1718 <= plaintext_q0;
        plaintext_load_3_reg_1725 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        plaintext_load_6_reg_1772 <= plaintext_q0;
        plaintext_load_7_reg_1779 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_375 <= plaintext_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_379 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_383 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_387 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_391 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_395 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_399 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_403 <= grp_feistel_fu_362_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        trunc_ln7_reg_2022 <= {{xor_ln83_3_fu_1391_p2[15:8]}};
        xor_ln242_reg_2027 <= xor_ln242_fu_1483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        trunc_ln_reg_2032 <= {{xor_ln82_6_fu_1595_p2[15:8]}};
        xor_ln246_reg_2037 <= xor_ln246_fu_1687_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        S_0_ce0 = grp_feistel_fu_362_S_0_ce0;
    end else begin
        S_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        S_1_ce0 = grp_feistel_fu_362_S_1_ce0;
    end else begin
        S_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        S_2_ce0 = grp_feistel_fu_362_S_2_ce0;
    end else begin
        S_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        S_3_ce0 = grp_feistel_fu_362_S_3_ce0;
    end else begin
        S_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ciphertext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        ciphertext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        ciphertext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        ciphertext_address0 = 64'd0;
    end else begin
        ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ciphertext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        ciphertext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        ciphertext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        ciphertext_address1 = 64'd1;
    end else begin
        ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        ciphertext_ce0 = 1'b1;
    end else begin
        ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        ciphertext_ce1 = 1'b1;
    end else begin
        ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ciphertext_d0 = trunc_ln_reg_2032;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        ciphertext_d0 = {{right_fu_1590_p2[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        ciphertext_d0 = trunc_ln7_reg_2022;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        ciphertext_d0 = {{left_fu_1385_p2[31:24]}};
    end else begin
        ciphertext_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ciphertext_d1 = xor_ln246_reg_2037;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        ciphertext_d1 = {{xor_ln82_7_fu_1601_p2[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        ciphertext_d1 = xor_ln242_reg_2027;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        ciphertext_d1 = {{xor_ln83_4_fu_1397_p2[23:16]}};
    end else begin
        ciphertext_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        ciphertext_we0 = 1'b1;
    end else begin
        ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        ciphertext_we1 = 1'b1;
    end else begin
        ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_feistel_fu_362_x = left_2_fu_1355_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_feistel_fu_362_x = p_tmp_14_fu_1250_p2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_feistel_fu_362_x = p_tmp_13_fu_1238_p2;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_feistel_fu_362_x = p_tmp_12_fu_1214_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_feistel_fu_362_x = p_tmp_11_fu_1126_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_feistel_fu_362_x = p_tmp_10_fu_1050_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_feistel_fu_362_x = p_tmp_9_fu_1038_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_feistel_fu_362_x = p_tmp_8_fu_967_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_feistel_fu_362_x = p_tmp_7_fu_804_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_feistel_fu_362_x = p_tmp_6_fu_699_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_feistel_fu_362_x = p_tmp_5_fu_687_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_feistel_fu_362_x = p_tmp_4_fu_663_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_feistel_fu_362_x = p_tmp_3_fu_542_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_feistel_fu_362_x = p_tmp_2_fu_451_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_feistel_fu_362_x = p_tmp_1_fu_438_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_feistel_fu_362_x = p_tmp_fu_416_p2;
    end else begin
        grp_feistel_fu_362_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address0 = 64'd0;
    end else begin
        plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address1 = 64'd1;
    end else begin
        plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        plaintext_ce1 = 1'b1;
    end else begin
        plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_0_address0 = grp_feistel_fu_362_S_0_address0;

assign S_1_address0 = grp_feistel_fu_362_S_1_address0;

assign S_2_address0 = grp_feistel_fu_362_S_2_address0;

assign S_3_address0 = grp_feistel_fu_362_S_3_address0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state10 = ap_NS_fsm[32'd9];

assign ap_NS_fsm_state12 = ap_NS_fsm[32'd11];

assign ap_NS_fsm_state14 = ap_NS_fsm[32'd13];

assign ap_NS_fsm_state16 = ap_NS_fsm[32'd15];

assign ap_NS_fsm_state18 = ap_NS_fsm[32'd17];

assign ap_NS_fsm_state20 = ap_NS_fsm[32'd19];

assign ap_NS_fsm_state22 = ap_NS_fsm[32'd21];

assign ap_NS_fsm_state24 = ap_NS_fsm[32'd23];

assign ap_NS_fsm_state26 = ap_NS_fsm[32'd25];

assign ap_NS_fsm_state28 = ap_NS_fsm[32'd27];

assign ap_NS_fsm_state30 = ap_NS_fsm[32'd29];

assign ap_NS_fsm_state32 = ap_NS_fsm[32'd31];

assign ap_NS_fsm_state34 = ap_NS_fsm[32'd33];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

assign ap_NS_fsm_state6 = ap_NS_fsm[32'd5];

assign ap_NS_fsm_state8 = ap_NS_fsm[32'd7];

assign grp_feistel_fu_362_ap_start = grp_feistel_fu_362_ap_start_reg;

assign left_1_fu_407_p5 = {{{{reg_375}, {plaintext_load_1_reg_1702}}, {plaintext_load_2_reg_1718}}, {plaintext_load_3_reg_1725}};

assign left_2_fu_1355_p2 = (xor_ln77_82_fu_1327_p2 ^ p_tmp_13_reg_2003);

assign left_fu_1385_p2 = (left_2_fu_1355_p2 ^ P_17_read);

assign p_tmp_10_fu_1050_p2 = (xor_ln77_52_fu_1044_p2 ^ p_tmp_8_reg_1907);

assign p_tmp_11_fu_1126_p2 = (xor_ln77_58_fu_1098_p2 ^ p_tmp_9_reg_1935);

assign p_tmp_12_fu_1214_p2 = (xor_ln77_64_fu_1186_p2 ^ p_tmp_10_reg_1948);

assign p_tmp_13_fu_1238_p2 = (xor_ln77_70_fu_1232_p2 ^ p_tmp_11_reg_1959);

assign p_tmp_14_fu_1250_p2 = (xor_ln77_76_fu_1244_p2 ^ p_tmp_12_reg_1980);

assign p_tmp_1_fu_438_p2 = (xor_ln77_fu_432_p2 ^ right_1_fu_423_p5);

assign p_tmp_2_fu_451_p2 = (xor_ln77_4_fu_445_p2 ^ p_tmp_reg_1766);

assign p_tmp_3_fu_542_p2 = (xor_ln77_10_fu_512_p2 ^ p_tmp_1_reg_1794);

assign p_tmp_4_fu_663_p2 = (xor_ln77_16_fu_633_p2 ^ p_tmp_2_reg_1807);

assign p_tmp_5_fu_687_p2 = (xor_ln77_22_fu_681_p2 ^ p_tmp_3_reg_1818);

assign p_tmp_6_fu_699_p2 = (xor_ln77_28_fu_693_p2 ^ p_tmp_4_reg_1839);

assign p_tmp_7_fu_804_p2 = (xor_ln77_34_fu_776_p2 ^ p_tmp_5_reg_1862);

assign p_tmp_8_fu_967_p2 = (xor_ln77_40_fu_939_p2 ^ p_tmp_6_reg_1875);

assign p_tmp_9_fu_1038_p2 = (xor_ln77_46_fu_1032_p2 ^ p_tmp_7_reg_1881);

assign p_tmp_fu_416_p2 = (left_1_fu_407_p5 ^ P_0_read);

assign right_1_fu_423_p5 = {{{{reg_375}, {plaintext_load_5_reg_1750}}, {plaintext_load_6_reg_1772}}, {plaintext_load_7_reg_1779}};

assign right_fu_1590_p2 = (xor_ln82_fu_1562_p2 ^ p_tmp_14_reg_2016);

assign tmp_52_fu_563_p4 = {{{plaintext_load_1_reg_1702}, {plaintext_load_2_reg_1718}}, {plaintext_load_3_reg_1725}};

assign tmp_53_fu_573_p3 = {{plaintext_load_2_reg_1718}, {plaintext_load_3_reg_1725}};

assign tmp_54_fu_471_p4 = {{{plaintext_load_5_reg_1750}, {plaintext_load_6_reg_1772}}, {plaintext_load_7_reg_1779}};

assign tmp_55_fu_484_p3 = {{plaintext_load_6_reg_1772}, {plaintext_load_7_reg_1779}};

assign trunc_ln77_10_fu_582_p1 = reg_383[23:0];

assign trunc_ln77_11_fu_586_p1 = P_2_read[15:0];

assign trunc_ln77_12_fu_589_p1 = reg_383[15:0];

assign trunc_ln77_13_fu_716_p1 = P_3_read[7:0];

assign trunc_ln77_14_fu_496_p1 = P_3_read[23:0];

assign trunc_ln77_15_fu_500_p1 = reg_387[23:0];

assign trunc_ln77_16_fu_504_p1 = P_3_read[15:0];

assign trunc_ln77_17_fu_508_p1 = reg_387[15:0];

assign trunc_ln77_18_fu_883_p1 = P_4_read[7:0];

assign trunc_ln77_19_fu_617_p1 = P_4_read[15:0];

assign trunc_ln77_1_fu_560_p1 = P_0_read[23:0];

assign trunc_ln77_20_fu_621_p1 = reg_391[15:0];

assign trunc_ln77_21_fu_625_p1 = P_4_read[23:0];

assign trunc_ln77_22_fu_629_p1 = reg_391[23:0];

assign trunc_ln77_23_fu_723_p1 = P_5_read[7:0];

assign trunc_ln77_24_fu_726_p1 = P_5_read[15:0];

assign trunc_ln77_25_fu_729_p1 = reg_395[15:0];

assign trunc_ln77_26_fu_733_p1 = P_5_read[23:0];

assign trunc_ln77_27_fu_736_p1 = reg_395[23:0];

assign trunc_ln77_28_fu_890_p1 = P_6_read[7:0];

assign trunc_ln77_29_fu_893_p1 = P_6_read[23:0];

assign trunc_ln77_2_fu_570_p1 = P_0_read[15:0];

assign trunc_ln77_30_fu_896_p1 = reg_399[23:0];

assign trunc_ln77_31_fu_900_p1 = P_6_read[15:0];

assign trunc_ln77_32_fu_903_p1 = reg_399[15:0];

assign trunc_ln77_33_fu_756_p1 = P_7_read[7:0];

assign trunc_ln77_34_fu_760_p1 = P_7_read[23:0];

assign trunc_ln77_35_fu_764_p1 = reg_403[23:0];

assign trunc_ln77_36_fu_768_p1 = P_7_read[15:0];

assign trunc_ln77_37_fu_772_p1 = reg_403[15:0];

assign trunc_ln77_38_fu_1488_p1 = P_8_read[7:0];

assign trunc_ln77_39_fu_923_p1 = P_8_read[15:0];

assign trunc_ln77_3_fu_709_p1 = P_1_read[7:0];

assign trunc_ln77_40_fu_927_p1 = reg_379[15:0];

assign trunc_ln77_41_fu_931_p1 = P_8_read[23:0];

assign trunc_ln77_42_fu_935_p1 = reg_379[23:0];

assign trunc_ln77_43_fu_1260_p1 = P_9_read[7:0];

assign trunc_ln77_44_fu_1056_p1 = P_9_read[15:0];

assign trunc_ln77_45_fu_1059_p1 = reg_379[15:0];

assign trunc_ln77_46_fu_1063_p1 = P_9_read[23:0];

assign trunc_ln77_47_fu_1066_p1 = reg_379[23:0];

assign trunc_ln77_48_fu_1495_p1 = P_10_read[7:0];

assign trunc_ln77_49_fu_1144_p1 = P_10_read[23:0];

assign trunc_ln77_4_fu_457_p1 = P_1_read[15:0];

assign trunc_ln77_50_fu_1147_p1 = reg_383[23:0];

assign trunc_ln77_51_fu_1151_p1 = P_10_read[15:0];

assign trunc_ln77_52_fu_1154_p1 = reg_383[15:0];

assign trunc_ln77_53_fu_1267_p1 = P_11_read[7:0];

assign trunc_ln77_54_fu_1082_p1 = P_11_read[23:0];

assign trunc_ln77_55_fu_1086_p1 = reg_387[23:0];

assign trunc_ln77_56_fu_1090_p1 = P_11_read[15:0];

assign trunc_ln77_57_fu_1094_p1 = reg_387[15:0];

assign trunc_ln77_58_fu_1502_p1 = P_12_read[7:0];

assign trunc_ln77_59_fu_1170_p1 = P_12_read[15:0];

assign trunc_ln77_5_fu_460_p1 = reg_379[15:0];

assign trunc_ln77_60_fu_1174_p1 = reg_391[15:0];

assign trunc_ln77_61_fu_1178_p1 = P_12_read[23:0];

assign trunc_ln77_62_fu_1182_p1 = reg_391[23:0];

assign trunc_ln77_63_fu_1274_p1 = P_13_read[7:0];

assign trunc_ln77_64_fu_1277_p1 = P_13_read[15:0];

assign trunc_ln77_65_fu_1280_p1 = reg_395[15:0];

assign trunc_ln77_66_fu_1284_p1 = P_13_read[23:0];

assign trunc_ln77_67_fu_1287_p1 = reg_395[23:0];

assign trunc_ln77_68_fu_1509_p1 = P_14_read[7:0];

assign trunc_ln77_69_fu_1512_p1 = P_14_read[23:0];

assign trunc_ln77_6_fu_464_p1 = P_1_read[23:0];

assign trunc_ln77_70_fu_1515_p1 = reg_399[23:0];

assign trunc_ln77_71_fu_1519_p1 = P_14_read[15:0];

assign trunc_ln77_72_fu_1522_p1 = reg_399[15:0];

assign trunc_ln77_73_fu_1307_p1 = P_15_read[7:0];

assign trunc_ln77_74_fu_1311_p1 = P_15_read[23:0];

assign trunc_ln77_75_fu_1315_p1 = reg_403[23:0];

assign trunc_ln77_76_fu_1319_p1 = P_15_read[15:0];

assign trunc_ln77_77_fu_1323_p1 = reg_403[15:0];

assign trunc_ln77_7_fu_467_p1 = reg_379[23:0];

assign trunc_ln77_8_fu_876_p1 = P_2_read[7:0];

assign trunc_ln77_9_fu_579_p1 = P_2_read[23:0];

assign trunc_ln77_fu_869_p1 = P_0_read[7:0];

assign trunc_ln78_10_fu_1263_p1 = reg_387[7:0];

assign trunc_ln78_11_fu_1498_p1 = reg_391[7:0];

assign trunc_ln78_12_fu_1270_p1 = reg_395[7:0];

assign trunc_ln78_13_fu_1505_p1 = reg_399[7:0];

assign trunc_ln78_14_fu_1303_p1 = reg_403[7:0];

assign trunc_ln78_15_fu_1538_p1 = reg_379[7:0];

assign trunc_ln78_1_fu_872_p1 = reg_383[7:0];

assign trunc_ln78_2_fu_712_p1 = reg_387[7:0];

assign trunc_ln78_3_fu_879_p1 = reg_391[7:0];

assign trunc_ln78_4_fu_719_p1 = reg_395[7:0];

assign trunc_ln78_5_fu_886_p1 = reg_399[7:0];

assign trunc_ln78_6_fu_752_p1 = reg_403[7:0];

assign trunc_ln78_7_fu_919_p1 = reg_379[7:0];

assign trunc_ln78_8_fu_1256_p1 = reg_379[7:0];

assign trunc_ln78_9_fu_1491_p1 = reg_383[7:0];

assign trunc_ln78_fu_705_p1 = reg_379[7:0];

assign trunc_ln82_1_fu_1546_p1 = P_16_read[15:0];

assign trunc_ln82_2_fu_1550_p1 = reg_379[15:0];

assign trunc_ln82_3_fu_1554_p1 = P_16_read[23:0];

assign trunc_ln82_4_fu_1558_p1 = reg_379[23:0];

assign trunc_ln82_fu_1542_p1 = P_16_read[7:0];

assign trunc_ln83_1_fu_1365_p1 = P_17_read[23:0];

assign trunc_ln83_2_fu_1375_p1 = P_17_read[15:0];

assign trunc_ln83_fu_1361_p1 = P_17_read[7:0];

assign xor_ln242_10_fu_1441_p2 = (trunc_ln78_10_fu_1263_p1 ^ trunc_ln77_53_fu_1267_p1);

assign xor_ln242_11_fu_1447_p2 = (xor_ln242_9_fu_1435_p2 ^ xor_ln242_10_fu_1441_p2);

assign xor_ln242_12_fu_1453_p2 = (trunc_ln78_12_fu_1270_p1 ^ trunc_ln77_63_fu_1274_p1);

assign xor_ln242_13_fu_1459_p2 = (trunc_ln83_fu_1361_p1 ^ trunc_ln77_73_fu_1307_p1);

assign xor_ln242_14_fu_1465_p2 = (xor_ln242_13_fu_1459_p2 ^ trunc_ln78_14_fu_1303_p1);

assign xor_ln242_15_fu_1471_p2 = (xor_ln242_14_fu_1465_p2 ^ xor_ln242_12_fu_1453_p2);

assign xor_ln242_16_fu_1477_p2 = (xor_ln242_15_fu_1471_p2 ^ xor_ln242_11_fu_1447_p2);

assign xor_ln242_1_fu_822_p2 = (trunc_ln78_fu_705_p1 ^ plaintext_load_7_reg_1779);

assign xor_ln242_2_fu_827_p2 = (trunc_ln78_2_fu_712_p1 ^ trunc_ln77_3_fu_709_p1);

assign xor_ln242_3_fu_833_p2 = (xor_ln242_2_fu_827_p2 ^ xor_ln242_1_fu_822_p2);

assign xor_ln242_4_fu_839_p2 = (trunc_ln78_4_fu_719_p1 ^ trunc_ln77_13_fu_716_p1);

assign xor_ln242_5_fu_845_p2 = (trunc_ln78_6_fu_752_p1 ^ trunc_ln77_33_fu_756_p1);

assign xor_ln242_6_fu_851_p2 = (xor_ln242_5_fu_845_p2 ^ trunc_ln77_23_fu_723_p1);

assign xor_ln242_7_fu_857_p2 = (xor_ln242_6_fu_851_p2 ^ xor_ln242_4_fu_839_p2);

assign xor_ln242_8_fu_863_p2 = (xor_ln242_7_fu_857_p2 ^ xor_ln242_3_fu_833_p2);

assign xor_ln242_9_fu_1435_p2 = (trunc_ln78_8_fu_1256_p1 ^ trunc_ln77_43_fu_1260_p1);

assign xor_ln242_fu_1483_p2 = (xor_ln242_8_reg_1897 ^ xor_ln242_16_fu_1477_p2);

assign xor_ln246_10_fu_1645_p2 = (trunc_ln78_11_fu_1498_p1 ^ trunc_ln77_48_fu_1495_p1);

assign xor_ln246_11_fu_1651_p2 = (xor_ln246_9_fu_1639_p2 ^ xor_ln246_10_fu_1645_p2);

assign xor_ln246_12_fu_1657_p2 = (trunc_ln78_13_fu_1505_p1 ^ trunc_ln77_58_fu_1502_p1);

assign xor_ln246_13_fu_1663_p2 = (trunc_ln82_fu_1542_p1 ^ trunc_ln78_15_fu_1538_p1);

assign xor_ln246_14_fu_1669_p2 = (xor_ln246_13_fu_1663_p2 ^ trunc_ln77_68_fu_1509_p1);

assign xor_ln246_15_fu_1675_p2 = (xor_ln246_14_fu_1669_p2 ^ xor_ln246_12_fu_1657_p2);

assign xor_ln246_16_fu_1681_p2 = (xor_ln246_15_fu_1675_p2 ^ xor_ln246_11_fu_1651_p2);

assign xor_ln246_1_fu_985_p2 = (trunc_ln77_fu_869_p1 ^ plaintext_load_3_reg_1725);

assign xor_ln246_2_fu_990_p2 = (trunc_ln78_1_fu_872_p1 ^ trunc_ln77_8_fu_876_p1);

assign xor_ln246_3_fu_996_p2 = (xor_ln246_2_fu_990_p2 ^ xor_ln246_1_fu_985_p2);

assign xor_ln246_4_fu_1002_p2 = (trunc_ln78_3_fu_879_p1 ^ trunc_ln77_18_fu_883_p1);

assign xor_ln246_5_fu_1008_p2 = (trunc_ln78_7_fu_919_p1 ^ trunc_ln77_28_fu_890_p1);

assign xor_ln246_6_fu_1014_p2 = (xor_ln246_5_fu_1008_p2 ^ trunc_ln78_5_fu_886_p1);

assign xor_ln246_7_fu_1020_p2 = (xor_ln246_6_fu_1014_p2 ^ xor_ln246_4_fu_1002_p2);

assign xor_ln246_8_fu_1026_p2 = (xor_ln246_7_fu_1020_p2 ^ xor_ln246_3_fu_996_p2);

assign xor_ln246_9_fu_1639_p2 = (trunc_ln78_9_fu_1491_p1 ^ trunc_ln77_38_fu_1488_p1);

assign xor_ln246_fu_1687_p2 = (xor_ln246_8_reg_1923 ^ xor_ln246_16_fu_1681_p2);

assign xor_ln77_10_fu_512_p2 = (reg_387 ^ P_3_read);

assign xor_ln77_11_fu_518_p2 = (xor_ln77_2_fu_490_p2 ^ tmp_55_fu_484_p3);

assign xor_ln77_12_fu_524_p2 = (trunc_ln77_17_fu_508_p1 ^ trunc_ln77_16_fu_504_p1);

assign xor_ln77_13_fu_530_p2 = (xor_ln77_1_fu_478_p2 ^ tmp_54_fu_471_p4);

assign xor_ln77_14_fu_536_p2 = (trunc_ln77_15_fu_500_p1 ^ trunc_ln77_14_fu_496_p1);

assign xor_ln77_16_fu_633_p2 = (reg_391 ^ P_4_read);

assign xor_ln77_17_fu_639_p2 = (xor_ln77_8_fu_611_p2 ^ xor_ln77_7_fu_605_p2);

assign xor_ln77_18_fu_645_p2 = (trunc_ln77_22_fu_629_p1 ^ trunc_ln77_21_fu_625_p1);

assign xor_ln77_19_fu_651_p2 = (xor_ln77_6_fu_599_p2 ^ xor_ln77_5_fu_593_p2);

assign xor_ln77_1_fu_478_p2 = (trunc_ln77_7_fu_467_p1 ^ trunc_ln77_6_fu_464_p1);

assign xor_ln77_20_fu_657_p2 = (trunc_ln77_20_fu_621_p1 ^ trunc_ln77_19_fu_617_p1);

assign xor_ln77_22_fu_681_p2 = (reg_395 ^ P_5_read);

assign xor_ln77_23_fu_548_p2 = (xor_ln77_14_fu_536_p2 ^ xor_ln77_13_fu_530_p2);

assign xor_ln77_24_fu_740_p2 = (trunc_ln77_27_fu_736_p1 ^ trunc_ln77_26_fu_733_p1);

assign xor_ln77_25_fu_554_p2 = (xor_ln77_12_fu_524_p2 ^ xor_ln77_11_fu_518_p2);

assign xor_ln77_26_fu_746_p2 = (trunc_ln77_25_fu_729_p1 ^ trunc_ln77_24_fu_726_p1);

assign xor_ln77_28_fu_693_p2 = (reg_399 ^ P_6_read);

assign xor_ln77_29_fu_669_p2 = (xor_ln77_20_fu_657_p2 ^ xor_ln77_19_fu_651_p2);

assign xor_ln77_2_fu_490_p2 = (trunc_ln77_5_fu_460_p1 ^ trunc_ln77_4_fu_457_p1);

assign xor_ln77_30_fu_907_p2 = (trunc_ln77_32_fu_903_p1 ^ trunc_ln77_31_fu_900_p1);

assign xor_ln77_31_fu_675_p2 = (xor_ln77_18_fu_645_p2 ^ xor_ln77_17_fu_639_p2);

assign xor_ln77_32_fu_913_p2 = (trunc_ln77_30_fu_896_p1 ^ trunc_ln77_29_fu_893_p1);

assign xor_ln77_34_fu_776_p2 = (reg_403 ^ P_7_read);

assign xor_ln77_35_fu_782_p2 = (xor_ln77_26_fu_746_p2 ^ xor_ln77_25_reg_1829);

assign xor_ln77_36_fu_787_p2 = (trunc_ln77_37_fu_772_p1 ^ trunc_ln77_36_fu_768_p1);

assign xor_ln77_37_fu_793_p2 = (xor_ln77_24_fu_740_p2 ^ xor_ln77_23_reg_1824);

assign xor_ln77_38_fu_798_p2 = (trunc_ln77_35_fu_764_p1 ^ trunc_ln77_34_fu_760_p1);

assign xor_ln77_40_fu_939_p2 = (reg_379 ^ P_8_read);

assign xor_ln77_41_fu_945_p2 = (xor_ln77_32_fu_913_p2 ^ xor_ln77_31_reg_1850);

assign xor_ln77_42_fu_950_p2 = (trunc_ln77_42_fu_935_p1 ^ trunc_ln77_41_fu_931_p1);

assign xor_ln77_43_fu_956_p2 = (xor_ln77_30_fu_907_p2 ^ xor_ln77_29_reg_1845);

assign xor_ln77_44_fu_961_p2 = (trunc_ln77_40_fu_927_p1 ^ trunc_ln77_39_fu_923_p1);

assign xor_ln77_46_fu_1032_p2 = (reg_379 ^ P_9_read);

assign xor_ln77_47_fu_810_p2 = (xor_ln77_38_fu_798_p2 ^ xor_ln77_37_fu_793_p2);

assign xor_ln77_48_fu_1070_p2 = (trunc_ln77_47_fu_1066_p1 ^ trunc_ln77_46_fu_1063_p1);

assign xor_ln77_49_fu_816_p2 = (xor_ln77_36_fu_787_p2 ^ xor_ln77_35_fu_782_p2);

assign xor_ln77_4_fu_445_p2 = (reg_383 ^ P_2_read);

assign xor_ln77_50_fu_1076_p2 = (trunc_ln77_45_fu_1059_p1 ^ trunc_ln77_44_fu_1056_p1);

assign xor_ln77_52_fu_1044_p2 = (reg_383 ^ P_10_read);

assign xor_ln77_53_fu_973_p2 = (xor_ln77_44_fu_961_p2 ^ xor_ln77_43_fu_956_p2);

assign xor_ln77_54_fu_1158_p2 = (trunc_ln77_52_fu_1154_p1 ^ trunc_ln77_51_fu_1151_p1);

assign xor_ln77_55_fu_979_p2 = (xor_ln77_42_fu_950_p2 ^ xor_ln77_41_fu_945_p2);

assign xor_ln77_56_fu_1164_p2 = (trunc_ln77_50_fu_1147_p1 ^ trunc_ln77_49_fu_1144_p1);

assign xor_ln77_58_fu_1098_p2 = (reg_387 ^ P_11_read);

assign xor_ln77_59_fu_1104_p2 = (xor_ln77_50_fu_1076_p2 ^ xor_ln77_49_reg_1892);

assign xor_ln77_5_fu_593_p2 = (trunc_ln77_2_fu_570_p1 ^ tmp_53_fu_573_p3);

assign xor_ln77_60_fu_1109_p2 = (trunc_ln77_57_fu_1094_p1 ^ trunc_ln77_56_fu_1090_p1);

assign xor_ln77_61_fu_1115_p2 = (xor_ln77_48_fu_1070_p2 ^ xor_ln77_47_reg_1887);

assign xor_ln77_62_fu_1120_p2 = (trunc_ln77_55_fu_1086_p1 ^ trunc_ln77_54_fu_1082_p1);

assign xor_ln77_64_fu_1186_p2 = (reg_391 ^ P_12_read);

assign xor_ln77_65_fu_1192_p2 = (xor_ln77_56_fu_1164_p2 ^ xor_ln77_55_reg_1918);

assign xor_ln77_66_fu_1197_p2 = (trunc_ln77_62_fu_1182_p1 ^ trunc_ln77_61_fu_1178_p1);

assign xor_ln77_67_fu_1203_p2 = (xor_ln77_54_fu_1158_p2 ^ xor_ln77_53_reg_1913);

assign xor_ln77_68_fu_1208_p2 = (trunc_ln77_60_fu_1174_p1 ^ trunc_ln77_59_fu_1170_p1);

assign xor_ln77_6_fu_599_p2 = (trunc_ln77_12_fu_589_p1 ^ trunc_ln77_11_fu_586_p1);

assign xor_ln77_70_fu_1232_p2 = (reg_395 ^ P_13_read);

assign xor_ln77_71_fu_1132_p2 = (xor_ln77_62_fu_1120_p2 ^ xor_ln77_61_fu_1115_p2);

assign xor_ln77_72_fu_1291_p2 = (trunc_ln77_67_fu_1287_p1 ^ trunc_ln77_66_fu_1284_p1);

assign xor_ln77_73_fu_1138_p2 = (xor_ln77_60_fu_1109_p2 ^ xor_ln77_59_fu_1104_p2);

assign xor_ln77_74_fu_1297_p2 = (trunc_ln77_65_fu_1280_p1 ^ trunc_ln77_64_fu_1277_p1);

assign xor_ln77_76_fu_1244_p2 = (reg_399 ^ P_14_read);

assign xor_ln77_77_fu_1220_p2 = (xor_ln77_68_fu_1208_p2 ^ xor_ln77_67_fu_1203_p2);

assign xor_ln77_78_fu_1526_p2 = (trunc_ln77_72_fu_1522_p1 ^ trunc_ln77_71_fu_1519_p1);

assign xor_ln77_79_fu_1226_p2 = (xor_ln77_66_fu_1197_p2 ^ xor_ln77_65_fu_1192_p2);

assign xor_ln77_7_fu_605_p2 = (trunc_ln77_1_fu_560_p1 ^ tmp_52_fu_563_p4);

assign xor_ln77_80_fu_1532_p2 = (trunc_ln77_70_fu_1515_p1 ^ trunc_ln77_69_fu_1512_p1);

assign xor_ln77_82_fu_1327_p2 = (reg_403 ^ P_15_read);

assign xor_ln77_83_fu_1333_p2 = (xor_ln77_74_fu_1297_p2 ^ xor_ln77_73_reg_1970);

assign xor_ln77_84_fu_1338_p2 = (trunc_ln77_77_fu_1323_p1 ^ trunc_ln77_76_fu_1319_p1);

assign xor_ln77_85_fu_1344_p2 = (xor_ln77_72_fu_1291_p2 ^ xor_ln77_71_reg_1965);

assign xor_ln77_86_fu_1349_p2 = (trunc_ln77_75_fu_1315_p1 ^ trunc_ln77_74_fu_1311_p1);

assign xor_ln77_8_fu_611_p2 = (trunc_ln77_9_fu_579_p1 ^ trunc_ln77_10_fu_582_p1);

assign xor_ln77_fu_432_p2 = (reg_379 ^ P_1_read);

assign xor_ln82_1_fu_1568_p2 = (xor_ln77_80_fu_1532_p2 ^ xor_ln77_79_reg_1991);

assign xor_ln82_2_fu_1573_p2 = (trunc_ln82_4_fu_1558_p1 ^ trunc_ln82_3_fu_1554_p1);

assign xor_ln82_3_fu_1579_p2 = (xor_ln77_78_fu_1526_p2 ^ xor_ln77_77_reg_1986);

assign xor_ln82_4_fu_1584_p2 = (trunc_ln82_2_fu_1550_p1 ^ trunc_ln82_1_fu_1546_p1);

assign xor_ln82_6_fu_1595_p2 = (xor_ln82_4_fu_1584_p2 ^ xor_ln82_3_fu_1579_p2);

assign xor_ln82_7_fu_1601_p2 = (xor_ln82_2_fu_1573_p2 ^ xor_ln82_1_fu_1568_p2);

assign xor_ln82_fu_1562_p2 = (reg_379 ^ P_16_read);

assign xor_ln83_1_fu_1379_p2 = (xor_ln77_84_fu_1338_p2 ^ xor_ln77_83_fu_1333_p2);

assign xor_ln83_3_fu_1391_p2 = (xor_ln83_1_fu_1379_p2 ^ trunc_ln83_2_fu_1375_p1);

assign xor_ln83_4_fu_1397_p2 = (xor_ln83_fu_1369_p2 ^ trunc_ln83_1_fu_1365_p1);

assign xor_ln83_fu_1369_p2 = (xor_ln77_86_fu_1349_p2 ^ xor_ln77_85_fu_1344_p2);

endmodule //Blowfish_Encrypt
