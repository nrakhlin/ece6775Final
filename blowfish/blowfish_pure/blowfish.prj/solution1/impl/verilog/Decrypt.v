// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Decrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0,
        Blowfish_pary_s_q0,
        Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_q0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        dst_q1,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Blowfish_pary_s_address0;
output   Blowfish_pary_s_ce0;
input  [31:0] Blowfish_pary_s_q0;
output  [9:0] Blowfish_sbox_s_address0;
output   Blowfish_sbox_s_ce0;
input  [31:0] Blowfish_sbox_s_q0;
output  [9:0] Blowfish_sbox_s_address1;
output   Blowfish_sbox_s_ce1;
input  [31:0] Blowfish_sbox_s_q1;
output  [2:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
input  [7:0] dst_q0;
output  [2:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
input  [7:0] dst_q1;
output  [2:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Blowfish_pary_s_address0;
reg Blowfish_pary_s_ce0;
reg[9:0] Blowfish_sbox_s_address0;
reg Blowfish_sbox_s_ce0;
reg[9:0] Blowfish_sbox_s_address1;
reg Blowfish_sbox_s_ce1;
reg[2:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[2:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg src_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_311_p2;
reg   [3:0] i_reg_630;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln150_fu_317_p1;
reg   [63:0] zext_ln150_reg_635;
wire   [0:0] icmp_ln149_fu_305_p2;
reg   [7:0] dst_load_reg_651;
wire    ap_CS_fsm_state4;
reg   [7:0] dst_load_8_reg_656;
wire   [2:0] dst_addr_10_reg_661;
wire   [2:0] dst_addr_11_reg_666;
reg   [7:0] dst_load_9_reg_671;
wire    ap_CS_fsm_state5;
reg   [7:0] dst_load_10_reg_676;
wire   [2:0] dst_addr_12_reg_681;
wire   [2:0] dst_addr_13_reg_686;
reg   [7:0] dst_load_11_reg_691;
wire    ap_CS_fsm_state6;
reg   [7:0] dst_load_12_reg_696;
wire   [2:0] dst_addr_14_reg_701;
wire   [2:0] dst_addr_15_reg_706;
wire   [31:0] left_fu_322_p5;
wire    ap_CS_fsm_state7;
wire   [31:0] right_fu_330_p5;
wire   [4:0] i_7_fu_346_p2;
reg   [4:0] i_7_reg_724;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln251_fu_340_p2;
wire   [7:0] trunc_ln252_fu_363_p1;
reg   [7:0] trunc_ln252_reg_739;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] temp_3_reg_744;
reg   [7:0] c_reg_749;
wire   [31:0] add_ln281_fu_438_p2;
reg   [31:0] add_ln281_reg_764;
wire    ap_CS_fsm_state10;
wire   [31:0] xor_ln253_fu_472_p2;
wire    ap_CS_fsm_state11;
wire   [7:0] trunc_ln267_fu_478_p1;
reg   [7:0] trunc_ln267_reg_784;
wire    ap_CS_fsm_state12;
reg   [7:0] trunc_ln2_reg_789;
wire    ap_CS_fsm_state13;
reg   [7:0] trunc_ln5_reg_799;
wire    ap_CS_fsm_state14;
wire   [7:0] xor_ln176_fu_615_p2;
reg   [7:0] xor_ln176_reg_804;
reg   [3:0] i_0_reg_246;
wire    ap_CS_fsm_state3;
reg   [31:0] temp_reg_257;
reg   [31:0] right_new_0_i_reg_267;
reg   [4:0] i_0_i_reg_277;
wire   [63:0] zext_ln252_fu_358_p1;
wire   [63:0] zext_ln281_fu_415_p1;
wire   [63:0] tmp_fu_420_p3;
wire   [63:0] tmp_s_fu_444_p3;
wire   [63:0] tmp_1_fu_452_p3;
wire   [7:0] xor_ln172_fu_552_p2;
wire   [7:0] grp_fu_294_p4;
wire    ap_CS_fsm_state15;
wire   [4:0] sub_ln252_fu_352_p2;
wire   [15:0] trunc_ln252_5_fu_379_p1;
wire   [15:0] trunc_ln252_4_fu_375_p1;
wire   [23:0] trunc_ln252_3_fu_371_p1;
wire   [23:0] trunc_ln252_2_fu_367_p1;
wire   [23:0] xor_ln272_3_fu_389_p2;
wire   [15:0] xor_ln272_fu_383_p2;
wire   [7:0] b_fu_395_p4;
wire   [7:0] trunc_ln252_1_fu_429_p1;
wire   [7:0] d_fu_433_p2;
wire   [31:0] xor_ln281_fu_461_p2;
wire   [31:0] add_ln281_3_fu_466_p2;
wire   [15:0] trunc_ln267_5_fu_494_p1;
wire   [15:0] trunc_ln267_4_fu_490_p1;
wire   [23:0] trunc_ln267_3_fu_486_p1;
wire   [23:0] trunc_ln267_2_fu_482_p1;
wire   [31:0] left_new_fu_498_p2;
wire   [23:0] xor_ln166_1_fu_510_p2;
wire   [15:0] xor_ln166_fu_504_p2;
wire   [7:0] trunc_ln267_1_fu_548_p1;
wire   [15:0] trunc_ln266_5_fu_578_p1;
wire   [15:0] trunc_ln266_4_fu_574_p1;
wire   [23:0] trunc_ln266_3_fu_570_p1;
wire   [23:0] trunc_ln266_2_fu_566_p1;
wire   [23:0] xor_ln267_1_fu_588_p2;
wire   [15:0] xor_ln267_fu_582_p2;
wire   [7:0] trunc_ln266_1_fu_562_p1;
wire   [7:0] trunc_ln266_fu_558_p1;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i_reg_277 <= i_7_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_277 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_246 <= i_reg_630;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_246 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        right_new_0_i_reg_267 <= temp_3_reg_744;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        right_new_0_i_reg_267 <= right_fu_330_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_reg_257 <= xor_ln253_fu_472_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_reg_257 <= left_fu_322_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln281_reg_764 <= add_ln281_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_reg_749 <= {{xor_ln272_fu_383_p2[15:8]}};
        temp_3_reg_744 <= grp_fu_288_p2;
        trunc_ln252_reg_739 <= trunc_ln252_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_load_10_reg_676 <= dst_q0;
        dst_load_9_reg_671 <= dst_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_load_11_reg_691 <= dst_q1;
        dst_load_12_reg_696 <= dst_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_load_8_reg_656 <= dst_q1;
        dst_load_reg_651 <= dst_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_7_reg_724 <= i_7_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_630 <= i_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln267_reg_784 <= trunc_ln267_fu_478_p1;
        trunc_ln2_reg_789 <= {{xor_ln166_fu_504_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        trunc_ln5_reg_799 <= {{xor_ln267_fu_582_p2[15:8]}};
        xor_ln176_reg_804 <= xor_ln176_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln150_reg_635[3 : 0] <= zext_ln150_fu_317_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Blowfish_pary_s_address0 = 64'd1;
    end else if (((icmp_ln251_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        Blowfish_pary_s_address0 = 64'd0;
    end else if (((icmp_ln251_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        Blowfish_pary_s_address0 = zext_ln252_fu_358_p1;
    end else begin
        Blowfish_pary_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((icmp_ln251_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln251_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        Blowfish_pary_s_ce0 = 1'b1;
    end else begin
        Blowfish_pary_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Blowfish_sbox_s_address0 = tmp_s_fu_444_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Blowfish_sbox_s_address0 = zext_ln281_fu_415_p1;
    end else begin
        Blowfish_sbox_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Blowfish_sbox_s_address1 = tmp_1_fu_452_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Blowfish_sbox_s_address1 = tmp_fu_420_p3;
    end else begin
        Blowfish_sbox_s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Blowfish_sbox_s_ce0 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Blowfish_sbox_s_ce1 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_address0 = dst_addr_15_reg_706;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_address0 = dst_addr_13_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_address0 = dst_addr_11_reg_666;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_address0 = zext_ln150_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_address0 = 64'd0;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_address1 = dst_addr_14_reg_701;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_address1 = dst_addr_12_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_address1 = dst_addr_10_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_address1 = 64'd1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_d0 = xor_ln176_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_d0 = {{xor_ln267_1_fu_588_p2[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_d0 = xor_ln172_fu_552_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_d0 = {{xor_ln166_1_fu_510_p2[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_d1 = trunc_ln5_reg_799;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_d1 = {{grp_fu_288_p2[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_d1 = trunc_ln2_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_d1 = {{left_new_fu_498_p2[31:24]}};
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln149_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln251_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln281_3_fu_466_p2 = (Blowfish_sbox_s_q1 + xor_ln281_fu_461_p2);

assign add_ln281_fu_438_p2 = (Blowfish_sbox_s_q0 + Blowfish_sbox_s_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fu_395_p4 = {{xor_ln272_3_fu_389_p2[23:16]}};

assign d_fu_433_p2 = (trunc_ln252_reg_739 ^ trunc_ln252_1_fu_429_p1);

assign dst_addr_10_reg_661 = 64'd2;

assign dst_addr_11_reg_666 = 64'd3;

assign dst_addr_12_reg_681 = 64'd4;

assign dst_addr_13_reg_686 = 64'd5;

assign dst_addr_14_reg_701 = 64'd6;

assign dst_addr_15_reg_706 = 64'd7;

assign grp_fu_288_p2 = (temp_reg_257 ^ Blowfish_pary_s_q0);

assign grp_fu_294_p4 = {{grp_fu_288_p2[31:24]}};

assign i_7_fu_346_p2 = (i_0_i_reg_277 + 5'd1);

assign i_fu_311_p2 = (i_0_reg_246 + 4'd1);

assign icmp_ln149_fu_305_p2 = ((i_0_reg_246 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_340_p2 = ((i_0_i_reg_277 == 5'd16) ? 1'b1 : 1'b0);

assign left_fu_322_p5 = {{{{dst_load_reg_651}, {dst_load_8_reg_656}}, {dst_load_9_reg_671}}, {dst_load_10_reg_676}};

assign left_new_fu_498_p2 = (right_new_0_i_reg_267 ^ Blowfish_pary_s_q0);

assign right_fu_330_p5 = {{{{dst_load_11_reg_691}, {dst_load_12_reg_696}}, {dst_q1}}, {dst_q0}};

assign src_address0 = zext_ln150_fu_317_p1;

assign sub_ln252_fu_352_p2 = ($signed(5'd17) - $signed(i_0_i_reg_277));

assign tmp_1_fu_452_p3 = {{56'd3}, {d_fu_433_p2}};

assign tmp_fu_420_p3 = {{56'd1}, {b_fu_395_p4}};

assign tmp_s_fu_444_p3 = {{56'd2}, {c_reg_749}};

assign trunc_ln252_1_fu_429_p1 = temp_reg_257[7:0];

assign trunc_ln252_2_fu_367_p1 = temp_reg_257[23:0];

assign trunc_ln252_3_fu_371_p1 = Blowfish_pary_s_q0[23:0];

assign trunc_ln252_4_fu_375_p1 = temp_reg_257[15:0];

assign trunc_ln252_5_fu_379_p1 = Blowfish_pary_s_q0[15:0];

assign trunc_ln252_fu_363_p1 = Blowfish_pary_s_q0[7:0];

assign trunc_ln266_1_fu_562_p1 = Blowfish_pary_s_q0[7:0];

assign trunc_ln266_2_fu_566_p1 = temp_reg_257[23:0];

assign trunc_ln266_3_fu_570_p1 = Blowfish_pary_s_q0[23:0];

assign trunc_ln266_4_fu_574_p1 = temp_reg_257[15:0];

assign trunc_ln266_5_fu_578_p1 = Blowfish_pary_s_q0[15:0];

assign trunc_ln266_fu_558_p1 = temp_reg_257[7:0];

assign trunc_ln267_1_fu_548_p1 = right_new_0_i_reg_267[7:0];

assign trunc_ln267_2_fu_482_p1 = right_new_0_i_reg_267[23:0];

assign trunc_ln267_3_fu_486_p1 = Blowfish_pary_s_q0[23:0];

assign trunc_ln267_4_fu_490_p1 = right_new_0_i_reg_267[15:0];

assign trunc_ln267_5_fu_494_p1 = Blowfish_pary_s_q0[15:0];

assign trunc_ln267_fu_478_p1 = Blowfish_pary_s_q0[7:0];

assign xor_ln166_1_fu_510_p2 = (trunc_ln267_3_fu_486_p1 ^ trunc_ln267_2_fu_482_p1);

assign xor_ln166_fu_504_p2 = (trunc_ln267_5_fu_494_p1 ^ trunc_ln267_4_fu_490_p1);

assign xor_ln172_fu_552_p2 = (trunc_ln267_reg_784 ^ trunc_ln267_1_fu_548_p1);

assign xor_ln176_fu_615_p2 = (trunc_ln266_fu_558_p1 ^ trunc_ln266_1_fu_562_p1);

assign xor_ln253_fu_472_p2 = (right_new_0_i_reg_267 ^ add_ln281_3_fu_466_p2);

assign xor_ln267_1_fu_588_p2 = (trunc_ln266_3_fu_570_p1 ^ trunc_ln266_2_fu_566_p1);

assign xor_ln267_fu_582_p2 = (trunc_ln266_5_fu_578_p1 ^ trunc_ln266_4_fu_574_p1);

assign xor_ln272_3_fu_389_p2 = (trunc_ln252_3_fu_371_p1 ^ trunc_ln252_2_fu_367_p1);

assign xor_ln272_fu_383_p2 = (trunc_ln252_5_fu_379_p1 ^ trunc_ln252_4_fu_375_p1);

assign xor_ln281_fu_461_p2 = (add_ln281_reg_764 ^ Blowfish_sbox_s_q0);

assign zext_ln150_fu_317_p1 = i_0_reg_246;

assign zext_ln252_fu_358_p1 = sub_ln252_fu_352_p2;

assign zext_ln281_fu_415_p1 = grp_fu_294_p4;

always @ (posedge ap_clk) begin
    zext_ln150_reg_635[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Decrypt
