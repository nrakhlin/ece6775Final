// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Blowfish_Encrypt_Decrypt_SetKey,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.992000,HLS_SYN_LAT=19363,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=3140,HLS_SYN_LUT=4172,HLS_VERSION=2019_2}" *)

module Blowfish_Encrypt_Decrypt_SetKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0,
        Blowfish_pary_s_we0,
        Blowfish_pary_s_d0,
        Blowfish_pary_s_q0,
        Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1,
        Blowfish_pary_s_we1,
        Blowfish_pary_s_d1,
        Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_we0,
        Blowfish_sbox_s_d0,
        Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_we1,
        Blowfish_sbox_s_d1,
        Blowfish_sbox_s_q1,
        set_key,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        key_byte_length,
        decrypted_address0,
        decrypted_ce0,
        decrypted_we0,
        decrypted_d0,
        decrypted_q0,
        decrypted_address1,
        decrypted_ce1,
        decrypted_we1,
        decrypted_d1,
        decrypted_q1,
        encrypted_address0,
        encrypted_ce0,
        encrypted_we0,
        encrypted_d0,
        encrypted_q0,
        encrypted_address1,
        encrypted_ce1,
        encrypted_we1,
        encrypted_d1,
        encrypted_q1,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Blowfish_pary_s_address0;
output   Blowfish_pary_s_ce0;
output   Blowfish_pary_s_we0;
output  [31:0] Blowfish_pary_s_d0;
input  [31:0] Blowfish_pary_s_q0;
output  [4:0] Blowfish_pary_s_address1;
output   Blowfish_pary_s_ce1;
output   Blowfish_pary_s_we1;
output  [31:0] Blowfish_pary_s_d1;
input  [31:0] Blowfish_pary_s_q1;
output  [9:0] Blowfish_sbox_s_address0;
output   Blowfish_sbox_s_ce0;
output   Blowfish_sbox_s_we0;
output  [31:0] Blowfish_sbox_s_d0;
input  [31:0] Blowfish_sbox_s_q0;
output  [9:0] Blowfish_sbox_s_address1;
output   Blowfish_sbox_s_ce1;
output   Blowfish_sbox_s_we1;
output  [31:0] Blowfish_sbox_s_d1;
input  [31:0] Blowfish_sbox_s_q1;
input   set_key;
output  [5:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [5:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
input  [31:0] key_byte_length;
output  [2:0] decrypted_address0;
output   decrypted_ce0;
output   decrypted_we0;
output  [7:0] decrypted_d0;
input  [7:0] decrypted_q0;
output  [2:0] decrypted_address1;
output   decrypted_ce1;
output   decrypted_we1;
output  [7:0] decrypted_d1;
input  [7:0] decrypted_q1;
output  [2:0] encrypted_address0;
output   encrypted_ce0;
output   encrypted_we0;
output  [7:0] encrypted_d0;
input  [7:0] encrypted_q0;
output  [2:0] encrypted_address1;
output   encrypted_ce1;
output   encrypted_we1;
output  [7:0] encrypted_d1;
input  [7:0] encrypted_q1;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [7:0] plaintext_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Blowfish_pary_s_address0;
reg Blowfish_pary_s_ce0;
reg Blowfish_pary_s_we0;
reg Blowfish_pary_s_ce1;
reg Blowfish_pary_s_we1;
reg[9:0] Blowfish_sbox_s_address0;
reg Blowfish_sbox_s_ce0;
reg Blowfish_sbox_s_we0;
reg[9:0] Blowfish_sbox_s_address1;
reg Blowfish_sbox_s_ce1;
reg Blowfish_sbox_s_we1;
reg[2:0] encrypted_address0;
reg encrypted_ce0;
reg encrypted_we0;
reg encrypted_ce1;
reg encrypted_we1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_SetKey_fu_48_ap_start;
wire    grp_SetKey_fu_48_ap_done;
wire    grp_SetKey_fu_48_ap_idle;
wire    grp_SetKey_fu_48_ap_ready;
wire   [4:0] grp_SetKey_fu_48_Blowfish_pary_s_address0;
wire    grp_SetKey_fu_48_Blowfish_pary_s_ce0;
wire    grp_SetKey_fu_48_Blowfish_pary_s_we0;
wire   [31:0] grp_SetKey_fu_48_Blowfish_pary_s_d0;
wire   [4:0] grp_SetKey_fu_48_Blowfish_pary_s_address1;
wire    grp_SetKey_fu_48_Blowfish_pary_s_ce1;
wire    grp_SetKey_fu_48_Blowfish_pary_s_we1;
wire   [31:0] grp_SetKey_fu_48_Blowfish_pary_s_d1;
wire   [9:0] grp_SetKey_fu_48_Blowfish_sbox_s_address0;
wire    grp_SetKey_fu_48_Blowfish_sbox_s_ce0;
wire    grp_SetKey_fu_48_Blowfish_sbox_s_we0;
wire   [31:0] grp_SetKey_fu_48_Blowfish_sbox_s_d0;
wire   [9:0] grp_SetKey_fu_48_Blowfish_sbox_s_address1;
wire    grp_SetKey_fu_48_Blowfish_sbox_s_ce1;
wire    grp_SetKey_fu_48_Blowfish_sbox_s_we1;
wire   [31:0] grp_SetKey_fu_48_Blowfish_sbox_s_d1;
wire   [5:0] grp_SetKey_fu_48_key_address0;
wire    grp_SetKey_fu_48_key_ce0;
wire   [5:0] grp_SetKey_fu_48_key_address1;
wire    grp_SetKey_fu_48_key_ce1;
wire    grp_Decrypt_fu_64_ap_start;
wire    grp_Decrypt_fu_64_ap_done;
wire    grp_Decrypt_fu_64_ap_idle;
wire    grp_Decrypt_fu_64_ap_ready;
wire   [4:0] grp_Decrypt_fu_64_Blowfish_pary_s_address0;
wire    grp_Decrypt_fu_64_Blowfish_pary_s_ce0;
wire   [9:0] grp_Decrypt_fu_64_Blowfish_sbox_s_address0;
wire    grp_Decrypt_fu_64_Blowfish_sbox_s_ce0;
wire   [9:0] grp_Decrypt_fu_64_Blowfish_sbox_s_address1;
wire    grp_Decrypt_fu_64_Blowfish_sbox_s_ce1;
wire   [2:0] grp_Decrypt_fu_64_dst_address0;
wire    grp_Decrypt_fu_64_dst_ce0;
wire    grp_Decrypt_fu_64_dst_we0;
wire   [7:0] grp_Decrypt_fu_64_dst_d0;
wire   [2:0] grp_Decrypt_fu_64_dst_address1;
wire    grp_Decrypt_fu_64_dst_ce1;
wire    grp_Decrypt_fu_64_dst_we1;
wire   [7:0] grp_Decrypt_fu_64_dst_d1;
wire   [2:0] grp_Decrypt_fu_64_src_address0;
wire    grp_Decrypt_fu_64_src_ce0;
wire    grp_Encrypt_fu_76_ap_start;
wire    grp_Encrypt_fu_76_ap_done;
wire    grp_Encrypt_fu_76_ap_idle;
wire    grp_Encrypt_fu_76_ap_ready;
wire   [4:0] grp_Encrypt_fu_76_Blowfish_pary_s_address0;
wire    grp_Encrypt_fu_76_Blowfish_pary_s_ce0;
wire   [9:0] grp_Encrypt_fu_76_Blowfish_sbox_s_address0;
wire    grp_Encrypt_fu_76_Blowfish_sbox_s_ce0;
wire   [9:0] grp_Encrypt_fu_76_Blowfish_sbox_s_address1;
wire    grp_Encrypt_fu_76_Blowfish_sbox_s_ce1;
wire   [2:0] grp_Encrypt_fu_76_dst_address0;
wire    grp_Encrypt_fu_76_dst_ce0;
wire    grp_Encrypt_fu_76_dst_we0;
wire   [7:0] grp_Encrypt_fu_76_dst_d0;
wire   [2:0] grp_Encrypt_fu_76_dst_address1;
wire    grp_Encrypt_fu_76_dst_ce1;
wire    grp_Encrypt_fu_76_dst_we1;
wire   [7:0] grp_Encrypt_fu_76_dst_d1;
wire   [2:0] grp_Encrypt_fu_76_src_address0;
wire    grp_Encrypt_fu_76_src_ce0;
reg    grp_SetKey_fu_48_ap_start_reg;
wire   [0:0] set_key_read_read_fu_42_p2;
wire    ap_CS_fsm_state2;
reg    grp_Decrypt_fu_64_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_Encrypt_fu_76_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_SetKey_fu_48_ap_start_reg = 1'b0;
#0 grp_Decrypt_fu_64_ap_start_reg = 1'b0;
#0 grp_Encrypt_fu_76_ap_start_reg = 1'b0;
end

SetKey grp_SetKey_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SetKey_fu_48_ap_start),
    .ap_done(grp_SetKey_fu_48_ap_done),
    .ap_idle(grp_SetKey_fu_48_ap_idle),
    .ap_ready(grp_SetKey_fu_48_ap_ready),
    .Blowfish_pary_s_address0(grp_SetKey_fu_48_Blowfish_pary_s_address0),
    .Blowfish_pary_s_ce0(grp_SetKey_fu_48_Blowfish_pary_s_ce0),
    .Blowfish_pary_s_we0(grp_SetKey_fu_48_Blowfish_pary_s_we0),
    .Blowfish_pary_s_d0(grp_SetKey_fu_48_Blowfish_pary_s_d0),
    .Blowfish_pary_s_q0(Blowfish_pary_s_q0),
    .Blowfish_pary_s_address1(grp_SetKey_fu_48_Blowfish_pary_s_address1),
    .Blowfish_pary_s_ce1(grp_SetKey_fu_48_Blowfish_pary_s_ce1),
    .Blowfish_pary_s_we1(grp_SetKey_fu_48_Blowfish_pary_s_we1),
    .Blowfish_pary_s_d1(grp_SetKey_fu_48_Blowfish_pary_s_d1),
    .Blowfish_pary_s_q1(Blowfish_pary_s_q1),
    .Blowfish_sbox_s_address0(grp_SetKey_fu_48_Blowfish_sbox_s_address0),
    .Blowfish_sbox_s_ce0(grp_SetKey_fu_48_Blowfish_sbox_s_ce0),
    .Blowfish_sbox_s_we0(grp_SetKey_fu_48_Blowfish_sbox_s_we0),
    .Blowfish_sbox_s_d0(grp_SetKey_fu_48_Blowfish_sbox_s_d0),
    .Blowfish_sbox_s_q0(Blowfish_sbox_s_q0),
    .Blowfish_sbox_s_address1(grp_SetKey_fu_48_Blowfish_sbox_s_address1),
    .Blowfish_sbox_s_ce1(grp_SetKey_fu_48_Blowfish_sbox_s_ce1),
    .Blowfish_sbox_s_we1(grp_SetKey_fu_48_Blowfish_sbox_s_we1),
    .Blowfish_sbox_s_d1(grp_SetKey_fu_48_Blowfish_sbox_s_d1),
    .Blowfish_sbox_s_q1(Blowfish_sbox_s_q1),
    .key_address0(grp_SetKey_fu_48_key_address0),
    .key_ce0(grp_SetKey_fu_48_key_ce0),
    .key_q0(key_q0),
    .key_address1(grp_SetKey_fu_48_key_address1),
    .key_ce1(grp_SetKey_fu_48_key_ce1),
    .key_q1(key_q1),
    .key_byte_length(key_byte_length)
);

Decrypt grp_Decrypt_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Decrypt_fu_64_ap_start),
    .ap_done(grp_Decrypt_fu_64_ap_done),
    .ap_idle(grp_Decrypt_fu_64_ap_idle),
    .ap_ready(grp_Decrypt_fu_64_ap_ready),
    .Blowfish_pary_s_address0(grp_Decrypt_fu_64_Blowfish_pary_s_address0),
    .Blowfish_pary_s_ce0(grp_Decrypt_fu_64_Blowfish_pary_s_ce0),
    .Blowfish_pary_s_q0(Blowfish_pary_s_q0),
    .Blowfish_sbox_s_address0(grp_Decrypt_fu_64_Blowfish_sbox_s_address0),
    .Blowfish_sbox_s_ce0(grp_Decrypt_fu_64_Blowfish_sbox_s_ce0),
    .Blowfish_sbox_s_q0(Blowfish_sbox_s_q0),
    .Blowfish_sbox_s_address1(grp_Decrypt_fu_64_Blowfish_sbox_s_address1),
    .Blowfish_sbox_s_ce1(grp_Decrypt_fu_64_Blowfish_sbox_s_ce1),
    .Blowfish_sbox_s_q1(Blowfish_sbox_s_q1),
    .dst_address0(grp_Decrypt_fu_64_dst_address0),
    .dst_ce0(grp_Decrypt_fu_64_dst_ce0),
    .dst_we0(grp_Decrypt_fu_64_dst_we0),
    .dst_d0(grp_Decrypt_fu_64_dst_d0),
    .dst_q0(decrypted_q0),
    .dst_address1(grp_Decrypt_fu_64_dst_address1),
    .dst_ce1(grp_Decrypt_fu_64_dst_ce1),
    .dst_we1(grp_Decrypt_fu_64_dst_we1),
    .dst_d1(grp_Decrypt_fu_64_dst_d1),
    .dst_q1(decrypted_q1),
    .src_address0(grp_Decrypt_fu_64_src_address0),
    .src_ce0(grp_Decrypt_fu_64_src_ce0),
    .src_q0(encrypted_q0)
);

Encrypt grp_Encrypt_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Encrypt_fu_76_ap_start),
    .ap_done(grp_Encrypt_fu_76_ap_done),
    .ap_idle(grp_Encrypt_fu_76_ap_idle),
    .ap_ready(grp_Encrypt_fu_76_ap_ready),
    .Blowfish_pary_s_address0(grp_Encrypt_fu_76_Blowfish_pary_s_address0),
    .Blowfish_pary_s_ce0(grp_Encrypt_fu_76_Blowfish_pary_s_ce0),
    .Blowfish_pary_s_q0(Blowfish_pary_s_q0),
    .Blowfish_sbox_s_address0(grp_Encrypt_fu_76_Blowfish_sbox_s_address0),
    .Blowfish_sbox_s_ce0(grp_Encrypt_fu_76_Blowfish_sbox_s_ce0),
    .Blowfish_sbox_s_q0(Blowfish_sbox_s_q0),
    .Blowfish_sbox_s_address1(grp_Encrypt_fu_76_Blowfish_sbox_s_address1),
    .Blowfish_sbox_s_ce1(grp_Encrypt_fu_76_Blowfish_sbox_s_ce1),
    .Blowfish_sbox_s_q1(Blowfish_sbox_s_q1),
    .dst_address0(grp_Encrypt_fu_76_dst_address0),
    .dst_ce0(grp_Encrypt_fu_76_dst_ce0),
    .dst_we0(grp_Encrypt_fu_76_dst_we0),
    .dst_d0(grp_Encrypt_fu_76_dst_d0),
    .dst_q0(encrypted_q0),
    .dst_address1(grp_Encrypt_fu_76_dst_address1),
    .dst_ce1(grp_Encrypt_fu_76_dst_ce1),
    .dst_we1(grp_Encrypt_fu_76_dst_we1),
    .dst_d1(grp_Encrypt_fu_76_dst_d1),
    .dst_q1(encrypted_q1),
    .src_address0(grp_Encrypt_fu_76_src_address0),
    .src_ce0(grp_Encrypt_fu_76_src_ce0),
    .src_q0(plaintext_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Decrypt_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_Decrypt_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_Decrypt_fu_64_ap_ready == 1'b1)) begin
            grp_Decrypt_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Encrypt_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Encrypt_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_Encrypt_fu_76_ap_ready == 1'b1)) begin
            grp_Encrypt_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SetKey_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (set_key_read_read_fu_42_p2 == 1'd1) & (ap_start == 1'b1))) begin
            grp_SetKey_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_SetKey_fu_48_ap_ready == 1'b1)) begin
            grp_SetKey_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_pary_s_address0 = grp_Encrypt_fu_76_Blowfish_pary_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_pary_s_address0 = grp_Decrypt_fu_64_Blowfish_pary_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_address0 = grp_SetKey_fu_48_Blowfish_pary_s_address0;
    end else begin
        Blowfish_pary_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_pary_s_ce0 = grp_Encrypt_fu_76_Blowfish_pary_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_pary_s_ce0 = grp_Decrypt_fu_64_Blowfish_pary_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_ce0 = grp_SetKey_fu_48_Blowfish_pary_s_ce0;
    end else begin
        Blowfish_pary_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_ce1 = grp_SetKey_fu_48_Blowfish_pary_s_ce1;
    end else begin
        Blowfish_pary_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_we0 = grp_SetKey_fu_48_Blowfish_pary_s_we0;
    end else begin
        Blowfish_pary_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_we1 = grp_SetKey_fu_48_Blowfish_pary_s_we1;
    end else begin
        Blowfish_pary_s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_address0 = grp_Encrypt_fu_76_Blowfish_sbox_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_address0 = grp_Decrypt_fu_64_Blowfish_sbox_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_address0 = grp_SetKey_fu_48_Blowfish_sbox_s_address0;
    end else begin
        Blowfish_sbox_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_address1 = grp_Encrypt_fu_76_Blowfish_sbox_s_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_address1 = grp_Decrypt_fu_64_Blowfish_sbox_s_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_address1 = grp_SetKey_fu_48_Blowfish_sbox_s_address1;
    end else begin
        Blowfish_sbox_s_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_ce0 = grp_Encrypt_fu_76_Blowfish_sbox_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_ce0 = grp_Decrypt_fu_64_Blowfish_sbox_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_ce0 = grp_SetKey_fu_48_Blowfish_sbox_s_ce0;
    end else begin
        Blowfish_sbox_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_ce1 = grp_Encrypt_fu_76_Blowfish_sbox_s_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_ce1 = grp_Decrypt_fu_64_Blowfish_sbox_s_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_ce1 = grp_SetKey_fu_48_Blowfish_sbox_s_ce1;
    end else begin
        Blowfish_sbox_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_we0 = grp_SetKey_fu_48_Blowfish_sbox_s_we0;
    end else begin
        Blowfish_sbox_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_sbox_s_we1 = grp_SetKey_fu_48_Blowfish_sbox_s_we1;
    end else begin
        Blowfish_sbox_s_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_Decrypt_fu_64_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_Decrypt_fu_64_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encrypted_address0 = grp_Encrypt_fu_76_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        encrypted_address0 = grp_Decrypt_fu_64_src_address0;
    end else begin
        encrypted_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encrypted_ce0 = grp_Encrypt_fu_76_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        encrypted_ce0 = grp_Decrypt_fu_64_src_ce0;
    end else begin
        encrypted_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encrypted_ce1 = grp_Encrypt_fu_76_dst_ce1;
    end else begin
        encrypted_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encrypted_we0 = grp_Encrypt_fu_76_dst_we0;
    end else begin
        encrypted_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encrypted_we1 = grp_Encrypt_fu_76_dst_we1;
    end else begin
        encrypted_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (set_key_read_read_fu_42_p2 == 1'd0) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state1) & (set_key_read_read_fu_42_p2 == 1'd1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_SetKey_fu_48_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_Encrypt_fu_76_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_Decrypt_fu_64_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Blowfish_pary_s_address1 = grp_SetKey_fu_48_Blowfish_pary_s_address1;

assign Blowfish_pary_s_d0 = grp_SetKey_fu_48_Blowfish_pary_s_d0;

assign Blowfish_pary_s_d1 = grp_SetKey_fu_48_Blowfish_pary_s_d1;

assign Blowfish_sbox_s_d0 = grp_SetKey_fu_48_Blowfish_sbox_s_d0;

assign Blowfish_sbox_s_d1 = grp_SetKey_fu_48_Blowfish_sbox_s_d1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign decrypted_address0 = grp_Decrypt_fu_64_dst_address0;

assign decrypted_address1 = grp_Decrypt_fu_64_dst_address1;

assign decrypted_ce0 = grp_Decrypt_fu_64_dst_ce0;

assign decrypted_ce1 = grp_Decrypt_fu_64_dst_ce1;

assign decrypted_d0 = grp_Decrypt_fu_64_dst_d0;

assign decrypted_d1 = grp_Decrypt_fu_64_dst_d1;

assign decrypted_we0 = grp_Decrypt_fu_64_dst_we0;

assign decrypted_we1 = grp_Decrypt_fu_64_dst_we1;

assign encrypted_address1 = grp_Encrypt_fu_76_dst_address1;

assign encrypted_d0 = grp_Encrypt_fu_76_dst_d0;

assign encrypted_d1 = grp_Encrypt_fu_76_dst_d1;

assign grp_Decrypt_fu_64_ap_start = grp_Decrypt_fu_64_ap_start_reg;

assign grp_Encrypt_fu_76_ap_start = grp_Encrypt_fu_76_ap_start_reg;

assign grp_SetKey_fu_48_ap_start = grp_SetKey_fu_48_ap_start_reg;

assign key_address0 = grp_SetKey_fu_48_key_address0;

assign key_address1 = grp_SetKey_fu_48_key_address1;

assign key_ce0 = grp_SetKey_fu_48_key_ce0;

assign key_ce1 = grp_SetKey_fu_48_key_ce1;

assign plaintext_address0 = grp_Encrypt_fu_76_src_address0;

assign plaintext_ce0 = grp_Encrypt_fu_76_src_ce0;

assign set_key_read_read_fu_42_p2 = set_key;

endmodule //Blowfish_Encrypt_Decrypt_SetKey
