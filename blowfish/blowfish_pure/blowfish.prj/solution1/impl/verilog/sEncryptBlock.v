// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sEncryptBlock (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0,
        Blowfish_pary_s_q0,
        Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1,
        Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1,
        left_r,
        right_r,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Blowfish_pary_s_address0;
output   Blowfish_pary_s_ce0;
input  [31:0] Blowfish_pary_s_q0;
output  [4:0] Blowfish_pary_s_address1;
output   Blowfish_pary_s_ce1;
input  [31:0] Blowfish_pary_s_q1;
output  [9:0] Blowfish_sbox_s_address0;
output   Blowfish_sbox_s_ce0;
input  [31:0] Blowfish_sbox_s_q0;
output  [9:0] Blowfish_sbox_s_address1;
output   Blowfish_sbox_s_ce1;
input  [31:0] Blowfish_sbox_s_q1;
input  [31:0] left_r;
input  [31:0] right_r;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Blowfish_pary_s_address0;
reg Blowfish_pary_s_ce0;
reg Blowfish_pary_s_ce1;
reg[9:0] Blowfish_sbox_s_address0;
reg Blowfish_sbox_s_ce0;
reg[9:0] Blowfish_sbox_s_address1;
reg Blowfish_sbox_s_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_187_p2;
reg   [4:0] i_reg_354;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln224_fu_181_p2;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] temp_1_reg_374;
wire    ap_CS_fsm_state3;
reg   [7:0] c_reg_379;
wire   [7:0] d_fu_264_p2;
reg   [7:0] d_reg_384;
wire   [31:0] add_ln281_fu_284_p2;
reg   [31:0] add_ln281_reg_399;
wire    ap_CS_fsm_state4;
wire   [31:0] xor_ln226_fu_317_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] temp_reg_144;
reg   [31:0] right_new_0_reg_154;
reg   [4:0] i_0_reg_164;
wire   [63:0] zext_ln225_fu_193_p1;
wire   [63:0] zext_ln281_fu_270_p1;
wire   [63:0] tmp_fu_275_p3;
wire   [63:0] tmp_1_fu_290_p3;
wire   [63:0] tmp_2_fu_298_p3;
wire    ap_CS_fsm_state6;
wire   [15:0] trunc_ln225_5_fu_218_p1;
wire   [15:0] trunc_ln225_4_fu_214_p1;
wire   [23:0] trunc_ln225_3_fu_210_p1;
wire   [23:0] trunc_ln225_2_fu_206_p1;
wire   [23:0] xor_ln272_1_fu_228_p2;
wire   [15:0] xor_ln272_fu_222_p2;
wire   [7:0] trunc_ln225_1_fu_202_p1;
wire   [7:0] trunc_ln225_fu_198_p1;
wire   [7:0] a_fu_234_p4;
wire   [7:0] b_fu_244_p4;
wire   [31:0] xor_ln281_fu_306_p2;
wire   [31:0] add_ln281_1_fu_311_p2;
wire   [31:0] xor_ln241_fu_323_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= xor_ln241_fu_323_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= grp_fu_175_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_164 <= i_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_164 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        right_new_0_reg_154 <= temp_1_reg_374;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        right_new_0_reg_154 <= right_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_reg_144 <= xor_ln226_fu_317_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        temp_reg_144 <= left_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln281_reg_399 <= add_ln281_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_379 <= {{xor_ln272_fu_222_p2[15:8]}};
        d_reg_384 <= d_fu_264_p2;
        temp_1_reg_374 <= grp_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_354 <= i_fu_187_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln224_fu_181_p2 == 1'd1)) begin
            Blowfish_pary_s_address0 = 64'd16;
        end else if ((icmp_ln224_fu_181_p2 == 1'd0)) begin
            Blowfish_pary_s_address0 = zext_ln225_fu_193_p1;
        end else begin
            Blowfish_pary_s_address0 = 'bx;
        end
    end else begin
        Blowfish_pary_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln224_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln224_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Blowfish_pary_s_ce0 = 1'b1;
    end else begin
        Blowfish_pary_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Blowfish_pary_s_ce1 = 1'b1;
    end else begin
        Blowfish_pary_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_address0 = tmp_1_fu_290_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Blowfish_sbox_s_address0 = zext_ln281_fu_270_p1;
    end else begin
        Blowfish_sbox_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Blowfish_sbox_s_address1 = tmp_2_fu_298_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Blowfish_sbox_s_address1 = tmp_fu_275_p3;
    end else begin
        Blowfish_sbox_s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        Blowfish_sbox_s_ce0 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        Blowfish_sbox_s_ce1 = 1'b1;
    end else begin
        Blowfish_sbox_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = xor_ln241_fu_323_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = grp_fu_175_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln224_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Blowfish_pary_s_address1 = 64'd17;

assign a_fu_234_p4 = {{grp_fu_175_p2[31:24]}};

assign add_ln281_1_fu_311_p2 = (Blowfish_sbox_s_q1 + xor_ln281_fu_306_p2);

assign add_ln281_fu_284_p2 = (Blowfish_sbox_s_q0 + Blowfish_sbox_s_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_fu_244_p4 = {{xor_ln272_1_fu_228_p2[23:16]}};

assign d_fu_264_p2 = (trunc_ln225_fu_198_p1 ^ trunc_ln225_1_fu_202_p1);

assign grp_fu_175_p2 = (temp_reg_144 ^ Blowfish_pary_s_q0);

assign i_fu_187_p2 = (i_0_reg_164 + 5'd1);

assign icmp_ln224_fu_181_p2 = ((i_0_reg_164 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_1_fu_290_p3 = {{56'd2}, {c_reg_379}};

assign tmp_2_fu_298_p3 = {{56'd3}, {d_reg_384}};

assign tmp_fu_275_p3 = {{56'd1}, {b_fu_244_p4}};

assign trunc_ln225_1_fu_202_p1 = temp_reg_144[7:0];

assign trunc_ln225_2_fu_206_p1 = temp_reg_144[23:0];

assign trunc_ln225_3_fu_210_p1 = Blowfish_pary_s_q0[23:0];

assign trunc_ln225_4_fu_214_p1 = temp_reg_144[15:0];

assign trunc_ln225_5_fu_218_p1 = Blowfish_pary_s_q0[15:0];

assign trunc_ln225_fu_198_p1 = Blowfish_pary_s_q0[7:0];

assign xor_ln226_fu_317_p2 = (right_new_0_reg_154 ^ add_ln281_1_fu_311_p2);

assign xor_ln241_fu_323_p2 = (right_new_0_reg_154 ^ Blowfish_pary_s_q1);

assign xor_ln272_1_fu_228_p2 = (trunc_ln225_3_fu_210_p1 ^ trunc_ln225_2_fu_206_p1);

assign xor_ln272_fu_222_p2 = (trunc_ln225_5_fu_218_p1 ^ trunc_ln225_4_fu_214_p1);

assign xor_ln281_fu_306_p2 = (add_ln281_reg_399 ^ Blowfish_sbox_s_q0);

assign zext_ln225_fu_193_p1 = i_0_reg_164;

assign zext_ln281_fu_270_p1 = a_fu_234_p4;

endmodule //sEncryptBlock
