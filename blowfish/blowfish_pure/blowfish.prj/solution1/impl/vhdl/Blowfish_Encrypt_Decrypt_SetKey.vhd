-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Encrypt_Decrypt_SetKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce0 : OUT STD_LOGIC;
    Blowfish_pary_s_we0 : OUT STD_LOGIC;
    Blowfish_pary_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce1 : OUT STD_LOGIC;
    Blowfish_pary_s_we1 : OUT STD_LOGIC;
    Blowfish_pary_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
    Blowfish_sbox_s_we0 : OUT STD_LOGIC;
    Blowfish_sbox_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
    Blowfish_sbox_s_we1 : OUT STD_LOGIC;
    Blowfish_sbox_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    set_key : IN STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_byte_length : IN STD_LOGIC_VECTOR (31 downto 0);
    decrypted_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decrypted_ce0 : OUT STD_LOGIC;
    decrypted_we0 : OUT STD_LOGIC;
    decrypted_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decrypted_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    decrypted_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decrypted_ce1 : OUT STD_LOGIC;
    decrypted_we1 : OUT STD_LOGIC;
    decrypted_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decrypted_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypted_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    encrypted_ce0 : OUT STD_LOGIC;
    encrypted_we0 : OUT STD_LOGIC;
    encrypted_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypted_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypted_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    encrypted_ce1 : OUT STD_LOGIC;
    encrypted_we1 : OUT STD_LOGIC;
    encrypted_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypted_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Blowfish_Encrypt_Decrypt_SetKey is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_Encrypt_Decrypt_SetKey,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.992000,HLS_SYN_LAT=19363,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=3140,HLS_SYN_LUT=4172,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_SetKey_fu_48_ap_start : STD_LOGIC;
    signal grp_SetKey_fu_48_ap_done : STD_LOGIC;
    signal grp_SetKey_fu_48_ap_idle : STD_LOGIC;
    signal grp_SetKey_fu_48_ap_ready : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_pary_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_SetKey_fu_48_Blowfish_pary_s_ce0 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_pary_s_we0 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_pary_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SetKey_fu_48_Blowfish_pary_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_SetKey_fu_48_Blowfish_pary_s_ce1 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_pary_s_we1 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_pary_s_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SetKey_fu_48_Blowfish_sbox_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SetKey_fu_48_Blowfish_sbox_s_ce0 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_sbox_s_we0 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_sbox_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SetKey_fu_48_Blowfish_sbox_s_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SetKey_fu_48_Blowfish_sbox_s_ce1 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_sbox_s_we1 : STD_LOGIC;
    signal grp_SetKey_fu_48_Blowfish_sbox_s_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SetKey_fu_48_key_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_SetKey_fu_48_key_ce0 : STD_LOGIC;
    signal grp_SetKey_fu_48_key_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_SetKey_fu_48_key_ce1 : STD_LOGIC;
    signal grp_Decrypt_fu_64_ap_start : STD_LOGIC;
    signal grp_Decrypt_fu_64_ap_done : STD_LOGIC;
    signal grp_Decrypt_fu_64_ap_idle : STD_LOGIC;
    signal grp_Decrypt_fu_64_ap_ready : STD_LOGIC;
    signal grp_Decrypt_fu_64_Blowfish_pary_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Decrypt_fu_64_Blowfish_pary_s_ce0 : STD_LOGIC;
    signal grp_Decrypt_fu_64_Blowfish_sbox_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Decrypt_fu_64_Blowfish_sbox_s_ce0 : STD_LOGIC;
    signal grp_Decrypt_fu_64_Blowfish_sbox_s_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Decrypt_fu_64_Blowfish_sbox_s_ce1 : STD_LOGIC;
    signal grp_Decrypt_fu_64_dst_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Decrypt_fu_64_dst_ce0 : STD_LOGIC;
    signal grp_Decrypt_fu_64_dst_we0 : STD_LOGIC;
    signal grp_Decrypt_fu_64_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Decrypt_fu_64_dst_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Decrypt_fu_64_dst_ce1 : STD_LOGIC;
    signal grp_Decrypt_fu_64_dst_we1 : STD_LOGIC;
    signal grp_Decrypt_fu_64_dst_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Decrypt_fu_64_src_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Decrypt_fu_64_src_ce0 : STD_LOGIC;
    signal grp_Encrypt_fu_76_ap_start : STD_LOGIC;
    signal grp_Encrypt_fu_76_ap_done : STD_LOGIC;
    signal grp_Encrypt_fu_76_ap_idle : STD_LOGIC;
    signal grp_Encrypt_fu_76_ap_ready : STD_LOGIC;
    signal grp_Encrypt_fu_76_Blowfish_pary_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Encrypt_fu_76_Blowfish_pary_s_ce0 : STD_LOGIC;
    signal grp_Encrypt_fu_76_Blowfish_sbox_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Encrypt_fu_76_Blowfish_sbox_s_ce0 : STD_LOGIC;
    signal grp_Encrypt_fu_76_Blowfish_sbox_s_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Encrypt_fu_76_Blowfish_sbox_s_ce1 : STD_LOGIC;
    signal grp_Encrypt_fu_76_dst_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Encrypt_fu_76_dst_ce0 : STD_LOGIC;
    signal grp_Encrypt_fu_76_dst_we0 : STD_LOGIC;
    signal grp_Encrypt_fu_76_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Encrypt_fu_76_dst_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Encrypt_fu_76_dst_ce1 : STD_LOGIC;
    signal grp_Encrypt_fu_76_dst_we1 : STD_LOGIC;
    signal grp_Encrypt_fu_76_dst_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Encrypt_fu_76_src_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Encrypt_fu_76_src_ce0 : STD_LOGIC;
    signal grp_SetKey_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal set_key_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Decrypt_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_Encrypt_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component SetKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce0 : OUT STD_LOGIC;
        Blowfish_pary_s_we0 : OUT STD_LOGIC;
        Blowfish_pary_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_pary_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce1 : OUT STD_LOGIC;
        Blowfish_pary_s_we1 : OUT STD_LOGIC;
        Blowfish_pary_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_pary_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
        Blowfish_sbox_s_we0 : OUT STD_LOGIC;
        Blowfish_sbox_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
        Blowfish_sbox_s_we1 : OUT STD_LOGIC;
        Blowfish_sbox_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_byte_length : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce0 : OUT STD_LOGIC;
        Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
        Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
        Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_ce1 : OUT STD_LOGIC;
        dst_we1 : OUT STD_LOGIC;
        dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce0 : OUT STD_LOGIC;
        Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
        Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
        Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_ce1 : OUT STD_LOGIC;
        dst_we1 : OUT STD_LOGIC;
        dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_SetKey_fu_48 : component SetKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SetKey_fu_48_ap_start,
        ap_done => grp_SetKey_fu_48_ap_done,
        ap_idle => grp_SetKey_fu_48_ap_idle,
        ap_ready => grp_SetKey_fu_48_ap_ready,
        Blowfish_pary_s_address0 => grp_SetKey_fu_48_Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0 => grp_SetKey_fu_48_Blowfish_pary_s_ce0,
        Blowfish_pary_s_we0 => grp_SetKey_fu_48_Blowfish_pary_s_we0,
        Blowfish_pary_s_d0 => grp_SetKey_fu_48_Blowfish_pary_s_d0,
        Blowfish_pary_s_q0 => Blowfish_pary_s_q0,
        Blowfish_pary_s_address1 => grp_SetKey_fu_48_Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1 => grp_SetKey_fu_48_Blowfish_pary_s_ce1,
        Blowfish_pary_s_we1 => grp_SetKey_fu_48_Blowfish_pary_s_we1,
        Blowfish_pary_s_d1 => grp_SetKey_fu_48_Blowfish_pary_s_d1,
        Blowfish_pary_s_q1 => Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0 => grp_SetKey_fu_48_Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0 => grp_SetKey_fu_48_Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_we0 => grp_SetKey_fu_48_Blowfish_sbox_s_we0,
        Blowfish_sbox_s_d0 => grp_SetKey_fu_48_Blowfish_sbox_s_d0,
        Blowfish_sbox_s_q0 => Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1 => grp_SetKey_fu_48_Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1 => grp_SetKey_fu_48_Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_we1 => grp_SetKey_fu_48_Blowfish_sbox_s_we1,
        Blowfish_sbox_s_d1 => grp_SetKey_fu_48_Blowfish_sbox_s_d1,
        Blowfish_sbox_s_q1 => Blowfish_sbox_s_q1,
        key_address0 => grp_SetKey_fu_48_key_address0,
        key_ce0 => grp_SetKey_fu_48_key_ce0,
        key_q0 => key_q0,
        key_address1 => grp_SetKey_fu_48_key_address1,
        key_ce1 => grp_SetKey_fu_48_key_ce1,
        key_q1 => key_q1,
        key_byte_length => key_byte_length);

    grp_Decrypt_fu_64 : component Decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Decrypt_fu_64_ap_start,
        ap_done => grp_Decrypt_fu_64_ap_done,
        ap_idle => grp_Decrypt_fu_64_ap_idle,
        ap_ready => grp_Decrypt_fu_64_ap_ready,
        Blowfish_pary_s_address0 => grp_Decrypt_fu_64_Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0 => grp_Decrypt_fu_64_Blowfish_pary_s_ce0,
        Blowfish_pary_s_q0 => Blowfish_pary_s_q0,
        Blowfish_sbox_s_address0 => grp_Decrypt_fu_64_Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0 => grp_Decrypt_fu_64_Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0 => Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1 => grp_Decrypt_fu_64_Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1 => grp_Decrypt_fu_64_Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1 => Blowfish_sbox_s_q1,
        dst_address0 => grp_Decrypt_fu_64_dst_address0,
        dst_ce0 => grp_Decrypt_fu_64_dst_ce0,
        dst_we0 => grp_Decrypt_fu_64_dst_we0,
        dst_d0 => grp_Decrypt_fu_64_dst_d0,
        dst_q0 => decrypted_q0,
        dst_address1 => grp_Decrypt_fu_64_dst_address1,
        dst_ce1 => grp_Decrypt_fu_64_dst_ce1,
        dst_we1 => grp_Decrypt_fu_64_dst_we1,
        dst_d1 => grp_Decrypt_fu_64_dst_d1,
        dst_q1 => decrypted_q1,
        src_address0 => grp_Decrypt_fu_64_src_address0,
        src_ce0 => grp_Decrypt_fu_64_src_ce0,
        src_q0 => encrypted_q0);

    grp_Encrypt_fu_76 : component Encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Encrypt_fu_76_ap_start,
        ap_done => grp_Encrypt_fu_76_ap_done,
        ap_idle => grp_Encrypt_fu_76_ap_idle,
        ap_ready => grp_Encrypt_fu_76_ap_ready,
        Blowfish_pary_s_address0 => grp_Encrypt_fu_76_Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0 => grp_Encrypt_fu_76_Blowfish_pary_s_ce0,
        Blowfish_pary_s_q0 => Blowfish_pary_s_q0,
        Blowfish_sbox_s_address0 => grp_Encrypt_fu_76_Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0 => grp_Encrypt_fu_76_Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0 => Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1 => grp_Encrypt_fu_76_Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1 => grp_Encrypt_fu_76_Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1 => Blowfish_sbox_s_q1,
        dst_address0 => grp_Encrypt_fu_76_dst_address0,
        dst_ce0 => grp_Encrypt_fu_76_dst_ce0,
        dst_we0 => grp_Encrypt_fu_76_dst_we0,
        dst_d0 => grp_Encrypt_fu_76_dst_d0,
        dst_q0 => encrypted_q0,
        dst_address1 => grp_Encrypt_fu_76_dst_address1,
        dst_ce1 => grp_Encrypt_fu_76_dst_ce1,
        dst_we1 => grp_Encrypt_fu_76_dst_we1,
        dst_d1 => grp_Encrypt_fu_76_dst_d1,
        dst_q1 => encrypted_q1,
        src_address0 => grp_Encrypt_fu_76_src_address0,
        src_ce0 => grp_Encrypt_fu_76_src_ce0,
        src_q0 => plaintext_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Decrypt_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Decrypt_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Decrypt_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Decrypt_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_Decrypt_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Encrypt_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Encrypt_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Encrypt_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Encrypt_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_Encrypt_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SetKey_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SetKey_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then 
                    grp_SetKey_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SetKey_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_SetKey_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_SetKey_fu_48_ap_done, grp_Decrypt_fu_64_ap_done, grp_Encrypt_fu_76_ap_done, set_key_read_read_fu_42_p2, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_42_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (set_key_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_SetKey_fu_48_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Encrypt_fu_76_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Decrypt_fu_64_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    Blowfish_pary_s_address0_assign_proc : process(grp_SetKey_fu_48_Blowfish_pary_s_address0, grp_Decrypt_fu_64_Blowfish_pary_s_address0, grp_Encrypt_fu_76_Blowfish_pary_s_address0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_pary_s_address0 <= grp_Encrypt_fu_76_Blowfish_pary_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_pary_s_address0 <= grp_Decrypt_fu_64_Blowfish_pary_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_pary_s_address0 <= grp_SetKey_fu_48_Blowfish_pary_s_address0;
        else 
            Blowfish_pary_s_address0 <= "XXXXX";
        end if; 
    end process;

    Blowfish_pary_s_address1 <= grp_SetKey_fu_48_Blowfish_pary_s_address1;

    Blowfish_pary_s_ce0_assign_proc : process(grp_SetKey_fu_48_Blowfish_pary_s_ce0, grp_Decrypt_fu_64_Blowfish_pary_s_ce0, grp_Encrypt_fu_76_Blowfish_pary_s_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_pary_s_ce0 <= grp_Encrypt_fu_76_Blowfish_pary_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_pary_s_ce0 <= grp_Decrypt_fu_64_Blowfish_pary_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_pary_s_ce0 <= grp_SetKey_fu_48_Blowfish_pary_s_ce0;
        else 
            Blowfish_pary_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_pary_s_ce1_assign_proc : process(grp_SetKey_fu_48_Blowfish_pary_s_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_pary_s_ce1 <= grp_SetKey_fu_48_Blowfish_pary_s_ce1;
        else 
            Blowfish_pary_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Blowfish_pary_s_d0 <= grp_SetKey_fu_48_Blowfish_pary_s_d0;
    Blowfish_pary_s_d1 <= grp_SetKey_fu_48_Blowfish_pary_s_d1;

    Blowfish_pary_s_we0_assign_proc : process(grp_SetKey_fu_48_Blowfish_pary_s_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_pary_s_we0 <= grp_SetKey_fu_48_Blowfish_pary_s_we0;
        else 
            Blowfish_pary_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_pary_s_we1_assign_proc : process(grp_SetKey_fu_48_Blowfish_pary_s_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_pary_s_we1 <= grp_SetKey_fu_48_Blowfish_pary_s_we1;
        else 
            Blowfish_pary_s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_address0_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_address0, grp_Decrypt_fu_64_Blowfish_sbox_s_address0, grp_Encrypt_fu_76_Blowfish_sbox_s_address0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_sbox_s_address0 <= grp_Encrypt_fu_76_Blowfish_sbox_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_address0 <= grp_Decrypt_fu_64_Blowfish_sbox_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_address0 <= grp_SetKey_fu_48_Blowfish_sbox_s_address0;
        else 
            Blowfish_sbox_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_address1_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_address1, grp_Decrypt_fu_64_Blowfish_sbox_s_address1, grp_Encrypt_fu_76_Blowfish_sbox_s_address1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_sbox_s_address1 <= grp_Encrypt_fu_76_Blowfish_sbox_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_address1 <= grp_Decrypt_fu_64_Blowfish_sbox_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_address1 <= grp_SetKey_fu_48_Blowfish_sbox_s_address1;
        else 
            Blowfish_sbox_s_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_ce0_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_ce0, grp_Decrypt_fu_64_Blowfish_sbox_s_ce0, grp_Encrypt_fu_76_Blowfish_sbox_s_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_sbox_s_ce0 <= grp_Encrypt_fu_76_Blowfish_sbox_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_ce0 <= grp_Decrypt_fu_64_Blowfish_sbox_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_ce0 <= grp_SetKey_fu_48_Blowfish_sbox_s_ce0;
        else 
            Blowfish_sbox_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_ce1_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_ce1, grp_Decrypt_fu_64_Blowfish_sbox_s_ce1, grp_Encrypt_fu_76_Blowfish_sbox_s_ce1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Blowfish_sbox_s_ce1 <= grp_Encrypt_fu_76_Blowfish_sbox_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_ce1 <= grp_Decrypt_fu_64_Blowfish_sbox_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_ce1 <= grp_SetKey_fu_48_Blowfish_sbox_s_ce1;
        else 
            Blowfish_sbox_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Blowfish_sbox_s_d0 <= grp_SetKey_fu_48_Blowfish_sbox_s_d0;
    Blowfish_sbox_s_d1 <= grp_SetKey_fu_48_Blowfish_sbox_s_d1;

    Blowfish_sbox_s_we0_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_we0 <= grp_SetKey_fu_48_Blowfish_sbox_s_we0;
        else 
            Blowfish_sbox_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_we1_assign_proc : process(grp_SetKey_fu_48_Blowfish_sbox_s_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Blowfish_sbox_s_we1 <= grp_SetKey_fu_48_Blowfish_sbox_s_we1;
        else 
            Blowfish_sbox_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_Decrypt_fu_64_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Decrypt_fu_64_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Decrypt_fu_64_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Decrypt_fu_64_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    decrypted_address0 <= grp_Decrypt_fu_64_dst_address0;
    decrypted_address1 <= grp_Decrypt_fu_64_dst_address1;
    decrypted_ce0 <= grp_Decrypt_fu_64_dst_ce0;
    decrypted_ce1 <= grp_Decrypt_fu_64_dst_ce1;
    decrypted_d0 <= grp_Decrypt_fu_64_dst_d0;
    decrypted_d1 <= grp_Decrypt_fu_64_dst_d1;
    decrypted_we0 <= grp_Decrypt_fu_64_dst_we0;
    decrypted_we1 <= grp_Decrypt_fu_64_dst_we1;

    encrypted_address0_assign_proc : process(grp_Decrypt_fu_64_src_address0, grp_Encrypt_fu_76_dst_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encrypted_address0 <= grp_Encrypt_fu_76_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            encrypted_address0 <= grp_Decrypt_fu_64_src_address0;
        else 
            encrypted_address0 <= "XXX";
        end if; 
    end process;

    encrypted_address1 <= grp_Encrypt_fu_76_dst_address1;

    encrypted_ce0_assign_proc : process(grp_Decrypt_fu_64_src_ce0, grp_Encrypt_fu_76_dst_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encrypted_ce0 <= grp_Encrypt_fu_76_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            encrypted_ce0 <= grp_Decrypt_fu_64_src_ce0;
        else 
            encrypted_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    encrypted_ce1_assign_proc : process(grp_Encrypt_fu_76_dst_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encrypted_ce1 <= grp_Encrypt_fu_76_dst_ce1;
        else 
            encrypted_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    encrypted_d0 <= grp_Encrypt_fu_76_dst_d0;
    encrypted_d1 <= grp_Encrypt_fu_76_dst_d1;

    encrypted_we0_assign_proc : process(grp_Encrypt_fu_76_dst_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encrypted_we0 <= grp_Encrypt_fu_76_dst_we0;
        else 
            encrypted_we0 <= ap_const_logic_0;
        end if; 
    end process;


    encrypted_we1_assign_proc : process(grp_Encrypt_fu_76_dst_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encrypted_we1 <= grp_Encrypt_fu_76_dst_we1;
        else 
            encrypted_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Decrypt_fu_64_ap_start <= grp_Decrypt_fu_64_ap_start_reg;
    grp_Encrypt_fu_76_ap_start <= grp_Encrypt_fu_76_ap_start_reg;
    grp_SetKey_fu_48_ap_start <= grp_SetKey_fu_48_ap_start_reg;
    key_address0 <= grp_SetKey_fu_48_key_address0;
    key_address1 <= grp_SetKey_fu_48_key_address1;
    key_ce0 <= grp_SetKey_fu_48_key_ce0;
    key_ce1 <= grp_SetKey_fu_48_key_ce1;
    plaintext_address0 <= grp_Encrypt_fu_76_src_address0;
    plaintext_ce0 <= grp_Encrypt_fu_76_src_ce0;
    set_key_read_read_fu_42_p2 <= (0=>set_key, others=>'-');
end behav;
