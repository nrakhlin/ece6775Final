// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        plaintext_address1,
        plaintext_ce1,
        plaintext_q1,
        ciphertext_address0,
        ciphertext_ce0,
        ciphertext_we0,
        ciphertext_d0,
        ciphertext_address1,
        ciphertext_ce1,
        ciphertext_we1,
        ciphertext_d1,
        P_address0,
        P_ce0,
        P_q0,
        S_address0,
        S_ce0,
        S_q0,
        S_address1,
        S_ce1,
        S_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [7:0] plaintext_q0;
output  [2:0] plaintext_address1;
output   plaintext_ce1;
input  [7:0] plaintext_q1;
output  [2:0] ciphertext_address0;
output   ciphertext_ce0;
output   ciphertext_we0;
output  [7:0] ciphertext_d0;
output  [2:0] ciphertext_address1;
output   ciphertext_ce1;
output   ciphertext_we1;
output  [7:0] ciphertext_d1;
output  [4:0] P_address0;
output   P_ce0;
input  [31:0] P_q0;
output  [9:0] S_address0;
output   S_ce0;
input  [31:0] S_q0;
output  [9:0] S_address1;
output   S_ce1;
input  [31:0] S_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] plaintext_address0;
reg plaintext_ce0;
reg[2:0] plaintext_address1;
reg plaintext_ce1;
reg[2:0] ciphertext_address0;
reg ciphertext_ce0;
reg ciphertext_we0;
reg[7:0] ciphertext_d0;
reg[2:0] ciphertext_address1;
reg ciphertext_ce1;
reg ciphertext_we1;
reg[7:0] ciphertext_d1;
reg[4:0] P_address0;
reg P_ce0;
reg[9:0] S_address0;
reg S_ce0;
reg[9:0] S_address1;
reg S_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] plaintext_load_reg_649;
wire    ap_CS_fsm_state2;
reg   [7:0] plaintext_load_1_reg_654;
reg   [7:0] plaintext_load_2_reg_669;
wire    ap_CS_fsm_state3;
reg   [7:0] plaintext_load_3_reg_674;
reg   [7:0] plaintext_load_4_reg_689;
wire    ap_CS_fsm_state4;
reg   [7:0] plaintext_load_5_reg_694;
wire   [31:0] left_3_fu_346_p5;
wire    ap_CS_fsm_state5;
wire   [31:0] right_3_fu_354_p5;
wire   [4:0] i_fu_370_p2;
reg   [4:0] i_reg_722;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln27_fu_364_p2;
wire   [7:0] trunc_ln28_fu_381_p1;
reg   [7:0] trunc_ln28_reg_737;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_329_p2;
reg   [31:0] left_7_reg_742;
reg   [7:0] c_reg_747;
wire   [31:0] add_ln62_fu_456_p2;
reg   [31:0] add_ln62_reg_762;
wire    ap_CS_fsm_state8;
wire   [31:0] right_fu_490_p2;
wire    ap_CS_fsm_state9;
wire   [7:0] trunc_ln34_fu_496_p1;
reg   [7:0] trunc_ln34_reg_782;
wire    ap_CS_fsm_state10;
reg   [7:0] trunc_ln4_reg_787;
wire    ap_CS_fsm_state11;
reg   [7:0] trunc_ln7_reg_797;
wire    ap_CS_fsm_state12;
wire   [7:0] xor_ln138_fu_633_p2;
reg   [7:0] xor_ln138_reg_802;
reg   [31:0] left_4_reg_298;
reg   [31:0] right_4_reg_308;
reg   [4:0] i_0_reg_318;
wire   [63:0] zext_ln28_fu_376_p1;
wire   [63:0] zext_ln62_fu_433_p1;
wire   [63:0] tmp_fu_438_p3;
wire   [63:0] tmp_6_fu_462_p3;
wire   [63:0] tmp_7_fu_470_p3;
wire    ap_CS_fsm_state13;
wire   [7:0] xor_ln134_fu_570_p2;
wire   [7:0] grp_fu_335_p4;
wire   [15:0] trunc_ln28_5_fu_397_p1;
wire   [15:0] trunc_ln28_4_fu_393_p1;
wire   [23:0] trunc_ln28_3_fu_389_p1;
wire   [23:0] trunc_ln28_2_fu_385_p1;
wire   [23:0] xor_ln28_2_fu_407_p2;
wire   [15:0] xor_ln28_1_fu_401_p2;
wire   [7:0] b_fu_413_p4;
wire   [7:0] trunc_ln28_1_fu_447_p1;
wire   [7:0] d_fu_451_p2;
wire   [31:0] xor_ln62_fu_479_p2;
wire   [31:0] add_ln62_2_fu_484_p2;
wire   [15:0] trunc_ln34_5_fu_512_p1;
wire   [15:0] trunc_ln34_4_fu_508_p1;
wire   [23:0] trunc_ln34_3_fu_504_p1;
wire   [23:0] trunc_ln34_2_fu_500_p1;
wire   [31:0] left_fu_516_p2;
wire   [23:0] xor_ln34_2_fu_528_p2;
wire   [15:0] xor_ln34_1_fu_522_p2;
wire   [7:0] trunc_ln34_1_fu_566_p1;
wire   [15:0] trunc_ln33_5_fu_596_p1;
wire   [15:0] trunc_ln33_4_fu_592_p1;
wire   [23:0] trunc_ln33_3_fu_588_p1;
wire   [23:0] trunc_ln33_2_fu_584_p1;
wire   [23:0] xor_ln33_2_fu_606_p2;
wire   [15:0] xor_ln33_1_fu_600_p2;
wire   [7:0] trunc_ln33_1_fu_580_p1;
wire   [7:0] trunc_ln33_fu_576_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_318 <= i_reg_722;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_318 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        left_4_reg_298 <= left_7_reg_742;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        left_4_reg_298 <= right_3_fu_354_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        right_4_reg_308 <= right_fu_490_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        right_4_reg_308 <= left_3_fu_346_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln62_reg_762 <= add_ln62_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_reg_747 <= {{xor_ln28_1_fu_401_p2[15:8]}};
        left_7_reg_742 <= grp_fu_329_p2;
        trunc_ln28_reg_737 <= trunc_ln28_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_722 <= i_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_load_1_reg_654 <= plaintext_q1;
        plaintext_load_reg_649 <= plaintext_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_load_2_reg_669 <= plaintext_q0;
        plaintext_load_3_reg_674 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_load_4_reg_689 <= plaintext_q0;
        plaintext_load_5_reg_694 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln34_reg_782 <= trunc_ln34_fu_496_p1;
        trunc_ln4_reg_787 <= {{xor_ln34_1_fu_522_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln7_reg_797 <= {{xor_ln33_1_fu_600_p2[15:8]}};
        xor_ln138_reg_802 <= xor_ln138_fu_633_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        P_address0 = 64'd16;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln27_fu_364_p2 == 1'd1))) begin
        P_address0 = 64'd17;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln27_fu_364_p2 == 1'd0))) begin
        P_address0 = zext_ln28_fu_376_p1;
    end else begin
        P_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln27_fu_364_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln27_fu_364_p2 == 1'd0)))) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        S_address0 = tmp_6_fu_462_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        S_address0 = zext_ln62_fu_433_p1;
    end else begin
        S_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        S_address1 = tmp_7_fu_470_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        S_address1 = tmp_fu_438_p3;
    end else begin
        S_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        S_ce1 = 1'b1;
    end else begin
        S_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address0 = 64'd0;
    end else begin
        ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address1 = 64'd1;
    end else begin
        ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_ce0 = 1'b1;
    end else begin
        ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_ce1 = 1'b1;
    end else begin
        ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_d0 = trunc_ln7_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d0 = {{grp_fu_329_p2[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d0 = trunc_ln4_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d0 = {{left_fu_516_p2[31:24]}};
    end else begin
        ciphertext_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_d1 = xor_ln138_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d1 = {{xor_ln33_2_fu_606_p2[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d1 = xor_ln134_fu_570_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d1 = {{xor_ln34_2_fu_528_p2[23:16]}};
    end else begin
        ciphertext_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_we0 = 1'b1;
    end else begin
        ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_we1 = 1'b1;
    end else begin
        ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address0 = 64'd0;
    end else begin
        plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address1 = 64'd1;
    end else begin
        plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce1 = 1'b1;
    end else begin
        plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln27_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_2_fu_484_p2 = (S_q1 + xor_ln62_fu_479_p2);

assign add_ln62_fu_456_p2 = (S_q0 + S_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fu_413_p4 = {{xor_ln28_2_fu_407_p2[23:16]}};

assign d_fu_451_p2 = (trunc_ln28_reg_737 ^ trunc_ln28_1_fu_447_p1);

assign grp_fu_329_p2 = (right_4_reg_308 ^ P_q0);

assign grp_fu_335_p4 = {{grp_fu_329_p2[31:24]}};

assign i_fu_370_p2 = (i_0_reg_318 + 5'd1);

assign icmp_ln27_fu_364_p2 = ((i_0_reg_318 == 5'd16) ? 1'b1 : 1'b0);

assign left_3_fu_346_p5 = {{{{plaintext_load_reg_649}, {plaintext_load_1_reg_654}}, {plaintext_load_2_reg_669}}, {plaintext_load_3_reg_674}};

assign left_fu_516_p2 = (left_4_reg_298 ^ P_q0);

assign right_3_fu_354_p5 = {{{{plaintext_load_4_reg_689}, {plaintext_load_5_reg_694}}, {plaintext_q0}}, {plaintext_q1}};

assign right_fu_490_p2 = (left_4_reg_298 ^ add_ln62_2_fu_484_p2);

assign tmp_6_fu_462_p3 = {{56'd2}, {c_reg_747}};

assign tmp_7_fu_470_p3 = {{56'd3}, {d_fu_451_p2}};

assign tmp_fu_438_p3 = {{56'd1}, {b_fu_413_p4}};

assign trunc_ln28_1_fu_447_p1 = right_4_reg_308[7:0];

assign trunc_ln28_2_fu_385_p1 = right_4_reg_308[23:0];

assign trunc_ln28_3_fu_389_p1 = P_q0[23:0];

assign trunc_ln28_4_fu_393_p1 = right_4_reg_308[15:0];

assign trunc_ln28_5_fu_397_p1 = P_q0[15:0];

assign trunc_ln28_fu_381_p1 = P_q0[7:0];

assign trunc_ln33_1_fu_580_p1 = right_4_reg_308[7:0];

assign trunc_ln33_2_fu_584_p1 = right_4_reg_308[23:0];

assign trunc_ln33_3_fu_588_p1 = P_q0[23:0];

assign trunc_ln33_4_fu_592_p1 = right_4_reg_308[15:0];

assign trunc_ln33_5_fu_596_p1 = P_q0[15:0];

assign trunc_ln33_fu_576_p1 = P_q0[7:0];

assign trunc_ln34_1_fu_566_p1 = left_4_reg_298[7:0];

assign trunc_ln34_2_fu_500_p1 = left_4_reg_298[23:0];

assign trunc_ln34_3_fu_504_p1 = P_q0[23:0];

assign trunc_ln34_4_fu_508_p1 = left_4_reg_298[15:0];

assign trunc_ln34_5_fu_512_p1 = P_q0[15:0];

assign trunc_ln34_fu_496_p1 = P_q0[7:0];

assign xor_ln134_fu_570_p2 = (trunc_ln34_reg_782 ^ trunc_ln34_1_fu_566_p1);

assign xor_ln138_fu_633_p2 = (trunc_ln33_fu_576_p1 ^ trunc_ln33_1_fu_580_p1);

assign xor_ln28_1_fu_401_p2 = (trunc_ln28_5_fu_397_p1 ^ trunc_ln28_4_fu_393_p1);

assign xor_ln28_2_fu_407_p2 = (trunc_ln28_3_fu_389_p1 ^ trunc_ln28_2_fu_385_p1);

assign xor_ln33_1_fu_600_p2 = (trunc_ln33_5_fu_596_p1 ^ trunc_ln33_4_fu_592_p1);

assign xor_ln33_2_fu_606_p2 = (trunc_ln33_3_fu_588_p1 ^ trunc_ln33_2_fu_584_p1);

assign xor_ln34_1_fu_522_p2 = (trunc_ln34_5_fu_512_p1 ^ trunc_ln34_4_fu_508_p1);

assign xor_ln34_2_fu_528_p2 = (trunc_ln34_3_fu_504_p1 ^ trunc_ln34_2_fu_500_p1);

assign xor_ln62_fu_479_p2 = (add_ln62_reg_762 ^ S_q0);

assign zext_ln28_fu_376_p1 = i_0_reg_318;

assign zext_ln62_fu_433_p1 = grp_fu_335_p4;

endmodule //Encrypt
