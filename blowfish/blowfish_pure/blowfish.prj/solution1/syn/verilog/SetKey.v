// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SetKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0,
        Blowfish_pary_s_we0,
        Blowfish_pary_s_d0,
        Blowfish_pary_s_q0,
        Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1,
        Blowfish_pary_s_we1,
        Blowfish_pary_s_d1,
        Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_we0,
        Blowfish_sbox_s_d0,
        Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_we1,
        Blowfish_sbox_s_d1,
        Blowfish_sbox_s_q1,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        key_byte_length
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Blowfish_pary_s_address0;
output   Blowfish_pary_s_ce0;
output   Blowfish_pary_s_we0;
output  [31:0] Blowfish_pary_s_d0;
input  [31:0] Blowfish_pary_s_q0;
output  [4:0] Blowfish_pary_s_address1;
output   Blowfish_pary_s_ce1;
output   Blowfish_pary_s_we1;
output  [31:0] Blowfish_pary_s_d1;
input  [31:0] Blowfish_pary_s_q1;
output  [9:0] Blowfish_sbox_s_address0;
output   Blowfish_sbox_s_ce0;
output   Blowfish_sbox_s_we0;
output  [31:0] Blowfish_sbox_s_d0;
input  [31:0] Blowfish_sbox_s_q0;
output  [9:0] Blowfish_sbox_s_address1;
output   Blowfish_sbox_s_ce1;
output   Blowfish_sbox_s_we1;
output  [31:0] Blowfish_sbox_s_d1;
input  [31:0] Blowfish_sbox_s_q1;
output  [5:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [5:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
input  [31:0] key_byte_length;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Blowfish_pary_s_address0;
reg Blowfish_pary_s_ce0;
reg Blowfish_pary_s_we0;
reg[31:0] Blowfish_pary_s_d0;
reg[4:0] Blowfish_pary_s_address1;
reg Blowfish_pary_s_ce1;
reg Blowfish_pary_s_we1;
reg[9:0] Blowfish_sbox_s_address0;
reg Blowfish_sbox_s_ce0;
reg Blowfish_sbox_s_we0;
reg[31:0] Blowfish_sbox_s_d0;
reg[9:0] Blowfish_sbox_s_address1;
reg Blowfish_sbox_s_ce1;
reg Blowfish_sbox_s_we1;
reg[5:0] key_address0;
reg key_ce0;
reg[5:0] key_address1;
reg key_ce1;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] initial_parray_address0;
reg    initial_parray_ce0;
wire   [31:0] initial_parray_q0;
wire   [9:0] initial_sbox_address0;
reg    initial_sbox_ce0;
wire   [31:0] initial_sbox_q0;
reg   [31:0] reg_425;
wire    ap_CS_fsm_state32;
wire    grp_sEncryptBlock_fu_403_ap_ready;
wire    grp_sEncryptBlock_fu_403_ap_done;
wire    ap_CS_fsm_state35;
reg   [31:0] reg_432;
wire   [4:0] i_fu_445_p2;
reg   [4:0] i_reg_833;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln35_fu_451_p1;
reg   [63:0] zext_ln35_reg_838;
wire   [0:0] icmp_ln34_fu_439_p2;
wire   [2:0] i_1_fu_462_p2;
reg   [2:0] i_1_reg_851;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln40_fu_476_p1;
reg   [11:0] zext_ln40_reg_856;
wire   [0:0] icmp_ln39_fu_456_p2;
wire   [30:0] buffer_length_fu_525_p3;
reg   [30:0] buffer_length_reg_861;
wire   [8:0] j_fu_539_p2;
reg   [8:0] j_reg_870;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln41_1_fu_554_p1;
reg   [63:0] zext_ln41_1_reg_875;
wire   [0:0] icmp_ln40_fu_533_p2;
wire   [3:0] i_2_fu_569_p2;
reg   [3:0] i_2_reg_888;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln57_fu_575_p2;
reg   [0:0] icmp_ln57_reg_893;
wire   [0:0] icmp_ln56_fu_563_p2;
wire   [5:0] shl_ln_fu_580_p3;
reg   [5:0] shl_ln_reg_897;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state17;
reg   [7:0] key_load_reg_933;
wire    ap_CS_fsm_state18;
reg   [7:0] key_load_1_reg_938;
wire    ap_CS_fsm_state20;
wire   [4:0] i_3_fu_686_p2;
reg   [4:0] i_3_reg_961;
wire    ap_CS_fsm_state29;
reg   [4:0] Blowfish_pary_addr_3_reg_971;
wire   [3:0] i_4_fu_720_p2;
reg   [3:0] i_4_reg_979;
wire    ap_CS_fsm_state31;
wire   [7:0] trunc_ln100_fu_750_p1;
reg   [7:0] trunc_ln100_reg_984;
wire    ap_CS_fsm_state34;
wire   [9:0] i_5_fu_760_p2;
reg   [9:0] i_5_reg_992;
reg   [3:0] key_buffer_address0;
reg    key_buffer_ce0;
reg    key_buffer_we0;
wire   [31:0] key_buffer_d0;
wire   [31:0] key_buffer_q0;
wire    grp_sEncryptBlock_fu_403_ap_start;
wire    grp_sEncryptBlock_fu_403_ap_idle;
wire   [4:0] grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0;
wire    grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0;
wire   [4:0] grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1;
wire    grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1;
wire   [9:0] grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0;
wire    grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0;
wire   [9:0] grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1;
wire    grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1;
reg   [31:0] grp_sEncryptBlock_fu_403_left_r;
reg   [31:0] grp_sEncryptBlock_fu_403_right_r;
wire   [31:0] grp_sEncryptBlock_fu_403_ap_return_0;
wire   [31:0] grp_sEncryptBlock_fu_403_ap_return_1;
reg   [4:0] i_0_reg_298;
wire    ap_CS_fsm_state3;
reg   [2:0] i1_0_reg_309;
reg   [8:0] j_0_reg_320;
wire    ap_CS_fsm_state6;
reg   [3:0] i2_0_reg_331;
wire    ap_CS_fsm_state19;
reg   [4:0] i3_0_reg_343;
wire    ap_CS_fsm_state30;
reg   [31:0] right_1_015_reg_355;
wire    ap_CS_fsm_state33;
reg   [31:0] left_1_014_reg_367;
reg   [3:0] i4_0_reg_379;
wire   [0:0] icmp_ln70_fu_680_p2;
reg   [9:0] i5_0_reg_391;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln87_fu_714_p2;
reg    grp_sEncryptBlock_fu_403_ap_start_reg;
wire   [0:0] icmp_ln100_fu_754_p2;
wire   [63:0] zext_ln60_1_fu_640_p1;
wire   [63:0] zext_ln61_1_fu_645_p1;
wire   [63:0] zext_ln62_1_fu_650_p1;
wire   [63:0] zext_ln63_1_fu_655_p1;
wire   [63:0] zext_ln64_fu_671_p1;
wire   [63:0] zext_ln71_fu_697_p1;
wire   [63:0] zext_ln72_fu_702_p1;
wire   [63:0] zext_ln90_fu_734_p1;
wire   [63:0] zext_ln91_fu_745_p1;
wire   [63:0] zext_ln103_2_fu_793_p1;
wire   [63:0] zext_ln104_1_fu_814_p1;
wire   [31:0] xor_ln72_fu_707_p2;
wire   [10:0] tmp_5_fu_468_p3;
wire   [31:0] sub_ln48_fu_487_p2;
wire   [29:0] tmp_3_fu_492_p4;
wire   [30:0] zext_ln48_fu_502_p1;
wire   [29:0] tmp_4_fu_512_p4;
wire   [0:0] tmp_1_fu_480_p3;
wire   [30:0] sub_ln48_1_fu_506_p2;
wire   [30:0] zext_ln48_1_fu_521_p1;
wire   [11:0] zext_ln41_fu_545_p1;
wire   [11:0] add_ln41_fu_549_p2;
wire   [30:0] zext_ln56_fu_559_p1;
wire   [6:0] grp_fu_592_p0;
wire   [5:0] or_ln61_fu_597_p2;
wire   [6:0] grp_fu_607_p0;
wire   [5:0] or_ln62_fu_612_p2;
wire   [6:0] grp_fu_621_p0;
wire   [5:0] or_ln63_fu_626_p2;
wire   [6:0] grp_fu_635_p0;
wire   [31:0] grp_fu_592_p2;
wire   [31:0] grp_fu_607_p2;
wire   [31:0] grp_fu_621_p2;
wire   [31:0] grp_fu_635_p2;
wire   [5:0] grp_fu_692_p0;
wire   [30:0] grp_fu_692_p2;
wire   [4:0] shl_ln1_fu_726_p3;
wire   [4:0] or_ln91_fu_739_p2;
wire   [0:0] tmp_2_fu_769_p3;
wire   [8:0] tmp_7_fu_777_p3;
wire   [8:0] trunc_ln103_fu_789_p1;
wire   [8:0] zext_ln103_fu_766_p1;
wire   [8:0] add_ln104_fu_798_p2;
wire   [9:0] zext_ln103_1_fu_785_p1;
wire   [9:0] zext_ln104_fu_804_p1;
wire   [9:0] add_ln104_1_fu_808_p2;
reg    grp_fu_592_ap_start;
wire    grp_fu_592_ap_done;
reg    grp_fu_607_ap_start;
wire    grp_fu_607_ap_done;
reg    grp_fu_621_ap_start;
wire    grp_fu_621_ap_done;
reg    grp_fu_635_ap_start;
wire    grp_fu_635_ap_done;
reg    grp_fu_692_ap_start;
wire    grp_fu_692_ap_done;
reg   [35:0] ap_NS_fsm;
wire   [31:0] grp_fu_592_p00;
wire   [31:0] grp_fu_607_p00;
wire   [31:0] grp_fu_621_p00;
wire   [31:0] grp_fu_635_p00;
wire   [30:0] grp_fu_692_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 grp_sEncryptBlock_fu_403_ap_start_reg = 1'b0;
end

SetKey_initial_pabkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
initial_parray_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(initial_parray_address0),
    .ce0(initial_parray_ce0),
    .q0(initial_parray_q0)
);

SetKey_initial_sbox #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
initial_sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(initial_sbox_address0),
    .ce0(initial_sbox_ce0),
    .q0(initial_sbox_q0)
);

SetKey_key_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
key_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_buffer_address0),
    .ce0(key_buffer_ce0),
    .we0(key_buffer_we0),
    .d0(key_buffer_d0),
    .q0(key_buffer_q0)
);

sEncryptBlock grp_sEncryptBlock_fu_403(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sEncryptBlock_fu_403_ap_start),
    .ap_done(grp_sEncryptBlock_fu_403_ap_done),
    .ap_idle(grp_sEncryptBlock_fu_403_ap_idle),
    .ap_ready(grp_sEncryptBlock_fu_403_ap_ready),
    .Blowfish_pary_s_address0(grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0),
    .Blowfish_pary_s_ce0(grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0),
    .Blowfish_pary_s_q0(Blowfish_pary_s_q0),
    .Blowfish_pary_s_address1(grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1),
    .Blowfish_pary_s_ce1(grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1),
    .Blowfish_pary_s_q1(Blowfish_pary_s_q1),
    .Blowfish_sbox_s_address0(grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0),
    .Blowfish_sbox_s_ce0(grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0),
    .Blowfish_sbox_s_q0(Blowfish_sbox_s_q0),
    .Blowfish_sbox_s_address1(grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1),
    .Blowfish_sbox_s_ce1(grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1),
    .Blowfish_sbox_s_q1(Blowfish_sbox_s_q1),
    .left_r(grp_sEncryptBlock_fu_403_left_r),
    .right_r(grp_sEncryptBlock_fu_403_right_r),
    .ap_return_0(grp_sEncryptBlock_fu_403_ap_return_0),
    .ap_return_1(grp_sEncryptBlock_fu_403_ap_return_1)
);

Blowfish_Encrypt_cud #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Blowfish_Encrypt_cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_592_ap_start),
    .done(grp_fu_592_ap_done),
    .din0(grp_fu_592_p0),
    .din1(key_byte_length),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

Blowfish_Encrypt_cud #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Blowfish_Encrypt_cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_607_ap_start),
    .done(grp_fu_607_ap_done),
    .din0(grp_fu_607_p0),
    .din1(key_byte_length),
    .ce(1'b1),
    .dout(grp_fu_607_p2)
);

Blowfish_Encrypt_cud #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Blowfish_Encrypt_cud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_621_ap_start),
    .done(grp_fu_621_ap_done),
    .din0(grp_fu_621_p0),
    .din1(key_byte_length),
    .ce(1'b1),
    .dout(grp_fu_621_p2)
);

Blowfish_Encrypt_cud #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Blowfish_Encrypt_cud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_635_ap_start),
    .done(grp_fu_635_ap_done),
    .din0(grp_fu_635_p0),
    .din1(key_byte_length),
    .ce(1'b1),
    .dout(grp_fu_635_p2)
);

Blowfish_Encrypt_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
Blowfish_Encrypt_dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_692_ap_start),
    .done(grp_fu_692_ap_done),
    .din0(grp_fu_692_p0),
    .din1(buffer_length_reg_861),
    .ce(1'b1),
    .dout(grp_fu_692_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sEncryptBlock_fu_403_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state34) & (icmp_ln100_fu_754_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state31) & (icmp_ln87_fu_714_p2 == 1'd0)))) begin
            grp_sEncryptBlock_fu_403_ap_start_reg <= 1'b1;
        end else if ((grp_sEncryptBlock_fu_403_ap_ready == 1'b1)) begin
            grp_sEncryptBlock_fu_403_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd1))) begin
        i1_0_reg_309 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln40_fu_533_p2 == 1'd1))) begin
        i1_0_reg_309 <= i_1_reg_851;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i2_0_reg_331 <= i_2_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_456_p2 == 1'd1))) begin
        i2_0_reg_331 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln56_fu_563_p2 == 1'd1))) begin
        i3_0_reg_343 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i3_0_reg_343 <= i_3_reg_961;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln70_fu_680_p2 == 1'd1))) begin
        i4_0_reg_379 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        i4_0_reg_379 <= i_4_reg_979;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln87_fu_714_p2 == 1'd1))) begin
        i5_0_reg_391 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i5_0_reg_391 <= i_5_reg_992;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_298 <= i_reg_833;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_298 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_456_p2 == 1'd0))) begin
        j_0_reg_320 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_320 <= j_reg_870;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        Blowfish_pary_addr_3_reg_971 <= zext_ln72_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_456_p2 == 1'd1))) begin
        buffer_length_reg_861 <= buffer_length_fu_525_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_851 <= i_1_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_888 <= i_2_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_961 <= i_3_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_4_reg_979 <= i_4_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_5_reg_992 <= i_5_fu_760_p2;
        trunc_ln100_reg_984 <= trunc_ln100_fu_750_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_833 <= i_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln56_fu_563_p2 == 1'd0))) begin
        icmp_ln57_reg_893 <= icmp_ln57_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_870 <= j_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_load_1_reg_938 <= key_q1;
        key_load_reg_933 <= key_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        left_1_014_reg_367 <= reg_425;
        right_1_015_reg_355 <= reg_432;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state35) & (grp_sEncryptBlock_fu_403_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (grp_sEncryptBlock_fu_403_ap_done == 1'b1)))) begin
        reg_425 <= grp_sEncryptBlock_fu_403_ap_return_0;
        reg_432 <= grp_sEncryptBlock_fu_403_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln57_fu_575_p2 == 1'd1) & (icmp_ln56_fu_563_p2 == 1'd0))) begin
        shl_ln_reg_897[5 : 2] <= shl_ln_fu_580_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd0))) begin
        zext_ln35_reg_838[4 : 0] <= zext_ln35_fu_451_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_456_p2 == 1'd0))) begin
        zext_ln40_reg_856[10 : 8] <= zext_ln40_fu_476_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln40_fu_533_p2 == 1'd0))) begin
        zext_ln41_1_reg_875[11 : 0] <= zext_ln41_1_fu_554_p1[11 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Blowfish_pary_s_address0 = zext_ln90_fu_734_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Blowfish_pary_s_address0 = Blowfish_pary_addr_3_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        Blowfish_pary_s_address0 = zext_ln72_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Blowfish_pary_s_address0 = zext_ln35_reg_838;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_pary_s_address0 = grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0;
    end else begin
        Blowfish_pary_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Blowfish_pary_s_address1 = zext_ln91_fu_745_p1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_pary_s_address1 = grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1;
    end else begin
        Blowfish_pary_s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state29))) begin
        Blowfish_pary_s_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_pary_s_ce0 = grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0;
    end else begin
        Blowfish_pary_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Blowfish_pary_s_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_pary_s_ce1 = grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1;
    end else begin
        Blowfish_pary_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Blowfish_pary_s_d0 = reg_425;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Blowfish_pary_s_d0 = xor_ln72_fu_707_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Blowfish_pary_s_d0 = initial_parray_q0;
    end else begin
        Blowfish_pary_s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        Blowfish_pary_s_we0 = 1'b1;
    end else begin
        Blowfish_pary_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Blowfish_pary_s_we1 = 1'b1;
    end else begin
        Blowfish_pary_s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Blowfish_sbox_s_address0 = zext_ln103_2_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_address0 = zext_ln41_1_reg_875;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_sbox_s_address0 = grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0;
    end else begin
        Blowfish_sbox_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Blowfish_sbox_s_address1 = zext_ln104_1_fu_814_p1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_sbox_s_address1 = grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1;
    end else begin
        Blowfish_sbox_s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state6))) begin
        Blowfish_sbox_s_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_sbox_s_ce0 = grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0;
    end else begin
        Blowfish_sbox_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Blowfish_sbox_s_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        Blowfish_sbox_s_ce1 = grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1;
    end else begin
        Blowfish_sbox_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Blowfish_sbox_s_d0 = reg_425;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Blowfish_sbox_s_d0 = initial_sbox_q0;
    end else begin
        Blowfish_sbox_s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state6))) begin
        Blowfish_sbox_s_we0 = 1'b1;
    end else begin
        Blowfish_sbox_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Blowfish_sbox_s_we1 = 1'b1;
    end else begin
        Blowfish_sbox_s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state34) & (icmp_ln100_fu_754_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln100_fu_754_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln57_fu_575_p2 == 1'd1) & (icmp_ln56_fu_563_p2 == 1'd0))) begin
        grp_fu_592_ap_start = 1'b1;
    end else begin
        grp_fu_592_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln57_fu_575_p2 == 1'd1) & (icmp_ln56_fu_563_p2 == 1'd0))) begin
        grp_fu_607_ap_start = 1'b1;
    end else begin
        grp_fu_607_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_621_ap_start = 1'b1;
    end else begin
        grp_fu_621_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_635_ap_start = 1'b1;
    end else begin
        grp_fu_635_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln70_fu_680_p2 == 1'd0))) begin
        grp_fu_692_ap_start = 1'b1;
    end else begin
        grp_fu_692_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_sEncryptBlock_fu_403_left_r = left_1_014_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_sEncryptBlock_fu_403_left_r = 32'd0;
    end else begin
        grp_sEncryptBlock_fu_403_left_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_sEncryptBlock_fu_403_right_r = right_1_015_reg_355;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_sEncryptBlock_fu_403_right_r = 32'd0;
    end else begin
        grp_sEncryptBlock_fu_403_right_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        initial_parray_ce0 = 1'b1;
    end else begin
        initial_parray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        initial_sbox_ce0 = 1'b1;
    end else begin
        initial_sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_address0 = zext_ln62_1_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        key_address0 = zext_ln60_1_fu_640_p1;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_address1 = zext_ln63_1_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        key_address1 = zext_ln61_1_fu_645_p1;
    end else begin
        key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        key_buffer_address0 = zext_ln71_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        key_buffer_address0 = zext_ln64_fu_671_p1;
    end else begin
        key_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state29))) begin
        key_buffer_ce0 = 1'b1;
    end else begin
        key_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln57_reg_893 == 1'd1))) begin
        key_buffer_we0 = 1'b1;
    end else begin
        key_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln40_fu_533_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln56_fu_563_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln56_fu_563_p2 == 1'd0) & (icmp_ln57_fu_575_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln70_fu_680_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln87_fu_714_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_sEncryptBlock_fu_403_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln100_fu_754_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (grp_sEncryptBlock_fu_403_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Blowfish_pary_s_d1 = reg_432;

assign Blowfish_sbox_s_d1 = reg_432;

assign add_ln104_1_fu_808_p2 = (zext_ln103_1_fu_785_p1 + zext_ln104_fu_804_p1);

assign add_ln104_fu_798_p2 = (9'd1 + zext_ln103_fu_766_p1);

assign add_ln41_fu_549_p2 = (zext_ln40_reg_856 + zext_ln41_fu_545_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_length_fu_525_p3 = ((tmp_1_fu_480_p3[0:0] === 1'b1) ? sub_ln48_1_fu_506_p2 : zext_ln48_1_fu_521_p1);

assign grp_fu_592_p0 = grp_fu_592_p00;

assign grp_fu_592_p00 = shl_ln_fu_580_p3;

assign grp_fu_607_p0 = grp_fu_607_p00;

assign grp_fu_607_p00 = or_ln61_fu_597_p2;

assign grp_fu_621_p0 = grp_fu_621_p00;

assign grp_fu_621_p00 = or_ln62_fu_612_p2;

assign grp_fu_635_p0 = grp_fu_635_p00;

assign grp_fu_635_p00 = or_ln63_fu_626_p2;

assign grp_fu_692_p0 = grp_fu_692_p00;

assign grp_fu_692_p00 = i3_0_reg_343;

assign grp_sEncryptBlock_fu_403_ap_start = grp_sEncryptBlock_fu_403_ap_start_reg;

assign i_1_fu_462_p2 = (i1_0_reg_309 + 3'd1);

assign i_2_fu_569_p2 = (i2_0_reg_331 + 4'd1);

assign i_3_fu_686_p2 = (i3_0_reg_343 + 5'd1);

assign i_4_fu_720_p2 = (i4_0_reg_379 + 4'd1);

assign i_5_fu_760_p2 = (10'd1 + i5_0_reg_391);

assign i_fu_445_p2 = (i_0_reg_298 + 5'd1);

assign icmp_ln100_fu_754_p2 = ((i5_0_reg_391 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_439_p2 = ((i_0_reg_298 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_456_p2 = ((i1_0_reg_309 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_533_p2 = ((j_0_reg_320 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_563_p2 = ((i2_0_reg_331 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_575_p2 = (($signed(zext_ln56_fu_559_p1) < $signed(buffer_length_reg_861)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_680_p2 = ((i3_0_reg_343 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_714_p2 = ((i4_0_reg_379 == 4'd9) ? 1'b1 : 1'b0);

assign initial_parray_address0 = zext_ln35_fu_451_p1;

assign initial_sbox_address0 = zext_ln41_1_fu_554_p1;

assign j_fu_539_p2 = (j_0_reg_320 + 9'd1);

assign key_buffer_d0 = {{{{key_load_reg_933}, {key_load_1_reg_938}}, {key_q0}}, {key_q1}};

assign or_ln61_fu_597_p2 = (shl_ln_fu_580_p3 | 6'd1);

assign or_ln62_fu_612_p2 = (shl_ln_reg_897 | 6'd2);

assign or_ln63_fu_626_p2 = (shl_ln_reg_897 | 6'd3);

assign or_ln91_fu_739_p2 = (shl_ln1_fu_726_p3 | 5'd1);

assign shl_ln1_fu_726_p3 = {{i4_0_reg_379}, {1'd0}};

assign shl_ln_fu_580_p3 = {{i2_0_reg_331}, {2'd0}};

assign sub_ln48_1_fu_506_p2 = (31'd0 - zext_ln48_fu_502_p1);

assign sub_ln48_fu_487_p2 = (32'd0 - key_byte_length);

assign tmp_1_fu_480_p3 = key_byte_length[32'd31];

assign tmp_2_fu_769_p3 = i5_0_reg_391[32'd8];

assign tmp_3_fu_492_p4 = {{sub_ln48_fu_487_p2[31:2]}};

assign tmp_4_fu_512_p4 = {{key_byte_length[31:2]}};

assign tmp_5_fu_468_p3 = {{i1_0_reg_309}, {8'd0}};

assign tmp_7_fu_777_p3 = {{tmp_2_fu_769_p3}, {8'd0}};

assign trunc_ln100_fu_750_p1 = i5_0_reg_391[7:0];

assign trunc_ln103_fu_789_p1 = i5_0_reg_391[8:0];

assign xor_ln72_fu_707_p2 = (key_buffer_q0 ^ Blowfish_pary_s_q0);

assign zext_ln103_1_fu_785_p1 = tmp_7_fu_777_p3;

assign zext_ln103_2_fu_793_p1 = trunc_ln103_fu_789_p1;

assign zext_ln103_fu_766_p1 = trunc_ln100_reg_984;

assign zext_ln104_1_fu_814_p1 = add_ln104_1_fu_808_p2;

assign zext_ln104_fu_804_p1 = add_ln104_fu_798_p2;

assign zext_ln35_fu_451_p1 = i_0_reg_298;

assign zext_ln40_fu_476_p1 = tmp_5_fu_468_p3;

assign zext_ln41_1_fu_554_p1 = add_ln41_fu_549_p2;

assign zext_ln41_fu_545_p1 = j_0_reg_320;

assign zext_ln48_1_fu_521_p1 = tmp_4_fu_512_p4;

assign zext_ln48_fu_502_p1 = tmp_3_fu_492_p4;

assign zext_ln56_fu_559_p1 = i2_0_reg_331;

assign zext_ln60_1_fu_640_p1 = grp_fu_592_p2;

assign zext_ln61_1_fu_645_p1 = grp_fu_607_p2;

assign zext_ln62_1_fu_650_p1 = grp_fu_621_p2;

assign zext_ln63_1_fu_655_p1 = grp_fu_635_p2;

assign zext_ln64_fu_671_p1 = i2_0_reg_331;

assign zext_ln71_fu_697_p1 = grp_fu_692_p2;

assign zext_ln72_fu_702_p1 = i3_0_reg_343;

assign zext_ln90_fu_734_p1 = shl_ln1_fu_726_p3;

assign zext_ln91_fu_745_p1 = or_ln91_fu_739_p2;

always @ (posedge ap_clk) begin
    zext_ln35_reg_838[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln40_reg_856[7:0] <= 8'b00000000;
    zext_ln40_reg_856[11] <= 1'b0;
    zext_ln41_1_reg_875[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    shl_ln_reg_897[1:0] <= 2'b00;
end

endmodule //SetKey
