-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce1 : OUT STD_LOGIC;
    plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_we0 : OUT STD_LOGIC;
    ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_we1 : OUT STD_LOGIC;
    ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce0 : OUT STD_LOGIC;
    P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal plaintext_load_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal plaintext_load_1_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_load_2_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal plaintext_load_3_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_load_4_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal plaintext_load_5_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_3_fu_346_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal right_3_fu_354_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_722 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln27_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_7_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln62_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal right_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln34_fu_496_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_reg_782 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln4_reg_787 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln7_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln138_fu_633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln138_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_4_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_4_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_318 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_438_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_462_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_470_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln134_fu_570_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_397_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_4_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_3_fu_389_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln28_2_fu_385_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln28_2_fu_407_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln28_1_fu_401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln62_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln62_2_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_5_fu_512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_4_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_3_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln34_2_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal left_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln34_2_fu_528_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln34_1_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_5_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_4_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_3_fu_588_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln33_2_fu_584_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln33_2_fu_606_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln33_1_fu_600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_1_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_318 <= i_reg_722;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_318 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    left_4_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                left_4_reg_298 <= left_7_reg_742;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                left_4_reg_298 <= right_3_fu_354_p5;
            end if; 
        end if;
    end process;

    right_4_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                right_4_reg_308 <= right_fu_490_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                right_4_reg_308 <= left_3_fu_346_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln62_reg_762 <= add_ln62_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_reg_747 <= xor_ln28_1_fu_401_p2(15 downto 8);
                left_7_reg_742 <= grp_fu_329_p2;
                trunc_ln28_reg_737 <= trunc_ln28_fu_381_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_722 <= i_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                plaintext_load_1_reg_654 <= plaintext_q1;
                plaintext_load_reg_649 <= plaintext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                plaintext_load_2_reg_669 <= plaintext_q0;
                plaintext_load_3_reg_674 <= plaintext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                plaintext_load_4_reg_689 <= plaintext_q0;
                plaintext_load_5_reg_694 <= plaintext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln34_reg_782 <= trunc_ln34_fu_496_p1;
                trunc_ln4_reg_787 <= xor_ln34_1_fu_522_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln7_reg_797 <= xor_ln33_1_fu_600_p2(15 downto 8);
                xor_ln138_reg_802 <= xor_ln138_fu_633_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln27_fu_364_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    P_address0_assign_proc : process(ap_CS_fsm_state6, icmp_ln27_fu_364_p2, ap_CS_fsm_state11, zext_ln28_fu_376_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            P_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_364_p2 = ap_const_lv1_1))) then 
            P_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_364_p2 = ap_const_lv1_0))) then 
            P_address0 <= zext_ln28_fu_376_p1(5 - 1 downto 0);
        else 
            P_address0 <= "XXXXX";
        end if; 
    end process;


    P_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln27_fu_364_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_364_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_364_p2 = ap_const_lv1_0)))) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln62_fu_433_p1, tmp_6_fu_462_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_address0 <= tmp_6_fu_462_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_address0 <= zext_ln62_fu_433_p1(10 - 1 downto 0);
        else 
            S_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_fu_438_p3, tmp_7_fu_470_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_address1 <= tmp_7_fu_470_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_address1 <= tmp_fu_438_p3(10 - 1 downto 0);
        else 
            S_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln62_2_fu_484_p2 <= std_logic_vector(unsigned(S_q1) + unsigned(xor_ln62_fu_479_p2));
    add_ln62_fu_456_p2 <= std_logic_vector(unsigned(S_q0) + unsigned(S_q1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_413_p4 <= xor_ln28_2_fu_407_p2(23 downto 16);

    ciphertext_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_d0_assign_proc : process(grp_fu_329_p2, ap_CS_fsm_state10, trunc_ln4_reg_787, ap_CS_fsm_state11, trunc_ln7_reg_797, ap_CS_fsm_state12, ap_CS_fsm_state13, left_fu_516_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_d0 <= trunc_ln7_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_d0 <= grp_fu_329_p2(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_d0 <= trunc_ln4_reg_787;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_d0 <= left_fu_516_p2(31 downto 24);
        else 
            ciphertext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ciphertext_d1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, xor_ln138_reg_802, ap_CS_fsm_state13, xor_ln134_fu_570_p2, xor_ln34_2_fu_528_p2, xor_ln33_2_fu_606_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_d1 <= xor_ln138_reg_802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_d1 <= xor_ln33_2_fu_606_p2(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_d1 <= xor_ln134_fu_570_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_d1 <= xor_ln34_2_fu_528_p2(23 downto 16);
        else 
            ciphertext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ciphertext_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_we0 <= ap_const_logic_1;
        else 
            ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_we1 <= ap_const_logic_1;
        else 
            ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_451_p2 <= (trunc_ln28_reg_737 xor trunc_ln28_1_fu_447_p1);
    grp_fu_329_p2 <= (right_4_reg_308 xor P_q0);
    grp_fu_335_p4 <= grp_fu_329_p2(31 downto 24);
    i_fu_370_p2 <= std_logic_vector(unsigned(i_0_reg_318) + unsigned(ap_const_lv5_1));
    icmp_ln27_fu_364_p2 <= "1" when (i_0_reg_318 = ap_const_lv5_10) else "0";
    left_3_fu_346_p5 <= (((plaintext_load_reg_649 & plaintext_load_1_reg_654) & plaintext_load_2_reg_669) & plaintext_load_3_reg_674);
    left_fu_516_p2 <= (left_4_reg_298 xor P_q0);

    plaintext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            plaintext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            plaintext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            plaintext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            plaintext_address0 <= "XXX";
        end if; 
    end process;


    plaintext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            plaintext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            plaintext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            plaintext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            plaintext_address1 <= "XXX";
        end if; 
    end process;


    plaintext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            plaintext_ce0 <= ap_const_logic_1;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            plaintext_ce1 <= ap_const_logic_1;
        else 
            plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    right_3_fu_354_p5 <= (((plaintext_load_4_reg_689 & plaintext_load_5_reg_694) & plaintext_q0) & plaintext_q1);
    right_fu_490_p2 <= (left_4_reg_298 xor add_ln62_2_fu_484_p2);
    tmp_6_fu_462_p3 <= (ap_const_lv56_2 & c_reg_747);
    tmp_7_fu_470_p3 <= (ap_const_lv56_3 & d_fu_451_p2);
    tmp_fu_438_p3 <= (ap_const_lv56_1 & b_fu_413_p4);
    trunc_ln28_1_fu_447_p1 <= right_4_reg_308(8 - 1 downto 0);
    trunc_ln28_2_fu_385_p1 <= right_4_reg_308(24 - 1 downto 0);
    trunc_ln28_3_fu_389_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln28_4_fu_393_p1 <= right_4_reg_308(16 - 1 downto 0);
    trunc_ln28_5_fu_397_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln28_fu_381_p1 <= P_q0(8 - 1 downto 0);
    trunc_ln33_1_fu_580_p1 <= right_4_reg_308(8 - 1 downto 0);
    trunc_ln33_2_fu_584_p1 <= right_4_reg_308(24 - 1 downto 0);
    trunc_ln33_3_fu_588_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln33_4_fu_592_p1 <= right_4_reg_308(16 - 1 downto 0);
    trunc_ln33_5_fu_596_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln33_fu_576_p1 <= P_q0(8 - 1 downto 0);
    trunc_ln34_1_fu_566_p1 <= left_4_reg_298(8 - 1 downto 0);
    trunc_ln34_2_fu_500_p1 <= left_4_reg_298(24 - 1 downto 0);
    trunc_ln34_3_fu_504_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln34_4_fu_508_p1 <= left_4_reg_298(16 - 1 downto 0);
    trunc_ln34_5_fu_512_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln34_fu_496_p1 <= P_q0(8 - 1 downto 0);
    xor_ln134_fu_570_p2 <= (trunc_ln34_reg_782 xor trunc_ln34_1_fu_566_p1);
    xor_ln138_fu_633_p2 <= (trunc_ln33_fu_576_p1 xor trunc_ln33_1_fu_580_p1);
    xor_ln28_1_fu_401_p2 <= (trunc_ln28_5_fu_397_p1 xor trunc_ln28_4_fu_393_p1);
    xor_ln28_2_fu_407_p2 <= (trunc_ln28_3_fu_389_p1 xor trunc_ln28_2_fu_385_p1);
    xor_ln33_1_fu_600_p2 <= (trunc_ln33_5_fu_596_p1 xor trunc_ln33_4_fu_592_p1);
    xor_ln33_2_fu_606_p2 <= (trunc_ln33_3_fu_588_p1 xor trunc_ln33_2_fu_584_p1);
    xor_ln34_1_fu_522_p2 <= (trunc_ln34_5_fu_512_p1 xor trunc_ln34_4_fu_508_p1);
    xor_ln34_2_fu_528_p2 <= (trunc_ln34_3_fu_504_p1 xor trunc_ln34_2_fu_500_p1);
    xor_ln62_fu_479_p2 <= (add_ln62_reg_762 xor S_q0);
    zext_ln28_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_318),64));
    zext_ln62_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_335_p4),64));
end behav;
