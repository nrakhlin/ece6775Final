-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SetKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce0 : OUT STD_LOGIC;
    Blowfish_pary_s_we0 : OUT STD_LOGIC;
    Blowfish_pary_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Blowfish_pary_s_ce1 : OUT STD_LOGIC;
    Blowfish_pary_s_we1 : OUT STD_LOGIC;
    Blowfish_pary_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_pary_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
    Blowfish_sbox_s_we0 : OUT STD_LOGIC;
    Blowfish_sbox_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
    Blowfish_sbox_s_we1 : OUT STD_LOGIC;
    Blowfish_sbox_s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_byte_length : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SetKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initial_parray_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal initial_parray_ce0 : STD_LOGIC;
    signal initial_parray_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal initial_sbox_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal initial_sbox_ce0 : STD_LOGIC;
    signal initial_sbox_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sEncryptBlock_fu_403_ap_ready : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_833 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln35_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_838 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_462_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_851 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln40_fu_476_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln40_reg_856 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln39_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_length_fu_525_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal buffer_length_reg_861 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_870 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln41_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_reg_875 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln40_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_569_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_888 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln57_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_580_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_897 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal key_load_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal key_load_1_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_3_fu_686_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_961 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal Blowfish_pary_addr_3_reg_971 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_979 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal trunc_ln100_fu_750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln100_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_5_fu_760_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_992 : STD_LOGIC_VECTOR (9 downto 0);
    signal key_buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_buffer_ce0 : STD_LOGIC;
    signal key_buffer_we0 : STD_LOGIC;
    signal key_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sEncryptBlock_fu_403_ap_start : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_ap_idle : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0 : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1 : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0 : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1 : STD_LOGIC;
    signal grp_sEncryptBlock_fu_403_left_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sEncryptBlock_fu_403_right_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sEncryptBlock_fu_403_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sEncryptBlock_fu_403_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_298 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_320 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i2_0_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i3_0_reg_343 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal right_1_015_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal left_1_014_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_0_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln70_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i5_0_reg_391 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln87_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sEncryptBlock_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln100_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln60_1_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_1_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_2_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_1_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln72_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_468_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln48_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_492_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln48_fu_502_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_512_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln48_1_fu_506_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln48_1_fu_521_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln41_fu_545_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_fu_549_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln56_fu_559_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_592_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln61_fu_597_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_607_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln62_fu_612_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_621_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln63_fu_626_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_635_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_692_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln1_fu_726_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln91_fu_739_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_777_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln103_fu_789_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_fu_766_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_fu_798_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_1_fu_785_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_fu_804_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_1_fu_808_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_592_ap_start : STD_LOGIC;
    signal grp_fu_592_ap_done : STD_LOGIC;
    signal grp_fu_607_ap_start : STD_LOGIC;
    signal grp_fu_607_ap_done : STD_LOGIC;
    signal grp_fu_621_ap_start : STD_LOGIC;
    signal grp_fu_621_ap_done : STD_LOGIC;
    signal grp_fu_635_ap_start : STD_LOGIC;
    signal grp_fu_635_ap_done : STD_LOGIC;
    signal grp_fu_692_ap_start : STD_LOGIC;
    signal grp_fu_692_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_592_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_621_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_635_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_692_p00 : STD_LOGIC_VECTOR (30 downto 0);

    component sEncryptBlock IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Blowfish_pary_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce0 : OUT STD_LOGIC;
        Blowfish_pary_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_pary_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Blowfish_pary_s_ce1 : OUT STD_LOGIC;
        Blowfish_pary_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce0 : OUT STD_LOGIC;
        Blowfish_sbox_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Blowfish_sbox_s_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Blowfish_sbox_s_ce1 : OUT STD_LOGIC;
        Blowfish_sbox_s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        left_r : IN STD_LOGIC_VECTOR (31 downto 0);
        right_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Encrypt_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Encrypt_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component SetKey_initial_pabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SetKey_initial_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SetKey_key_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    initial_parray_U : component SetKey_initial_pabkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => initial_parray_address0,
        ce0 => initial_parray_ce0,
        q0 => initial_parray_q0);

    initial_sbox_U : component SetKey_initial_sbox
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => initial_sbox_address0,
        ce0 => initial_sbox_ce0,
        q0 => initial_sbox_q0);

    key_buffer_U : component SetKey_key_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_buffer_address0,
        ce0 => key_buffer_ce0,
        we0 => key_buffer_we0,
        d0 => key_buffer_d0,
        q0 => key_buffer_q0);

    grp_sEncryptBlock_fu_403 : component sEncryptBlock
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sEncryptBlock_fu_403_ap_start,
        ap_done => grp_sEncryptBlock_fu_403_ap_done,
        ap_idle => grp_sEncryptBlock_fu_403_ap_idle,
        ap_ready => grp_sEncryptBlock_fu_403_ap_ready,
        Blowfish_pary_s_address0 => grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0,
        Blowfish_pary_s_ce0 => grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0,
        Blowfish_pary_s_q0 => Blowfish_pary_s_q0,
        Blowfish_pary_s_address1 => grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1,
        Blowfish_pary_s_ce1 => grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1,
        Blowfish_pary_s_q1 => Blowfish_pary_s_q1,
        Blowfish_sbox_s_address0 => grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0,
        Blowfish_sbox_s_ce0 => grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0,
        Blowfish_sbox_s_q0 => Blowfish_sbox_s_q0,
        Blowfish_sbox_s_address1 => grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1,
        Blowfish_sbox_s_ce1 => grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1,
        Blowfish_sbox_s_q1 => Blowfish_sbox_s_q1,
        left_r => grp_sEncryptBlock_fu_403_left_r,
        right_r => grp_sEncryptBlock_fu_403_right_r,
        ap_return_0 => grp_sEncryptBlock_fu_403_ap_return_0,
        ap_return_1 => grp_sEncryptBlock_fu_403_ap_return_1);

    Blowfish_Encrypt_cud_U5 : component Blowfish_Encrypt_cud
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_592_ap_start,
        done => grp_fu_592_ap_done,
        din0 => grp_fu_592_p0,
        din1 => key_byte_length,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p2);

    Blowfish_Encrypt_cud_U6 : component Blowfish_Encrypt_cud
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_607_ap_start,
        done => grp_fu_607_ap_done,
        din0 => grp_fu_607_p0,
        din1 => key_byte_length,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p2);

    Blowfish_Encrypt_cud_U7 : component Blowfish_Encrypt_cud
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_621_ap_start,
        done => grp_fu_621_ap_done,
        din0 => grp_fu_621_p0,
        din1 => key_byte_length,
        ce => ap_const_logic_1,
        dout => grp_fu_621_p2);

    Blowfish_Encrypt_cud_U8 : component Blowfish_Encrypt_cud
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_635_ap_start,
        done => grp_fu_635_ap_done,
        din0 => grp_fu_635_p0,
        din1 => key_byte_length,
        ce => ap_const_logic_1,
        dout => grp_fu_635_p2);

    Blowfish_Encrypt_dEe_U9 : component Blowfish_Encrypt_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_692_ap_start,
        done => grp_fu_692_ap_done,
        din0 => grp_fu_692_p0,
        din1 => buffer_length_reg_861,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sEncryptBlock_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sEncryptBlock_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln100_fu_754_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln87_fu_714_p2 = ap_const_lv1_0)))) then 
                    grp_sEncryptBlock_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sEncryptBlock_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_sEncryptBlock_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_1))) then 
                i1_0_reg_309 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_fu_533_p2 = ap_const_lv1_1))) then 
                i1_0_reg_309 <= i_1_reg_851;
            end if; 
        end if;
    end process;

    i2_0_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i2_0_reg_331 <= i_2_reg_888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_456_p2 = ap_const_lv1_1))) then 
                i2_0_reg_331 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i3_0_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln56_fu_563_p2 = ap_const_lv1_1))) then 
                i3_0_reg_343 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i3_0_reg_343 <= i_3_reg_961;
            end if; 
        end if;
    end process;

    i4_0_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln70_fu_680_p2 = ap_const_lv1_1))) then 
                i4_0_reg_379 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i4_0_reg_379 <= i_4_reg_979;
            end if; 
        end if;
    end process;

    i5_0_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln87_fu_714_p2 = ap_const_lv1_1))) then 
                i5_0_reg_391 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i5_0_reg_391 <= i_5_reg_992;
            end if; 
        end if;
    end process;

    i_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_298 <= i_reg_833;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_298 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_456_p2 = ap_const_lv1_0))) then 
                j_0_reg_320 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_320 <= j_reg_870;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                Blowfish_pary_addr_3_reg_971 <= zext_ln72_fu_702_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_456_p2 = ap_const_lv1_1))) then
                buffer_length_reg_861 <= buffer_length_fu_525_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_851 <= i_1_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_888 <= i_2_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_3_reg_961 <= i_3_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_4_reg_979 <= i_4_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_5_reg_992 <= i_5_fu_760_p2;
                trunc_ln100_reg_984 <= trunc_ln100_fu_750_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_833 <= i_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln56_fu_563_p2 = ap_const_lv1_0))) then
                icmp_ln57_reg_893 <= icmp_ln57_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_870 <= j_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                key_load_1_reg_938 <= key_q1;
                key_load_reg_933 <= key_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                left_1_014_reg_367 <= reg_425;
                right_1_015_reg_355 <= reg_432;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_sEncryptBlock_fu_403_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_sEncryptBlock_fu_403_ap_done = ap_const_logic_1)))) then
                reg_425 <= grp_sEncryptBlock_fu_403_ap_return_0;
                reg_432 <= grp_sEncryptBlock_fu_403_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln57_fu_575_p2 = ap_const_lv1_1) and (icmp_ln56_fu_563_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_897(5 downto 2) <= shl_ln_fu_580_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_0))) then
                    zext_ln35_reg_838(4 downto 0) <= zext_ln35_fu_451_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_456_p2 = ap_const_lv1_0))) then
                    zext_ln40_reg_856(10 downto 8) <= zext_ln40_fu_476_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_fu_533_p2 = ap_const_lv1_0))) then
                    zext_ln41_1_reg_875(11 downto 0) <= zext_ln41_1_fu_554_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_838(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln40_reg_856(7 downto 0) <= "00000000";
    zext_ln40_reg_856(11) <= '0';
    zext_ln41_1_reg_875(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    shl_ln_reg_897(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state32, grp_sEncryptBlock_fu_403_ap_done, ap_CS_fsm_state35, ap_CS_fsm_state2, icmp_ln34_fu_439_p2, ap_CS_fsm_state4, icmp_ln39_fu_456_p2, ap_CS_fsm_state5, icmp_ln40_fu_533_p2, ap_CS_fsm_state7, icmp_ln57_fu_575_p2, icmp_ln56_fu_563_p2, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state34, icmp_ln70_fu_680_p2, icmp_ln87_fu_714_p2, icmp_ln100_fu_754_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln56_fu_563_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln56_fu_563_p2 = ap_const_lv1_0) and (icmp_ln57_fu_575_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln70_fu_680_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln87_fu_714_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_sEncryptBlock_fu_403_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln100_fu_754_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_sEncryptBlock_fu_403_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Blowfish_pary_s_address0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, zext_ln35_reg_838, ap_CS_fsm_state29, Blowfish_pary_addr_3_reg_971, grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0, ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state33, zext_ln72_fu_702_p1, zext_ln90_fu_734_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Blowfish_pary_s_address0 <= zext_ln90_fu_734_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Blowfish_pary_s_address0 <= Blowfish_pary_addr_3_reg_971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Blowfish_pary_s_address0 <= zext_ln72_fu_702_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Blowfish_pary_s_address0 <= zext_ln35_reg_838(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_pary_s_address0 <= grp_sEncryptBlock_fu_403_Blowfish_pary_s_address0;
        else 
            Blowfish_pary_s_address0 <= "XXXXX";
        end if; 
    end process;


    Blowfish_pary_s_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1, ap_CS_fsm_state33, zext_ln91_fu_745_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Blowfish_pary_s_address1 <= zext_ln91_fu_745_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_pary_s_address1 <= grp_sEncryptBlock_fu_403_Blowfish_pary_s_address1;
        else 
            Blowfish_pary_s_address1 <= "XXXXX";
        end if; 
    end process;


    Blowfish_pary_s_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state29, grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0, ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            Blowfish_pary_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_pary_s_ce0 <= grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce0;
        else 
            Blowfish_pary_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_pary_s_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Blowfish_pary_s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_pary_s_ce1 <= grp_sEncryptBlock_fu_403_Blowfish_pary_s_ce1;
        else 
            Blowfish_pary_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_pary_s_d0_assign_proc : process(initial_parray_q0, reg_425, ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state33, xor_ln72_fu_707_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Blowfish_pary_s_d0 <= reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Blowfish_pary_s_d0 <= xor_ln72_fu_707_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Blowfish_pary_s_d0 <= initial_parray_q0;
        else 
            Blowfish_pary_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Blowfish_pary_s_d1 <= reg_432;

    Blowfish_pary_s_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Blowfish_pary_s_we0 <= ap_const_logic_1;
        else 
            Blowfish_pary_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_pary_s_we1_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Blowfish_pary_s_we1 <= ap_const_logic_1;
        else 
            Blowfish_pary_s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_address0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, zext_ln41_1_reg_875, grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0, ap_CS_fsm_state6, ap_CS_fsm_state36, zext_ln103_2_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Blowfish_sbox_s_address0 <= zext_ln103_2_fu_793_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_address0 <= zext_ln41_1_reg_875(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_sbox_s_address0 <= grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address0;
        else 
            Blowfish_sbox_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1, ap_CS_fsm_state36, zext_ln104_1_fu_814_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Blowfish_sbox_s_address1 <= zext_ln104_1_fu_814_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_sbox_s_address1 <= grp_sEncryptBlock_fu_403_Blowfish_sbox_s_address1;
        else 
            Blowfish_sbox_s_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Blowfish_sbox_s_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0, ap_CS_fsm_state6, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Blowfish_sbox_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_sbox_s_ce0 <= grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce0;
        else 
            Blowfish_sbox_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Blowfish_sbox_s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            Blowfish_sbox_s_ce1 <= grp_sEncryptBlock_fu_403_Blowfish_sbox_s_ce1;
        else 
            Blowfish_sbox_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_d0_assign_proc : process(initial_sbox_q0, reg_425, ap_CS_fsm_state6, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Blowfish_sbox_s_d0 <= reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Blowfish_sbox_s_d0 <= initial_sbox_q0;
        else 
            Blowfish_sbox_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Blowfish_sbox_s_d1 <= reg_432;

    Blowfish_sbox_s_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Blowfish_sbox_s_we0 <= ap_const_logic_1;
        else 
            Blowfish_sbox_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Blowfish_sbox_s_we1_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Blowfish_sbox_s_we1 <= ap_const_logic_1;
        else 
            Blowfish_sbox_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln104_1_fu_808_p2 <= std_logic_vector(unsigned(zext_ln103_1_fu_785_p1) + unsigned(zext_ln104_fu_804_p1));
    add_ln104_fu_798_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln103_fu_766_p1));
    add_ln41_fu_549_p2 <= std_logic_vector(unsigned(zext_ln40_reg_856) + unsigned(zext_ln41_fu_545_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34, icmp_ln100_fu_754_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln100_fu_754_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, icmp_ln100_fu_754_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln100_fu_754_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_length_fu_525_p3 <= 
        sub_ln48_1_fu_506_p2 when (tmp_1_fu_480_p3(0) = '1') else 
        zext_ln48_1_fu_521_p1;

    grp_fu_592_ap_start_assign_proc : process(ap_CS_fsm_state7, icmp_ln57_fu_575_p2, icmp_ln56_fu_563_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln57_fu_575_p2 = ap_const_lv1_1) and (icmp_ln56_fu_563_p2 = ap_const_lv1_0))) then 
            grp_fu_592_ap_start <= ap_const_logic_1;
        else 
            grp_fu_592_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_592_p0 <= grp_fu_592_p00(7 - 1 downto 0);
    grp_fu_592_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_580_p3),32));

    grp_fu_607_ap_start_assign_proc : process(ap_CS_fsm_state7, icmp_ln57_fu_575_p2, icmp_ln56_fu_563_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln57_fu_575_p2 = ap_const_lv1_1) and (icmp_ln56_fu_563_p2 = ap_const_lv1_0))) then 
            grp_fu_607_ap_start <= ap_const_logic_1;
        else 
            grp_fu_607_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_607_p0 <= grp_fu_607_p00(7 - 1 downto 0);
    grp_fu_607_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln61_fu_597_p2),32));

    grp_fu_621_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_621_ap_start <= ap_const_logic_1;
        else 
            grp_fu_621_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_621_p0 <= grp_fu_621_p00(7 - 1 downto 0);
    grp_fu_621_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln62_fu_612_p2),32));

    grp_fu_635_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_635_ap_start <= ap_const_logic_1;
        else 
            grp_fu_635_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_635_p0 <= grp_fu_635_p00(7 - 1 downto 0);
    grp_fu_635_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln63_fu_626_p2),32));

    grp_fu_692_ap_start_assign_proc : process(ap_CS_fsm_state20, icmp_ln70_fu_680_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln70_fu_680_p2 = ap_const_lv1_0))) then 
            grp_fu_692_ap_start <= ap_const_logic_1;
        else 
            grp_fu_692_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_692_p0 <= grp_fu_692_p00(6 - 1 downto 0);
    grp_fu_692_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_343),31));
    grp_sEncryptBlock_fu_403_ap_start <= grp_sEncryptBlock_fu_403_ap_start_reg;

    grp_sEncryptBlock_fu_403_left_r_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, left_1_014_reg_367)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_sEncryptBlock_fu_403_left_r <= left_1_014_reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_sEncryptBlock_fu_403_left_r <= ap_const_lv32_0;
        else 
            grp_sEncryptBlock_fu_403_left_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sEncryptBlock_fu_403_right_r_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state35, right_1_015_reg_355)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_sEncryptBlock_fu_403_right_r <= right_1_015_reg_355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_sEncryptBlock_fu_403_right_r <= ap_const_lv32_0;
        else 
            grp_sEncryptBlock_fu_403_right_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_462_p2 <= std_logic_vector(unsigned(i1_0_reg_309) + unsigned(ap_const_lv3_1));
    i_2_fu_569_p2 <= std_logic_vector(unsigned(i2_0_reg_331) + unsigned(ap_const_lv4_1));
    i_3_fu_686_p2 <= std_logic_vector(unsigned(i3_0_reg_343) + unsigned(ap_const_lv5_1));
    i_4_fu_720_p2 <= std_logic_vector(unsigned(i4_0_reg_379) + unsigned(ap_const_lv4_1));
    i_5_fu_760_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i5_0_reg_391));
    i_fu_445_p2 <= std_logic_vector(unsigned(i_0_reg_298) + unsigned(ap_const_lv5_1));
    icmp_ln100_fu_754_p2 <= "1" when (i5_0_reg_391 = ap_const_lv10_200) else "0";
    icmp_ln34_fu_439_p2 <= "1" when (i_0_reg_298 = ap_const_lv5_12) else "0";
    icmp_ln39_fu_456_p2 <= "1" when (i1_0_reg_309 = ap_const_lv3_4) else "0";
    icmp_ln40_fu_533_p2 <= "1" when (j_0_reg_320 = ap_const_lv9_100) else "0";
    icmp_ln56_fu_563_p2 <= "1" when (i2_0_reg_331 = ap_const_lv4_E) else "0";
    icmp_ln57_fu_575_p2 <= "1" when (signed(zext_ln56_fu_559_p1) < signed(buffer_length_reg_861)) else "0";
    icmp_ln70_fu_680_p2 <= "1" when (i3_0_reg_343 = ap_const_lv5_12) else "0";
    icmp_ln87_fu_714_p2 <= "1" when (i4_0_reg_379 = ap_const_lv4_9) else "0";
    initial_parray_address0 <= zext_ln35_fu_451_p1(5 - 1 downto 0);

    initial_parray_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            initial_parray_ce0 <= ap_const_logic_1;
        else 
            initial_parray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    initial_sbox_address0 <= zext_ln41_1_fu_554_p1(10 - 1 downto 0);

    initial_sbox_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            initial_sbox_ce0 <= ap_const_logic_1;
        else 
            initial_sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_539_p2 <= std_logic_vector(unsigned(j_0_reg_320) + unsigned(ap_const_lv9_1));

    key_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln60_1_fu_640_p1, zext_ln62_1_fu_650_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_address0 <= zext_ln62_1_fu_650_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            key_address0 <= zext_ln60_1_fu_640_p1(6 - 1 downto 0);
        else 
            key_address0 <= "XXXXXX";
        end if; 
    end process;


    key_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln61_1_fu_645_p1, zext_ln63_1_fu_655_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_address1 <= zext_ln63_1_fu_655_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            key_address1 <= zext_ln61_1_fu_645_p1(6 - 1 downto 0);
        else 
            key_address1 <= "XXXXXX";
        end if; 
    end process;


    key_buffer_address0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state19, zext_ln64_fu_671_p1, zext_ln71_fu_697_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            key_buffer_address0 <= zext_ln71_fu_697_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            key_buffer_address0 <= zext_ln64_fu_671_p1(4 - 1 downto 0);
        else 
            key_buffer_address0 <= "XXXX";
        end if; 
    end process;


    key_buffer_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            key_buffer_ce0 <= ap_const_logic_1;
        else 
            key_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    key_buffer_d0 <= (((key_load_reg_933 & key_load_1_reg_938) & key_q0) & key_q1);

    key_buffer_we0_assign_proc : process(icmp_ln57_reg_893, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln57_reg_893 = ap_const_lv1_1))) then 
            key_buffer_we0 <= ap_const_logic_1;
        else 
            key_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            key_ce1 <= ap_const_logic_1;
        else 
            key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln61_fu_597_p2 <= (shl_ln_fu_580_p3 or ap_const_lv6_1);
    or_ln62_fu_612_p2 <= (shl_ln_reg_897 or ap_const_lv6_2);
    or_ln63_fu_626_p2 <= (shl_ln_reg_897 or ap_const_lv6_3);
    or_ln91_fu_739_p2 <= (shl_ln1_fu_726_p3 or ap_const_lv5_1);
    shl_ln1_fu_726_p3 <= (i4_0_reg_379 & ap_const_lv1_0);
    shl_ln_fu_580_p3 <= (i2_0_reg_331 & ap_const_lv2_0);
    sub_ln48_1_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln48_fu_502_p1));
    sub_ln48_fu_487_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(key_byte_length));
    tmp_1_fu_480_p3 <= key_byte_length(31 downto 31);
    tmp_2_fu_769_p3 <= i5_0_reg_391(8 downto 8);
    tmp_3_fu_492_p4 <= sub_ln48_fu_487_p2(31 downto 2);
    tmp_4_fu_512_p4 <= key_byte_length(31 downto 2);
    tmp_5_fu_468_p3 <= (i1_0_reg_309 & ap_const_lv8_0);
    tmp_7_fu_777_p3 <= (tmp_2_fu_769_p3 & ap_const_lv8_0);
    trunc_ln100_fu_750_p1 <= i5_0_reg_391(8 - 1 downto 0);
    trunc_ln103_fu_789_p1 <= i5_0_reg_391(9 - 1 downto 0);
    xor_ln72_fu_707_p2 <= (key_buffer_q0 xor Blowfish_pary_s_q0);
    zext_ln103_1_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_777_p3),10));
    zext_ln103_2_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln103_fu_789_p1),64));
    zext_ln103_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln100_reg_984),9));
    zext_ln104_1_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_808_p2),64));
    zext_ln104_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_798_p2),10));
    zext_ln35_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_298),64));
    zext_ln40_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_468_p3),12));
    zext_ln41_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_549_p2),64));
    zext_ln41_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_320),12));
    zext_ln48_1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_512_p4),31));
    zext_ln48_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_492_p4),31));
    zext_ln56_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_331),31));
    zext_ln60_1_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_592_p2),64));
    zext_ln61_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_607_p2),64));
    zext_ln62_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_621_p2),64));
    zext_ln63_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_635_p2),64));
    zext_ln64_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_331),64));
    zext_ln71_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_692_p2),64));
    zext_ln72_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_343),64));
    zext_ln90_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_726_p3),64));
    zext_ln91_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_fu_739_p2),64));
end behav;
