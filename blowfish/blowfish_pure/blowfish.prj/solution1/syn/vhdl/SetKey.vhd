-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SetKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_size : IN STD_LOGIC_VECTOR (63 downto 0);
    P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce0 : OUT STD_LOGIC;
    P_we0 : OUT STD_LOGIC;
    P_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    P_ce1 : OUT STD_LOGIC;
    P_we1 : OUT STD_LOGIC;
    P_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_we0 : OUT STD_LOGIC;
    S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_we1 : OUT STD_LOGIC;
    S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SetKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (82 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (82 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (82 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (82 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (82 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (82 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (82 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (82 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (82 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (82 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (82 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal initial_parray_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal initial_parray_ce0 : STD_LOGIC;
    signal initial_parray_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal initial_sbox_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal initial_sbox_ce0 : STD_LOGIC;
    signal initial_sbox_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_Encrypt_SetKey_fu_330_ap_ready : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln69_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_reg_646 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_387_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln74_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln74_reg_664 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln73_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_679 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln75_1_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_684 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln74_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_442_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_697 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_1_fu_454_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_705 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln84_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal P_addr_3_reg_720 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_fu_536_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_4_fu_548_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_755 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal zext_ln102_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln102_reg_760 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln101_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln104_fu_586_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_reg_778 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln102_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln102_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_788 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Encrypt_SetKey_fu_330_ap_start : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_ap_idle : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_left_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Encrypt_SetKey_fu_330_right_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Encrypt_SetKey_fu_330_P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Encrypt_SetKey_fu_330_P_ce0 : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_P_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Encrypt_SetKey_fu_330_P_ce1 : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Encrypt_SetKey_fu_330_S_ce0 : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_S_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Encrypt_SetKey_fu_330_S_ce1 : STD_LOGIC;
    signal grp_Encrypt_SetKey_fu_330_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Encrypt_SetKey_fu_330_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_203 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_214 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_225 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i2_0_reg_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal data_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln82_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j3_0_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal right_0_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_0_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_0_reg_295 : STD_LOGIC_VECTOR (4 downto 0);
    signal i5_0_reg_307 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal icmp_ln94_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j6_0_reg_319 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_Encrypt_SetKey_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln88_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_1_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal keyIndex_1_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln88_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_393_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln75_fu_422_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln75_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_470_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln85_fu_480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln97_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_554_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln104_fu_582_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln105_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_620_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_470_ap_start : STD_LOGIC;
    signal grp_fu_470_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (82 downto 0);

    component Encrypt_SetKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_read : IN STD_LOGIC_VECTOR (31 downto 0);
        right_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        P_ce0 : OUT STD_LOGIC;
        P_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        P_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        P_ce1 : OUT STD_LOGIC;
        P_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SetKey_Encrypt_urcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SetKey_initial_pabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SetKey_initial_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    initial_parray_U : component SetKey_initial_pabkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => initial_parray_address0,
        ce0 => initial_parray_ce0,
        q0 => initial_parray_q0);

    initial_sbox_U : component SetKey_initial_sbox
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => initial_sbox_address0,
        ce0 => initial_sbox_ce0,
        q0 => initial_sbox_q0);

    grp_Encrypt_SetKey_fu_330 : component Encrypt_SetKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Encrypt_SetKey_fu_330_ap_start,
        ap_done => grp_Encrypt_SetKey_fu_330_ap_done,
        ap_idle => grp_Encrypt_SetKey_fu_330_ap_idle,
        ap_ready => grp_Encrypt_SetKey_fu_330_ap_ready,
        left_read => grp_Encrypt_SetKey_fu_330_left_read,
        right_read => grp_Encrypt_SetKey_fu_330_right_read,
        P_address0 => grp_Encrypt_SetKey_fu_330_P_address0,
        P_ce0 => grp_Encrypt_SetKey_fu_330_P_ce0,
        P_q0 => P_q0,
        P_address1 => grp_Encrypt_SetKey_fu_330_P_address1,
        P_ce1 => grp_Encrypt_SetKey_fu_330_P_ce1,
        P_q1 => P_q1,
        S_address0 => grp_Encrypt_SetKey_fu_330_S_address0,
        S_ce0 => grp_Encrypt_SetKey_fu_330_S_ce0,
        S_q0 => S_q0,
        S_address1 => grp_Encrypt_SetKey_fu_330_S_address1,
        S_ce1 => grp_Encrypt_SetKey_fu_330_S_ce1,
        S_q1 => S_q1,
        ap_return_0 => grp_Encrypt_SetKey_fu_330_ap_return_0,
        ap_return_1 => grp_Encrypt_SetKey_fu_330_ap_return_1);

    SetKey_Encrypt_urcud_U5 : component SetKey_Encrypt_urcud
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_470_ap_start,
        done => grp_fu_470_ap_done,
        din0 => grp_fu_470_p0,
        din1 => key_size,
        ce => ap_const_logic_1,
        dout => grp_fu_470_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Encrypt_SetKey_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Encrypt_SetKey_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln94_fu_504_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (tmp_fu_566_p3 = ap_const_lv1_0)))) then 
                    grp_Encrypt_SetKey_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Encrypt_SetKey_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_Encrypt_SetKey_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln82_fu_436_p2 = ap_const_lv1_0))) then 
                data_0_reg_248 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                data_0_reg_248 <= data_reg_725;
            end if; 
        end if;
    end process;

    i1_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_364_p2 = ap_const_lv1_1))) then 
                i1_0_reg_214 <= ap_const_lv3_0;
            elsif (((icmp_ln74_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i1_0_reg_214 <= i_1_reg_659;
            end if; 
        end if;
    end process;

    i2_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_381_p2 = ap_const_lv1_1))) then 
                i2_0_reg_236 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                i2_0_reg_236 <= i_3_reg_697;
            end if; 
        end if;
    end process;

    i4_0_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i4_0_reg_295 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i4_0_reg_295 <= i_2_fu_536_p2;
            end if; 
        end if;
    end process;

    i5_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_566_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                i5_0_reg_307 <= i_4_reg_755;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln94_fu_504_p2 = ap_const_lv1_0))) then 
                i5_0_reg_307 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_203 <= i_reg_641;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_203 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j3_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln82_fu_436_p2 = ap_const_lv1_0))) then 
                j3_0_reg_260 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                j3_0_reg_260 <= j_1_reg_705;
            end if; 
        end if;
    end process;

    j6_0_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                j6_0_reg_319 <= j_2_reg_788;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln101_fu_542_p2 = ap_const_lv1_0))) then 
                j6_0_reg_319 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_381_p2 = ap_const_lv1_0))) then 
                j_0_reg_225 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_225 <= j_reg_679;
            end if; 
        end if;
    end process;

    keyIndex_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                keyIndex_1_fu_70 <= grp_fu_470_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_381_p2 = ap_const_lv1_1))) then 
                keyIndex_1_fu_70 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    left_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                left_0_reg_283 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                left_0_reg_283 <= reg_350;
            end if; 
        end if;
    end process;

    left_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1))) then 
                left_1_fu_74 <= grp_Encrypt_SetKey_fu_330_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln94_fu_504_p2 = ap_const_lv1_0))) then 
                left_1_fu_74 <= left_0_reg_283;
            end if; 
        end if;
    end process;

    right_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                right_0_reg_271 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                right_0_reg_271 <= reg_357;
            end if; 
        end if;
    end process;

    right_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1))) then 
                right_1_fu_78 <= grp_Encrypt_SetKey_fu_330_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln94_fu_504_p2 = ap_const_lv1_0))) then 
                right_1_fu_78 <= right_0_reg_271;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                P_addr_3_reg_720 <= zext_ln88_fu_475_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (tmp_fu_566_p3 = ap_const_lv1_0))) then
                add_ln104_reg_778 <= add_ln104_fu_586_p2;
                j_2_reg_788 <= j_2_fu_595_p2;
                trunc_ln102_reg_783 <= trunc_ln102_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                data_reg_725 <= data_fu_484_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_659 <= i_1_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_3_reg_697 <= i_3_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                i_4_reg_755 <= i_4_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_641 <= i_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_1_reg_705 <= j_1_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_679 <= j_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1)))) then
                reg_350 <= grp_Encrypt_SetKey_fu_330_ap_return_0;
                reg_357 <= grp_Encrypt_SetKey_fu_330_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln101_fu_542_p2 = ap_const_lv1_0))) then
                    zext_ln102_reg_760(10 downto 8) <= zext_ln102_fu_562_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_364_p2 = ap_const_lv1_0))) then
                    zext_ln69_reg_646(4 downto 0) <= zext_ln69_fu_376_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_381_p2 = ap_const_lv1_0))) then
                    zext_ln74_reg_664(10 downto 8) <= zext_ln74_fu_401_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln74_fu_410_p2 = ap_const_lv1_0))) then
                    zext_ln75_1_reg_684(11 downto 0) <= zext_ln75_1_fu_431_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln69_reg_646(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln74_reg_664(7 downto 0) <= "00000000";
    zext_ln74_reg_664(11) <= '0';
    zext_ln75_1_reg_684(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_760(7 downto 0) <= "00000000";
    zext_ln102_reg_760(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state78, grp_Encrypt_SetKey_fu_330_ap_done, ap_CS_fsm_state82, ap_CS_fsm_state2, icmp_ln68_fu_364_p2, ap_CS_fsm_state4, icmp_ln73_fu_381_p2, ap_CS_fsm_state5, icmp_ln74_fu_410_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln84_fu_448_p2, ap_CS_fsm_state80, icmp_ln101_fu_542_p2, ap_CS_fsm_state81, tmp_fu_566_p3, icmp_ln82_fu_436_p2, ap_CS_fsm_state77, icmp_ln94_fu_504_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln68_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_381_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln74_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln82_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln84_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln94_fu_504_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state80 => 
                if (((icmp_ln101_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                if (((tmp_fu_566_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_Encrypt_SetKey_fu_330_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    P_address0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, zext_ln69_reg_646, ap_CS_fsm_state8, P_addr_3_reg_720, ap_CS_fsm_state79, grp_Encrypt_SetKey_fu_330_P_address0, ap_CS_fsm_state3, ap_CS_fsm_state76, zext_ln88_fu_475_p1, zext_ln96_fu_520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            P_address0 <= zext_ln96_fu_520_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            P_address0 <= P_addr_3_reg_720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            P_address0 <= zext_ln88_fu_475_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            P_address0 <= zext_ln69_reg_646(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            P_address0 <= grp_Encrypt_SetKey_fu_330_P_address0;
        else 
            P_address0 <= "XXXXX";
        end if; 
    end process;


    P_address1_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, ap_CS_fsm_state79, grp_Encrypt_SetKey_fu_330_P_address1, zext_ln97_fu_531_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            P_address1 <= zext_ln97_fu_531_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            P_address1 <= grp_Encrypt_SetKey_fu_330_P_address1;
        else 
            P_address1 <= "XXXXX";
        end if; 
    end process;


    P_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, ap_CS_fsm_state8, ap_CS_fsm_state79, grp_Encrypt_SetKey_fu_330_P_ce0, ap_CS_fsm_state3, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            P_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            P_ce0 <= grp_Encrypt_SetKey_fu_330_P_ce0;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P_ce1_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, ap_CS_fsm_state79, grp_Encrypt_SetKey_fu_330_P_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            P_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            P_ce1 <= grp_Encrypt_SetKey_fu_330_P_ce1;
        else 
            P_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    P_d0_assign_proc : process(initial_parray_q0, reg_350, ap_CS_fsm_state79, ap_CS_fsm_state3, ap_CS_fsm_state76, xor_ln88_fu_497_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            P_d0 <= reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            P_d0 <= xor_ln88_fu_497_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            P_d0 <= initial_parray_q0;
        else 
            P_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    P_d1 <= reg_357;

    P_we0_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state3, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            P_we0 <= ap_const_logic_1;
        else 
            P_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P_we1_assign_proc : process(ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            P_we1 <= ap_const_logic_1;
        else 
            P_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, zext_ln75_1_reg_684, grp_Encrypt_SetKey_fu_330_S_address0, ap_CS_fsm_state6, ap_CS_fsm_state83, zext_ln104_1_fu_611_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            S_address0 <= zext_ln104_1_fu_611_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_address0 <= zext_ln75_1_reg_684(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            S_address0 <= grp_Encrypt_SetKey_fu_330_S_address0;
        else 
            S_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, grp_Encrypt_SetKey_fu_330_S_address1, ap_CS_fsm_state83, zext_ln105_fu_628_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            S_address1 <= zext_ln105_fu_628_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            S_address1 <= grp_Encrypt_SetKey_fu_330_S_address1;
        else 
            S_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, grp_Encrypt_SetKey_fu_330_S_ce0, ap_CS_fsm_state6, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            S_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            S_ce0 <= grp_Encrypt_SetKey_fu_330_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, grp_Encrypt_SetKey_fu_330_S_ce1, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            S_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            S_ce1 <= grp_Encrypt_SetKey_fu_330_S_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_d0_assign_proc : process(initial_sbox_q0, reg_350, ap_CS_fsm_state6, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            S_d0 <= reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_d0 <= initial_sbox_q0;
        else 
            S_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    S_d1 <= reg_357;

    S_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            S_we0 <= ap_const_logic_1;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_we1_assign_proc : process(ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            S_we1 <= ap_const_logic_1;
        else 
            S_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln104_fu_586_p2 <= std_logic_vector(unsigned(zext_ln104_fu_582_p1) + unsigned(zext_ln102_reg_760));
    add_ln75_fu_426_p2 <= std_logic_vector(unsigned(zext_ln74_reg_664) + unsigned(zext_ln75_fu_422_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state80, icmp_ln101_fu_542_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln101_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state80, icmp_ln101_fu_542_p2)
    begin
        if (((icmp_ln101_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_fu_484_p3 <= (trunc_ln85_fu_480_p1 & key_q0);
    grp_Encrypt_SetKey_fu_330_ap_start <= grp_Encrypt_SetKey_fu_330_ap_start_reg;

    grp_Encrypt_SetKey_fu_330_left_read_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, left_0_reg_283, left_1_fu_74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_Encrypt_SetKey_fu_330_left_read <= left_1_fu_74;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_Encrypt_SetKey_fu_330_left_read <= left_0_reg_283;
        else 
            grp_Encrypt_SetKey_fu_330_left_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Encrypt_SetKey_fu_330_right_read_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, right_0_reg_271, right_1_fu_78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_Encrypt_SetKey_fu_330_right_read <= right_1_fu_78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_Encrypt_SetKey_fu_330_right_read <= right_0_reg_271;
        else 
            grp_Encrypt_SetKey_fu_330_right_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_470_ap_start_assign_proc : process(ap_CS_fsm_state8, icmp_ln84_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln84_fu_448_p2 = ap_const_lv1_0))) then 
            grp_fu_470_ap_start <= ap_const_logic_1;
        else 
            grp_fu_470_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_470_p0 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(keyIndex_1_fu_70));
    i_1_fu_387_p2 <= std_logic_vector(unsigned(i1_0_reg_214) + unsigned(ap_const_lv3_1));
    i_2_fu_536_p2 <= std_logic_vector(unsigned(i4_0_reg_295) + unsigned(ap_const_lv5_2));
    i_3_fu_442_p2 <= std_logic_vector(unsigned(i2_0_reg_236) + unsigned(ap_const_lv5_1));
    i_4_fu_548_p2 <= std_logic_vector(unsigned(i5_0_reg_307) + unsigned(ap_const_lv3_1));
    i_fu_370_p2 <= std_logic_vector(unsigned(i_0_reg_203) + unsigned(ap_const_lv5_1));
    icmp_ln101_fu_542_p2 <= "1" when (i5_0_reg_307 = ap_const_lv3_4) else "0";
    icmp_ln68_fu_364_p2 <= "1" when (i_0_reg_203 = ap_const_lv5_12) else "0";
    icmp_ln73_fu_381_p2 <= "1" when (i1_0_reg_214 = ap_const_lv3_4) else "0";
    icmp_ln74_fu_410_p2 <= "1" when (j_0_reg_225 = ap_const_lv9_100) else "0";
    icmp_ln82_fu_436_p2 <= "1" when (i2_0_reg_236 = ap_const_lv5_12) else "0";
    icmp_ln84_fu_448_p2 <= "1" when (j3_0_reg_260 = ap_const_lv3_4) else "0";
    icmp_ln94_fu_504_p2 <= "1" when (unsigned(i4_0_reg_295) < unsigned(ap_const_lv5_12)) else "0";
    initial_parray_address0 <= zext_ln69_fu_376_p1(5 - 1 downto 0);

    initial_parray_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            initial_parray_ce0 <= ap_const_logic_1;
        else 
            initial_parray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    initial_sbox_address0 <= zext_ln75_1_fu_431_p1(10 - 1 downto 0);

    initial_sbox_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            initial_sbox_ce0 <= ap_const_logic_1;
        else 
            initial_sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_454_p2 <= std_logic_vector(unsigned(j3_0_reg_260) + unsigned(ap_const_lv3_1));
    j_2_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j6_0_reg_319));
    j_fu_416_p2 <= std_logic_vector(unsigned(j_0_reg_225) + unsigned(ap_const_lv9_1));
    key_address0 <= keyIndex_1_fu_70(6 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln105_fu_615_p2 <= (trunc_ln102_reg_783 or ap_const_lv8_1);
    or_ln97_fu_525_p2 <= (i4_0_reg_295 or ap_const_lv5_1);
    tmp_1_fu_393_p3 <= (i1_0_reg_214 & ap_const_lv8_0);
    tmp_2_fu_554_p3 <= (i5_0_reg_307 & ap_const_lv8_0);
    tmp_3_fu_620_p3 <= (i5_0_reg_307 & or_ln105_fu_615_p2);
    tmp_fu_566_p3 <= j6_0_reg_319(8 downto 8);
    trunc_ln102_fu_591_p1 <= j6_0_reg_319(8 - 1 downto 0);
    trunc_ln85_fu_480_p1 <= data_0_reg_248(24 - 1 downto 0);
    xor_ln88_fu_497_p2 <= (data_0_reg_248 xor P_q0);
    zext_ln102_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_554_p3),12));
    zext_ln104_1_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_reg_778),64));
    zext_ln104_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_319),12));
    zext_ln105_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_620_p3),64));
    zext_ln69_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_203),64));
    zext_ln74_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_393_p3),12));
    zext_ln75_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_426_p2),64));
    zext_ln75_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_225),12));
    zext_ln88_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_236),64));
    zext_ln96_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_295),64));
    zext_ln97_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln97_fu_525_p2),64));
end behav;
