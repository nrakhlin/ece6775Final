// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sEncryptBlock_HH_
#define _sEncryptBlock_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sEncryptBlock : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > Blowfish_pary_s_address0;
    sc_out< sc_logic > Blowfish_pary_s_ce0;
    sc_in< sc_lv<32> > Blowfish_pary_s_q0;
    sc_out< sc_lv<5> > Blowfish_pary_s_address1;
    sc_out< sc_logic > Blowfish_pary_s_ce1;
    sc_in< sc_lv<32> > Blowfish_pary_s_q1;
    sc_out< sc_lv<10> > Blowfish_sbox_s_address0;
    sc_out< sc_logic > Blowfish_sbox_s_ce0;
    sc_in< sc_lv<32> > Blowfish_sbox_s_q0;
    sc_out< sc_lv<10> > Blowfish_sbox_s_address1;
    sc_out< sc_logic > Blowfish_sbox_s_ce1;
    sc_in< sc_lv<32> > Blowfish_sbox_s_q1;
    sc_in< sc_lv<32> > left_r;
    sc_in< sc_lv<32> > right_r;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    sEncryptBlock(sc_module_name name);
    SC_HAS_PROCESS(sEncryptBlock);

    ~sEncryptBlock();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_187_p2;
    sc_signal< sc_lv<5> > i_reg_354;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln224_fu_181_p2;
    sc_signal< sc_lv<32> > grp_fu_175_p2;
    sc_signal< sc_lv<32> > temp_1_reg_374;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > c_reg_379;
    sc_signal< sc_lv<8> > d_fu_264_p2;
    sc_signal< sc_lv<8> > d_reg_384;
    sc_signal< sc_lv<32> > add_ln281_fu_284_p2;
    sc_signal< sc_lv<32> > add_ln281_reg_399;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > xor_ln226_fu_317_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > temp_reg_144;
    sc_signal< sc_lv<32> > right_new_0_reg_154;
    sc_signal< sc_lv<5> > i_0_reg_164;
    sc_signal< sc_lv<64> > zext_ln225_fu_193_p1;
    sc_signal< sc_lv<64> > zext_ln281_fu_270_p1;
    sc_signal< sc_lv<64> > tmp_fu_275_p3;
    sc_signal< sc_lv<64> > tmp_1_fu_290_p3;
    sc_signal< sc_lv<64> > tmp_2_fu_298_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<16> > trunc_ln225_5_fu_218_p1;
    sc_signal< sc_lv<16> > trunc_ln225_4_fu_214_p1;
    sc_signal< sc_lv<24> > trunc_ln225_3_fu_210_p1;
    sc_signal< sc_lv<24> > trunc_ln225_2_fu_206_p1;
    sc_signal< sc_lv<24> > xor_ln272_1_fu_228_p2;
    sc_signal< sc_lv<16> > xor_ln272_fu_222_p2;
    sc_signal< sc_lv<8> > trunc_ln225_1_fu_202_p1;
    sc_signal< sc_lv<8> > trunc_ln225_fu_198_p1;
    sc_signal< sc_lv<8> > a_fu_234_p4;
    sc_signal< sc_lv<8> > b_fu_244_p4;
    sc_signal< sc_lv<32> > xor_ln281_fu_306_p2;
    sc_signal< sc_lv<32> > add_ln281_1_fu_311_p2;
    sc_signal< sc_lv<32> > xor_ln241_fu_323_p2;
    sc_signal< sc_lv<32> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<64> ap_const_lv64_10;
    static const sc_lv<64> ap_const_lv64_11;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<56> ap_const_lv56_1;
    static const sc_lv<56> ap_const_lv56_2;
    static const sc_lv<56> ap_const_lv56_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Blowfish_pary_s_address0();
    void thread_Blowfish_pary_s_address1();
    void thread_Blowfish_pary_s_ce0();
    void thread_Blowfish_pary_s_ce1();
    void thread_Blowfish_sbox_s_address0();
    void thread_Blowfish_sbox_s_address1();
    void thread_Blowfish_sbox_s_ce0();
    void thread_Blowfish_sbox_s_ce1();
    void thread_a_fu_234_p4();
    void thread_add_ln281_1_fu_311_p2();
    void thread_add_ln281_fu_284_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_b_fu_244_p4();
    void thread_d_fu_264_p2();
    void thread_grp_fu_175_p2();
    void thread_i_fu_187_p2();
    void thread_icmp_ln224_fu_181_p2();
    void thread_tmp_1_fu_290_p3();
    void thread_tmp_2_fu_298_p3();
    void thread_tmp_fu_275_p3();
    void thread_trunc_ln225_1_fu_202_p1();
    void thread_trunc_ln225_2_fu_206_p1();
    void thread_trunc_ln225_3_fu_210_p1();
    void thread_trunc_ln225_4_fu_214_p1();
    void thread_trunc_ln225_5_fu_218_p1();
    void thread_trunc_ln225_fu_198_p1();
    void thread_xor_ln226_fu_317_p2();
    void thread_xor_ln241_fu_323_p2();
    void thread_xor_ln272_1_fu_228_p2();
    void thread_xor_ln272_fu_222_p2();
    void thread_xor_ln281_fu_306_p2();
    void thread_zext_ln225_fu_193_p1();
    void thread_zext_ln281_fu_270_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
