// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Encrypt_HH_
#define _Encrypt_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Encrypt : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > plaintext_address0;
    sc_out< sc_logic > plaintext_ce0;
    sc_in< sc_lv<8> > plaintext_q0;
    sc_out< sc_lv<3> > plaintext_address1;
    sc_out< sc_logic > plaintext_ce1;
    sc_in< sc_lv<8> > plaintext_q1;
    sc_out< sc_lv<3> > ciphertext_address0;
    sc_out< sc_logic > ciphertext_ce0;
    sc_out< sc_logic > ciphertext_we0;
    sc_out< sc_lv<8> > ciphertext_d0;
    sc_out< sc_lv<3> > ciphertext_address1;
    sc_out< sc_logic > ciphertext_ce1;
    sc_out< sc_logic > ciphertext_we1;
    sc_out< sc_lv<8> > ciphertext_d1;
    sc_out< sc_lv<5> > P_address0;
    sc_out< sc_logic > P_ce0;
    sc_in< sc_lv<32> > P_q0;
    sc_out< sc_lv<10> > S_address0;
    sc_out< sc_logic > S_ce0;
    sc_in< sc_lv<32> > S_q0;
    sc_out< sc_lv<10> > S_address1;
    sc_out< sc_logic > S_ce1;
    sc_in< sc_lv<32> > S_q1;


    // Module declarations
    Encrypt(sc_module_name name);
    SC_HAS_PROCESS(Encrypt);

    ~Encrypt();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > plaintext_load_reg_649;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > plaintext_load_1_reg_654;
    sc_signal< sc_lv<8> > plaintext_load_2_reg_669;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > plaintext_load_3_reg_674;
    sc_signal< sc_lv<8> > plaintext_load_4_reg_689;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > plaintext_load_5_reg_694;
    sc_signal< sc_lv<32> > left_3_fu_346_p5;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > right_3_fu_354_p5;
    sc_signal< sc_lv<5> > i_fu_370_p2;
    sc_signal< sc_lv<5> > i_reg_722;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln27_fu_364_p2;
    sc_signal< sc_lv<8> > trunc_ln28_fu_381_p1;
    sc_signal< sc_lv<8> > trunc_ln28_reg_737;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > grp_fu_329_p2;
    sc_signal< sc_lv<32> > left_7_reg_742;
    sc_signal< sc_lv<8> > c_reg_747;
    sc_signal< sc_lv<32> > add_ln62_fu_456_p2;
    sc_signal< sc_lv<32> > add_ln62_reg_762;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > right_fu_490_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > trunc_ln34_fu_496_p1;
    sc_signal< sc_lv<8> > trunc_ln34_reg_782;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<8> > trunc_ln4_reg_787;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<8> > trunc_ln7_reg_797;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<8> > xor_ln138_fu_633_p2;
    sc_signal< sc_lv<8> > xor_ln138_reg_802;
    sc_signal< sc_lv<32> > left_4_reg_298;
    sc_signal< sc_lv<32> > right_4_reg_308;
    sc_signal< sc_lv<5> > i_0_reg_318;
    sc_signal< sc_lv<64> > zext_ln28_fu_376_p1;
    sc_signal< sc_lv<64> > zext_ln62_fu_433_p1;
    sc_signal< sc_lv<64> > tmp_fu_438_p3;
    sc_signal< sc_lv<64> > tmp_6_fu_462_p3;
    sc_signal< sc_lv<64> > tmp_7_fu_470_p3;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<8> > xor_ln134_fu_570_p2;
    sc_signal< sc_lv<8> > grp_fu_335_p4;
    sc_signal< sc_lv<16> > trunc_ln28_5_fu_397_p1;
    sc_signal< sc_lv<16> > trunc_ln28_4_fu_393_p1;
    sc_signal< sc_lv<24> > trunc_ln28_3_fu_389_p1;
    sc_signal< sc_lv<24> > trunc_ln28_2_fu_385_p1;
    sc_signal< sc_lv<24> > xor_ln28_2_fu_407_p2;
    sc_signal< sc_lv<16> > xor_ln28_1_fu_401_p2;
    sc_signal< sc_lv<8> > b_fu_413_p4;
    sc_signal< sc_lv<8> > trunc_ln28_1_fu_447_p1;
    sc_signal< sc_lv<8> > d_fu_451_p2;
    sc_signal< sc_lv<32> > xor_ln62_fu_479_p2;
    sc_signal< sc_lv<32> > add_ln62_2_fu_484_p2;
    sc_signal< sc_lv<16> > trunc_ln34_5_fu_512_p1;
    sc_signal< sc_lv<16> > trunc_ln34_4_fu_508_p1;
    sc_signal< sc_lv<24> > trunc_ln34_3_fu_504_p1;
    sc_signal< sc_lv<24> > trunc_ln34_2_fu_500_p1;
    sc_signal< sc_lv<32> > left_fu_516_p2;
    sc_signal< sc_lv<24> > xor_ln34_2_fu_528_p2;
    sc_signal< sc_lv<16> > xor_ln34_1_fu_522_p2;
    sc_signal< sc_lv<8> > trunc_ln34_1_fu_566_p1;
    sc_signal< sc_lv<16> > trunc_ln33_5_fu_596_p1;
    sc_signal< sc_lv<16> > trunc_ln33_4_fu_592_p1;
    sc_signal< sc_lv<24> > trunc_ln33_3_fu_588_p1;
    sc_signal< sc_lv<24> > trunc_ln33_2_fu_584_p1;
    sc_signal< sc_lv<24> > xor_ln33_2_fu_606_p2;
    sc_signal< sc_lv<16> > xor_ln33_1_fu_600_p2;
    sc_signal< sc_lv<8> > trunc_ln33_1_fu_580_p1;
    sc_signal< sc_lv<8> > trunc_ln33_fu_576_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_11;
    static const sc_lv<64> ap_const_lv64_10;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<56> ap_const_lv56_1;
    static const sc_lv<56> ap_const_lv56_2;
    static const sc_lv<56> ap_const_lv56_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_P_address0();
    void thread_P_ce0();
    void thread_S_address0();
    void thread_S_address1();
    void thread_S_ce0();
    void thread_S_ce1();
    void thread_add_ln62_2_fu_484_p2();
    void thread_add_ln62_fu_456_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_fu_413_p4();
    void thread_ciphertext_address0();
    void thread_ciphertext_address1();
    void thread_ciphertext_ce0();
    void thread_ciphertext_ce1();
    void thread_ciphertext_d0();
    void thread_ciphertext_d1();
    void thread_ciphertext_we0();
    void thread_ciphertext_we1();
    void thread_d_fu_451_p2();
    void thread_grp_fu_329_p2();
    void thread_grp_fu_335_p4();
    void thread_i_fu_370_p2();
    void thread_icmp_ln27_fu_364_p2();
    void thread_left_3_fu_346_p5();
    void thread_left_fu_516_p2();
    void thread_plaintext_address0();
    void thread_plaintext_address1();
    void thread_plaintext_ce0();
    void thread_plaintext_ce1();
    void thread_right_3_fu_354_p5();
    void thread_right_fu_490_p2();
    void thread_tmp_6_fu_462_p3();
    void thread_tmp_7_fu_470_p3();
    void thread_tmp_fu_438_p3();
    void thread_trunc_ln28_1_fu_447_p1();
    void thread_trunc_ln28_2_fu_385_p1();
    void thread_trunc_ln28_3_fu_389_p1();
    void thread_trunc_ln28_4_fu_393_p1();
    void thread_trunc_ln28_5_fu_397_p1();
    void thread_trunc_ln28_fu_381_p1();
    void thread_trunc_ln33_1_fu_580_p1();
    void thread_trunc_ln33_2_fu_584_p1();
    void thread_trunc_ln33_3_fu_588_p1();
    void thread_trunc_ln33_4_fu_592_p1();
    void thread_trunc_ln33_5_fu_596_p1();
    void thread_trunc_ln33_fu_576_p1();
    void thread_trunc_ln34_1_fu_566_p1();
    void thread_trunc_ln34_2_fu_500_p1();
    void thread_trunc_ln34_3_fu_504_p1();
    void thread_trunc_ln34_4_fu_508_p1();
    void thread_trunc_ln34_5_fu_512_p1();
    void thread_trunc_ln34_fu_496_p1();
    void thread_xor_ln134_fu_570_p2();
    void thread_xor_ln138_fu_633_p2();
    void thread_xor_ln28_1_fu_401_p2();
    void thread_xor_ln28_2_fu_407_p2();
    void thread_xor_ln33_1_fu_600_p2();
    void thread_xor_ln33_2_fu_606_p2();
    void thread_xor_ln34_1_fu_522_p2();
    void thread_xor_ln34_2_fu_528_p2();
    void thread_xor_ln62_fu_479_p2();
    void thread_zext_ln28_fu_376_p1();
    void thread_zext_ln62_fu_433_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
