// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Decrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Decrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Decrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> Decrypt::ap_ST_fsm_state1 = "1";
const sc_lv<15> Decrypt::ap_ST_fsm_state2 = "10";
const sc_lv<15> Decrypt::ap_ST_fsm_state3 = "100";
const sc_lv<15> Decrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<15> Decrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<15> Decrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<15> Decrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> Decrypt::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> Decrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Decrypt::ap_const_lv32_1 = "1";
const sc_lv<1> Decrypt::ap_const_lv1_0 = "0";
const sc_lv<1> Decrypt::ap_const_lv1_1 = "1";
const sc_lv<32> Decrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Decrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Decrypt::ap_const_lv32_5 = "101";
const sc_lv<32> Decrypt::ap_const_lv32_6 = "110";
const sc_lv<32> Decrypt::ap_const_lv32_7 = "111";
const sc_lv<32> Decrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Decrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> Decrypt::ap_const_lv32_A = "1010";
const sc_lv<32> Decrypt::ap_const_lv32_B = "1011";
const sc_lv<32> Decrypt::ap_const_lv32_C = "1100";
const sc_lv<32> Decrypt::ap_const_lv32_D = "1101";
const sc_lv<4> Decrypt::ap_const_lv4_0 = "0000";
const sc_lv<32> Decrypt::ap_const_lv32_2 = "10";
const sc_lv<5> Decrypt::ap_const_lv5_0 = "00000";
const sc_lv<64> Decrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Decrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Decrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Decrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Decrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Decrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Decrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Decrypt::ap_const_lv64_7 = "111";
const sc_lv<32> Decrypt::ap_const_lv32_E = "1110";
const sc_lv<32> Decrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Decrypt::ap_const_lv32_1F = "11111";
const sc_lv<4> Decrypt::ap_const_lv4_8 = "1000";
const sc_lv<4> Decrypt::ap_const_lv4_1 = "1";
const sc_lv<5> Decrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> Decrypt::ap_const_lv5_1 = "1";
const sc_lv<5> Decrypt::ap_const_lv5_11 = "10001";
const sc_lv<32> Decrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Decrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> Decrypt::ap_const_lv32_F = "1111";
const sc_lv<56> Decrypt::ap_const_lv56_1 = "1";
const sc_lv<56> Decrypt::ap_const_lv56_2 = "10";
const sc_lv<56> Decrypt::ap_const_lv56_3 = "11";
const bool Decrypt::ap_const_boolean_1 = true;

Decrypt::Decrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Blowfish_pary_s_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln251_fu_340_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln252_fu_358_p1 );

    SC_METHOD(thread_Blowfish_pary_s_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln251_fu_340_p2 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_Blowfish_sbox_s_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln281_fu_415_p1 );
    sensitive << ( tmp_s_fu_444_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_fu_420_p3 );
    sensitive << ( tmp_1_fu_452_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_Blowfish_sbox_s_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_add_ln281_3_fu_466_p2);
    sensitive << ( Blowfish_sbox_s_q1 );
    sensitive << ( xor_ln281_fu_461_p2 );

    SC_METHOD(thread_add_ln281_fu_438_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( Blowfish_sbox_s_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_b_fu_395_p4);
    sensitive << ( xor_ln272_3_fu_389_p2 );

    SC_METHOD(thread_d_fu_433_p2);
    sensitive << ( trunc_ln252_reg_739 );
    sensitive << ( trunc_ln252_1_fu_429_p1 );

    SC_METHOD(thread_dst_addr_10_reg_661);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_dst_addr_11_reg_666);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_dst_addr_12_reg_681);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_dst_addr_13_reg_686);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_dst_addr_14_reg_701);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_dst_addr_15_reg_706);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_dst_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln150_reg_635 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dst_addr_11_reg_666 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_addr_13_reg_686 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( dst_addr_15_reg_706 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dst_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dst_addr_10_reg_661 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_addr_12_reg_681 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( dst_addr_14_reg_701 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dst_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dst_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dst_d0);
    sensitive << ( src_q0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( xor_ln176_reg_804 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln172_fu_552_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( xor_ln166_1_fu_510_p2 );
    sensitive << ( xor_ln267_1_fu_588_p2 );

    SC_METHOD(thread_dst_d1);
    sensitive << ( grp_fu_288_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( trunc_ln2_reg_789 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( trunc_ln5_reg_799 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( left_new_fu_498_p2 );

    SC_METHOD(thread_dst_we0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dst_we1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_288_p2);
    sensitive << ( Blowfish_pary_s_q0 );
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_grp_fu_294_p4);
    sensitive << ( grp_fu_288_p2 );

    SC_METHOD(thread_i_7_fu_346_p2);
    sensitive << ( i_0_i_reg_277 );

    SC_METHOD(thread_i_fu_311_p2);
    sensitive << ( i_0_reg_246 );

    SC_METHOD(thread_icmp_ln149_fu_305_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_246 );

    SC_METHOD(thread_icmp_ln251_fu_340_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_0_i_reg_277 );

    SC_METHOD(thread_left_fu_322_p5);
    sensitive << ( dst_load_reg_651 );
    sensitive << ( dst_load_8_reg_656 );
    sensitive << ( dst_load_9_reg_671 );
    sensitive << ( dst_load_10_reg_676 );

    SC_METHOD(thread_left_new_fu_498_p2);
    sensitive << ( Blowfish_pary_s_q0 );
    sensitive << ( right_new_0_i_reg_267 );

    SC_METHOD(thread_right_fu_330_p5);
    sensitive << ( dst_q0 );
    sensitive << ( dst_q1 );
    sensitive << ( dst_load_11_reg_691 );
    sensitive << ( dst_load_12_reg_696 );

    SC_METHOD(thread_src_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln150_fu_317_p1 );

    SC_METHOD(thread_src_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sub_ln252_fu_352_p2);
    sensitive << ( i_0_i_reg_277 );

    SC_METHOD(thread_tmp_1_fu_452_p3);
    sensitive << ( d_fu_433_p2 );

    SC_METHOD(thread_tmp_fu_420_p3);
    sensitive << ( b_fu_395_p4 );

    SC_METHOD(thread_tmp_s_fu_444_p3);
    sensitive << ( c_reg_749 );

    SC_METHOD(thread_trunc_ln252_1_fu_429_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln252_2_fu_367_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln252_3_fu_371_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln252_4_fu_375_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln252_5_fu_379_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln252_fu_363_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln266_1_fu_562_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln266_2_fu_566_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln266_3_fu_570_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln266_4_fu_574_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln266_5_fu_578_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln266_fu_558_p1);
    sensitive << ( temp_reg_257 );

    SC_METHOD(thread_trunc_ln267_1_fu_548_p1);
    sensitive << ( right_new_0_i_reg_267 );

    SC_METHOD(thread_trunc_ln267_2_fu_482_p1);
    sensitive << ( right_new_0_i_reg_267 );

    SC_METHOD(thread_trunc_ln267_3_fu_486_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln267_4_fu_490_p1);
    sensitive << ( right_new_0_i_reg_267 );

    SC_METHOD(thread_trunc_ln267_5_fu_494_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln267_fu_478_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_xor_ln166_1_fu_510_p2);
    sensitive << ( trunc_ln267_3_fu_486_p1 );
    sensitive << ( trunc_ln267_2_fu_482_p1 );

    SC_METHOD(thread_xor_ln166_fu_504_p2);
    sensitive << ( trunc_ln267_5_fu_494_p1 );
    sensitive << ( trunc_ln267_4_fu_490_p1 );

    SC_METHOD(thread_xor_ln172_fu_552_p2);
    sensitive << ( trunc_ln267_reg_784 );
    sensitive << ( trunc_ln267_1_fu_548_p1 );

    SC_METHOD(thread_xor_ln176_fu_615_p2);
    sensitive << ( trunc_ln266_1_fu_562_p1 );
    sensitive << ( trunc_ln266_fu_558_p1 );

    SC_METHOD(thread_xor_ln253_fu_472_p2);
    sensitive << ( right_new_0_i_reg_267 );
    sensitive << ( add_ln281_3_fu_466_p2 );

    SC_METHOD(thread_xor_ln267_1_fu_588_p2);
    sensitive << ( trunc_ln266_3_fu_570_p1 );
    sensitive << ( trunc_ln266_2_fu_566_p1 );

    SC_METHOD(thread_xor_ln267_fu_582_p2);
    sensitive << ( trunc_ln266_5_fu_578_p1 );
    sensitive << ( trunc_ln266_4_fu_574_p1 );

    SC_METHOD(thread_xor_ln272_3_fu_389_p2);
    sensitive << ( trunc_ln252_3_fu_371_p1 );
    sensitive << ( trunc_ln252_2_fu_367_p1 );

    SC_METHOD(thread_xor_ln272_fu_383_p2);
    sensitive << ( trunc_ln252_5_fu_379_p1 );
    sensitive << ( trunc_ln252_4_fu_375_p1 );

    SC_METHOD(thread_xor_ln281_fu_461_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( add_ln281_reg_764 );

    SC_METHOD(thread_zext_ln150_fu_317_p1);
    sensitive << ( i_0_reg_246 );

    SC_METHOD(thread_zext_ln252_fu_358_p1);
    sensitive << ( sub_ln252_fu_352_p2 );

    SC_METHOD(thread_zext_ln281_fu_415_p1);
    sensitive << ( grp_fu_294_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln149_fu_305_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln251_fu_340_p2 );

    ap_CS_fsm = "000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Decrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Blowfish_pary_s_address0, "(port)Blowfish_pary_s_address0");
    sc_trace(mVcdFile, Blowfish_pary_s_ce0, "(port)Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, Blowfish_pary_s_q0, "(port)Blowfish_pary_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address0, "(port)Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce0, "(port)Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, Blowfish_sbox_s_q0, "(port)Blowfish_sbox_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address1, "(port)Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce1, "(port)Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, Blowfish_sbox_s_q1, "(port)Blowfish_sbox_s_q1");
    sc_trace(mVcdFile, dst_address0, "(port)dst_address0");
    sc_trace(mVcdFile, dst_ce0, "(port)dst_ce0");
    sc_trace(mVcdFile, dst_we0, "(port)dst_we0");
    sc_trace(mVcdFile, dst_d0, "(port)dst_d0");
    sc_trace(mVcdFile, dst_q0, "(port)dst_q0");
    sc_trace(mVcdFile, dst_address1, "(port)dst_address1");
    sc_trace(mVcdFile, dst_ce1, "(port)dst_ce1");
    sc_trace(mVcdFile, dst_we1, "(port)dst_we1");
    sc_trace(mVcdFile, dst_d1, "(port)dst_d1");
    sc_trace(mVcdFile, dst_q1, "(port)dst_q1");
    sc_trace(mVcdFile, src_address0, "(port)src_address0");
    sc_trace(mVcdFile, src_ce0, "(port)src_ce0");
    sc_trace(mVcdFile, src_q0, "(port)src_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_311_p2, "i_fu_311_p2");
    sc_trace(mVcdFile, i_reg_630, "i_reg_630");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln150_fu_317_p1, "zext_ln150_fu_317_p1");
    sc_trace(mVcdFile, zext_ln150_reg_635, "zext_ln150_reg_635");
    sc_trace(mVcdFile, icmp_ln149_fu_305_p2, "icmp_ln149_fu_305_p2");
    sc_trace(mVcdFile, dst_load_reg_651, "dst_load_reg_651");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, dst_load_8_reg_656, "dst_load_8_reg_656");
    sc_trace(mVcdFile, dst_addr_10_reg_661, "dst_addr_10_reg_661");
    sc_trace(mVcdFile, dst_addr_11_reg_666, "dst_addr_11_reg_666");
    sc_trace(mVcdFile, dst_load_9_reg_671, "dst_load_9_reg_671");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, dst_load_10_reg_676, "dst_load_10_reg_676");
    sc_trace(mVcdFile, dst_addr_12_reg_681, "dst_addr_12_reg_681");
    sc_trace(mVcdFile, dst_addr_13_reg_686, "dst_addr_13_reg_686");
    sc_trace(mVcdFile, dst_load_11_reg_691, "dst_load_11_reg_691");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, dst_load_12_reg_696, "dst_load_12_reg_696");
    sc_trace(mVcdFile, dst_addr_14_reg_701, "dst_addr_14_reg_701");
    sc_trace(mVcdFile, dst_addr_15_reg_706, "dst_addr_15_reg_706");
    sc_trace(mVcdFile, left_fu_322_p5, "left_fu_322_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, right_fu_330_p5, "right_fu_330_p5");
    sc_trace(mVcdFile, i_7_fu_346_p2, "i_7_fu_346_p2");
    sc_trace(mVcdFile, i_7_reg_724, "i_7_reg_724");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln251_fu_340_p2, "icmp_ln251_fu_340_p2");
    sc_trace(mVcdFile, trunc_ln252_fu_363_p1, "trunc_ln252_fu_363_p1");
    sc_trace(mVcdFile, trunc_ln252_reg_739, "trunc_ln252_reg_739");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_288_p2, "grp_fu_288_p2");
    sc_trace(mVcdFile, temp_3_reg_744, "temp_3_reg_744");
    sc_trace(mVcdFile, c_reg_749, "c_reg_749");
    sc_trace(mVcdFile, add_ln281_fu_438_p2, "add_ln281_fu_438_p2");
    sc_trace(mVcdFile, add_ln281_reg_764, "add_ln281_reg_764");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, xor_ln253_fu_472_p2, "xor_ln253_fu_472_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, trunc_ln267_fu_478_p1, "trunc_ln267_fu_478_p1");
    sc_trace(mVcdFile, trunc_ln267_reg_784, "trunc_ln267_reg_784");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, trunc_ln2_reg_789, "trunc_ln2_reg_789");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, trunc_ln5_reg_799, "trunc_ln5_reg_799");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, xor_ln176_fu_615_p2, "xor_ln176_fu_615_p2");
    sc_trace(mVcdFile, xor_ln176_reg_804, "xor_ln176_reg_804");
    sc_trace(mVcdFile, i_0_reg_246, "i_0_reg_246");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, temp_reg_257, "temp_reg_257");
    sc_trace(mVcdFile, right_new_0_i_reg_267, "right_new_0_i_reg_267");
    sc_trace(mVcdFile, i_0_i_reg_277, "i_0_i_reg_277");
    sc_trace(mVcdFile, zext_ln252_fu_358_p1, "zext_ln252_fu_358_p1");
    sc_trace(mVcdFile, zext_ln281_fu_415_p1, "zext_ln281_fu_415_p1");
    sc_trace(mVcdFile, tmp_fu_420_p3, "tmp_fu_420_p3");
    sc_trace(mVcdFile, tmp_s_fu_444_p3, "tmp_s_fu_444_p3");
    sc_trace(mVcdFile, tmp_1_fu_452_p3, "tmp_1_fu_452_p3");
    sc_trace(mVcdFile, xor_ln172_fu_552_p2, "xor_ln172_fu_552_p2");
    sc_trace(mVcdFile, grp_fu_294_p4, "grp_fu_294_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, sub_ln252_fu_352_p2, "sub_ln252_fu_352_p2");
    sc_trace(mVcdFile, trunc_ln252_5_fu_379_p1, "trunc_ln252_5_fu_379_p1");
    sc_trace(mVcdFile, trunc_ln252_4_fu_375_p1, "trunc_ln252_4_fu_375_p1");
    sc_trace(mVcdFile, trunc_ln252_3_fu_371_p1, "trunc_ln252_3_fu_371_p1");
    sc_trace(mVcdFile, trunc_ln252_2_fu_367_p1, "trunc_ln252_2_fu_367_p1");
    sc_trace(mVcdFile, xor_ln272_3_fu_389_p2, "xor_ln272_3_fu_389_p2");
    sc_trace(mVcdFile, xor_ln272_fu_383_p2, "xor_ln272_fu_383_p2");
    sc_trace(mVcdFile, b_fu_395_p4, "b_fu_395_p4");
    sc_trace(mVcdFile, trunc_ln252_1_fu_429_p1, "trunc_ln252_1_fu_429_p1");
    sc_trace(mVcdFile, d_fu_433_p2, "d_fu_433_p2");
    sc_trace(mVcdFile, xor_ln281_fu_461_p2, "xor_ln281_fu_461_p2");
    sc_trace(mVcdFile, add_ln281_3_fu_466_p2, "add_ln281_3_fu_466_p2");
    sc_trace(mVcdFile, trunc_ln267_5_fu_494_p1, "trunc_ln267_5_fu_494_p1");
    sc_trace(mVcdFile, trunc_ln267_4_fu_490_p1, "trunc_ln267_4_fu_490_p1");
    sc_trace(mVcdFile, trunc_ln267_3_fu_486_p1, "trunc_ln267_3_fu_486_p1");
    sc_trace(mVcdFile, trunc_ln267_2_fu_482_p1, "trunc_ln267_2_fu_482_p1");
    sc_trace(mVcdFile, left_new_fu_498_p2, "left_new_fu_498_p2");
    sc_trace(mVcdFile, xor_ln166_1_fu_510_p2, "xor_ln166_1_fu_510_p2");
    sc_trace(mVcdFile, xor_ln166_fu_504_p2, "xor_ln166_fu_504_p2");
    sc_trace(mVcdFile, trunc_ln267_1_fu_548_p1, "trunc_ln267_1_fu_548_p1");
    sc_trace(mVcdFile, trunc_ln266_5_fu_578_p1, "trunc_ln266_5_fu_578_p1");
    sc_trace(mVcdFile, trunc_ln266_4_fu_574_p1, "trunc_ln266_4_fu_574_p1");
    sc_trace(mVcdFile, trunc_ln266_3_fu_570_p1, "trunc_ln266_3_fu_570_p1");
    sc_trace(mVcdFile, trunc_ln266_2_fu_566_p1, "trunc_ln266_2_fu_566_p1");
    sc_trace(mVcdFile, xor_ln267_1_fu_588_p2, "xor_ln267_1_fu_588_p2");
    sc_trace(mVcdFile, xor_ln267_fu_582_p2, "xor_ln267_fu_582_p2");
    sc_trace(mVcdFile, trunc_ln266_1_fu_562_p1, "trunc_ln266_1_fu_562_p1");
    sc_trace(mVcdFile, trunc_ln266_fu_558_p1, "trunc_ln266_fu_558_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Decrypt::~Decrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Decrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_0_i_reg_277 = i_7_reg_724.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_0_i_reg_277 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_246 = i_reg_630.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_246 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        right_new_0_i_reg_267 = temp_3_reg_744.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        right_new_0_i_reg_267 = right_fu_330_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_reg_257 = xor_ln253_fu_472_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_reg_257 = left_fu_322_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        add_ln281_reg_764 = add_ln281_fu_438_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        c_reg_749 = xor_ln272_fu_383_p2.read().range(15, 8);
        temp_3_reg_744 = grp_fu_288_p2.read();
        trunc_ln252_reg_739 = trunc_ln252_fu_363_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_load_10_reg_676 = dst_q0.read();
        dst_load_9_reg_671 = dst_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_load_11_reg_691 = dst_q1.read();
        dst_load_12_reg_696 = dst_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_load_8_reg_656 = dst_q1.read();
        dst_load_reg_651 = dst_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_7_reg_724 = i_7_fu_346_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_630 = i_fu_311_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        trunc_ln267_reg_784 = trunc_ln267_fu_478_p1.read();
        trunc_ln2_reg_789 = xor_ln166_fu_504_p2.read().range(15, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        trunc_ln5_reg_799 = xor_ln267_fu_582_p2.read().range(15, 8);
        xor_ln176_reg_804 = xor_ln176_fu_615_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_305_p2.read(), ap_const_lv1_0))) {
        zext_ln150_reg_635 = zext_ln150_fu_317_p1.read();
    }
}

void Decrypt::thread_Blowfish_pary_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        Blowfish_pary_s_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln251_fu_340_p2.read()))) {
        Blowfish_pary_s_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln251_fu_340_p2.read()))) {
        Blowfish_pary_s_address0 =  (sc_lv<5>) (zext_ln252_fu_358_p1.read());
    } else {
        Blowfish_pary_s_address0 = "XXXXX";
    }
}

void Decrypt::thread_Blowfish_pary_s_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln251_fu_340_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln251_fu_340_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        Blowfish_pary_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_pary_s_ce0 = ap_const_logic_0;
    }
}

void Decrypt::thread_Blowfish_sbox_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (tmp_s_fu_444_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (zext_ln281_fu_415_p1.read());
    } else {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Decrypt::thread_Blowfish_sbox_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_1_fu_452_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_fu_420_p3.read());
    } else {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Decrypt::thread_Blowfish_sbox_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        Blowfish_sbox_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce0 = ap_const_logic_0;
    }
}

void Decrypt::thread_Blowfish_sbox_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        Blowfish_sbox_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce1 = ap_const_logic_0;
    }
}

void Decrypt::thread_add_ln281_3_fu_466_p2() {
    add_ln281_3_fu_466_p2 = (!Blowfish_sbox_s_q1.read().is_01() || !xor_ln281_fu_461_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q1.read()) + sc_biguint<32>(xor_ln281_fu_461_p2.read()));
}

void Decrypt::thread_add_ln281_fu_438_p2() {
    add_ln281_fu_438_p2 = (!Blowfish_sbox_s_q0.read().is_01() || !Blowfish_sbox_s_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q0.read()) + sc_biguint<32>(Blowfish_sbox_s_q1.read()));
}

void Decrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Decrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Decrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Decrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Decrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Decrypt::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Decrypt::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Decrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Decrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Decrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Decrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Decrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Decrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Decrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Decrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Decrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Decrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Decrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Decrypt::thread_b_fu_395_p4() {
    b_fu_395_p4 = xor_ln272_3_fu_389_p2.read().range(23, 16);
}

void Decrypt::thread_d_fu_433_p2() {
    d_fu_433_p2 = (trunc_ln252_1_fu_429_p1.read() ^ trunc_ln252_reg_739.read());
}

void Decrypt::thread_dst_addr_10_reg_661() {
    dst_addr_10_reg_661 =  (sc_lv<3>) (ap_const_lv64_2);
}

void Decrypt::thread_dst_addr_11_reg_666() {
    dst_addr_11_reg_666 =  (sc_lv<3>) (ap_const_lv64_3);
}

void Decrypt::thread_dst_addr_12_reg_681() {
    dst_addr_12_reg_681 =  (sc_lv<3>) (ap_const_lv64_4);
}

void Decrypt::thread_dst_addr_13_reg_686() {
    dst_addr_13_reg_686 =  (sc_lv<3>) (ap_const_lv64_5);
}

void Decrypt::thread_dst_addr_14_reg_701() {
    dst_addr_14_reg_701 =  (sc_lv<3>) (ap_const_lv64_6);
}

void Decrypt::thread_dst_addr_15_reg_706() {
    dst_addr_15_reg_706 =  (sc_lv<3>) (ap_const_lv64_7);
}

void Decrypt::thread_dst_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        dst_address0 = dst_addr_15_reg_706.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_address0 = dst_addr_13_reg_686.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_address0 = dst_addr_11_reg_666.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dst_address0 =  (sc_lv<3>) (zext_ln150_reg_635.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dst_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dst_address0 =  (sc_lv<3>) ("XXX");
    }
}

void Decrypt::thread_dst_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        dst_address1 = dst_addr_14_reg_701.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_address1 = dst_addr_12_reg_681.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_address1 = dst_addr_10_reg_661.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dst_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        dst_address1 =  (sc_lv<3>) ("XXX");
    }
}

void Decrypt::thread_dst_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        dst_ce0 = ap_const_logic_1;
    } else {
        dst_ce0 = ap_const_logic_0;
    }
}

void Decrypt::thread_dst_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        dst_ce1 = ap_const_logic_1;
    } else {
        dst_ce1 = ap_const_logic_0;
    }
}

void Decrypt::thread_dst_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        dst_d0 = xor_ln176_reg_804.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_d0 = xor_ln267_1_fu_588_p2.read().range(23, 16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_d0 = xor_ln172_fu_552_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_d0 = xor_ln166_1_fu_510_p2.read().range(23, 16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dst_d0 = src_q0.read();
    } else {
        dst_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Decrypt::thread_dst_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        dst_d1 = trunc_ln5_reg_799.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dst_d1 = grp_fu_288_p2.read().range(31, 24);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dst_d1 = trunc_ln2_reg_789.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dst_d1 = left_new_fu_498_p2.read().range(31, 24);
    } else {
        dst_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Decrypt::thread_dst_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        dst_we0 = ap_const_logic_1;
    } else {
        dst_we0 = ap_const_logic_0;
    }
}

void Decrypt::thread_dst_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        dst_we1 = ap_const_logic_1;
    } else {
        dst_we1 = ap_const_logic_0;
    }
}

void Decrypt::thread_grp_fu_288_p2() {
    grp_fu_288_p2 = (Blowfish_pary_s_q0.read() ^ temp_reg_257.read());
}

void Decrypt::thread_grp_fu_294_p4() {
    grp_fu_294_p4 = grp_fu_288_p2.read().range(31, 24);
}

void Decrypt::thread_i_7_fu_346_p2() {
    i_7_fu_346_p2 = (!i_0_i_reg_277.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_277.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Decrypt::thread_i_fu_311_p2() {
    i_fu_311_p2 = (!i_0_reg_246.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_246.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Decrypt::thread_icmp_ln149_fu_305_p2() {
    icmp_ln149_fu_305_p2 = (!i_0_reg_246.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_246.read() == ap_const_lv4_8);
}

void Decrypt::thread_icmp_ln251_fu_340_p2() {
    icmp_ln251_fu_340_p2 = (!i_0_i_reg_277.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_277.read() == ap_const_lv5_10);
}

void Decrypt::thread_left_fu_322_p5() {
    left_fu_322_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(dst_load_reg_651.read(), dst_load_8_reg_656.read()), dst_load_9_reg_671.read()), dst_load_10_reg_676.read());
}

void Decrypt::thread_left_new_fu_498_p2() {
    left_new_fu_498_p2 = (Blowfish_pary_s_q0.read() ^ right_new_0_i_reg_267.read());
}

void Decrypt::thread_right_fu_330_p5() {
    right_fu_330_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(dst_load_11_reg_691.read(), dst_load_12_reg_696.read()), dst_q1.read()), dst_q0.read());
}

void Decrypt::thread_src_address0() {
    src_address0 =  (sc_lv<3>) (zext_ln150_fu_317_p1.read());
}

void Decrypt::thread_src_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_ce0 = ap_const_logic_1;
    } else {
        src_ce0 = ap_const_logic_0;
    }
}

void Decrypt::thread_sub_ln252_fu_352_p2() {
    sub_ln252_fu_352_p2 = (!ap_const_lv5_11.is_01() || !i_0_i_reg_277.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_11) - sc_biguint<5>(i_0_i_reg_277.read()));
}

void Decrypt::thread_tmp_1_fu_452_p3() {
    tmp_1_fu_452_p3 = esl_concat<56,8>(ap_const_lv56_3, d_fu_433_p2.read());
}

void Decrypt::thread_tmp_fu_420_p3() {
    tmp_fu_420_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_395_p4.read());
}

void Decrypt::thread_tmp_s_fu_444_p3() {
    tmp_s_fu_444_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_749.read());
}

void Decrypt::thread_trunc_ln252_1_fu_429_p1() {
    trunc_ln252_1_fu_429_p1 = temp_reg_257.read().range(8-1, 0);
}

void Decrypt::thread_trunc_ln252_2_fu_367_p1() {
    trunc_ln252_2_fu_367_p1 = temp_reg_257.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln252_3_fu_371_p1() {
    trunc_ln252_3_fu_371_p1 = Blowfish_pary_s_q0.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln252_4_fu_375_p1() {
    trunc_ln252_4_fu_375_p1 = temp_reg_257.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln252_5_fu_379_p1() {
    trunc_ln252_5_fu_379_p1 = Blowfish_pary_s_q0.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln252_fu_363_p1() {
    trunc_ln252_fu_363_p1 = Blowfish_pary_s_q0.read().range(8-1, 0);
}

void Decrypt::thread_trunc_ln266_1_fu_562_p1() {
    trunc_ln266_1_fu_562_p1 = Blowfish_pary_s_q0.read().range(8-1, 0);
}

void Decrypt::thread_trunc_ln266_2_fu_566_p1() {
    trunc_ln266_2_fu_566_p1 = temp_reg_257.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln266_3_fu_570_p1() {
    trunc_ln266_3_fu_570_p1 = Blowfish_pary_s_q0.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln266_4_fu_574_p1() {
    trunc_ln266_4_fu_574_p1 = temp_reg_257.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln266_5_fu_578_p1() {
    trunc_ln266_5_fu_578_p1 = Blowfish_pary_s_q0.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln266_fu_558_p1() {
    trunc_ln266_fu_558_p1 = temp_reg_257.read().range(8-1, 0);
}

void Decrypt::thread_trunc_ln267_1_fu_548_p1() {
    trunc_ln267_1_fu_548_p1 = right_new_0_i_reg_267.read().range(8-1, 0);
}

void Decrypt::thread_trunc_ln267_2_fu_482_p1() {
    trunc_ln267_2_fu_482_p1 = right_new_0_i_reg_267.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln267_3_fu_486_p1() {
    trunc_ln267_3_fu_486_p1 = Blowfish_pary_s_q0.read().range(24-1, 0);
}

void Decrypt::thread_trunc_ln267_4_fu_490_p1() {
    trunc_ln267_4_fu_490_p1 = right_new_0_i_reg_267.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln267_5_fu_494_p1() {
    trunc_ln267_5_fu_494_p1 = Blowfish_pary_s_q0.read().range(16-1, 0);
}

void Decrypt::thread_trunc_ln267_fu_478_p1() {
    trunc_ln267_fu_478_p1 = Blowfish_pary_s_q0.read().range(8-1, 0);
}

void Decrypt::thread_xor_ln166_1_fu_510_p2() {
    xor_ln166_1_fu_510_p2 = (trunc_ln267_3_fu_486_p1.read() ^ trunc_ln267_2_fu_482_p1.read());
}

void Decrypt::thread_xor_ln166_fu_504_p2() {
    xor_ln166_fu_504_p2 = (trunc_ln267_5_fu_494_p1.read() ^ trunc_ln267_4_fu_490_p1.read());
}

void Decrypt::thread_xor_ln172_fu_552_p2() {
    xor_ln172_fu_552_p2 = (trunc_ln267_1_fu_548_p1.read() ^ trunc_ln267_reg_784.read());
}

void Decrypt::thread_xor_ln176_fu_615_p2() {
    xor_ln176_fu_615_p2 = (trunc_ln266_1_fu_562_p1.read() ^ trunc_ln266_fu_558_p1.read());
}

void Decrypt::thread_xor_ln253_fu_472_p2() {
    xor_ln253_fu_472_p2 = (right_new_0_i_reg_267.read() ^ add_ln281_3_fu_466_p2.read());
}

void Decrypt::thread_xor_ln267_1_fu_588_p2() {
    xor_ln267_1_fu_588_p2 = (trunc_ln266_3_fu_570_p1.read() ^ trunc_ln266_2_fu_566_p1.read());
}

void Decrypt::thread_xor_ln267_fu_582_p2() {
    xor_ln267_fu_582_p2 = (trunc_ln266_5_fu_578_p1.read() ^ trunc_ln266_4_fu_574_p1.read());
}

void Decrypt::thread_xor_ln272_3_fu_389_p2() {
    xor_ln272_3_fu_389_p2 = (trunc_ln252_3_fu_371_p1.read() ^ trunc_ln252_2_fu_367_p1.read());
}

void Decrypt::thread_xor_ln272_fu_383_p2() {
    xor_ln272_fu_383_p2 = (trunc_ln252_5_fu_379_p1.read() ^ trunc_ln252_4_fu_375_p1.read());
}

void Decrypt::thread_xor_ln281_fu_461_p2() {
    xor_ln281_fu_461_p2 = (Blowfish_sbox_s_q0.read() ^ add_ln281_reg_764.read());
}

void Decrypt::thread_zext_ln150_fu_317_p1() {
    zext_ln150_fu_317_p1 = esl_zext<64,4>(i_0_reg_246.read());
}

void Decrypt::thread_zext_ln252_fu_358_p1() {
    zext_ln252_fu_358_p1 = esl_zext<64,5>(sub_ln252_fu_352_p2.read());
}

void Decrypt::thread_zext_ln281_fu_415_p1() {
    zext_ln281_fu_415_p1 = esl_zext<64,8>(grp_fu_294_p4.read());
}

void Decrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_305_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln251_fu_340_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

}

