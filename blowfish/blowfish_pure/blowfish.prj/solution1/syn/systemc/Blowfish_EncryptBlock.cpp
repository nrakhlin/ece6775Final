// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_EncryptBlock.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_EncryptBlock::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_EncryptBlock::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state1 = "1";
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state2 = "10";
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state3 = "100";
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state4 = "1000";
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state5 = "10000";
const sc_lv<6> Blowfish_EncryptBlock::ap_ST_fsm_state6 = "100000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_1 = "1";
const sc_lv<1> Blowfish_EncryptBlock::ap_const_lv1_0 = "0";
const sc_lv<1> Blowfish_EncryptBlock::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_3 = "11";
const sc_lv<5> Blowfish_EncryptBlock::ap_const_lv5_0 = "00000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_4 = "100";
const sc_lv<64> Blowfish_EncryptBlock::ap_const_lv64_10 = "10000";
const sc_lv<64> Blowfish_EncryptBlock::ap_const_lv64_11 = "10001";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_5 = "101";
const sc_lv<5> Blowfish_EncryptBlock::ap_const_lv5_10 = "10000";
const sc_lv<5> Blowfish_EncryptBlock::ap_const_lv5_1 = "1";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_1F = "11111";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_EncryptBlock::ap_const_lv32_F = "1111";
const sc_lv<56> Blowfish_EncryptBlock::ap_const_lv56_1 = "1";
const sc_lv<56> Blowfish_EncryptBlock::ap_const_lv56_2 = "10";
const sc_lv<56> Blowfish_EncryptBlock::ap_const_lv56_3 = "11";
const bool Blowfish_EncryptBlock::ap_const_boolean_1 = true;

Blowfish_EncryptBlock::Blowfish_EncryptBlock(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Blowfish_pary_s_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln184_fu_175_p2 );
    sensitive << ( zext_ln185_fu_187_p1 );

    SC_METHOD(thread_Blowfish_pary_s_address1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln184_fu_175_p2 );

    SC_METHOD(thread_Blowfish_pary_s_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln284_fu_270_p1 );
    sensitive << ( tmp_1_fu_290_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_275_p3 );
    sensitive << ( tmp_2_fu_298_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_fu_234_p4);
    sensitive << ( temp_1_fu_216_p2 );

    SC_METHOD(thread_add_ln284_1_fu_311_p2);
    sensitive << ( Blowfish_sbox_s_q1 );
    sensitive << ( xor_ln284_fu_306_p2 );

    SC_METHOD(thread_add_ln284_fu_284_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( Blowfish_sbox_s_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_b_fu_244_p4);
    sensitive << ( xor_ln275_1_fu_228_p2 );

    SC_METHOD(thread_d_fu_264_p2);
    sensitive << ( trunc_ln185_1_fu_196_p1 );
    sensitive << ( trunc_ln185_fu_192_p1 );

    SC_METHOD(thread_i_fu_181_p2);
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_icmp_ln184_fu_175_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_left_r_o);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln186_fu_317_p2 );
    sensitive << ( xor_ln198_fu_331_p2 );

    SC_METHOD(thread_left_r_o_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_right_r_o);
    sensitive << ( temp_1_reg_361 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln197_fu_324_p2 );

    SC_METHOD(thread_right_r_o_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_temp_1_fu_216_p2);
    sensitive << ( Blowfish_pary_s_q0 );
    sensitive << ( left_r_i );

    SC_METHOD(thread_tmp_1_fu_290_p3);
    sensitive << ( c_reg_366 );

    SC_METHOD(thread_tmp_2_fu_298_p3);
    sensitive << ( d_reg_371 );

    SC_METHOD(thread_tmp_fu_275_p3);
    sensitive << ( b_fu_244_p4 );

    SC_METHOD(thread_trunc_ln185_1_fu_196_p1);
    sensitive << ( left_r_i );

    SC_METHOD(thread_trunc_ln185_2_fu_200_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln185_3_fu_204_p1);
    sensitive << ( left_r_i );

    SC_METHOD(thread_trunc_ln185_4_fu_208_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln185_5_fu_212_p1);
    sensitive << ( left_r_i );

    SC_METHOD(thread_trunc_ln185_fu_192_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_xor_ln186_fu_317_p2);
    sensitive << ( right_r_i );
    sensitive << ( add_ln284_1_fu_311_p2 );

    SC_METHOD(thread_xor_ln197_fu_324_p2);
    sensitive << ( Blowfish_pary_s_q0 );
    sensitive << ( left_r_i );

    SC_METHOD(thread_xor_ln198_fu_331_p2);
    sensitive << ( Blowfish_pary_s_q1 );
    sensitive << ( right_r_i );

    SC_METHOD(thread_xor_ln275_1_fu_228_p2);
    sensitive << ( trunc_ln185_3_fu_204_p1 );
    sensitive << ( trunc_ln185_2_fu_200_p1 );

    SC_METHOD(thread_xor_ln275_fu_222_p2);
    sensitive << ( trunc_ln185_5_fu_212_p1 );
    sensitive << ( trunc_ln185_4_fu_208_p1 );

    SC_METHOD(thread_xor_ln284_fu_306_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( add_ln284_reg_386 );

    SC_METHOD(thread_zext_ln185_fu_187_p1);
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_zext_ln284_fu_270_p1);
    sensitive << ( a_fu_234_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln184_fu_175_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_EncryptBlock_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Blowfish_pary_s_address0, "(port)Blowfish_pary_s_address0");
    sc_trace(mVcdFile, Blowfish_pary_s_ce0, "(port)Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, Blowfish_pary_s_q0, "(port)Blowfish_pary_s_q0");
    sc_trace(mVcdFile, Blowfish_pary_s_address1, "(port)Blowfish_pary_s_address1");
    sc_trace(mVcdFile, Blowfish_pary_s_ce1, "(port)Blowfish_pary_s_ce1");
    sc_trace(mVcdFile, Blowfish_pary_s_q1, "(port)Blowfish_pary_s_q1");
    sc_trace(mVcdFile, Blowfish_sbox_s_address0, "(port)Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce0, "(port)Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, Blowfish_sbox_s_q0, "(port)Blowfish_sbox_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address1, "(port)Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce1, "(port)Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, Blowfish_sbox_s_q1, "(port)Blowfish_sbox_s_q1");
    sc_trace(mVcdFile, left_r_i, "(port)left_r_i");
    sc_trace(mVcdFile, left_r_o, "(port)left_r_o");
    sc_trace(mVcdFile, left_r_o_ap_vld, "(port)left_r_o_ap_vld");
    sc_trace(mVcdFile, right_r_i, "(port)right_r_i");
    sc_trace(mVcdFile, right_r_o, "(port)right_r_o");
    sc_trace(mVcdFile, right_r_o_ap_vld, "(port)right_r_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_181_p2, "i_fu_181_p2");
    sc_trace(mVcdFile, i_reg_341, "i_reg_341");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln184_fu_175_p2, "icmp_ln184_fu_175_p2");
    sc_trace(mVcdFile, temp_1_fu_216_p2, "temp_1_fu_216_p2");
    sc_trace(mVcdFile, temp_1_reg_361, "temp_1_reg_361");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, c_reg_366, "c_reg_366");
    sc_trace(mVcdFile, d_fu_264_p2, "d_fu_264_p2");
    sc_trace(mVcdFile, d_reg_371, "d_reg_371");
    sc_trace(mVcdFile, add_ln284_fu_284_p2, "add_ln284_fu_284_p2");
    sc_trace(mVcdFile, add_ln284_reg_386, "add_ln284_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_reg_164, "i_0_reg_164");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln185_fu_187_p1, "zext_ln185_fu_187_p1");
    sc_trace(mVcdFile, zext_ln284_fu_270_p1, "zext_ln284_fu_270_p1");
    sc_trace(mVcdFile, tmp_fu_275_p3, "tmp_fu_275_p3");
    sc_trace(mVcdFile, tmp_1_fu_290_p3, "tmp_1_fu_290_p3");
    sc_trace(mVcdFile, tmp_2_fu_298_p3, "tmp_2_fu_298_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, xor_ln186_fu_317_p2, "xor_ln186_fu_317_p2");
    sc_trace(mVcdFile, xor_ln198_fu_331_p2, "xor_ln198_fu_331_p2");
    sc_trace(mVcdFile, xor_ln197_fu_324_p2, "xor_ln197_fu_324_p2");
    sc_trace(mVcdFile, trunc_ln185_5_fu_212_p1, "trunc_ln185_5_fu_212_p1");
    sc_trace(mVcdFile, trunc_ln185_4_fu_208_p1, "trunc_ln185_4_fu_208_p1");
    sc_trace(mVcdFile, trunc_ln185_3_fu_204_p1, "trunc_ln185_3_fu_204_p1");
    sc_trace(mVcdFile, trunc_ln185_2_fu_200_p1, "trunc_ln185_2_fu_200_p1");
    sc_trace(mVcdFile, xor_ln275_1_fu_228_p2, "xor_ln275_1_fu_228_p2");
    sc_trace(mVcdFile, xor_ln275_fu_222_p2, "xor_ln275_fu_222_p2");
    sc_trace(mVcdFile, trunc_ln185_1_fu_196_p1, "trunc_ln185_1_fu_196_p1");
    sc_trace(mVcdFile, trunc_ln185_fu_192_p1, "trunc_ln185_fu_192_p1");
    sc_trace(mVcdFile, a_fu_234_p4, "a_fu_234_p4");
    sc_trace(mVcdFile, b_fu_244_p4, "b_fu_244_p4");
    sc_trace(mVcdFile, xor_ln284_fu_306_p2, "xor_ln284_fu_306_p2");
    sc_trace(mVcdFile, add_ln284_1_fu_311_p2, "add_ln284_1_fu_311_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Blowfish_EncryptBlock.hdltvin.dat");
    mHdltvoutHandle.open("Blowfish_EncryptBlock.hdltvout.dat");
}

Blowfish_EncryptBlock::~Blowfish_EncryptBlock() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Blowfish_EncryptBlock::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_164 = i_reg_341.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_164 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        add_ln284_reg_386 = add_ln284_fu_284_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_366 = xor_ln275_fu_222_p2.read().range(15, 8);
        d_reg_371 = d_fu_264_p2.read();
        temp_1_reg_361 = temp_1_fu_216_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_341 = i_fu_181_p2.read();
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_pary_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(icmp_ln184_fu_175_p2.read(), ap_const_lv1_1)) {
            Blowfish_pary_s_address0 =  (sc_lv<5>) (ap_const_lv64_10);
        } else if (esl_seteq<1,1,1>(icmp_ln184_fu_175_p2.read(), ap_const_lv1_0)) {
            Blowfish_pary_s_address0 =  (sc_lv<5>) (zext_ln185_fu_187_p1.read());
        } else {
            Blowfish_pary_s_address0 = "XXXXX";
        }
    } else {
        Blowfish_pary_s_address0 = "XXXXX";
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_pary_s_address1() {
    Blowfish_pary_s_address1 =  (sc_lv<5>) (ap_const_lv64_11);
}

void Blowfish_EncryptBlock::thread_Blowfish_pary_s_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln184_fu_175_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln184_fu_175_p2.read(), ap_const_lv1_1)))) {
        Blowfish_pary_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_pary_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_pary_s_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_pary_s_ce1 = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_sbox_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (tmp_1_fu_290_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (zext_ln284_fu_270_p1.read());
    } else {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_sbox_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_2_fu_298_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_fu_275_p3.read());
    } else {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_sbox_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        Blowfish_sbox_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_Blowfish_sbox_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        Blowfish_sbox_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce1 = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_a_fu_234_p4() {
    a_fu_234_p4 = temp_1_fu_216_p2.read().range(31, 24);
}

void Blowfish_EncryptBlock::thread_add_ln284_1_fu_311_p2() {
    add_ln284_1_fu_311_p2 = (!Blowfish_sbox_s_q1.read().is_01() || !xor_ln284_fu_306_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q1.read()) + sc_biguint<32>(xor_ln284_fu_306_p2.read()));
}

void Blowfish_EncryptBlock::thread_add_ln284_fu_284_p2() {
    add_ln284_fu_284_p2 = (!Blowfish_sbox_s_q0.read().is_01() || !Blowfish_sbox_s_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q0.read()) + sc_biguint<32>(Blowfish_sbox_s_q1.read()));
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_EncryptBlock::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_EncryptBlock::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_b_fu_244_p4() {
    b_fu_244_p4 = xor_ln275_1_fu_228_p2.read().range(23, 16);
}

void Blowfish_EncryptBlock::thread_d_fu_264_p2() {
    d_fu_264_p2 = (trunc_ln185_1_fu_196_p1.read() ^ trunc_ln185_fu_192_p1.read());
}

void Blowfish_EncryptBlock::thread_i_fu_181_p2() {
    i_fu_181_p2 = (!i_0_reg_164.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_164.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Blowfish_EncryptBlock::thread_icmp_ln184_fu_175_p2() {
    icmp_ln184_fu_175_p2 = (!i_0_reg_164.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_164.read() == ap_const_lv5_10);
}

void Blowfish_EncryptBlock::thread_left_r_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        left_r_o = xor_ln198_fu_331_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        left_r_o = xor_ln186_fu_317_p2.read();
    } else {
        left_r_o =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Blowfish_EncryptBlock::thread_left_r_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        left_r_o_ap_vld = ap_const_logic_1;
    } else {
        left_r_o_ap_vld = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_right_r_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        right_r_o = xor_ln197_fu_324_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_r_o = temp_1_reg_361.read();
    } else {
        right_r_o =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Blowfish_EncryptBlock::thread_right_r_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        right_r_o_ap_vld = ap_const_logic_1;
    } else {
        right_r_o_ap_vld = ap_const_logic_0;
    }
}

void Blowfish_EncryptBlock::thread_temp_1_fu_216_p2() {
    temp_1_fu_216_p2 = (left_r_i.read() ^ Blowfish_pary_s_q0.read());
}

void Blowfish_EncryptBlock::thread_tmp_1_fu_290_p3() {
    tmp_1_fu_290_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_366.read());
}

void Blowfish_EncryptBlock::thread_tmp_2_fu_298_p3() {
    tmp_2_fu_298_p3 = esl_concat<56,8>(ap_const_lv56_3, d_reg_371.read());
}

void Blowfish_EncryptBlock::thread_tmp_fu_275_p3() {
    tmp_fu_275_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_244_p4.read());
}

void Blowfish_EncryptBlock::thread_trunc_ln185_1_fu_196_p1() {
    trunc_ln185_1_fu_196_p1 = left_r_i.read().range(8-1, 0);
}

void Blowfish_EncryptBlock::thread_trunc_ln185_2_fu_200_p1() {
    trunc_ln185_2_fu_200_p1 = Blowfish_pary_s_q0.read().range(24-1, 0);
}

void Blowfish_EncryptBlock::thread_trunc_ln185_3_fu_204_p1() {
    trunc_ln185_3_fu_204_p1 = left_r_i.read().range(24-1, 0);
}

void Blowfish_EncryptBlock::thread_trunc_ln185_4_fu_208_p1() {
    trunc_ln185_4_fu_208_p1 = Blowfish_pary_s_q0.read().range(16-1, 0);
}

void Blowfish_EncryptBlock::thread_trunc_ln185_5_fu_212_p1() {
    trunc_ln185_5_fu_212_p1 = left_r_i.read().range(16-1, 0);
}

void Blowfish_EncryptBlock::thread_trunc_ln185_fu_192_p1() {
    trunc_ln185_fu_192_p1 = Blowfish_pary_s_q0.read().range(8-1, 0);
}

void Blowfish_EncryptBlock::thread_xor_ln186_fu_317_p2() {
    xor_ln186_fu_317_p2 = (right_r_i.read() ^ add_ln284_1_fu_311_p2.read());
}

void Blowfish_EncryptBlock::thread_xor_ln197_fu_324_p2() {
    xor_ln197_fu_324_p2 = (Blowfish_pary_s_q0.read() ^ left_r_i.read());
}

void Blowfish_EncryptBlock::thread_xor_ln198_fu_331_p2() {
    xor_ln198_fu_331_p2 = (right_r_i.read() ^ Blowfish_pary_s_q1.read());
}

void Blowfish_EncryptBlock::thread_xor_ln275_1_fu_228_p2() {
    xor_ln275_1_fu_228_p2 = (trunc_ln185_3_fu_204_p1.read() ^ trunc_ln185_2_fu_200_p1.read());
}

void Blowfish_EncryptBlock::thread_xor_ln275_fu_222_p2() {
    xor_ln275_fu_222_p2 = (trunc_ln185_5_fu_212_p1.read() ^ trunc_ln185_4_fu_208_p1.read());
}

void Blowfish_EncryptBlock::thread_xor_ln284_fu_306_p2() {
    xor_ln284_fu_306_p2 = (Blowfish_sbox_s_q0.read() ^ add_ln284_reg_386.read());
}

void Blowfish_EncryptBlock::thread_zext_ln185_fu_187_p1() {
    zext_ln185_fu_187_p1 = esl_zext<64,5>(i_0_reg_164.read());
}

void Blowfish_EncryptBlock::thread_zext_ln284_fu_270_p1() {
    zext_ln284_fu_270_p1 = esl_zext<64,8>(a_fu_234_p4.read());
}

void Blowfish_EncryptBlock::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln184_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void Blowfish_EncryptBlock::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address0\" :  \"" << Blowfish_pary_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce0\" :  \"" << Blowfish_pary_s_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q0\" :  \"" << Blowfish_pary_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address1\" :  \"" << Blowfish_pary_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce1\" :  \"" << Blowfish_pary_s_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q1\" :  \"" << Blowfish_pary_s_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address0\" :  \"" << Blowfish_sbox_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce0\" :  \"" << Blowfish_sbox_s_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q0\" :  \"" << Blowfish_sbox_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address1\" :  \"" << Blowfish_sbox_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce1\" :  \"" << Blowfish_sbox_s_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q1\" :  \"" << Blowfish_sbox_s_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"left_r_i\" :  \"" << left_r_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"left_r_o\" :  \"" << left_r_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"left_r_o_ap_vld\" :  \"" << left_r_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"right_r_i\" :  \"" << right_r_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"right_r_o\" :  \"" << right_r_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"right_r_o_ap_vld\" :  \"" << right_r_o_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

