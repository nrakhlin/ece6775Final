// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sEncryptBlock.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sEncryptBlock::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sEncryptBlock::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state1 = "1";
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state2 = "10";
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state3 = "100";
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sEncryptBlock::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sEncryptBlock::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sEncryptBlock::ap_const_lv32_1 = "1";
const sc_lv<1> sEncryptBlock::ap_const_lv1_0 = "0";
const sc_lv<1> sEncryptBlock::ap_const_lv1_1 = "1";
const sc_lv<32> sEncryptBlock::ap_const_lv32_2 = "10";
const sc_lv<32> sEncryptBlock::ap_const_lv32_3 = "11";
const sc_lv<32> sEncryptBlock::ap_const_lv32_4 = "100";
const sc_lv<5> sEncryptBlock::ap_const_lv5_0 = "00000";
const sc_lv<64> sEncryptBlock::ap_const_lv64_10 = "10000";
const sc_lv<64> sEncryptBlock::ap_const_lv64_11 = "10001";
const sc_lv<32> sEncryptBlock::ap_const_lv32_5 = "101";
const sc_lv<5> sEncryptBlock::ap_const_lv5_10 = "10000";
const sc_lv<5> sEncryptBlock::ap_const_lv5_1 = "1";
const sc_lv<32> sEncryptBlock::ap_const_lv32_18 = "11000";
const sc_lv<32> sEncryptBlock::ap_const_lv32_1F = "11111";
const sc_lv<32> sEncryptBlock::ap_const_lv32_10 = "10000";
const sc_lv<32> sEncryptBlock::ap_const_lv32_17 = "10111";
const sc_lv<32> sEncryptBlock::ap_const_lv32_8 = "1000";
const sc_lv<32> sEncryptBlock::ap_const_lv32_F = "1111";
const sc_lv<56> sEncryptBlock::ap_const_lv56_1 = "1";
const sc_lv<56> sEncryptBlock::ap_const_lv56_2 = "10";
const sc_lv<56> sEncryptBlock::ap_const_lv56_3 = "11";
const bool sEncryptBlock::ap_const_boolean_1 = true;

sEncryptBlock::sEncryptBlock(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Blowfish_pary_s_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln224_fu_181_p2 );
    sensitive << ( zext_ln225_fu_193_p1 );

    SC_METHOD(thread_Blowfish_pary_s_address1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln224_fu_181_p2 );

    SC_METHOD(thread_Blowfish_pary_s_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln281_fu_270_p1 );
    sensitive << ( tmp_1_fu_290_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_275_p3 );
    sensitive << ( tmp_2_fu_298_p3 );

    SC_METHOD(thread_Blowfish_sbox_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_fu_234_p4);
    sensitive << ( grp_fu_175_p2 );

    SC_METHOD(thread_add_ln281_1_fu_311_p2);
    sensitive << ( Blowfish_sbox_s_q1 );
    sensitive << ( xor_ln281_fu_306_p2 );

    SC_METHOD(thread_add_ln281_fu_284_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( Blowfish_sbox_s_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln241_fu_323_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_fu_175_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_b_fu_244_p4);
    sensitive << ( xor_ln272_1_fu_228_p2 );

    SC_METHOD(thread_d_fu_264_p2);
    sensitive << ( trunc_ln225_1_fu_202_p1 );
    sensitive << ( trunc_ln225_fu_198_p1 );

    SC_METHOD(thread_grp_fu_175_p2);
    sensitive << ( Blowfish_pary_s_q0 );
    sensitive << ( temp_reg_144 );

    SC_METHOD(thread_i_fu_187_p2);
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_icmp_ln224_fu_181_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_tmp_1_fu_290_p3);
    sensitive << ( c_reg_379 );

    SC_METHOD(thread_tmp_2_fu_298_p3);
    sensitive << ( d_reg_384 );

    SC_METHOD(thread_tmp_fu_275_p3);
    sensitive << ( b_fu_244_p4 );

    SC_METHOD(thread_trunc_ln225_1_fu_202_p1);
    sensitive << ( temp_reg_144 );

    SC_METHOD(thread_trunc_ln225_2_fu_206_p1);
    sensitive << ( temp_reg_144 );

    SC_METHOD(thread_trunc_ln225_3_fu_210_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln225_4_fu_214_p1);
    sensitive << ( temp_reg_144 );

    SC_METHOD(thread_trunc_ln225_5_fu_218_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_trunc_ln225_fu_198_p1);
    sensitive << ( Blowfish_pary_s_q0 );

    SC_METHOD(thread_xor_ln226_fu_317_p2);
    sensitive << ( right_new_0_reg_154 );
    sensitive << ( add_ln281_1_fu_311_p2 );

    SC_METHOD(thread_xor_ln241_fu_323_p2);
    sensitive << ( Blowfish_pary_s_q1 );
    sensitive << ( right_new_0_reg_154 );

    SC_METHOD(thread_xor_ln272_1_fu_228_p2);
    sensitive << ( trunc_ln225_3_fu_210_p1 );
    sensitive << ( trunc_ln225_2_fu_206_p1 );

    SC_METHOD(thread_xor_ln272_fu_222_p2);
    sensitive << ( trunc_ln225_5_fu_218_p1 );
    sensitive << ( trunc_ln225_4_fu_214_p1 );

    SC_METHOD(thread_xor_ln281_fu_306_p2);
    sensitive << ( Blowfish_sbox_s_q0 );
    sensitive << ( add_ln281_reg_399 );

    SC_METHOD(thread_zext_ln225_fu_193_p1);
    sensitive << ( i_0_reg_164 );

    SC_METHOD(thread_zext_ln281_fu_270_p1);
    sensitive << ( a_fu_234_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln224_fu_181_p2 );

    ap_CS_fsm = "000001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sEncryptBlock_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Blowfish_pary_s_address0, "(port)Blowfish_pary_s_address0");
    sc_trace(mVcdFile, Blowfish_pary_s_ce0, "(port)Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, Blowfish_pary_s_q0, "(port)Blowfish_pary_s_q0");
    sc_trace(mVcdFile, Blowfish_pary_s_address1, "(port)Blowfish_pary_s_address1");
    sc_trace(mVcdFile, Blowfish_pary_s_ce1, "(port)Blowfish_pary_s_ce1");
    sc_trace(mVcdFile, Blowfish_pary_s_q1, "(port)Blowfish_pary_s_q1");
    sc_trace(mVcdFile, Blowfish_sbox_s_address0, "(port)Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce0, "(port)Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, Blowfish_sbox_s_q0, "(port)Blowfish_sbox_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address1, "(port)Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce1, "(port)Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, Blowfish_sbox_s_q1, "(port)Blowfish_sbox_s_q1");
    sc_trace(mVcdFile, left_r, "(port)left_r");
    sc_trace(mVcdFile, right_r, "(port)right_r");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_187_p2, "i_fu_187_p2");
    sc_trace(mVcdFile, i_reg_354, "i_reg_354");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln224_fu_181_p2, "icmp_ln224_fu_181_p2");
    sc_trace(mVcdFile, grp_fu_175_p2, "grp_fu_175_p2");
    sc_trace(mVcdFile, temp_1_reg_374, "temp_1_reg_374");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, c_reg_379, "c_reg_379");
    sc_trace(mVcdFile, d_fu_264_p2, "d_fu_264_p2");
    sc_trace(mVcdFile, d_reg_384, "d_reg_384");
    sc_trace(mVcdFile, add_ln281_fu_284_p2, "add_ln281_fu_284_p2");
    sc_trace(mVcdFile, add_ln281_reg_399, "add_ln281_reg_399");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, xor_ln226_fu_317_p2, "xor_ln226_fu_317_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, temp_reg_144, "temp_reg_144");
    sc_trace(mVcdFile, right_new_0_reg_154, "right_new_0_reg_154");
    sc_trace(mVcdFile, i_0_reg_164, "i_0_reg_164");
    sc_trace(mVcdFile, zext_ln225_fu_193_p1, "zext_ln225_fu_193_p1");
    sc_trace(mVcdFile, zext_ln281_fu_270_p1, "zext_ln281_fu_270_p1");
    sc_trace(mVcdFile, tmp_fu_275_p3, "tmp_fu_275_p3");
    sc_trace(mVcdFile, tmp_1_fu_290_p3, "tmp_1_fu_290_p3");
    sc_trace(mVcdFile, tmp_2_fu_298_p3, "tmp_2_fu_298_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, trunc_ln225_5_fu_218_p1, "trunc_ln225_5_fu_218_p1");
    sc_trace(mVcdFile, trunc_ln225_4_fu_214_p1, "trunc_ln225_4_fu_214_p1");
    sc_trace(mVcdFile, trunc_ln225_3_fu_210_p1, "trunc_ln225_3_fu_210_p1");
    sc_trace(mVcdFile, trunc_ln225_2_fu_206_p1, "trunc_ln225_2_fu_206_p1");
    sc_trace(mVcdFile, xor_ln272_1_fu_228_p2, "xor_ln272_1_fu_228_p2");
    sc_trace(mVcdFile, xor_ln272_fu_222_p2, "xor_ln272_fu_222_p2");
    sc_trace(mVcdFile, trunc_ln225_1_fu_202_p1, "trunc_ln225_1_fu_202_p1");
    sc_trace(mVcdFile, trunc_ln225_fu_198_p1, "trunc_ln225_fu_198_p1");
    sc_trace(mVcdFile, a_fu_234_p4, "a_fu_234_p4");
    sc_trace(mVcdFile, b_fu_244_p4, "b_fu_244_p4");
    sc_trace(mVcdFile, xor_ln281_fu_306_p2, "xor_ln281_fu_306_p2");
    sc_trace(mVcdFile, add_ln281_1_fu_311_p2, "add_ln281_1_fu_311_p2");
    sc_trace(mVcdFile, xor_ln241_fu_323_p2, "xor_ln241_fu_323_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sEncryptBlock::~sEncryptBlock() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sEncryptBlock::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_0_preg = xor_ln241_fu_323_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_1_preg = grp_fu_175_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_164 = i_reg_354.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_164 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_new_0_reg_154 = temp_1_reg_374.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        right_new_0_reg_154 = right_r.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        temp_reg_144 = xor_ln226_fu_317_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        temp_reg_144 = left_r.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        add_ln281_reg_399 = add_ln281_fu_284_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_379 = xor_ln272_fu_222_p2.read().range(15, 8);
        d_reg_384 = d_fu_264_p2.read();
        temp_1_reg_374 = grp_fu_175_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_354 = i_fu_187_p2.read();
    }
}

void sEncryptBlock::thread_Blowfish_pary_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(icmp_ln224_fu_181_p2.read(), ap_const_lv1_1)) {
            Blowfish_pary_s_address0 =  (sc_lv<5>) (ap_const_lv64_10);
        } else if (esl_seteq<1,1,1>(icmp_ln224_fu_181_p2.read(), ap_const_lv1_0)) {
            Blowfish_pary_s_address0 =  (sc_lv<5>) (zext_ln225_fu_193_p1.read());
        } else {
            Blowfish_pary_s_address0 = "XXXXX";
        }
    } else {
        Blowfish_pary_s_address0 = "XXXXX";
    }
}

void sEncryptBlock::thread_Blowfish_pary_s_address1() {
    Blowfish_pary_s_address1 =  (sc_lv<5>) (ap_const_lv64_11);
}

void sEncryptBlock::thread_Blowfish_pary_s_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln224_fu_181_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln224_fu_181_p2.read(), ap_const_lv1_1)))) {
        Blowfish_pary_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_pary_s_ce0 = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_Blowfish_pary_s_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_pary_s_ce1 = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_Blowfish_sbox_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (tmp_1_fu_290_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) (zext_ln281_fu_270_p1.read());
    } else {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void sEncryptBlock::thread_Blowfish_sbox_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_2_fu_298_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) (tmp_fu_275_p3.read());
    } else {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void sEncryptBlock::thread_Blowfish_sbox_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        Blowfish_sbox_s_ce0 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce0 = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_Blowfish_sbox_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        Blowfish_sbox_s_ce1 = ap_const_logic_1;
    } else {
        Blowfish_sbox_s_ce1 = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_a_fu_234_p4() {
    a_fu_234_p4 = grp_fu_175_p2.read().range(31, 24);
}

void sEncryptBlock::thread_add_ln281_1_fu_311_p2() {
    add_ln281_1_fu_311_p2 = (!Blowfish_sbox_s_q1.read().is_01() || !xor_ln281_fu_306_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q1.read()) + sc_biguint<32>(xor_ln281_fu_306_p2.read()));
}

void sEncryptBlock::thread_add_ln281_fu_284_p2() {
    add_ln281_fu_284_p2 = (!Blowfish_sbox_s_q0.read().is_01() || !Blowfish_sbox_s_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(Blowfish_sbox_s_q0.read()) + sc_biguint<32>(Blowfish_sbox_s_q1.read()));
}

void sEncryptBlock::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sEncryptBlock::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sEncryptBlock::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sEncryptBlock::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sEncryptBlock::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sEncryptBlock::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sEncryptBlock::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sEncryptBlock::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_0 = xor_ln241_fu_323_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void sEncryptBlock::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_1 = grp_fu_175_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void sEncryptBlock::thread_b_fu_244_p4() {
    b_fu_244_p4 = xor_ln272_1_fu_228_p2.read().range(23, 16);
}

void sEncryptBlock::thread_d_fu_264_p2() {
    d_fu_264_p2 = (trunc_ln225_1_fu_202_p1.read() ^ trunc_ln225_fu_198_p1.read());
}

void sEncryptBlock::thread_grp_fu_175_p2() {
    grp_fu_175_p2 = (Blowfish_pary_s_q0.read() ^ temp_reg_144.read());
}

void sEncryptBlock::thread_i_fu_187_p2() {
    i_fu_187_p2 = (!i_0_reg_164.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_164.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void sEncryptBlock::thread_icmp_ln224_fu_181_p2() {
    icmp_ln224_fu_181_p2 = (!i_0_reg_164.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_164.read() == ap_const_lv5_10);
}

void sEncryptBlock::thread_tmp_1_fu_290_p3() {
    tmp_1_fu_290_p3 = esl_concat<56,8>(ap_const_lv56_2, c_reg_379.read());
}

void sEncryptBlock::thread_tmp_2_fu_298_p3() {
    tmp_2_fu_298_p3 = esl_concat<56,8>(ap_const_lv56_3, d_reg_384.read());
}

void sEncryptBlock::thread_tmp_fu_275_p3() {
    tmp_fu_275_p3 = esl_concat<56,8>(ap_const_lv56_1, b_fu_244_p4.read());
}

void sEncryptBlock::thread_trunc_ln225_1_fu_202_p1() {
    trunc_ln225_1_fu_202_p1 = temp_reg_144.read().range(8-1, 0);
}

void sEncryptBlock::thread_trunc_ln225_2_fu_206_p1() {
    trunc_ln225_2_fu_206_p1 = temp_reg_144.read().range(24-1, 0);
}

void sEncryptBlock::thread_trunc_ln225_3_fu_210_p1() {
    trunc_ln225_3_fu_210_p1 = Blowfish_pary_s_q0.read().range(24-1, 0);
}

void sEncryptBlock::thread_trunc_ln225_4_fu_214_p1() {
    trunc_ln225_4_fu_214_p1 = temp_reg_144.read().range(16-1, 0);
}

void sEncryptBlock::thread_trunc_ln225_5_fu_218_p1() {
    trunc_ln225_5_fu_218_p1 = Blowfish_pary_s_q0.read().range(16-1, 0);
}

void sEncryptBlock::thread_trunc_ln225_fu_198_p1() {
    trunc_ln225_fu_198_p1 = Blowfish_pary_s_q0.read().range(8-1, 0);
}

void sEncryptBlock::thread_xor_ln226_fu_317_p2() {
    xor_ln226_fu_317_p2 = (right_new_0_reg_154.read() ^ add_ln281_1_fu_311_p2.read());
}

void sEncryptBlock::thread_xor_ln241_fu_323_p2() {
    xor_ln241_fu_323_p2 = (Blowfish_pary_s_q1.read() ^ right_new_0_reg_154.read());
}

void sEncryptBlock::thread_xor_ln272_1_fu_228_p2() {
    xor_ln272_1_fu_228_p2 = (trunc_ln225_3_fu_210_p1.read() ^ trunc_ln225_2_fu_206_p1.read());
}

void sEncryptBlock::thread_xor_ln272_fu_222_p2() {
    xor_ln272_fu_222_p2 = (trunc_ln225_5_fu_218_p1.read() ^ trunc_ln225_4_fu_214_p1.read());
}

void sEncryptBlock::thread_xor_ln281_fu_306_p2() {
    xor_ln281_fu_306_p2 = (Blowfish_sbox_s_q0.read() ^ add_ln281_reg_399.read());
}

void sEncryptBlock::thread_zext_ln225_fu_193_p1() {
    zext_ln225_fu_193_p1 = esl_zext<64,5>(i_0_reg_164.read());
}

void sEncryptBlock::thread_zext_ln281_fu_270_p1() {
    zext_ln281_fu_270_p1 = esl_zext<64,8>(a_fu_234_p4.read());
}

void sEncryptBlock::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln224_fu_181_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

