// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Encrypt_Decrypt_SetKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Encrypt_Decrypt_SetKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Encrypt_Decrypt_SetKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state1 = "1";
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state2 = "10";
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state3 = "100";
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state4 = "1000";
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state5 = "10000";
const sc_lv<6> Blowfish_Encrypt_Decrypt_SetKey::ap_ST_fsm_state6 = "100000";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_1 = "1";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_5 = "101";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv32_3 = "11";
const sc_lv<1> Blowfish_Encrypt_Decrypt_SetKey::ap_const_lv1_0 = "0";
const bool Blowfish_Encrypt_Decrypt_SetKey::ap_const_boolean_1 = true;

Blowfish_Encrypt_Decrypt_SetKey::Blowfish_Encrypt_Decrypt_SetKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_SetKey_fu_48 = new SetKey("grp_SetKey_fu_48");
    grp_SetKey_fu_48->ap_clk(ap_clk);
    grp_SetKey_fu_48->ap_rst(ap_rst);
    grp_SetKey_fu_48->ap_start(grp_SetKey_fu_48_ap_start);
    grp_SetKey_fu_48->ap_done(grp_SetKey_fu_48_ap_done);
    grp_SetKey_fu_48->ap_idle(grp_SetKey_fu_48_ap_idle);
    grp_SetKey_fu_48->ap_ready(grp_SetKey_fu_48_ap_ready);
    grp_SetKey_fu_48->Blowfish_pary_s_address0(grp_SetKey_fu_48_Blowfish_pary_s_address0);
    grp_SetKey_fu_48->Blowfish_pary_s_ce0(grp_SetKey_fu_48_Blowfish_pary_s_ce0);
    grp_SetKey_fu_48->Blowfish_pary_s_we0(grp_SetKey_fu_48_Blowfish_pary_s_we0);
    grp_SetKey_fu_48->Blowfish_pary_s_d0(grp_SetKey_fu_48_Blowfish_pary_s_d0);
    grp_SetKey_fu_48->Blowfish_pary_s_q0(Blowfish_pary_s_q0);
    grp_SetKey_fu_48->Blowfish_pary_s_address1(grp_SetKey_fu_48_Blowfish_pary_s_address1);
    grp_SetKey_fu_48->Blowfish_pary_s_ce1(grp_SetKey_fu_48_Blowfish_pary_s_ce1);
    grp_SetKey_fu_48->Blowfish_pary_s_we1(grp_SetKey_fu_48_Blowfish_pary_s_we1);
    grp_SetKey_fu_48->Blowfish_pary_s_d1(grp_SetKey_fu_48_Blowfish_pary_s_d1);
    grp_SetKey_fu_48->Blowfish_pary_s_q1(Blowfish_pary_s_q1);
    grp_SetKey_fu_48->Blowfish_sbox_s_address0(grp_SetKey_fu_48_Blowfish_sbox_s_address0);
    grp_SetKey_fu_48->Blowfish_sbox_s_ce0(grp_SetKey_fu_48_Blowfish_sbox_s_ce0);
    grp_SetKey_fu_48->Blowfish_sbox_s_we0(grp_SetKey_fu_48_Blowfish_sbox_s_we0);
    grp_SetKey_fu_48->Blowfish_sbox_s_d0(grp_SetKey_fu_48_Blowfish_sbox_s_d0);
    grp_SetKey_fu_48->Blowfish_sbox_s_q0(Blowfish_sbox_s_q0);
    grp_SetKey_fu_48->Blowfish_sbox_s_address1(grp_SetKey_fu_48_Blowfish_sbox_s_address1);
    grp_SetKey_fu_48->Blowfish_sbox_s_ce1(grp_SetKey_fu_48_Blowfish_sbox_s_ce1);
    grp_SetKey_fu_48->Blowfish_sbox_s_we1(grp_SetKey_fu_48_Blowfish_sbox_s_we1);
    grp_SetKey_fu_48->Blowfish_sbox_s_d1(grp_SetKey_fu_48_Blowfish_sbox_s_d1);
    grp_SetKey_fu_48->Blowfish_sbox_s_q1(Blowfish_sbox_s_q1);
    grp_SetKey_fu_48->key_address0(grp_SetKey_fu_48_key_address0);
    grp_SetKey_fu_48->key_ce0(grp_SetKey_fu_48_key_ce0);
    grp_SetKey_fu_48->key_q0(key_q0);
    grp_SetKey_fu_48->key_address1(grp_SetKey_fu_48_key_address1);
    grp_SetKey_fu_48->key_ce1(grp_SetKey_fu_48_key_ce1);
    grp_SetKey_fu_48->key_q1(key_q1);
    grp_SetKey_fu_48->key_byte_length(key_byte_length);
    grp_Decrypt_fu_64 = new Decrypt("grp_Decrypt_fu_64");
    grp_Decrypt_fu_64->ap_clk(ap_clk);
    grp_Decrypt_fu_64->ap_rst(ap_rst);
    grp_Decrypt_fu_64->ap_start(grp_Decrypt_fu_64_ap_start);
    grp_Decrypt_fu_64->ap_done(grp_Decrypt_fu_64_ap_done);
    grp_Decrypt_fu_64->ap_idle(grp_Decrypt_fu_64_ap_idle);
    grp_Decrypt_fu_64->ap_ready(grp_Decrypt_fu_64_ap_ready);
    grp_Decrypt_fu_64->Blowfish_pary_s_address0(grp_Decrypt_fu_64_Blowfish_pary_s_address0);
    grp_Decrypt_fu_64->Blowfish_pary_s_ce0(grp_Decrypt_fu_64_Blowfish_pary_s_ce0);
    grp_Decrypt_fu_64->Blowfish_pary_s_q0(Blowfish_pary_s_q0);
    grp_Decrypt_fu_64->Blowfish_sbox_s_address0(grp_Decrypt_fu_64_Blowfish_sbox_s_address0);
    grp_Decrypt_fu_64->Blowfish_sbox_s_ce0(grp_Decrypt_fu_64_Blowfish_sbox_s_ce0);
    grp_Decrypt_fu_64->Blowfish_sbox_s_q0(Blowfish_sbox_s_q0);
    grp_Decrypt_fu_64->Blowfish_sbox_s_address1(grp_Decrypt_fu_64_Blowfish_sbox_s_address1);
    grp_Decrypt_fu_64->Blowfish_sbox_s_ce1(grp_Decrypt_fu_64_Blowfish_sbox_s_ce1);
    grp_Decrypt_fu_64->Blowfish_sbox_s_q1(Blowfish_sbox_s_q1);
    grp_Decrypt_fu_64->dst_address0(grp_Decrypt_fu_64_dst_address0);
    grp_Decrypt_fu_64->dst_ce0(grp_Decrypt_fu_64_dst_ce0);
    grp_Decrypt_fu_64->dst_we0(grp_Decrypt_fu_64_dst_we0);
    grp_Decrypt_fu_64->dst_d0(grp_Decrypt_fu_64_dst_d0);
    grp_Decrypt_fu_64->dst_q0(decrypted_q0);
    grp_Decrypt_fu_64->dst_address1(grp_Decrypt_fu_64_dst_address1);
    grp_Decrypt_fu_64->dst_ce1(grp_Decrypt_fu_64_dst_ce1);
    grp_Decrypt_fu_64->dst_we1(grp_Decrypt_fu_64_dst_we1);
    grp_Decrypt_fu_64->dst_d1(grp_Decrypt_fu_64_dst_d1);
    grp_Decrypt_fu_64->dst_q1(decrypted_q1);
    grp_Decrypt_fu_64->src_address0(grp_Decrypt_fu_64_src_address0);
    grp_Decrypt_fu_64->src_ce0(grp_Decrypt_fu_64_src_ce0);
    grp_Decrypt_fu_64->src_q0(encrypted_q0);
    grp_Encrypt_fu_76 = new Encrypt("grp_Encrypt_fu_76");
    grp_Encrypt_fu_76->ap_clk(ap_clk);
    grp_Encrypt_fu_76->ap_rst(ap_rst);
    grp_Encrypt_fu_76->ap_start(grp_Encrypt_fu_76_ap_start);
    grp_Encrypt_fu_76->ap_done(grp_Encrypt_fu_76_ap_done);
    grp_Encrypt_fu_76->ap_idle(grp_Encrypt_fu_76_ap_idle);
    grp_Encrypt_fu_76->ap_ready(grp_Encrypt_fu_76_ap_ready);
    grp_Encrypt_fu_76->Blowfish_pary_s_address0(grp_Encrypt_fu_76_Blowfish_pary_s_address0);
    grp_Encrypt_fu_76->Blowfish_pary_s_ce0(grp_Encrypt_fu_76_Blowfish_pary_s_ce0);
    grp_Encrypt_fu_76->Blowfish_pary_s_q0(Blowfish_pary_s_q0);
    grp_Encrypt_fu_76->Blowfish_sbox_s_address0(grp_Encrypt_fu_76_Blowfish_sbox_s_address0);
    grp_Encrypt_fu_76->Blowfish_sbox_s_ce0(grp_Encrypt_fu_76_Blowfish_sbox_s_ce0);
    grp_Encrypt_fu_76->Blowfish_sbox_s_q0(Blowfish_sbox_s_q0);
    grp_Encrypt_fu_76->Blowfish_sbox_s_address1(grp_Encrypt_fu_76_Blowfish_sbox_s_address1);
    grp_Encrypt_fu_76->Blowfish_sbox_s_ce1(grp_Encrypt_fu_76_Blowfish_sbox_s_ce1);
    grp_Encrypt_fu_76->Blowfish_sbox_s_q1(Blowfish_sbox_s_q1);
    grp_Encrypt_fu_76->dst_address0(grp_Encrypt_fu_76_dst_address0);
    grp_Encrypt_fu_76->dst_ce0(grp_Encrypt_fu_76_dst_ce0);
    grp_Encrypt_fu_76->dst_we0(grp_Encrypt_fu_76_dst_we0);
    grp_Encrypt_fu_76->dst_d0(grp_Encrypt_fu_76_dst_d0);
    grp_Encrypt_fu_76->dst_q0(encrypted_q0);
    grp_Encrypt_fu_76->dst_address1(grp_Encrypt_fu_76_dst_address1);
    grp_Encrypt_fu_76->dst_ce1(grp_Encrypt_fu_76_dst_ce1);
    grp_Encrypt_fu_76->dst_we1(grp_Encrypt_fu_76_dst_we1);
    grp_Encrypt_fu_76->dst_d1(grp_Encrypt_fu_76_dst_d1);
    grp_Encrypt_fu_76->dst_q1(encrypted_q1);
    grp_Encrypt_fu_76->src_address0(grp_Encrypt_fu_76_src_address0);
    grp_Encrypt_fu_76->src_ce0(grp_Encrypt_fu_76_src_ce0);
    grp_Encrypt_fu_76->src_q0(plaintext_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Blowfish_pary_s_address0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_address0 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_pary_s_address0 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_pary_s_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_pary_s_address1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_ce0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_ce0 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_pary_s_ce0 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_pary_s_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_pary_s_ce1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_d0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_d1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_d1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_we0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_pary_s_we1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_pary_s_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_address0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_address0 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_sbox_s_address0 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_sbox_s_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_address1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_address1 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_sbox_s_address1 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_sbox_s_address1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_ce0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_ce0 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_sbox_s_ce0 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_sbox_s_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_ce1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_ce1 );
    sensitive << ( grp_Decrypt_fu_64_Blowfish_sbox_s_ce1 );
    sensitive << ( grp_Encrypt_fu_76_Blowfish_sbox_s_ce1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_Blowfish_sbox_s_d0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_d1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_d1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_we0);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Blowfish_sbox_s_we1);
    sensitive << ( grp_SetKey_fu_48_Blowfish_sbox_s_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_Decrypt_fu_64_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_Decrypt_fu_64_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_address0);
    sensitive << ( grp_Decrypt_fu_64_dst_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_address1);
    sensitive << ( grp_Decrypt_fu_64_dst_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_ce0);
    sensitive << ( grp_Decrypt_fu_64_dst_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_ce1);
    sensitive << ( grp_Decrypt_fu_64_dst_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_d0);
    sensitive << ( grp_Decrypt_fu_64_dst_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_d1);
    sensitive << ( grp_Decrypt_fu_64_dst_d1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_we0);
    sensitive << ( grp_Decrypt_fu_64_dst_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_decrypted_we1);
    sensitive << ( grp_Decrypt_fu_64_dst_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_encrypted_address0);
    sensitive << ( grp_Decrypt_fu_64_src_address0 );
    sensitive << ( grp_Encrypt_fu_76_dst_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_address1);
    sensitive << ( grp_Encrypt_fu_76_dst_address1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_ce0);
    sensitive << ( grp_Decrypt_fu_64_src_ce0 );
    sensitive << ( grp_Encrypt_fu_76_dst_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_ce1);
    sensitive << ( grp_Encrypt_fu_76_dst_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_d0);
    sensitive << ( grp_Encrypt_fu_76_dst_d0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_d1);
    sensitive << ( grp_Encrypt_fu_76_dst_d1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_we0);
    sensitive << ( grp_Encrypt_fu_76_dst_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encrypted_we1);
    sensitive << ( grp_Encrypt_fu_76_dst_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_Decrypt_fu_64_ap_start);
    sensitive << ( grp_Decrypt_fu_64_ap_start_reg );

    SC_METHOD(thread_grp_Encrypt_fu_76_ap_start);
    sensitive << ( grp_Encrypt_fu_76_ap_start_reg );

    SC_METHOD(thread_grp_SetKey_fu_48_ap_start);
    sensitive << ( grp_SetKey_fu_48_ap_start_reg );

    SC_METHOD(thread_key_address0);
    sensitive << ( grp_SetKey_fu_48_key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_address1);
    sensitive << ( grp_SetKey_fu_48_key_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( grp_SetKey_fu_48_key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_ce1);
    sensitive << ( grp_SetKey_fu_48_key_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_plaintext_address0);
    sensitive << ( grp_Encrypt_fu_76_src_address0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_plaintext_ce0);
    sensitive << ( grp_Encrypt_fu_76_src_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_set_key_read_read_fu_42_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( set_key );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_SetKey_fu_48_ap_done );
    sensitive << ( grp_Decrypt_fu_64_ap_done );
    sensitive << ( grp_Encrypt_fu_76_ap_done );
    sensitive << ( set_key_read_read_fu_42_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    grp_SetKey_fu_48_ap_start_reg = SC_LOGIC_0;
    grp_Decrypt_fu_64_ap_start_reg = SC_LOGIC_0;
    grp_Encrypt_fu_76_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Encrypt_Decrypt_SetKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Blowfish_pary_s_address0, "(port)Blowfish_pary_s_address0");
    sc_trace(mVcdFile, Blowfish_pary_s_ce0, "(port)Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, Blowfish_pary_s_we0, "(port)Blowfish_pary_s_we0");
    sc_trace(mVcdFile, Blowfish_pary_s_d0, "(port)Blowfish_pary_s_d0");
    sc_trace(mVcdFile, Blowfish_pary_s_q0, "(port)Blowfish_pary_s_q0");
    sc_trace(mVcdFile, Blowfish_pary_s_address1, "(port)Blowfish_pary_s_address1");
    sc_trace(mVcdFile, Blowfish_pary_s_ce1, "(port)Blowfish_pary_s_ce1");
    sc_trace(mVcdFile, Blowfish_pary_s_we1, "(port)Blowfish_pary_s_we1");
    sc_trace(mVcdFile, Blowfish_pary_s_d1, "(port)Blowfish_pary_s_d1");
    sc_trace(mVcdFile, Blowfish_pary_s_q1, "(port)Blowfish_pary_s_q1");
    sc_trace(mVcdFile, Blowfish_sbox_s_address0, "(port)Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce0, "(port)Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, Blowfish_sbox_s_we0, "(port)Blowfish_sbox_s_we0");
    sc_trace(mVcdFile, Blowfish_sbox_s_d0, "(port)Blowfish_sbox_s_d0");
    sc_trace(mVcdFile, Blowfish_sbox_s_q0, "(port)Blowfish_sbox_s_q0");
    sc_trace(mVcdFile, Blowfish_sbox_s_address1, "(port)Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, Blowfish_sbox_s_ce1, "(port)Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, Blowfish_sbox_s_we1, "(port)Blowfish_sbox_s_we1");
    sc_trace(mVcdFile, Blowfish_sbox_s_d1, "(port)Blowfish_sbox_s_d1");
    sc_trace(mVcdFile, Blowfish_sbox_s_q1, "(port)Blowfish_sbox_s_q1");
    sc_trace(mVcdFile, set_key, "(port)set_key");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, key_address1, "(port)key_address1");
    sc_trace(mVcdFile, key_ce1, "(port)key_ce1");
    sc_trace(mVcdFile, key_q1, "(port)key_q1");
    sc_trace(mVcdFile, key_byte_length, "(port)key_byte_length");
    sc_trace(mVcdFile, decrypted_address0, "(port)decrypted_address0");
    sc_trace(mVcdFile, decrypted_ce0, "(port)decrypted_ce0");
    sc_trace(mVcdFile, decrypted_we0, "(port)decrypted_we0");
    sc_trace(mVcdFile, decrypted_d0, "(port)decrypted_d0");
    sc_trace(mVcdFile, decrypted_q0, "(port)decrypted_q0");
    sc_trace(mVcdFile, decrypted_address1, "(port)decrypted_address1");
    sc_trace(mVcdFile, decrypted_ce1, "(port)decrypted_ce1");
    sc_trace(mVcdFile, decrypted_we1, "(port)decrypted_we1");
    sc_trace(mVcdFile, decrypted_d1, "(port)decrypted_d1");
    sc_trace(mVcdFile, decrypted_q1, "(port)decrypted_q1");
    sc_trace(mVcdFile, encrypted_address0, "(port)encrypted_address0");
    sc_trace(mVcdFile, encrypted_ce0, "(port)encrypted_ce0");
    sc_trace(mVcdFile, encrypted_we0, "(port)encrypted_we0");
    sc_trace(mVcdFile, encrypted_d0, "(port)encrypted_d0");
    sc_trace(mVcdFile, encrypted_q0, "(port)encrypted_q0");
    sc_trace(mVcdFile, encrypted_address1, "(port)encrypted_address1");
    sc_trace(mVcdFile, encrypted_ce1, "(port)encrypted_ce1");
    sc_trace(mVcdFile, encrypted_we1, "(port)encrypted_we1");
    sc_trace(mVcdFile, encrypted_d1, "(port)encrypted_d1");
    sc_trace(mVcdFile, encrypted_q1, "(port)encrypted_q1");
    sc_trace(mVcdFile, plaintext_address0, "(port)plaintext_address0");
    sc_trace(mVcdFile, plaintext_ce0, "(port)plaintext_ce0");
    sc_trace(mVcdFile, plaintext_q0, "(port)plaintext_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_ap_start, "grp_SetKey_fu_48_ap_start");
    sc_trace(mVcdFile, grp_SetKey_fu_48_ap_done, "grp_SetKey_fu_48_ap_done");
    sc_trace(mVcdFile, grp_SetKey_fu_48_ap_idle, "grp_SetKey_fu_48_ap_idle");
    sc_trace(mVcdFile, grp_SetKey_fu_48_ap_ready, "grp_SetKey_fu_48_ap_ready");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_address0, "grp_SetKey_fu_48_Blowfish_pary_s_address0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_ce0, "grp_SetKey_fu_48_Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_we0, "grp_SetKey_fu_48_Blowfish_pary_s_we0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_d0, "grp_SetKey_fu_48_Blowfish_pary_s_d0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_address1, "grp_SetKey_fu_48_Blowfish_pary_s_address1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_ce1, "grp_SetKey_fu_48_Blowfish_pary_s_ce1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_we1, "grp_SetKey_fu_48_Blowfish_pary_s_we1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_pary_s_d1, "grp_SetKey_fu_48_Blowfish_pary_s_d1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_address0, "grp_SetKey_fu_48_Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_ce0, "grp_SetKey_fu_48_Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_we0, "grp_SetKey_fu_48_Blowfish_sbox_s_we0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_d0, "grp_SetKey_fu_48_Blowfish_sbox_s_d0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_address1, "grp_SetKey_fu_48_Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_ce1, "grp_SetKey_fu_48_Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_we1, "grp_SetKey_fu_48_Blowfish_sbox_s_we1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_Blowfish_sbox_s_d1, "grp_SetKey_fu_48_Blowfish_sbox_s_d1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_key_address0, "grp_SetKey_fu_48_key_address0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_key_ce0, "grp_SetKey_fu_48_key_ce0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_key_address1, "grp_SetKey_fu_48_key_address1");
    sc_trace(mVcdFile, grp_SetKey_fu_48_key_ce1, "grp_SetKey_fu_48_key_ce1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_ap_start, "grp_Decrypt_fu_64_ap_start");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_ap_done, "grp_Decrypt_fu_64_ap_done");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_ap_idle, "grp_Decrypt_fu_64_ap_idle");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_ap_ready, "grp_Decrypt_fu_64_ap_ready");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_pary_s_address0, "grp_Decrypt_fu_64_Blowfish_pary_s_address0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_pary_s_ce0, "grp_Decrypt_fu_64_Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_sbox_s_address0, "grp_Decrypt_fu_64_Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_sbox_s_ce0, "grp_Decrypt_fu_64_Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_sbox_s_address1, "grp_Decrypt_fu_64_Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_Blowfish_sbox_s_ce1, "grp_Decrypt_fu_64_Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_address0, "grp_Decrypt_fu_64_dst_address0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_ce0, "grp_Decrypt_fu_64_dst_ce0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_we0, "grp_Decrypt_fu_64_dst_we0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_d0, "grp_Decrypt_fu_64_dst_d0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_address1, "grp_Decrypt_fu_64_dst_address1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_ce1, "grp_Decrypt_fu_64_dst_ce1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_we1, "grp_Decrypt_fu_64_dst_we1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_dst_d1, "grp_Decrypt_fu_64_dst_d1");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_src_address0, "grp_Decrypt_fu_64_src_address0");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_src_ce0, "grp_Decrypt_fu_64_src_ce0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_ap_start, "grp_Encrypt_fu_76_ap_start");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_ap_done, "grp_Encrypt_fu_76_ap_done");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_ap_idle, "grp_Encrypt_fu_76_ap_idle");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_ap_ready, "grp_Encrypt_fu_76_ap_ready");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_pary_s_address0, "grp_Encrypt_fu_76_Blowfish_pary_s_address0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_pary_s_ce0, "grp_Encrypt_fu_76_Blowfish_pary_s_ce0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_sbox_s_address0, "grp_Encrypt_fu_76_Blowfish_sbox_s_address0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_sbox_s_ce0, "grp_Encrypt_fu_76_Blowfish_sbox_s_ce0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_sbox_s_address1, "grp_Encrypt_fu_76_Blowfish_sbox_s_address1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_Blowfish_sbox_s_ce1, "grp_Encrypt_fu_76_Blowfish_sbox_s_ce1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_address0, "grp_Encrypt_fu_76_dst_address0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_ce0, "grp_Encrypt_fu_76_dst_ce0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_we0, "grp_Encrypt_fu_76_dst_we0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_d0, "grp_Encrypt_fu_76_dst_d0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_address1, "grp_Encrypt_fu_76_dst_address1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_ce1, "grp_Encrypt_fu_76_dst_ce1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_we1, "grp_Encrypt_fu_76_dst_we1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_dst_d1, "grp_Encrypt_fu_76_dst_d1");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_src_address0, "grp_Encrypt_fu_76_src_address0");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_src_ce0, "grp_Encrypt_fu_76_src_ce0");
    sc_trace(mVcdFile, grp_SetKey_fu_48_ap_start_reg, "grp_SetKey_fu_48_ap_start_reg");
    sc_trace(mVcdFile, set_key_read_read_fu_42_p2, "set_key_read_read_fu_42_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_Decrypt_fu_64_ap_start_reg, "grp_Decrypt_fu_64_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_Encrypt_fu_76_ap_start_reg, "grp_Encrypt_fu_76_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Blowfish_Encrypt_Decrypt_SetKey.hdltvin.dat");
    mHdltvoutHandle.open("Blowfish_Encrypt_Decrypt_SetKey.hdltvout.dat");
}

Blowfish_Encrypt_Decrypt_SetKey::~Blowfish_Encrypt_Decrypt_SetKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_SetKey_fu_48;
    delete grp_Decrypt_fu_64;
    delete grp_Encrypt_fu_76;
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Decrypt_fu_64_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_Decrypt_fu_64_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Decrypt_fu_64_ap_ready.read())) {
            grp_Decrypt_fu_64_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Encrypt_fu_76_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_Encrypt_fu_76_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Encrypt_fu_76_ap_ready.read())) {
            grp_Encrypt_fu_76_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_SetKey_fu_48_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(set_key_read_read_fu_42_p2.read(), ap_const_lv1_1))) {
            grp_SetKey_fu_48_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SetKey_fu_48_ap_ready.read())) {
            grp_SetKey_fu_48_ap_start_reg = ap_const_logic_0;
        }
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_pary_s_address0 = grp_Encrypt_fu_76_Blowfish_pary_s_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_pary_s_address0 = grp_Decrypt_fu_64_Blowfish_pary_s_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_address0 = grp_SetKey_fu_48_Blowfish_pary_s_address0.read();
    } else {
        Blowfish_pary_s_address0 = "XXXXX";
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_address1() {
    Blowfish_pary_s_address1 = grp_SetKey_fu_48_Blowfish_pary_s_address1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_pary_s_ce0 = grp_Encrypt_fu_76_Blowfish_pary_s_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_pary_s_ce0 = grp_Decrypt_fu_64_Blowfish_pary_s_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_ce0 = grp_SetKey_fu_48_Blowfish_pary_s_ce0.read();
    } else {
        Blowfish_pary_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_ce1 = grp_SetKey_fu_48_Blowfish_pary_s_ce1.read();
    } else {
        Blowfish_pary_s_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_d0() {
    Blowfish_pary_s_d0 = grp_SetKey_fu_48_Blowfish_pary_s_d0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_d1() {
    Blowfish_pary_s_d1 = grp_SetKey_fu_48_Blowfish_pary_s_d1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_we0 = grp_SetKey_fu_48_Blowfish_pary_s_we0.read();
    } else {
        Blowfish_pary_s_we0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_pary_s_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_pary_s_we1 = grp_SetKey_fu_48_Blowfish_pary_s_we1.read();
    } else {
        Blowfish_pary_s_we1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address0 = grp_Encrypt_fu_76_Blowfish_sbox_s_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_sbox_s_address0 = grp_Decrypt_fu_64_Blowfish_sbox_s_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_address0 = grp_SetKey_fu_48_Blowfish_sbox_s_address0.read();
    } else {
        Blowfish_sbox_s_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_address1 = grp_Encrypt_fu_76_Blowfish_sbox_s_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_sbox_s_address1 = grp_Decrypt_fu_64_Blowfish_sbox_s_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_address1 = grp_SetKey_fu_48_Blowfish_sbox_s_address1.read();
    } else {
        Blowfish_sbox_s_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_ce0 = grp_Encrypt_fu_76_Blowfish_sbox_s_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_sbox_s_ce0 = grp_Decrypt_fu_64_Blowfish_sbox_s_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_ce0 = grp_SetKey_fu_48_Blowfish_sbox_s_ce0.read();
    } else {
        Blowfish_sbox_s_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Blowfish_sbox_s_ce1 = grp_Encrypt_fu_76_Blowfish_sbox_s_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Blowfish_sbox_s_ce1 = grp_Decrypt_fu_64_Blowfish_sbox_s_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_ce1 = grp_SetKey_fu_48_Blowfish_sbox_s_ce1.read();
    } else {
        Blowfish_sbox_s_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_d0() {
    Blowfish_sbox_s_d0 = grp_SetKey_fu_48_Blowfish_sbox_s_d0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_d1() {
    Blowfish_sbox_s_d1 = grp_SetKey_fu_48_Blowfish_sbox_s_d1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_we0 = grp_SetKey_fu_48_Blowfish_sbox_s_we0.read();
    } else {
        Blowfish_sbox_s_we0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_Blowfish_sbox_s_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Blowfish_sbox_s_we1 = grp_SetKey_fu_48_Blowfish_sbox_s_we1.read();
    } else {
        Blowfish_sbox_s_we1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_Decrypt_fu_64_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_Decrypt_fu_64_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_address0() {
    decrypted_address0 = grp_Decrypt_fu_64_dst_address0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_address1() {
    decrypted_address1 = grp_Decrypt_fu_64_dst_address1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_ce0() {
    decrypted_ce0 = grp_Decrypt_fu_64_dst_ce0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_ce1() {
    decrypted_ce1 = grp_Decrypt_fu_64_dst_ce1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_d0() {
    decrypted_d0 = grp_Decrypt_fu_64_dst_d0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_d1() {
    decrypted_d1 = grp_Decrypt_fu_64_dst_d1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_we0() {
    decrypted_we0 = grp_Decrypt_fu_64_dst_we0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_decrypted_we1() {
    decrypted_we1 = grp_Decrypt_fu_64_dst_we1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encrypted_address0 = grp_Encrypt_fu_76_dst_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        encrypted_address0 = grp_Decrypt_fu_64_src_address0.read();
    } else {
        encrypted_address0 =  (sc_lv<3>) ("XXX");
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_address1() {
    encrypted_address1 = grp_Encrypt_fu_76_dst_address1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encrypted_ce0 = grp_Encrypt_fu_76_dst_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        encrypted_ce0 = grp_Decrypt_fu_64_src_ce0.read();
    } else {
        encrypted_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encrypted_ce1 = grp_Encrypt_fu_76_dst_ce1.read();
    } else {
        encrypted_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_d0() {
    encrypted_d0 = grp_Encrypt_fu_76_dst_d0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_d1() {
    encrypted_d1 = grp_Encrypt_fu_76_dst_d1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encrypted_we0 = grp_Encrypt_fu_76_dst_we0.read();
    } else {
        encrypted_we0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_encrypted_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encrypted_we1 = grp_Encrypt_fu_76_dst_we1.read();
    } else {
        encrypted_we1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_grp_Decrypt_fu_64_ap_start() {
    grp_Decrypt_fu_64_ap_start = grp_Decrypt_fu_64_ap_start_reg.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_grp_Encrypt_fu_76_ap_start() {
    grp_Encrypt_fu_76_ap_start = grp_Encrypt_fu_76_ap_start_reg.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_grp_SetKey_fu_48_ap_start() {
    grp_SetKey_fu_48_ap_start = grp_SetKey_fu_48_ap_start_reg.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_key_address0() {
    key_address0 = grp_SetKey_fu_48_key_address0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_key_address1() {
    key_address1 = grp_SetKey_fu_48_key_address1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_key_ce0() {
    key_ce0 = grp_SetKey_fu_48_key_ce0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_key_ce1() {
    key_ce1 = grp_SetKey_fu_48_key_ce1.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_plaintext_address0() {
    plaintext_address0 = grp_Encrypt_fu_76_src_address0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_plaintext_ce0() {
    plaintext_ce0 = grp_Encrypt_fu_76_src_ce0.read();
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_set_key_read_read_fu_42_p2() {
    set_key_read_read_fu_42_p2 =  (sc_lv<1>) (set_key.read());
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(set_key_read_read_fu_42_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(set_key_read_read_fu_42_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_SetKey_fu_48_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_Encrypt_fu_76_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_Decrypt_fu_64_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void Blowfish_Encrypt_Decrypt_SetKey::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address0\" :  \"" << Blowfish_pary_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce0\" :  \"" << Blowfish_pary_s_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_we0\" :  \"" << Blowfish_pary_s_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_d0\" :  \"" << Blowfish_pary_s_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q0\" :  \"" << Blowfish_pary_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_address1\" :  \"" << Blowfish_pary_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_ce1\" :  \"" << Blowfish_pary_s_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_we1\" :  \"" << Blowfish_pary_s_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_pary_s_d1\" :  \"" << Blowfish_pary_s_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_pary_s_q1\" :  \"" << Blowfish_pary_s_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address0\" :  \"" << Blowfish_sbox_s_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce0\" :  \"" << Blowfish_sbox_s_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_we0\" :  \"" << Blowfish_sbox_s_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_d0\" :  \"" << Blowfish_sbox_s_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q0\" :  \"" << Blowfish_sbox_s_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_address1\" :  \"" << Blowfish_sbox_s_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_ce1\" :  \"" << Blowfish_sbox_s_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_we1\" :  \"" << Blowfish_sbox_s_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Blowfish_sbox_s_d1\" :  \"" << Blowfish_sbox_s_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Blowfish_sbox_s_q1\" :  \"" << Blowfish_sbox_s_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"set_key\" :  \"" << set_key.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address0\" :  \"" << key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce0\" :  \"" << key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q0\" :  \"" << key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address1\" :  \"" << key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce1\" :  \"" << key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q1\" :  \"" << key_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_byte_length\" :  \"" << key_byte_length.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_address0\" :  \"" << decrypted_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_ce0\" :  \"" << decrypted_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_we0\" :  \"" << decrypted_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_d0\" :  \"" << decrypted_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"decrypted_q0\" :  \"" << decrypted_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_address1\" :  \"" << decrypted_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_ce1\" :  \"" << decrypted_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_we1\" :  \"" << decrypted_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"decrypted_d1\" :  \"" << decrypted_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"decrypted_q1\" :  \"" << decrypted_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_address0\" :  \"" << encrypted_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_ce0\" :  \"" << encrypted_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_we0\" :  \"" << encrypted_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_d0\" :  \"" << encrypted_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"encrypted_q0\" :  \"" << encrypted_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_address1\" :  \"" << encrypted_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_ce1\" :  \"" << encrypted_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_we1\" :  \"" << encrypted_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypted_d1\" :  \"" << encrypted_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"encrypted_q1\" :  \"" << encrypted_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"plaintext_address0\" :  \"" << plaintext_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"plaintext_ce0\" :  \"" << plaintext_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"plaintext_q0\" :  \"" << plaintext_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

