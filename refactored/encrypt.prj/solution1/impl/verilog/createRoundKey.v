// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module createRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_q0,
        expandedKey_0_address1,
        expandedKey_0_ce1,
        expandedKey_0_q1,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_q0,
        expandedKey_1_address1,
        expandedKey_1_ce1,
        expandedKey_1_q1,
        expandedKey_2_address0,
        expandedKey_2_ce0,
        expandedKey_2_q0,
        expandedKey_2_address1,
        expandedKey_2_ce1,
        expandedKey_2_q1,
        expandedKey_3_address0,
        expandedKey_3_ce0,
        expandedKey_3_q0,
        expandedKey_3_address1,
        expandedKey_3_ce1,
        expandedKey_3_q1,
        ptr,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [5:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
input  [7:0] expandedKey_0_q0;
output  [5:0] expandedKey_0_address1;
output   expandedKey_0_ce1;
input  [7:0] expandedKey_0_q1;
output  [5:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
input  [7:0] expandedKey_1_q0;
output  [5:0] expandedKey_1_address1;
output   expandedKey_1_ce1;
input  [7:0] expandedKey_1_q1;
output  [5:0] expandedKey_2_address0;
output   expandedKey_2_ce0;
input  [7:0] expandedKey_2_q0;
output  [5:0] expandedKey_2_address1;
output   expandedKey_2_ce1;
input  [7:0] expandedKey_2_q1;
output  [5:0] expandedKey_3_address0;
output   expandedKey_3_ce0;
input  [7:0] expandedKey_3_q0;
output  [5:0] expandedKey_3_address1;
output   expandedKey_3_ce1;
input  [7:0] expandedKey_3_q1;
input  [9:0] ptr;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] expandedKey_0_address0;
reg expandedKey_0_ce0;
reg[5:0] expandedKey_0_address1;
reg expandedKey_0_ce1;
reg[5:0] expandedKey_1_address0;
reg expandedKey_1_ce0;
reg[5:0] expandedKey_1_address1;
reg expandedKey_1_ce1;
reg[5:0] expandedKey_2_address0;
reg expandedKey_2_ce0;
reg[5:0] expandedKey_2_address1;
reg expandedKey_2_ce1;
reg[5:0] expandedKey_3_address0;
reg expandedKey_3_ce0;
reg[5:0] expandedKey_3_address1;
reg expandedKey_3_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [1:0] trunc_ln318_fu_662_p1;
reg   [1:0] trunc_ln318_reg_1121;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln318_1_fu_666_p1;
reg   [7:0] trunc_ln318_1_reg_1126;
wire   [31:0] zext_ln318_fu_712_p1;
reg   [31:0] zext_ln318_reg_1184;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [7:0] grp_fu_610_p6;
reg   [7:0] roundKey_0_write_as_reg_1192;
wire   [7:0] grp_fu_623_p6;
reg   [7:0] roundKey_4_write_as_reg_1197;
wire   [7:0] grp_fu_636_p6;
reg   [7:0] roundKey_8_write_as_reg_1242;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_649_p6;
reg   [7:0] roundKey_12_write_a_reg_1247;
reg   [7:0] roundKey_1_write_as_reg_1292;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] roundKey_5_write_as_reg_1297;
reg   [7:0] roundKey_9_write_as_reg_1342;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] roundKey_13_write_a_reg_1347;
reg   [7:0] roundKey_2_write_as_reg_1392;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [7:0] roundKey_6_write_as_reg_1397;
reg   [7:0] roundKey_10_write_a_reg_1442;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [7:0] roundKey_14_write_a_reg_1447;
reg   [7:0] roundKey_3_write_as_reg_1492;
reg   [7:0] roundKey_7_write_as_reg_1497;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage7_subdone;
wire   [63:0] zext_ln318_1_fu_680_p1;
wire   [63:0] zext_ln318_2_fu_704_p1;
wire   [63:0] zext_ln318_3_fu_732_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln318_4_fu_755_p1;
wire   [63:0] zext_ln318_5_fu_778_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln318_6_fu_801_p1;
wire   [63:0] zext_ln318_7_fu_824_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln318_8_fu_847_p1;
wire   [63:0] zext_ln318_9_fu_870_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln318_10_fu_893_p1;
wire   [63:0] zext_ln318_11_fu_916_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln318_12_fu_939_p1;
wire   [63:0] zext_ln318_13_fu_962_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln318_14_fu_985_p1;
wire   [63:0] zext_ln318_15_fu_1008_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln318_16_fu_1031_p1;
reg   [31:0] grp_fu_610_p5;
reg   [31:0] grp_fu_623_p5;
wire   [5:0] lshr_ln_fu_670_p4;
wire   [7:0] add_ln318_fu_688_p2;
wire   [5:0] lshr_ln318_1_fu_694_p4;
wire   [7:0] add_ln318_1_fu_717_p2;
wire   [5:0] lshr_ln318_2_fu_722_p4;
wire   [7:0] add_ln318_2_fu_740_p2;
wire   [5:0] lshr_ln318_3_fu_745_p4;
wire   [7:0] add_ln318_3_fu_763_p2;
wire   [5:0] lshr_ln318_4_fu_768_p4;
wire   [7:0] add_ln318_4_fu_786_p2;
wire   [5:0] lshr_ln318_5_fu_791_p4;
wire   [7:0] add_ln318_5_fu_809_p2;
wire   [5:0] lshr_ln318_6_fu_814_p4;
wire   [7:0] add_ln318_6_fu_832_p2;
wire   [5:0] lshr_ln318_7_fu_837_p4;
wire   [7:0] add_ln318_7_fu_855_p2;
wire   [5:0] lshr_ln318_8_fu_860_p4;
wire   [7:0] add_ln318_8_fu_878_p2;
wire   [5:0] lshr_ln318_9_fu_883_p4;
wire   [7:0] add_ln318_9_fu_901_p2;
wire   [5:0] lshr_ln318_s_fu_906_p4;
wire   [7:0] add_ln318_10_fu_924_p2;
wire   [5:0] lshr_ln318_10_fu_929_p4;
wire   [7:0] add_ln318_11_fu_947_p2;
wire   [5:0] lshr_ln318_11_fu_952_p4;
wire   [7:0] add_ln318_12_fu_970_p2;
wire   [5:0] lshr_ln318_12_fu_975_p4;
wire   [7:0] add_ln318_13_fu_993_p2;
wire   [5:0] lshr_ln318_13_fu_998_p4;
wire   [7:0] add_ln318_14_fu_1016_p2;
wire   [5:0] lshr_ln318_14_fu_1021_p4;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

encrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_4cud_U25(
    .din0(expandedKey_0_q0),
    .din1(expandedKey_1_q0),
    .din2(expandedKey_2_q0),
    .din3(expandedKey_3_q0),
    .din4(grp_fu_610_p5),
    .dout(grp_fu_610_p6)
);

encrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_4cud_U26(
    .din0(expandedKey_1_q1),
    .din1(expandedKey_2_q1),
    .din2(expandedKey_3_q1),
    .din3(expandedKey_0_q1),
    .din4(grp_fu_623_p5),
    .dout(grp_fu_623_p6)
);

encrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_4cud_U27(
    .din0(expandedKey_2_q0),
    .din1(expandedKey_3_q0),
    .din2(expandedKey_0_q0),
    .din3(expandedKey_1_q0),
    .din4(zext_ln318_reg_1184),
    .dout(grp_fu_636_p6)
);

encrypt_dut_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_4cud_U28(
    .din0(expandedKey_3_q1),
    .din1(expandedKey_0_q1),
    .din2(expandedKey_1_q1),
    .din3(expandedKey_2_q1),
    .din4(zext_ln318_reg_1184),
    .dout(grp_fu_649_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        roundKey_0_write_as_reg_1192 <= grp_fu_610_p6;
        roundKey_4_write_as_reg_1197 <= grp_fu_623_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        roundKey_10_write_a_reg_1442 <= grp_fu_636_p6;
        roundKey_14_write_a_reg_1447 <= grp_fu_649_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        roundKey_12_write_a_reg_1247 <= grp_fu_649_p6;
        roundKey_8_write_as_reg_1242 <= grp_fu_636_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        roundKey_13_write_a_reg_1347 <= grp_fu_649_p6;
        roundKey_9_write_as_reg_1342 <= grp_fu_636_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        roundKey_1_write_as_reg_1292 <= grp_fu_610_p6;
        roundKey_5_write_as_reg_1297 <= grp_fu_623_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        roundKey_2_write_as_reg_1392 <= grp_fu_610_p6;
        roundKey_6_write_as_reg_1397 <= grp_fu_623_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        roundKey_3_write_as_reg_1492 <= grp_fu_610_p6;
        roundKey_7_write_as_reg_1497 <= grp_fu_623_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln318_1_reg_1126 <= trunc_ln318_1_fu_666_p1;
        trunc_ln318_reg_1121 <= trunc_ln318_fu_662_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        zext_ln318_reg_1184[1 : 0] <= zext_ln318_fu_712_p1[1 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_0_address0 = zext_ln318_15_fu_1008_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_0_address0 = zext_ln318_13_fu_962_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_0_address0 = zext_ln318_11_fu_916_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_0_address0 = zext_ln318_9_fu_870_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_0_address0 = zext_ln318_7_fu_824_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_0_address0 = zext_ln318_5_fu_778_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_0_address0 = zext_ln318_3_fu_732_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_0_address0 = zext_ln318_1_fu_680_p1;
        end else begin
            expandedKey_0_address0 = 'bx;
        end
    end else begin
        expandedKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_0_address1 = zext_ln318_16_fu_1031_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_0_address1 = zext_ln318_14_fu_985_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_0_address1 = zext_ln318_12_fu_939_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_0_address1 = zext_ln318_10_fu_893_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_0_address1 = zext_ln318_8_fu_847_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_0_address1 = zext_ln318_6_fu_801_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_0_address1 = zext_ln318_4_fu_755_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_0_address1 = zext_ln318_2_fu_704_p1;
        end else begin
            expandedKey_0_address1 = 'bx;
        end
    end else begin
        expandedKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_0_ce1 = 1'b1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_1_address0 = zext_ln318_15_fu_1008_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_1_address0 = zext_ln318_13_fu_962_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_1_address0 = zext_ln318_11_fu_916_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_1_address0 = zext_ln318_9_fu_870_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_1_address0 = zext_ln318_7_fu_824_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_1_address0 = zext_ln318_5_fu_778_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_1_address0 = zext_ln318_3_fu_732_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_1_address0 = zext_ln318_1_fu_680_p1;
        end else begin
            expandedKey_1_address0 = 'bx;
        end
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_1_address1 = zext_ln318_16_fu_1031_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_1_address1 = zext_ln318_14_fu_985_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_1_address1 = zext_ln318_12_fu_939_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_1_address1 = zext_ln318_10_fu_893_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_1_address1 = zext_ln318_8_fu_847_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_1_address1 = zext_ln318_6_fu_801_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_1_address1 = zext_ln318_4_fu_755_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_1_address1 = zext_ln318_2_fu_704_p1;
        end else begin
            expandedKey_1_address1 = 'bx;
        end
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_1_ce1 = 1'b1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_2_address0 = zext_ln318_15_fu_1008_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_2_address0 = zext_ln318_13_fu_962_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_2_address0 = zext_ln318_11_fu_916_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_2_address0 = zext_ln318_9_fu_870_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_2_address0 = zext_ln318_7_fu_824_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_2_address0 = zext_ln318_5_fu_778_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_2_address0 = zext_ln318_3_fu_732_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_2_address0 = zext_ln318_1_fu_680_p1;
        end else begin
            expandedKey_2_address0 = 'bx;
        end
    end else begin
        expandedKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_2_address1 = zext_ln318_16_fu_1031_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_2_address1 = zext_ln318_14_fu_985_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_2_address1 = zext_ln318_12_fu_939_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_2_address1 = zext_ln318_10_fu_893_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_2_address1 = zext_ln318_8_fu_847_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_2_address1 = zext_ln318_6_fu_801_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_2_address1 = zext_ln318_4_fu_755_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_2_address1 = zext_ln318_2_fu_704_p1;
        end else begin
            expandedKey_2_address1 = 'bx;
        end
    end else begin
        expandedKey_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_2_ce0 = 1'b1;
    end else begin
        expandedKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_2_ce1 = 1'b1;
    end else begin
        expandedKey_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_3_address0 = zext_ln318_15_fu_1008_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_3_address0 = zext_ln318_13_fu_962_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_3_address0 = zext_ln318_11_fu_916_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_3_address0 = zext_ln318_9_fu_870_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_3_address0 = zext_ln318_7_fu_824_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_3_address0 = zext_ln318_5_fu_778_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_3_address0 = zext_ln318_3_fu_732_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_3_address0 = zext_ln318_1_fu_680_p1;
        end else begin
            expandedKey_3_address0 = 'bx;
        end
    end else begin
        expandedKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            expandedKey_3_address1 = zext_ln318_16_fu_1031_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            expandedKey_3_address1 = zext_ln318_14_fu_985_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            expandedKey_3_address1 = zext_ln318_12_fu_939_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            expandedKey_3_address1 = zext_ln318_10_fu_893_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_3_address1 = zext_ln318_8_fu_847_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_3_address1 = zext_ln318_6_fu_801_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            expandedKey_3_address1 = zext_ln318_4_fu_755_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_3_address1 = zext_ln318_2_fu_704_p1;
        end else begin
            expandedKey_3_address1 = 'bx;
        end
    end else begin
        expandedKey_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_3_ce0 = 1'b1;
    end else begin
        expandedKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_3_ce1 = 1'b1;
    end else begin
        expandedKey_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_610_p5 = zext_ln318_reg_1184;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_610_p5 = zext_ln318_fu_712_p1;
    end else begin
        grp_fu_610_p5 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_623_p5 = zext_ln318_reg_1184;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_623_p5 = zext_ln318_fu_712_p1;
    end else begin
        grp_fu_623_p5 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_10_fu_924_p2 = (8'd11 + trunc_ln318_1_reg_1126);

assign add_ln318_11_fu_947_p2 = (8'd12 + trunc_ln318_1_reg_1126);

assign add_ln318_12_fu_970_p2 = (8'd13 + trunc_ln318_1_reg_1126);

assign add_ln318_13_fu_993_p2 = (8'd14 + trunc_ln318_1_reg_1126);

assign add_ln318_14_fu_1016_p2 = (8'd15 + trunc_ln318_1_reg_1126);

assign add_ln318_1_fu_717_p2 = (8'd2 + trunc_ln318_1_reg_1126);

assign add_ln318_2_fu_740_p2 = (8'd3 + trunc_ln318_1_reg_1126);

assign add_ln318_3_fu_763_p2 = (8'd4 + trunc_ln318_1_reg_1126);

assign add_ln318_4_fu_786_p2 = (8'd5 + trunc_ln318_1_reg_1126);

assign add_ln318_5_fu_809_p2 = (8'd6 + trunc_ln318_1_reg_1126);

assign add_ln318_6_fu_832_p2 = (8'd7 + trunc_ln318_1_reg_1126);

assign add_ln318_7_fu_855_p2 = (8'd8 + trunc_ln318_1_reg_1126);

assign add_ln318_8_fu_878_p2 = (8'd9 + trunc_ln318_1_reg_1126);

assign add_ln318_9_fu_901_p2 = (8'd10 + trunc_ln318_1_reg_1126);

assign add_ln318_fu_688_p2 = (8'd1 + trunc_ln318_1_fu_666_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = roundKey_0_write_as_reg_1192;

assign ap_return_1 = roundKey_1_write_as_reg_1292;

assign ap_return_10 = roundKey_10_write_a_reg_1442;

assign ap_return_11 = grp_fu_636_p6;

assign ap_return_12 = roundKey_12_write_a_reg_1247;

assign ap_return_13 = roundKey_13_write_a_reg_1347;

assign ap_return_14 = roundKey_14_write_a_reg_1447;

assign ap_return_15 = grp_fu_649_p6;

assign ap_return_2 = roundKey_2_write_as_reg_1392;

assign ap_return_3 = roundKey_3_write_as_reg_1492;

assign ap_return_4 = roundKey_4_write_as_reg_1197;

assign ap_return_5 = roundKey_5_write_as_reg_1297;

assign ap_return_6 = roundKey_6_write_as_reg_1397;

assign ap_return_7 = roundKey_7_write_as_reg_1497;

assign ap_return_8 = roundKey_8_write_as_reg_1242;

assign ap_return_9 = roundKey_9_write_as_reg_1342;

assign lshr_ln318_10_fu_929_p4 = {{add_ln318_10_fu_924_p2[7:2]}};

assign lshr_ln318_11_fu_952_p4 = {{add_ln318_11_fu_947_p2[7:2]}};

assign lshr_ln318_12_fu_975_p4 = {{add_ln318_12_fu_970_p2[7:2]}};

assign lshr_ln318_13_fu_998_p4 = {{add_ln318_13_fu_993_p2[7:2]}};

assign lshr_ln318_14_fu_1021_p4 = {{add_ln318_14_fu_1016_p2[7:2]}};

assign lshr_ln318_1_fu_694_p4 = {{add_ln318_fu_688_p2[7:2]}};

assign lshr_ln318_2_fu_722_p4 = {{add_ln318_1_fu_717_p2[7:2]}};

assign lshr_ln318_3_fu_745_p4 = {{add_ln318_2_fu_740_p2[7:2]}};

assign lshr_ln318_4_fu_768_p4 = {{add_ln318_3_fu_763_p2[7:2]}};

assign lshr_ln318_5_fu_791_p4 = {{add_ln318_4_fu_786_p2[7:2]}};

assign lshr_ln318_6_fu_814_p4 = {{add_ln318_5_fu_809_p2[7:2]}};

assign lshr_ln318_7_fu_837_p4 = {{add_ln318_6_fu_832_p2[7:2]}};

assign lshr_ln318_8_fu_860_p4 = {{add_ln318_7_fu_855_p2[7:2]}};

assign lshr_ln318_9_fu_883_p4 = {{add_ln318_8_fu_878_p2[7:2]}};

assign lshr_ln318_s_fu_906_p4 = {{add_ln318_9_fu_901_p2[7:2]}};

assign lshr_ln_fu_670_p4 = {{ptr[7:2]}};

assign trunc_ln318_1_fu_666_p1 = ptr[7:0];

assign trunc_ln318_fu_662_p1 = ptr[1:0];

assign zext_ln318_10_fu_893_p1 = lshr_ln318_9_fu_883_p4;

assign zext_ln318_11_fu_916_p1 = lshr_ln318_s_fu_906_p4;

assign zext_ln318_12_fu_939_p1 = lshr_ln318_10_fu_929_p4;

assign zext_ln318_13_fu_962_p1 = lshr_ln318_11_fu_952_p4;

assign zext_ln318_14_fu_985_p1 = lshr_ln318_12_fu_975_p4;

assign zext_ln318_15_fu_1008_p1 = lshr_ln318_13_fu_998_p4;

assign zext_ln318_16_fu_1031_p1 = lshr_ln318_14_fu_1021_p4;

assign zext_ln318_1_fu_680_p1 = lshr_ln_fu_670_p4;

assign zext_ln318_2_fu_704_p1 = lshr_ln318_1_fu_694_p4;

assign zext_ln318_3_fu_732_p1 = lshr_ln318_2_fu_722_p4;

assign zext_ln318_4_fu_755_p1 = lshr_ln318_3_fu_745_p4;

assign zext_ln318_5_fu_778_p1 = lshr_ln318_4_fu_768_p4;

assign zext_ln318_6_fu_801_p1 = lshr_ln318_5_fu_791_p4;

assign zext_ln318_7_fu_824_p1 = lshr_ln318_6_fu_814_p4;

assign zext_ln318_8_fu_847_p1 = lshr_ln318_7_fu_837_p4;

assign zext_ln318_9_fu_870_p1 = lshr_ln318_8_fu_860_p4;

assign zext_ln318_fu_712_p1 = trunc_ln318_reg_1121;

always @ (posedge ap_clk) begin
    zext_ln318_reg_1184[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //createRoundKey
