// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shiftRows (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_101_p2;
reg   [2:0] i_reg_183;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln183_fu_119_p1;
reg   [31:0] zext_ln183_reg_188;
wire   [0:0] icmp_ln179_fu_95_p2;
reg   [3:0] state_addr_reg_193;
wire   [31:0] zext_ln190_fu_134_p1;
reg   [31:0] zext_ln190_reg_198;
reg   [3:0] state_addr_1_reg_203;
wire   [1:0] k_fu_153_p2;
reg   [1:0] k_reg_211;
wire    ap_CS_fsm_state3;
reg   [7:0] tmp_reg_216;
wire    ap_CS_fsm_state4;
wire  signed [31:0] j_1_fu_164_p2;
reg  signed [31:0] j_1_reg_224;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln190_fu_159_p2;
reg   [2:0] indvars_iv_reg_62;
wire   [0:0] icmp_ln187_fu_147_p2;
reg   [1:0] k_0_reg_74;
reg  signed [31:0] j_0_reg_85;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln189_fu_123_p1;
wire   [63:0] zext_ln192_fu_138_p1;
wire  signed [63:0] sext_ln191_fu_170_p1;
wire  signed [63:0] sext_ln191_1_fu_175_p1;
wire   [1:0] trunc_ln183_fu_107_p1;
wire   [3:0] ptr_fu_111_p3;
wire   [3:0] or_ln190_fu_128_p2;
wire   [2:0] zext_ln187_fu_143_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_62 <= i_reg_183;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_62 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_85 <= j_1_reg_224;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_85 <= zext_ln183_reg_188;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_74 <= k_reg_211;
    end else if (((icmp_ln179_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_74 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_183 <= i_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_224 <= j_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_211 <= k_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_addr_1_reg_203[3 : 2] <= zext_ln192_fu_138_p1[3 : 2];
        state_addr_reg_193[3 : 2] <= zext_ln189_fu_123_p1[3 : 2];
        zext_ln183_reg_188[3 : 2] <= zext_ln183_fu_119_p1[3 : 2];
        zext_ln190_reg_198[3 : 2] <= zext_ln190_fu_134_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_reg_216 <= state_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln179_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln179_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = sext_ln191_1_fu_175_p1;
    end else if (((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = state_addr_1_reg_203;
    end else if (((icmp_ln190_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = sext_ln191_fu_170_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = state_addr_reg_193;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln190_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d0 = state_q0;
    end else if (((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        state_d0 = tmp_reg_216;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln179_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln187_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln190_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_fu_101_p2 = (indvars_iv_reg_62 + 3'd1);

assign icmp_ln179_fu_95_p2 = ((indvars_iv_reg_62 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_147_p2 = ((zext_ln187_fu_143_p1 == indvars_iv_reg_62) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_159_p2 = (($signed(j_0_reg_85) < $signed(zext_ln190_reg_198)) ? 1'b1 : 1'b0);

assign j_1_fu_164_p2 = ($signed(j_0_reg_85) + $signed(32'd1));

assign k_fu_153_p2 = (k_0_reg_74 + 2'd1);

assign or_ln190_fu_128_p2 = (ptr_fu_111_p3 | 4'd3);

assign ptr_fu_111_p3 = {{trunc_ln183_fu_107_p1}, {2'd0}};

assign sext_ln191_1_fu_175_p1 = j_0_reg_85;

assign sext_ln191_fu_170_p1 = j_1_fu_164_p2;

assign trunc_ln183_fu_107_p1 = indvars_iv_reg_62[1:0];

assign zext_ln183_fu_119_p1 = ptr_fu_111_p3;

assign zext_ln187_fu_143_p1 = k_0_reg_74;

assign zext_ln189_fu_123_p1 = ptr_fu_111_p3;

assign zext_ln190_fu_134_p1 = or_ln190_fu_128_p2;

assign zext_ln192_fu_138_p1 = or_ln190_fu_128_p2;

always @ (posedge ap_clk) begin
    zext_ln183_reg_188[1:0] <= 2'b00;
    zext_ln183_reg_188[31:4] <= 28'b0000000000000000000000000000;
    state_addr_reg_193[1:0] <= 2'b00;
    zext_ln190_reg_198[1:0] <= 2'b11;
    zext_ln190_reg_198[31:4] <= 28'b0000000000000000000000000000;
    state_addr_1_reg_203[1:0] <= 2'b11;
end

endmodule //shiftRows
