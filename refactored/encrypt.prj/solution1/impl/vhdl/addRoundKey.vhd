-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity addRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_15_read : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of addRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_reg_425 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_31_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_32_reg_435 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_33_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_2_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_load_3_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_34_reg_455 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_35_reg_460 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_4_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_load_5_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_36_reg_475 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_37_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_6_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_load_7_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_38_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_39_reg_500 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_8_reg_505 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_load_9_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_40_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_41_reg_520 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_10_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal state_load_11_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_42_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_43_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_12_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal state_load_13_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_44_reg_555 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_45_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal xor_ln236_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_1_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_2_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_3_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_4_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_5_fu_357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_6_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_7_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_8_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_9_fu_381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_10_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_11_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_12_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_13_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_14_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_15_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_317 <= state_q0;
                reg_321 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                state_load_10_reg_525 <= state_q0;
                state_load_11_reg_530 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                state_load_12_reg_545 <= state_q0;
                state_load_13_reg_550 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                state_load_2_reg_445 <= state_q0;
                state_load_3_reg_450 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                state_load_4_reg_465 <= state_q0;
                state_load_5_reg_470 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_load_6_reg_485 <= state_q0;
                state_load_7_reg_490 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                state_load_8_reg_505 <= state_q0;
                state_load_9_reg_510 <= state_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_31_reg_430 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_32_reg_435 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_33_reg_440 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_34_reg_455 <= ap_const_lv64_4(4 - 1 downto 0);
    state_addr_35_reg_460 <= ap_const_lv64_5(4 - 1 downto 0);
    state_addr_36_reg_475 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_37_reg_480 <= ap_const_lv64_7(4 - 1 downto 0);
    state_addr_38_reg_495 <= ap_const_lv64_8(4 - 1 downto 0);
    state_addr_39_reg_500 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_40_reg_515 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_41_reg_520 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_42_reg_535 <= ap_const_lv64_C(4 - 1 downto 0);
    state_addr_43_reg_540 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_44_reg_555 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_45_reg_560 <= ap_const_lv64_F(4 - 1 downto 0);
    state_addr_reg_425 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_addr_reg_425, state_addr_32_reg_435, ap_CS_fsm_state3, state_addr_34_reg_455, ap_CS_fsm_state4, state_addr_36_reg_475, ap_CS_fsm_state5, state_addr_38_reg_495, ap_CS_fsm_state6, state_addr_40_reg_515, ap_CS_fsm_state7, state_addr_42_reg_535, ap_CS_fsm_state8, state_addr_44_reg_555, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= state_addr_44_reg_555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_42_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_40_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_38_reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= state_addr_36_reg_475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= state_addr_34_reg_455;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_32_reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= state_addr_reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_addr_31_reg_430, state_addr_33_reg_440, ap_CS_fsm_state3, state_addr_35_reg_460, ap_CS_fsm_state4, state_addr_37_reg_480, ap_CS_fsm_state5, state_addr_39_reg_500, ap_CS_fsm_state6, state_addr_41_reg_520, ap_CS_fsm_state7, state_addr_43_reg_540, ap_CS_fsm_state8, state_addr_45_reg_560, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address1 <= state_addr_45_reg_560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= state_addr_43_reg_540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= state_addr_41_reg_520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= state_addr_39_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= state_addr_37_reg_480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= state_addr_35_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= state_addr_33_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= state_addr_31_reg_430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, xor_ln236_fu_325_p2, xor_ln236_2_fu_339_p2, xor_ln236_4_fu_351_p2, xor_ln236_6_fu_363_p2, xor_ln236_8_fu_375_p2, xor_ln236_10_fu_387_p2, xor_ln236_12_fu_399_p2, xor_ln236_14_fu_411_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0 <= xor_ln236_14_fu_411_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= xor_ln236_12_fu_399_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= xor_ln236_10_fu_387_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= xor_ln236_8_fu_375_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= xor_ln236_6_fu_363_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= xor_ln236_4_fu_351_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= xor_ln236_2_fu_339_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= xor_ln236_fu_325_p2;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, xor_ln236_1_fu_332_p2, xor_ln236_3_fu_345_p2, xor_ln236_5_fu_357_p2, xor_ln236_7_fu_369_p2, xor_ln236_9_fu_381_p2, xor_ln236_11_fu_393_p2, xor_ln236_13_fu_405_p2, xor_ln236_15_fu_418_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d1 <= xor_ln236_15_fu_418_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= xor_ln236_13_fu_405_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= xor_ln236_11_fu_393_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= xor_ln236_9_fu_381_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d1 <= xor_ln236_7_fu_369_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= xor_ln236_5_fu_357_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d1 <= xor_ln236_3_fu_345_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= xor_ln236_1_fu_332_p2;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln236_10_fu_387_p2 <= (state_load_10_reg_525 xor roundKey_10_read);
    xor_ln236_11_fu_393_p2 <= (state_load_11_reg_530 xor roundKey_11_read);
    xor_ln236_12_fu_399_p2 <= (state_load_12_reg_545 xor roundKey_12_read);
    xor_ln236_13_fu_405_p2 <= (state_load_13_reg_550 xor roundKey_13_read);
    xor_ln236_14_fu_411_p2 <= (roundKey_14_read xor reg_317);
    xor_ln236_15_fu_418_p2 <= (roundKey_15_read xor reg_321);
    xor_ln236_1_fu_332_p2 <= (roundKey_1_read xor reg_321);
    xor_ln236_2_fu_339_p2 <= (state_load_2_reg_445 xor roundKey_2_read);
    xor_ln236_3_fu_345_p2 <= (state_load_3_reg_450 xor roundKey_3_read);
    xor_ln236_4_fu_351_p2 <= (state_load_4_reg_465 xor roundKey_4_read);
    xor_ln236_5_fu_357_p2 <= (state_load_5_reg_470 xor roundKey_5_read);
    xor_ln236_6_fu_363_p2 <= (state_load_6_reg_485 xor roundKey_6_read);
    xor_ln236_7_fu_369_p2 <= (state_load_7_reg_490 xor roundKey_7_read);
    xor_ln236_8_fu_375_p2 <= (state_load_8_reg_505 xor roundKey_8_read);
    xor_ln236_9_fu_381_p2 <= (state_load_9_reg_510 xor roundKey_9_read);
    xor_ln236_fu_325_p2 <= (roundKey_0_read xor reg_317);
end behav;
