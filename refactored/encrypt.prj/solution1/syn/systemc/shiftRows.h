// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shiftRows_HH_
#define _shiftRows_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shiftRows : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;


    // Module declarations
    shiftRows(sc_module_name name);
    SC_HAS_PROCESS(shiftRows);

    ~shiftRows();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_101_p2;
    sc_signal< sc_lv<3> > i_reg_183;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln183_fu_119_p1;
    sc_signal< sc_lv<32> > zext_ln183_reg_188;
    sc_signal< sc_lv<1> > icmp_ln179_fu_95_p2;
    sc_signal< sc_lv<4> > state_addr_reg_193;
    sc_signal< sc_lv<32> > zext_ln190_fu_134_p1;
    sc_signal< sc_lv<32> > zext_ln190_reg_198;
    sc_signal< sc_lv<4> > state_addr_1_reg_203;
    sc_signal< sc_lv<2> > k_fu_153_p2;
    sc_signal< sc_lv<2> > k_reg_211;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > tmp_reg_216;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > j_1_fu_164_p2;
    sc_signal< sc_lv<32> > j_1_reg_224;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln190_fu_159_p2;
    sc_signal< sc_lv<3> > indvars_iv_reg_62;
    sc_signal< sc_lv<1> > icmp_ln187_fu_147_p2;
    sc_signal< sc_lv<2> > k_0_reg_74;
    sc_signal< sc_lv<32> > j_0_reg_85;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln189_fu_123_p1;
    sc_signal< sc_lv<64> > zext_ln192_fu_138_p1;
    sc_signal< sc_lv<64> > sext_ln191_fu_170_p1;
    sc_signal< sc_lv<64> > sext_ln191_1_fu_175_p1;
    sc_signal< sc_lv<2> > trunc_ln183_fu_107_p1;
    sc_signal< sc_lv<4> > ptr_fu_111_p3;
    sc_signal< sc_lv<4> > or_ln190_fu_128_p2;
    sc_signal< sc_lv<3> > zext_ln187_fu_143_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_101_p2();
    void thread_icmp_ln179_fu_95_p2();
    void thread_icmp_ln187_fu_147_p2();
    void thread_icmp_ln190_fu_159_p2();
    void thread_j_1_fu_164_p2();
    void thread_k_fu_153_p2();
    void thread_or_ln190_fu_128_p2();
    void thread_ptr_fu_111_p3();
    void thread_sext_ln191_1_fu_175_p1();
    void thread_sext_ln191_fu_170_p1();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_trunc_ln183_fu_107_p1();
    void thread_zext_ln183_fu_119_p1();
    void thread_zext_ln187_fu_143_p1();
    void thread_zext_ln189_fu_123_p1();
    void thread_zext_ln190_fu_134_p1();
    void thread_zext_ln192_fu_138_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
