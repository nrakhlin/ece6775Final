// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_round.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_round::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_round::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> aes_round::ap_ST_fsm_state1 = "1";
const sc_lv<19> aes_round::ap_ST_fsm_state2 = "10";
const sc_lv<19> aes_round::ap_ST_fsm_state3 = "100";
const sc_lv<19> aes_round::ap_ST_fsm_state4 = "1000";
const sc_lv<19> aes_round::ap_ST_fsm_state5 = "10000";
const sc_lv<19> aes_round::ap_ST_fsm_state6 = "100000";
const sc_lv<19> aes_round::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> aes_round::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> aes_round::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> aes_round::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<19> aes_round::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> aes_round::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_round::ap_const_lv32_1 = "1";
const sc_lv<32> aes_round::ap_const_lv32_2 = "10";
const sc_lv<32> aes_round::ap_const_lv32_4 = "100";
const sc_lv<32> aes_round::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_round::ap_const_lv32_3 = "11";
const sc_lv<32> aes_round::ap_const_lv32_6 = "110";
const sc_lv<32> aes_round::ap_const_lv32_A = "1010";
const sc_lv<32> aes_round::ap_const_lv32_E = "1110";
const sc_lv<32> aes_round::ap_const_lv32_7 = "111";
const sc_lv<32> aes_round::ap_const_lv32_B = "1011";
const sc_lv<32> aes_round::ap_const_lv32_F = "1111";
const sc_lv<32> aes_round::ap_const_lv32_5 = "101";
const sc_lv<32> aes_round::ap_const_lv32_C = "1100";
const sc_lv<32> aes_round::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_round::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_round::ap_const_lv32_D = "1101";
const sc_lv<32> aes_round::ap_const_lv32_11 = "10001";
const sc_lv<64> aes_round::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> aes_round::ap_const_lv64_F = "1111";
const sc_lv<64> aes_round::ap_const_lv64_5 = "101";
const sc_lv<64> aes_round::ap_const_lv64_A = "1010";
const sc_lv<64> aes_round::ap_const_lv64_3 = "11";
const sc_lv<64> aes_round::ap_const_lv64_E = "1110";
const sc_lv<64> aes_round::ap_const_lv64_4 = "100";
const sc_lv<64> aes_round::ap_const_lv64_9 = "1001";
const sc_lv<64> aes_round::ap_const_lv64_2 = "10";
const sc_lv<64> aes_round::ap_const_lv64_D = "1101";
const sc_lv<64> aes_round::ap_const_lv64_8 = "1000";
const sc_lv<64> aes_round::ap_const_lv64_C = "1100";
const sc_lv<64> aes_round::ap_const_lv64_1 = "1";
const sc_lv<64> aes_round::ap_const_lv64_7 = "111";
const sc_lv<64> aes_round::ap_const_lv64_6 = "110";
const sc_lv<64> aes_round::ap_const_lv64_B = "1011";
const sc_lv<32> aes_round::ap_const_lv32_12 = "10010";
const bool aes_round::ap_const_boolean_1 = true;

aes_round::aes_round(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new expandKey_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    grp_mixColumn_fu_454 = new mixColumn("grp_mixColumn_fu_454");
    grp_mixColumn_fu_454->ap_ready(grp_mixColumn_fu_454_ap_ready);
    grp_mixColumn_fu_454->column_0_read(grp_mixColumn_fu_454_column_0_read);
    grp_mixColumn_fu_454->column_1_read(grp_mixColumn_fu_454_column_1_read);
    grp_mixColumn_fu_454->column_2_read(reg_495);
    grp_mixColumn_fu_454->column_3_read(grp_mixColumn_fu_454_column_3_read);
    grp_mixColumn_fu_454->ap_return_0(grp_mixColumn_fu_454_ap_return_0);
    grp_mixColumn_fu_454->ap_return_1(grp_mixColumn_fu_454_ap_return_1);
    grp_mixColumn_fu_454->ap_return_2(grp_mixColumn_fu_454_ap_return_2);
    grp_mixColumn_fu_454->ap_return_3(grp_mixColumn_fu_454_ap_return_3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_grp_mixColumn_fu_454_column_0_read);
    sensitive << ( reg_473 );
    sensitive << ( reg_479 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_mixColumn_fu_454_column_1_read);
    sensitive << ( sbox_q0 );
    sensitive << ( reg_479 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_mixColumn_fu_454_column_3_read);
    sensitive << ( sbox_q0 );
    sensitive << ( reg_473 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln43_18_fu_500_p1 );
    sensitive << ( zext_ln43_fu_505_p1 );
    sensitive << ( zext_ln43_13_fu_510_p1 );
    sensitive << ( zext_ln43_8_fu_515_p1 );
    sensitive << ( zext_ln43_17_fu_520_p1 );
    sensitive << ( zext_ln43_6_fu_567_p1 );
    sensitive << ( zext_ln43_12_fu_572_p1 );
    sensitive << ( zext_ln43_7_fu_577_p1 );
    sensitive << ( zext_ln43_16_fu_582_p1 );
    sensitive << ( zext_ln43_5_fu_628_p1 );
    sensitive << ( zext_ln43_11_fu_633_p1 );
    sensitive << ( zext_ln43_10_fu_638_p1 );
    sensitive << ( zext_ln43_4_fu_642_p1 );
    sensitive << ( zext_ln43_9_fu_689_p1 );
    sensitive << ( zext_ln43_14_fu_694_p1 );
    sensitive << ( zext_ln43_15_fu_698_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_state_addr_10_reg_760);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_11_reg_883);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_13_reg_812);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_14_reg_780);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_15_reg_749);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_addr_1_reg_847);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_2_reg_802);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_3_reg_775);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_6_reg_868);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_reg_744);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_reg_744 );
    sensitive << ( state_addr_3_reg_775 );
    sensitive << ( state_addr_2_reg_802 );
    sensitive << ( state_addr_1_reg_847 );
    sensitive << ( state_addr_6_reg_868 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_15_reg_749 );
    sensitive << ( state_addr_10_reg_760 );
    sensitive << ( state_addr_14_reg_780 );
    sensitive << ( state_addr_13_reg_812 );
    sensitive << ( state_addr_11_reg_883 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln226_reg_837 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( xor_ln226_7_reg_903 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( xor_ln226_6_reg_933 );
    sensitive << ( xor_ln226_9_reg_958 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( xor_ln226_8_fu_553_p2 );
    sensitive << ( xor_ln226_3_fu_602_p2 );
    sensitive << ( xor_ln226_2_fu_663_p2 );
    sensitive << ( xor_ln226_1_fu_718_p2 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln226_4_reg_842 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( xor_ln226_15_reg_908 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( xor_ln226_14_reg_938 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( xor_ln226_13_reg_963 );
    sensitive << ( xor_ln226_12_fu_560_p2 );
    sensitive << ( xor_ln226_11_fu_615_p2 );
    sensitive << ( xor_ln226_10_fu_676_p2 );
    sensitive << ( xor_ln226_5_fu_725_p2 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_xor_ln226_10_fu_676_p2);
    sensitive << ( ap_port_reg_p_read10 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_2 );

    SC_METHOD(thread_xor_ln226_11_fu_615_p2);
    sensitive << ( ap_port_reg_p_read11 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_2 );

    SC_METHOD(thread_xor_ln226_12_fu_560_p2);
    sensitive << ( ap_port_reg_p_read12 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_3 );

    SC_METHOD(thread_xor_ln226_13_fu_738_p2);
    sensitive << ( ap_port_reg_p_read13 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_3 );

    SC_METHOD(thread_xor_ln226_14_fu_683_p2);
    sensitive << ( ap_port_reg_p_read14 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_3 );

    SC_METHOD(thread_xor_ln226_15_fu_622_p2);
    sensitive << ( ap_port_reg_p_read15 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_3 );

    SC_METHOD(thread_xor_ln226_1_fu_718_p2);
    sensitive << ( ap_port_reg_p_read1 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_0 );

    SC_METHOD(thread_xor_ln226_2_fu_663_p2);
    sensitive << ( ap_port_reg_p_read2 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_0 );

    SC_METHOD(thread_xor_ln226_3_fu_602_p2);
    sensitive << ( ap_port_reg_p_read3 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_0 );

    SC_METHOD(thread_xor_ln226_4_fu_547_p2);
    sensitive << ( ap_port_reg_p_read4 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_1 );

    SC_METHOD(thread_xor_ln226_5_fu_725_p2);
    sensitive << ( ap_port_reg_p_read5 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_1 );

    SC_METHOD(thread_xor_ln226_6_fu_670_p2);
    sensitive << ( ap_port_reg_p_read6 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_1 );

    SC_METHOD(thread_xor_ln226_7_fu_609_p2);
    sensitive << ( ap_port_reg_p_read7 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_1 );

    SC_METHOD(thread_xor_ln226_8_fu_553_p2);
    sensitive << ( ap_port_reg_p_read8 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_2 );

    SC_METHOD(thread_xor_ln226_9_fu_732_p2);
    sensitive << ( ap_port_reg_p_read9 );
    sensitive << ( grp_mixColumn_fu_454_ap_return_2 );

    SC_METHOD(thread_xor_ln226_fu_541_p2);
    sensitive << ( ap_port_reg_p_read );
    sensitive << ( grp_mixColumn_fu_454_ap_return_0 );

    SC_METHOD(thread_zext_ln43_10_fu_638_p1);
    sensitive << ( state_load_7_reg_873 );

    SC_METHOD(thread_zext_ln43_11_fu_633_p1);
    sensitive << ( reg_468 );

    SC_METHOD(thread_zext_ln43_12_fu_572_p1);
    sensitive << ( reg_490 );

    SC_METHOD(thread_zext_ln43_13_fu_510_p1);
    sensitive << ( reg_468 );

    SC_METHOD(thread_zext_ln43_14_fu_694_p1);
    sensitive << ( state_load_11_reg_893 );

    SC_METHOD(thread_zext_ln43_15_fu_698_p1);
    sensitive << ( state_load_12_reg_863 );

    SC_METHOD(thread_zext_ln43_16_fu_582_p1);
    sensitive << ( state_load_13_reg_827 );

    SC_METHOD(thread_zext_ln43_17_fu_520_p1);
    sensitive << ( reg_485 );

    SC_METHOD(thread_zext_ln43_18_fu_500_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_zext_ln43_4_fu_642_p1);
    sensitive << ( reg_490 );

    SC_METHOD(thread_zext_ln43_5_fu_628_p1);
    sensitive << ( reg_485 );

    SC_METHOD(thread_zext_ln43_6_fu_567_p1);
    sensitive << ( reg_468 );

    SC_METHOD(thread_zext_ln43_7_fu_577_p1);
    sensitive << ( reg_464 );

    SC_METHOD(thread_zext_ln43_8_fu_515_p1);
    sensitive << ( reg_464 );

    SC_METHOD(thread_zext_ln43_9_fu_689_p1);
    sensitive << ( reg_464 );

    SC_METHOD(thread_zext_ln43_fu_505_p1);
    sensitive << ( reg_464 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_round_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read9, "(port)p_read9");
    sc_trace(mVcdFile, p_read10, "(port)p_read10");
    sc_trace(mVcdFile, p_read11, "(port)p_read11");
    sc_trace(mVcdFile, p_read12, "(port)p_read12");
    sc_trace(mVcdFile, p_read13, "(port)p_read13");
    sc_trace(mVcdFile, p_read14, "(port)p_read14");
    sc_trace(mVcdFile, p_read15, "(port)p_read15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, reg_464, "reg_464");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_468, "reg_468");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_473, "reg_473");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, reg_479, "reg_479");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, reg_485, "reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, reg_490, "reg_490");
    sc_trace(mVcdFile, reg_495, "reg_495");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, state_addr_reg_744, "state_addr_reg_744");
    sc_trace(mVcdFile, state_addr_15_reg_749, "state_addr_15_reg_749");
    sc_trace(mVcdFile, state_addr_10_reg_760, "state_addr_10_reg_760");
    sc_trace(mVcdFile, state_addr_3_reg_775, "state_addr_3_reg_775");
    sc_trace(mVcdFile, state_addr_14_reg_780, "state_addr_14_reg_780");
    sc_trace(mVcdFile, state_addr_2_reg_802, "state_addr_2_reg_802");
    sc_trace(mVcdFile, state_addr_13_reg_812, "state_addr_13_reg_812");
    sc_trace(mVcdFile, state_load_13_reg_827, "state_load_13_reg_827");
    sc_trace(mVcdFile, xor_ln226_fu_541_p2, "xor_ln226_fu_541_p2");
    sc_trace(mVcdFile, xor_ln226_reg_837, "xor_ln226_reg_837");
    sc_trace(mVcdFile, xor_ln226_4_fu_547_p2, "xor_ln226_4_fu_547_p2");
    sc_trace(mVcdFile, xor_ln226_4_reg_842, "xor_ln226_4_reg_842");
    sc_trace(mVcdFile, state_addr_1_reg_847, "state_addr_1_reg_847");
    sc_trace(mVcdFile, state_load_12_reg_863, "state_load_12_reg_863");
    sc_trace(mVcdFile, state_addr_6_reg_868, "state_addr_6_reg_868");
    sc_trace(mVcdFile, state_load_7_reg_873, "state_load_7_reg_873");
    sc_trace(mVcdFile, state_addr_11_reg_883, "state_addr_11_reg_883");
    sc_trace(mVcdFile, state_load_11_reg_893, "state_load_11_reg_893");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, xor_ln226_7_fu_609_p2, "xor_ln226_7_fu_609_p2");
    sc_trace(mVcdFile, xor_ln226_7_reg_903, "xor_ln226_7_reg_903");
    sc_trace(mVcdFile, xor_ln226_15_fu_622_p2, "xor_ln226_15_fu_622_p2");
    sc_trace(mVcdFile, xor_ln226_15_reg_908, "xor_ln226_15_reg_908");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, xor_ln226_6_fu_670_p2, "xor_ln226_6_fu_670_p2");
    sc_trace(mVcdFile, xor_ln226_6_reg_933, "xor_ln226_6_reg_933");
    sc_trace(mVcdFile, xor_ln226_14_fu_683_p2, "xor_ln226_14_fu_683_p2");
    sc_trace(mVcdFile, xor_ln226_14_reg_938, "xor_ln226_14_reg_938");
    sc_trace(mVcdFile, xor_ln226_9_fu_732_p2, "xor_ln226_9_fu_732_p2");
    sc_trace(mVcdFile, xor_ln226_9_reg_958, "xor_ln226_9_reg_958");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, xor_ln226_13_fu_738_p2, "xor_ln226_13_fu_738_p2");
    sc_trace(mVcdFile, xor_ln226_13_reg_963, "xor_ln226_13_reg_963");
    sc_trace(mVcdFile, ap_port_reg_p_read, "ap_port_reg_p_read");
    sc_trace(mVcdFile, ap_port_reg_p_read1, "ap_port_reg_p_read1");
    sc_trace(mVcdFile, ap_port_reg_p_read2, "ap_port_reg_p_read2");
    sc_trace(mVcdFile, ap_port_reg_p_read3, "ap_port_reg_p_read3");
    sc_trace(mVcdFile, ap_port_reg_p_read4, "ap_port_reg_p_read4");
    sc_trace(mVcdFile, ap_port_reg_p_read5, "ap_port_reg_p_read5");
    sc_trace(mVcdFile, ap_port_reg_p_read6, "ap_port_reg_p_read6");
    sc_trace(mVcdFile, ap_port_reg_p_read7, "ap_port_reg_p_read7");
    sc_trace(mVcdFile, ap_port_reg_p_read8, "ap_port_reg_p_read8");
    sc_trace(mVcdFile, ap_port_reg_p_read9, "ap_port_reg_p_read9");
    sc_trace(mVcdFile, ap_port_reg_p_read10, "ap_port_reg_p_read10");
    sc_trace(mVcdFile, ap_port_reg_p_read11, "ap_port_reg_p_read11");
    sc_trace(mVcdFile, ap_port_reg_p_read12, "ap_port_reg_p_read12");
    sc_trace(mVcdFile, ap_port_reg_p_read13, "ap_port_reg_p_read13");
    sc_trace(mVcdFile, ap_port_reg_p_read14, "ap_port_reg_p_read14");
    sc_trace(mVcdFile, ap_port_reg_p_read15, "ap_port_reg_p_read15");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_ap_ready, "grp_mixColumn_fu_454_ap_ready");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_column_0_read, "grp_mixColumn_fu_454_column_0_read");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_column_1_read, "grp_mixColumn_fu_454_column_1_read");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_column_3_read, "grp_mixColumn_fu_454_column_3_read");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_ap_return_0, "grp_mixColumn_fu_454_ap_return_0");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_ap_return_1, "grp_mixColumn_fu_454_ap_return_1");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_ap_return_2, "grp_mixColumn_fu_454_ap_return_2");
    sc_trace(mVcdFile, grp_mixColumn_fu_454_ap_return_3, "grp_mixColumn_fu_454_ap_return_3");
    sc_trace(mVcdFile, zext_ln43_18_fu_500_p1, "zext_ln43_18_fu_500_p1");
    sc_trace(mVcdFile, zext_ln43_fu_505_p1, "zext_ln43_fu_505_p1");
    sc_trace(mVcdFile, zext_ln43_13_fu_510_p1, "zext_ln43_13_fu_510_p1");
    sc_trace(mVcdFile, zext_ln43_8_fu_515_p1, "zext_ln43_8_fu_515_p1");
    sc_trace(mVcdFile, zext_ln43_17_fu_520_p1, "zext_ln43_17_fu_520_p1");
    sc_trace(mVcdFile, zext_ln43_6_fu_567_p1, "zext_ln43_6_fu_567_p1");
    sc_trace(mVcdFile, zext_ln43_12_fu_572_p1, "zext_ln43_12_fu_572_p1");
    sc_trace(mVcdFile, zext_ln43_7_fu_577_p1, "zext_ln43_7_fu_577_p1");
    sc_trace(mVcdFile, zext_ln43_16_fu_582_p1, "zext_ln43_16_fu_582_p1");
    sc_trace(mVcdFile, zext_ln43_5_fu_628_p1, "zext_ln43_5_fu_628_p1");
    sc_trace(mVcdFile, zext_ln43_11_fu_633_p1, "zext_ln43_11_fu_633_p1");
    sc_trace(mVcdFile, zext_ln43_10_fu_638_p1, "zext_ln43_10_fu_638_p1");
    sc_trace(mVcdFile, zext_ln43_4_fu_642_p1, "zext_ln43_4_fu_642_p1");
    sc_trace(mVcdFile, zext_ln43_9_fu_689_p1, "zext_ln43_9_fu_689_p1");
    sc_trace(mVcdFile, zext_ln43_14_fu_694_p1, "zext_ln43_14_fu_694_p1");
    sc_trace(mVcdFile, zext_ln43_15_fu_698_p1, "zext_ln43_15_fu_698_p1");
    sc_trace(mVcdFile, xor_ln226_8_fu_553_p2, "xor_ln226_8_fu_553_p2");
    sc_trace(mVcdFile, xor_ln226_12_fu_560_p2, "xor_ln226_12_fu_560_p2");
    sc_trace(mVcdFile, xor_ln226_3_fu_602_p2, "xor_ln226_3_fu_602_p2");
    sc_trace(mVcdFile, xor_ln226_11_fu_615_p2, "xor_ln226_11_fu_615_p2");
    sc_trace(mVcdFile, xor_ln226_2_fu_663_p2, "xor_ln226_2_fu_663_p2");
    sc_trace(mVcdFile, xor_ln226_10_fu_676_p2, "xor_ln226_10_fu_676_p2");
    sc_trace(mVcdFile, xor_ln226_1_fu_718_p2, "xor_ln226_1_fu_718_p2");
    sc_trace(mVcdFile, xor_ln226_5_fu_725_p2, "xor_ln226_5_fu_725_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_round::~aes_round() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete grp_mixColumn_fu_454;
}

void aes_round::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_468 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        reg_468 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        reg_485 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        reg_485 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        reg_490 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        reg_490 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_port_reg_p_read = p_read.read();
        ap_port_reg_p_read1 = p_read1.read();
        ap_port_reg_p_read10 = p_read10.read();
        ap_port_reg_p_read11 = p_read11.read();
        ap_port_reg_p_read12 = p_read12.read();
        ap_port_reg_p_read13 = p_read13.read();
        ap_port_reg_p_read14 = p_read14.read();
        ap_port_reg_p_read15 = p_read15.read();
        ap_port_reg_p_read2 = p_read2.read();
        ap_port_reg_p_read3 = p_read3.read();
        ap_port_reg_p_read4 = p_read4.read();
        ap_port_reg_p_read5 = p_read5.read();
        ap_port_reg_p_read6 = p_read6.read();
        ap_port_reg_p_read7 = p_read7.read();
        ap_port_reg_p_read8 = p_read8.read();
        ap_port_reg_p_read9 = p_read9.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_464 = state_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_473 = sbox_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        reg_479 = sbox_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_495 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_load_11_reg_893 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_load_12_reg_863 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_load_13_reg_827 = state_q1.read();
        xor_ln226_4_reg_842 = xor_ln226_4_fu_547_p2.read();
        xor_ln226_reg_837 = xor_ln226_fu_541_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_load_7_reg_873 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        xor_ln226_13_reg_963 = xor_ln226_13_fu_738_p2.read();
        xor_ln226_9_reg_958 = xor_ln226_9_fu_732_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        xor_ln226_14_reg_938 = xor_ln226_14_fu_683_p2.read();
        xor_ln226_6_reg_933 = xor_ln226_6_fu_670_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        xor_ln226_15_reg_908 = xor_ln226_15_fu_622_p2.read();
        xor_ln226_7_reg_903 = xor_ln226_7_fu_609_p2.read();
    }
}

void aes_round::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_round::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_round::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_round::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_round::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes_round::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes_round::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes_round::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes_round::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes_round::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes_round::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aes_round::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_round::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_round::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_round::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_round::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_round::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_round::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_round::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_round::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_round::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_round::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_round::thread_grp_mixColumn_fu_454_column_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_mixColumn_fu_454_column_0_read = reg_473.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        grp_mixColumn_fu_454_column_0_read = reg_479.read();
    } else {
        grp_mixColumn_fu_454_column_0_read = "XXXXXXXX";
    }
}

void aes_round::thread_grp_mixColumn_fu_454_column_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_mixColumn_fu_454_column_1_read = reg_479.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        grp_mixColumn_fu_454_column_1_read = sbox_q0.read();
    } else {
        grp_mixColumn_fu_454_column_1_read = "XXXXXXXX";
    }
}

void aes_round::thread_grp_mixColumn_fu_454_column_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_mixColumn_fu_454_column_3_read = sbox_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        grp_mixColumn_fu_454_column_3_read = reg_473.read();
    } else {
        grp_mixColumn_fu_454_column_3_read = "XXXXXXXX";
    }
}

void aes_round::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_15_fu_698_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_14_fu_694_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_9_fu_689_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_4_fu_642_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_10_fu_638_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_11_fu_633_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_5_fu_628_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_16_fu_582_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_7_fu_577_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_12_fu_572_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_6_fu_567_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_17_fu_520_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_8_fu_515_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_13_fu_510_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_fu_505_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_18_fu_500_p1.read());
    } else {
        sbox_address0 = "XXXXXXXX";
    }
}

void aes_round::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void aes_round::thread_state_addr_10_reg_760() {
    state_addr_10_reg_760 =  (sc_lv<4>) (ap_const_lv64_A);
}

void aes_round::thread_state_addr_11_reg_883() {
    state_addr_11_reg_883 =  (sc_lv<4>) (ap_const_lv64_B);
}

void aes_round::thread_state_addr_13_reg_812() {
    state_addr_13_reg_812 =  (sc_lv<4>) (ap_const_lv64_D);
}

void aes_round::thread_state_addr_14_reg_780() {
    state_addr_14_reg_780 =  (sc_lv<4>) (ap_const_lv64_E);
}

void aes_round::thread_state_addr_15_reg_749() {
    state_addr_15_reg_749 =  (sc_lv<4>) (ap_const_lv64_F);
}

void aes_round::thread_state_addr_1_reg_847() {
    state_addr_1_reg_847 =  (sc_lv<4>) (ap_const_lv64_1);
}

void aes_round::thread_state_addr_2_reg_802() {
    state_addr_2_reg_802 =  (sc_lv<4>) (ap_const_lv64_2);
}

void aes_round::thread_state_addr_3_reg_775() {
    state_addr_3_reg_775 =  (sc_lv<4>) (ap_const_lv64_3);
}

void aes_round::thread_state_addr_6_reg_868() {
    state_addr_6_reg_868 =  (sc_lv<4>) (ap_const_lv64_6);
}

void aes_round::thread_state_addr_reg_744() {
    state_addr_reg_744 =  (sc_lv<4>) (ap_const_lv64_0);
}

void aes_round::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address0 = state_addr_1_reg_847.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 = state_addr_6_reg_868.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_2_reg_802.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 = state_addr_3_reg_775.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = state_addr_reg_744.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_round::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_address1 = state_addr_13_reg_812.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_14_reg_780.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 = state_addr_10_reg_760.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 = state_addr_15_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 = state_addr_11_reg_883.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_round::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes_round::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void aes_round::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_d0 = xor_ln226_9_reg_958.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d0 = xor_ln226_1_fu_718_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = xor_ln226_6_reg_933.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d0 = xor_ln226_2_fu_663_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d0 = xor_ln226_7_reg_903.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d0 = xor_ln226_3_fu_602_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d0 = xor_ln226_reg_837.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_d0 = xor_ln226_8_fu_553_p2.read();
    } else {
        state_d0 = "XXXXXXXX";
    }
}

void aes_round::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_d1 = xor_ln226_13_reg_963.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d1 = xor_ln226_5_fu_725_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = xor_ln226_14_reg_938.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = xor_ln226_10_fu_676_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d1 = xor_ln226_15_reg_908.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d1 = xor_ln226_11_fu_615_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d1 = xor_ln226_4_reg_842.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_d1 = xor_ln226_12_fu_560_p2.read();
    } else {
        state_d1 = "XXXXXXXX";
    }
}

void aes_round::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes_round::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void aes_round::thread_xor_ln226_10_fu_676_p2() {
    xor_ln226_10_fu_676_p2 = (grp_mixColumn_fu_454_ap_return_2.read() ^ ap_port_reg_p_read10.read());
}

void aes_round::thread_xor_ln226_11_fu_615_p2() {
    xor_ln226_11_fu_615_p2 = (grp_mixColumn_fu_454_ap_return_2.read() ^ ap_port_reg_p_read11.read());
}

void aes_round::thread_xor_ln226_12_fu_560_p2() {
    xor_ln226_12_fu_560_p2 = (grp_mixColumn_fu_454_ap_return_3.read() ^ ap_port_reg_p_read12.read());
}

void aes_round::thread_xor_ln226_13_fu_738_p2() {
    xor_ln226_13_fu_738_p2 = (grp_mixColumn_fu_454_ap_return_3.read() ^ ap_port_reg_p_read13.read());
}

void aes_round::thread_xor_ln226_14_fu_683_p2() {
    xor_ln226_14_fu_683_p2 = (grp_mixColumn_fu_454_ap_return_3.read() ^ ap_port_reg_p_read14.read());
}

void aes_round::thread_xor_ln226_15_fu_622_p2() {
    xor_ln226_15_fu_622_p2 = (grp_mixColumn_fu_454_ap_return_3.read() ^ ap_port_reg_p_read15.read());
}

void aes_round::thread_xor_ln226_1_fu_718_p2() {
    xor_ln226_1_fu_718_p2 = (grp_mixColumn_fu_454_ap_return_0.read() ^ ap_port_reg_p_read1.read());
}

void aes_round::thread_xor_ln226_2_fu_663_p2() {
    xor_ln226_2_fu_663_p2 = (grp_mixColumn_fu_454_ap_return_0.read() ^ ap_port_reg_p_read2.read());
}

void aes_round::thread_xor_ln226_3_fu_602_p2() {
    xor_ln226_3_fu_602_p2 = (grp_mixColumn_fu_454_ap_return_0.read() ^ ap_port_reg_p_read3.read());
}

void aes_round::thread_xor_ln226_4_fu_547_p2() {
    xor_ln226_4_fu_547_p2 = (grp_mixColumn_fu_454_ap_return_1.read() ^ ap_port_reg_p_read4.read());
}

void aes_round::thread_xor_ln226_5_fu_725_p2() {
    xor_ln226_5_fu_725_p2 = (grp_mixColumn_fu_454_ap_return_1.read() ^ ap_port_reg_p_read5.read());
}

void aes_round::thread_xor_ln226_6_fu_670_p2() {
    xor_ln226_6_fu_670_p2 = (grp_mixColumn_fu_454_ap_return_1.read() ^ ap_port_reg_p_read6.read());
}

void aes_round::thread_xor_ln226_7_fu_609_p2() {
    xor_ln226_7_fu_609_p2 = (grp_mixColumn_fu_454_ap_return_1.read() ^ ap_port_reg_p_read7.read());
}

void aes_round::thread_xor_ln226_8_fu_553_p2() {
    xor_ln226_8_fu_553_p2 = (grp_mixColumn_fu_454_ap_return_2.read() ^ ap_port_reg_p_read8.read());
}

void aes_round::thread_xor_ln226_9_fu_732_p2() {
    xor_ln226_9_fu_732_p2 = (grp_mixColumn_fu_454_ap_return_2.read() ^ ap_port_reg_p_read9.read());
}

void aes_round::thread_xor_ln226_fu_541_p2() {
    xor_ln226_fu_541_p2 = (grp_mixColumn_fu_454_ap_return_0.read() ^ ap_port_reg_p_read.read());
}

void aes_round::thread_zext_ln43_10_fu_638_p1() {
    zext_ln43_10_fu_638_p1 = esl_zext<64,8>(state_load_7_reg_873.read());
}

void aes_round::thread_zext_ln43_11_fu_633_p1() {
    zext_ln43_11_fu_633_p1 = esl_zext<64,8>(reg_468.read());
}

void aes_round::thread_zext_ln43_12_fu_572_p1() {
    zext_ln43_12_fu_572_p1 = esl_zext<64,8>(reg_490.read());
}

void aes_round::thread_zext_ln43_13_fu_510_p1() {
    zext_ln43_13_fu_510_p1 = esl_zext<64,8>(reg_468.read());
}

void aes_round::thread_zext_ln43_14_fu_694_p1() {
    zext_ln43_14_fu_694_p1 = esl_zext<64,8>(state_load_11_reg_893.read());
}

void aes_round::thread_zext_ln43_15_fu_698_p1() {
    zext_ln43_15_fu_698_p1 = esl_zext<64,8>(state_load_12_reg_863.read());
}

void aes_round::thread_zext_ln43_16_fu_582_p1() {
    zext_ln43_16_fu_582_p1 = esl_zext<64,8>(state_load_13_reg_827.read());
}

void aes_round::thread_zext_ln43_17_fu_520_p1() {
    zext_ln43_17_fu_520_p1 = esl_zext<64,8>(reg_485.read());
}

void aes_round::thread_zext_ln43_18_fu_500_p1() {
    zext_ln43_18_fu_500_p1 = esl_zext<64,8>(state_q1.read());
}

void aes_round::thread_zext_ln43_4_fu_642_p1() {
    zext_ln43_4_fu_642_p1 = esl_zext<64,8>(reg_490.read());
}

void aes_round::thread_zext_ln43_5_fu_628_p1() {
    zext_ln43_5_fu_628_p1 = esl_zext<64,8>(reg_485.read());
}

void aes_round::thread_zext_ln43_6_fu_567_p1() {
    zext_ln43_6_fu_567_p1 = esl_zext<64,8>(reg_468.read());
}

void aes_round::thread_zext_ln43_7_fu_577_p1() {
    zext_ln43_7_fu_577_p1 = esl_zext<64,8>(reg_464.read());
}

void aes_round::thread_zext_ln43_8_fu_515_p1() {
    zext_ln43_8_fu_515_p1 = esl_zext<64,8>(reg_464.read());
}

void aes_round::thread_zext_ln43_9_fu_689_p1() {
    zext_ln43_9_fu_689_p1 = esl_zext<64,8>(reg_464.read());
}

void aes_round::thread_zext_ln43_fu_505_p1() {
    zext_ln43_fu_505_p1 = esl_zext<64,8>(reg_464.read());
}

void aes_round::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

