// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "expandKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic expandKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic expandKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> expandKey::ap_ST_fsm_state1 = "1";
const sc_lv<10> expandKey::ap_ST_fsm_state2 = "10";
const sc_lv<10> expandKey::ap_ST_fsm_state3 = "100";
const sc_lv<10> expandKey::ap_ST_fsm_state4 = "1000";
const sc_lv<10> expandKey::ap_ST_fsm_state5 = "10000";
const sc_lv<10> expandKey::ap_ST_fsm_state6 = "100000";
const sc_lv<10> expandKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> expandKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> expandKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> expandKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> expandKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> expandKey::ap_const_lv32_4 = "100";
const sc_lv<32> expandKey::ap_const_lv32_7 = "111";
const sc_lv<32> expandKey::ap_const_lv32_1 = "1";
const sc_lv<1> expandKey::ap_const_lv1_0 = "0";
const sc_lv<32> expandKey::ap_const_lv32_3 = "11";
const sc_lv<1> expandKey::ap_const_lv1_1 = "1";
const sc_lv<32> expandKey::ap_const_lv32_5 = "101";
const sc_lv<32> expandKey::ap_const_lv32_6 = "110";
const sc_lv<32> expandKey::ap_const_lv32_8 = "1000";
const sc_lv<32> expandKey::ap_const_lv32_2 = "10";
const sc_lv<5> expandKey::ap_const_lv5_0 = "00000";
const sc_lv<8> expandKey::ap_const_lv8_10 = "10000";
const sc_lv<5> expandKey::ap_const_lv5_10 = "10000";
const sc_lv<5> expandKey::ap_const_lv5_1 = "1";
const sc_lv<8> expandKey::ap_const_lv8_B0 = "10110000";
const sc_lv<8> expandKey::ap_const_lv8_FC = "11111100";
const sc_lv<8> expandKey::ap_const_lv8_FD = "11111101";
const sc_lv<4> expandKey::ap_const_lv4_0 = "0000";
const sc_lv<8> expandKey::ap_const_lv8_FE = "11111110";
const sc_lv<8> expandKey::ap_const_lv8_FF = "11111111";
const sc_lv<8> expandKey::ap_const_lv8_F0 = "11110000";
const sc_lv<8> expandKey::ap_const_lv8_1 = "1";
const sc_lv<9> expandKey::ap_const_lv9_1F0 = "111110000";
const sc_lv<9> expandKey::ap_const_lv9_1F1 = "111110001";
const sc_lv<8> expandKey::ap_const_lv8_3 = "11";
const sc_lv<8> expandKey::ap_const_lv8_4 = "100";
const sc_lv<9> expandKey::ap_const_lv9_1 = "1";
const sc_lv<32> expandKey::ap_const_lv32_9 = "1001";
const bool expandKey::ap_const_boolean_1 = true;

expandKey::expandKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new expandKey_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    Rcon_U = new expandKey_Rcon("Rcon_U");
    Rcon_U->clk(ap_clk);
    Rcon_U->reset(ap_rst);
    Rcon_U->address0(Rcon_address0);
    Rcon_U->ce0(Rcon_ce0);
    Rcon_U->q0(Rcon_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Rcon_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln92_fu_348_p1 );

    SC_METHOD(thread_Rcon_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_add_ln136_1_fu_321_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_add_ln136_2_fu_361_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_add_ln136_3_fu_372_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_add_ln136_fu_310_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_add_ln161_1_fu_414_p2);
    sensitive << ( zext_ln162_fu_410_p1 );

    SC_METHOD(thread_add_ln161_2_fu_462_p2);
    sensitive << ( zext_ln162_reg_666 );

    SC_METHOD(thread_add_ln161_3_fu_486_p2);
    sensitive << ( zext_ln162_1_fu_482_p1 );

    SC_METHOD(thread_add_ln161_fu_393_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_add_ln162_fu_539_p2);
    sensitive << ( zext_ln162_reg_666 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_currentSize_fu_533_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_expandedKey_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln127_reg_569 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln136_fu_316_p1 );
    sensitive << ( zext_ln136_3_fu_378_p1 );
    sensitive << ( zext_ln161_2_fu_424_p1 );
    sensitive << ( zext_ln161_6_fu_496_p1 );
    sensitive << ( zext_ln161_3_fu_517_p1 );
    sensitive << ( zext_ln161_7_fu_556_p1 );

    SC_METHOD(thread_expandedKey_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln136_1_fu_327_p1 );
    sensitive << ( zext_ln136_2_fu_367_p1 );
    sensitive << ( zext_ln161_fu_399_p1 );
    sensitive << ( zext_ln161_4_fu_471_p1 );
    sensitive << ( zext_ln161_1_fu_512_p1 );
    sensitive << ( zext_ln161_5_fu_544_p1 );

    SC_METHOD(thread_expandedKey_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_expandedKey_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_expandedKey_d0);
    sensitive << ( key_q0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( xor_ln161_1_reg_687 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln161_3_fu_549_p2 );

    SC_METHOD(thread_expandedKey_d1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( xor_ln161_reg_682 );
    sensitive << ( xor_ln161_2_reg_712 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_expandedKey_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_expandedKey_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_i_fu_289_p2);
    sensitive << ( i_0_reg_245 );

    SC_METHOD(thread_icmp_ln126_fu_283_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_245 );

    SC_METHOD(thread_icmp_ln130_fu_300_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_icmp_ln142_fu_332_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln130_fu_300_p2 );
    sensitive << ( trunc_ln130_fu_306_p1 );

    SC_METHOD(thread_key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln127_fu_295_p1 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_or_ln162_1_fu_476_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_or_ln162_fu_404_p2);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_rconIteration_1_fu_353_p3);
    sensitive << ( icmp_ln142_fu_332_p2 );
    sensitive << ( iteration_assign_reg_268 );
    sensitive << ( rconIteration_fu_338_p2 );

    SC_METHOD(thread_rconIteration_fu_338_p2);
    sensitive << ( iteration_assign_reg_268 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln43_fu_383_p1 );
    sensitive << ( zext_ln43_1_fu_388_p1 );
    sensitive << ( zext_ln43_2_fu_429_p1 );
    sensitive << ( zext_ln43_3_fu_501_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sext_ln161_1_fu_467_p1);
    sensitive << ( add_ln161_2_fu_462_p2 );

    SC_METHOD(thread_sext_ln161_2_fu_492_p1);
    sensitive << ( add_ln161_3_fu_486_p2 );

    SC_METHOD(thread_sext_ln161_fu_420_p1);
    sensitive << ( add_ln161_1_fu_414_p2 );

    SC_METHOD(thread_t_0_2_fu_443_p3);
    sensitive << ( reg_279 );
    sensitive << ( icmp_ln142_reg_592 );
    sensitive << ( t_0_fu_433_p2 );

    SC_METHOD(thread_t_0_fu_433_p2);
    sensitive << ( Rcon_load_reg_630 );
    sensitive << ( sbox_load_reg_646 );

    SC_METHOD(thread_t_1_2_fu_437_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( icmp_ln142_reg_592 );
    sensitive << ( t_1_1_reg_610 );

    SC_METHOD(thread_t_2_2_fu_506_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( icmp_ln142_reg_592 );
    sensitive << ( t_2_1_reg_635 );

    SC_METHOD(thread_t_3_2_fu_527_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( icmp_ln142_reg_592 );
    sensitive << ( t_3_1_reg_640 );

    SC_METHOD(thread_trunc_ln109_fu_344_p1);
    sensitive << ( iteration_assign_reg_268 );

    SC_METHOD(thread_trunc_ln130_fu_306_p1);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_xor_ln161_1_fu_456_p2);
    sensitive << ( expandedKey_q0 );
    sensitive << ( t_1_2_fu_437_p3 );

    SC_METHOD(thread_xor_ln161_2_fu_521_p2);
    sensitive << ( expandedKey_q1 );
    sensitive << ( t_2_2_fu_506_p3 );

    SC_METHOD(thread_xor_ln161_3_fu_549_p2);
    sensitive << ( reg_279 );
    sensitive << ( t_3_2_fu_527_p3 );

    SC_METHOD(thread_xor_ln161_fu_450_p2);
    sensitive << ( expandedKey_q1 );
    sensitive << ( t_0_2_fu_443_p3 );

    SC_METHOD(thread_zext_ln127_fu_295_p1);
    sensitive << ( i_0_reg_245 );

    SC_METHOD(thread_zext_ln136_1_fu_327_p1);
    sensitive << ( add_ln136_1_fu_321_p2 );

    SC_METHOD(thread_zext_ln136_2_fu_367_p1);
    sensitive << ( add_ln136_2_fu_361_p2 );

    SC_METHOD(thread_zext_ln136_3_fu_378_p1);
    sensitive << ( add_ln136_3_fu_372_p2 );

    SC_METHOD(thread_zext_ln136_fu_316_p1);
    sensitive << ( add_ln136_fu_310_p2 );

    SC_METHOD(thread_zext_ln161_1_fu_512_p1);
    sensitive << ( currentSize_0_reg_256 );

    SC_METHOD(thread_zext_ln161_2_fu_424_p1);
    sensitive << ( sext_ln161_fu_420_p1 );

    SC_METHOD(thread_zext_ln161_3_fu_517_p1);
    sensitive << ( or_ln162_reg_661 );

    SC_METHOD(thread_zext_ln161_4_fu_471_p1);
    sensitive << ( sext_ln161_1_fu_467_p1 );

    SC_METHOD(thread_zext_ln161_5_fu_544_p1);
    sensitive << ( add_ln162_fu_539_p2 );

    SC_METHOD(thread_zext_ln161_6_fu_496_p1);
    sensitive << ( sext_ln161_2_fu_492_p1 );

    SC_METHOD(thread_zext_ln161_7_fu_556_p1);
    sensitive << ( or_ln162_1_reg_697 );

    SC_METHOD(thread_zext_ln161_fu_399_p1);
    sensitive << ( add_ln161_fu_393_p2 );

    SC_METHOD(thread_zext_ln162_1_fu_482_p1);
    sensitive << ( or_ln162_1_fu_476_p2 );

    SC_METHOD(thread_zext_ln162_fu_410_p1);
    sensitive << ( or_ln162_fu_404_p2 );

    SC_METHOD(thread_zext_ln43_1_fu_388_p1);
    sensitive << ( expandedKey_q1 );

    SC_METHOD(thread_zext_ln43_2_fu_429_p1);
    sensitive << ( t_3_1_reg_640 );

    SC_METHOD(thread_zext_ln43_3_fu_501_p1);
    sensitive << ( reg_279 );

    SC_METHOD(thread_zext_ln43_fu_383_p1);
    sensitive << ( expandedKey_q1 );

    SC_METHOD(thread_zext_ln92_fu_348_p1);
    sensitive << ( trunc_ln109_fu_344_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln126_fu_283_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln130_fu_300_p2 );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "expandKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, expandedKey_address0, "(port)expandedKey_address0");
    sc_trace(mVcdFile, expandedKey_ce0, "(port)expandedKey_ce0");
    sc_trace(mVcdFile, expandedKey_we0, "(port)expandedKey_we0");
    sc_trace(mVcdFile, expandedKey_d0, "(port)expandedKey_d0");
    sc_trace(mVcdFile, expandedKey_q0, "(port)expandedKey_q0");
    sc_trace(mVcdFile, expandedKey_address1, "(port)expandedKey_address1");
    sc_trace(mVcdFile, expandedKey_ce1, "(port)expandedKey_ce1");
    sc_trace(mVcdFile, expandedKey_we1, "(port)expandedKey_we1");
    sc_trace(mVcdFile, expandedKey_d1, "(port)expandedKey_d1");
    sc_trace(mVcdFile, expandedKey_q1, "(port)expandedKey_q1");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, Rcon_address0, "Rcon_address0");
    sc_trace(mVcdFile, Rcon_ce0, "Rcon_ce0");
    sc_trace(mVcdFile, Rcon_q0, "Rcon_q0");
    sc_trace(mVcdFile, reg_279, "reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln126_fu_283_p2, "icmp_ln126_fu_283_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_289_p2, "i_fu_289_p2");
    sc_trace(mVcdFile, i_reg_564, "i_reg_564");
    sc_trace(mVcdFile, zext_ln127_fu_295_p1, "zext_ln127_fu_295_p1");
    sc_trace(mVcdFile, zext_ln127_reg_569, "zext_ln127_reg_569");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln130_fu_300_p2, "icmp_ln130_fu_300_p2");
    sc_trace(mVcdFile, icmp_ln142_fu_332_p2, "icmp_ln142_fu_332_p2");
    sc_trace(mVcdFile, icmp_ln142_reg_592, "icmp_ln142_reg_592");
    sc_trace(mVcdFile, rconIteration_1_fu_353_p3, "rconIteration_1_fu_353_p3");
    sc_trace(mVcdFile, rconIteration_1_reg_605, "rconIteration_1_reg_605");
    sc_trace(mVcdFile, t_1_1_reg_610, "t_1_1_reg_610");
    sc_trace(mVcdFile, Rcon_load_reg_630, "Rcon_load_reg_630");
    sc_trace(mVcdFile, t_2_1_reg_635, "t_2_1_reg_635");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, t_3_1_reg_640, "t_3_1_reg_640");
    sc_trace(mVcdFile, sbox_load_reg_646, "sbox_load_reg_646");
    sc_trace(mVcdFile, or_ln162_fu_404_p2, "or_ln162_fu_404_p2");
    sc_trace(mVcdFile, or_ln162_reg_661, "or_ln162_reg_661");
    sc_trace(mVcdFile, zext_ln162_fu_410_p1, "zext_ln162_fu_410_p1");
    sc_trace(mVcdFile, zext_ln162_reg_666, "zext_ln162_reg_666");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, xor_ln161_fu_450_p2, "xor_ln161_fu_450_p2");
    sc_trace(mVcdFile, xor_ln161_reg_682, "xor_ln161_reg_682");
    sc_trace(mVcdFile, xor_ln161_1_fu_456_p2, "xor_ln161_1_fu_456_p2");
    sc_trace(mVcdFile, xor_ln161_1_reg_687, "xor_ln161_1_reg_687");
    sc_trace(mVcdFile, or_ln162_1_fu_476_p2, "or_ln162_1_fu_476_p2");
    sc_trace(mVcdFile, or_ln162_1_reg_697, "or_ln162_1_reg_697");
    sc_trace(mVcdFile, xor_ln161_2_fu_521_p2, "xor_ln161_2_fu_521_p2");
    sc_trace(mVcdFile, xor_ln161_2_reg_712, "xor_ln161_2_reg_712");
    sc_trace(mVcdFile, currentSize_fu_533_p2, "currentSize_fu_533_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_0_reg_245, "i_0_reg_245");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, currentSize_0_reg_256, "currentSize_0_reg_256");
    sc_trace(mVcdFile, iteration_assign_reg_268, "iteration_assign_reg_268");
    sc_trace(mVcdFile, zext_ln136_fu_316_p1, "zext_ln136_fu_316_p1");
    sc_trace(mVcdFile, zext_ln136_1_fu_327_p1, "zext_ln136_1_fu_327_p1");
    sc_trace(mVcdFile, zext_ln92_fu_348_p1, "zext_ln92_fu_348_p1");
    sc_trace(mVcdFile, zext_ln136_2_fu_367_p1, "zext_ln136_2_fu_367_p1");
    sc_trace(mVcdFile, zext_ln136_3_fu_378_p1, "zext_ln136_3_fu_378_p1");
    sc_trace(mVcdFile, zext_ln43_fu_383_p1, "zext_ln43_fu_383_p1");
    sc_trace(mVcdFile, zext_ln43_1_fu_388_p1, "zext_ln43_1_fu_388_p1");
    sc_trace(mVcdFile, zext_ln161_fu_399_p1, "zext_ln161_fu_399_p1");
    sc_trace(mVcdFile, zext_ln161_2_fu_424_p1, "zext_ln161_2_fu_424_p1");
    sc_trace(mVcdFile, zext_ln43_2_fu_429_p1, "zext_ln43_2_fu_429_p1");
    sc_trace(mVcdFile, zext_ln161_4_fu_471_p1, "zext_ln161_4_fu_471_p1");
    sc_trace(mVcdFile, zext_ln161_6_fu_496_p1, "zext_ln161_6_fu_496_p1");
    sc_trace(mVcdFile, zext_ln43_3_fu_501_p1, "zext_ln43_3_fu_501_p1");
    sc_trace(mVcdFile, zext_ln161_1_fu_512_p1, "zext_ln161_1_fu_512_p1");
    sc_trace(mVcdFile, zext_ln161_3_fu_517_p1, "zext_ln161_3_fu_517_p1");
    sc_trace(mVcdFile, zext_ln161_5_fu_544_p1, "zext_ln161_5_fu_544_p1");
    sc_trace(mVcdFile, zext_ln161_7_fu_556_p1, "zext_ln161_7_fu_556_p1");
    sc_trace(mVcdFile, xor_ln161_3_fu_549_p2, "xor_ln161_3_fu_549_p2");
    sc_trace(mVcdFile, add_ln136_fu_310_p2, "add_ln136_fu_310_p2");
    sc_trace(mVcdFile, add_ln136_1_fu_321_p2, "add_ln136_1_fu_321_p2");
    sc_trace(mVcdFile, trunc_ln130_fu_306_p1, "trunc_ln130_fu_306_p1");
    sc_trace(mVcdFile, trunc_ln109_fu_344_p1, "trunc_ln109_fu_344_p1");
    sc_trace(mVcdFile, rconIteration_fu_338_p2, "rconIteration_fu_338_p2");
    sc_trace(mVcdFile, add_ln136_2_fu_361_p2, "add_ln136_2_fu_361_p2");
    sc_trace(mVcdFile, add_ln136_3_fu_372_p2, "add_ln136_3_fu_372_p2");
    sc_trace(mVcdFile, add_ln161_fu_393_p2, "add_ln161_fu_393_p2");
    sc_trace(mVcdFile, add_ln161_1_fu_414_p2, "add_ln161_1_fu_414_p2");
    sc_trace(mVcdFile, sext_ln161_fu_420_p1, "sext_ln161_fu_420_p1");
    sc_trace(mVcdFile, t_0_fu_433_p2, "t_0_fu_433_p2");
    sc_trace(mVcdFile, t_0_2_fu_443_p3, "t_0_2_fu_443_p3");
    sc_trace(mVcdFile, t_1_2_fu_437_p3, "t_1_2_fu_437_p3");
    sc_trace(mVcdFile, add_ln161_2_fu_462_p2, "add_ln161_2_fu_462_p2");
    sc_trace(mVcdFile, sext_ln161_1_fu_467_p1, "sext_ln161_1_fu_467_p1");
    sc_trace(mVcdFile, zext_ln162_1_fu_482_p1, "zext_ln162_1_fu_482_p1");
    sc_trace(mVcdFile, add_ln161_3_fu_486_p2, "add_ln161_3_fu_486_p2");
    sc_trace(mVcdFile, sext_ln161_2_fu_492_p1, "sext_ln161_2_fu_492_p1");
    sc_trace(mVcdFile, t_2_2_fu_506_p3, "t_2_2_fu_506_p3");
    sc_trace(mVcdFile, add_ln162_fu_539_p2, "add_ln162_fu_539_p2");
    sc_trace(mVcdFile, t_3_2_fu_527_p3, "t_3_2_fu_527_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

expandKey::~expandKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete Rcon_U;
}

void expandKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln126_fu_283_p2.read(), ap_const_lv1_1))) {
        currentSize_0_reg_256 = ap_const_lv8_10;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        currentSize_0_reg_256 = currentSize_fu_533_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_245 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_245 = i_reg_564.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln126_fu_283_p2.read(), ap_const_lv1_1))) {
        iteration_assign_reg_268 = ap_const_lv32_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        iteration_assign_reg_268 = rconIteration_1_reg_605.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Rcon_load_reg_630 = Rcon_q0.read();
        t_1_1_reg_610 = expandedKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_564 = i_fu_289_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln130_fu_300_p2.read(), ap_const_lv1_1))) {
        icmp_ln142_reg_592 = icmp_ln142_fu_332_p2.read();
        rconIteration_1_reg_605 = rconIteration_1_fu_353_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        or_ln162_1_reg_697 = or_ln162_1_fu_476_p2.read();
        xor_ln161_1_reg_687 = xor_ln161_1_fu_456_p2.read();
        xor_ln161_reg_682 = xor_ln161_fu_450_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        or_ln162_reg_661 = or_ln162_fu_404_p2.read();
        t_2_1_reg_635 = expandedKey_q1.read();
        t_3_1_reg_640 = expandedKey_q0.read();
        zext_ln162_reg_666 = zext_ln162_fu_410_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_279 = expandedKey_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln142_reg_592.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        sbox_load_reg_646 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        xor_ln161_2_reg_712 = xor_ln161_2_fu_521_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln126_fu_283_p2.read(), ap_const_lv1_0))) {
        zext_ln127_reg_569 = zext_ln127_fu_295_p1.read();
    }
}

void expandKey::thread_Rcon_address0() {
    Rcon_address0 =  (sc_lv<8>) (zext_ln92_fu_348_p1.read());
}

void expandKey::thread_Rcon_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Rcon_ce0 = ap_const_logic_1;
    } else {
        Rcon_ce0 = ap_const_logic_0;
    }
}

void expandKey::thread_add_ln136_1_fu_321_p2() {
    add_ln136_1_fu_321_p2 = (!ap_const_lv8_FD.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FD) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_add_ln136_2_fu_361_p2() {
    add_ln136_2_fu_361_p2 = (!ap_const_lv8_FE.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FE) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_add_ln136_3_fu_372_p2() {
    add_ln136_3_fu_372_p2 = (!ap_const_lv8_FF.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_add_ln136_fu_310_p2() {
    add_ln136_fu_310_p2 = (!ap_const_lv8_FC.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FC) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_add_ln161_1_fu_414_p2() {
    add_ln161_1_fu_414_p2 = (!ap_const_lv9_1F0.is_01() || !zext_ln162_fu_410_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1F0) + sc_biguint<9>(zext_ln162_fu_410_p1.read()));
}

void expandKey::thread_add_ln161_2_fu_462_p2() {
    add_ln161_2_fu_462_p2 = (!ap_const_lv9_1F1.is_01() || !zext_ln162_reg_666.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1F1) + sc_biguint<9>(zext_ln162_reg_666.read()));
}

void expandKey::thread_add_ln161_3_fu_486_p2() {
    add_ln161_3_fu_486_p2 = (!ap_const_lv9_1F0.is_01() || !zext_ln162_1_fu_482_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1F0) + sc_biguint<9>(zext_ln162_1_fu_482_p1.read()));
}

void expandKey::thread_add_ln161_fu_393_p2() {
    add_ln161_fu_393_p2 = (!ap_const_lv8_F0.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F0) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_add_ln162_fu_539_p2() {
    add_ln162_fu_539_p2 = (!ap_const_lv9_1.is_01() || !zext_ln162_reg_666.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_1) + sc_biguint<9>(zext_ln162_reg_666.read()));
}

void expandKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void expandKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void expandKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void expandKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void expandKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void expandKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void expandKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void expandKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void expandKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void expandKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void expandKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void expandKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void expandKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void expandKey::thread_currentSize_fu_533_p2() {
    currentSize_fu_533_p2 = (!ap_const_lv8_4.is_01() || !currentSize_0_reg_256.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_4) + sc_biguint<8>(currentSize_0_reg_256.read()));
}

void expandKey::thread_expandedKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln161_7_fu_556_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln161_3_fu_517_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln161_6_fu_496_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln161_2_fu_424_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln136_3_fu_378_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln136_fu_316_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        expandedKey_address0 =  (sc_lv<8>) (zext_ln127_reg_569.read());
    } else {
        expandedKey_address0 = "XXXXXXXX";
    }
}

void expandKey::thread_expandedKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln161_5_fu_544_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln161_1_fu_512_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln161_4_fu_471_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln161_fu_399_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln136_2_fu_367_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        expandedKey_address1 =  (sc_lv<8>) (zext_ln136_1_fu_327_p1.read());
    } else {
        expandedKey_address1 = "XXXXXXXX";
    }
}

void expandKey::thread_expandedKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        expandedKey_ce0 = ap_const_logic_1;
    } else {
        expandedKey_ce0 = ap_const_logic_0;
    }
}

void expandKey::thread_expandedKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        expandedKey_ce1 = ap_const_logic_1;
    } else {
        expandedKey_ce1 = ap_const_logic_0;
    }
}

void expandKey::thread_expandedKey_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        expandedKey_d0 = xor_ln161_3_fu_549_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expandedKey_d0 = xor_ln161_1_reg_687.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        expandedKey_d0 = key_q0.read();
    } else {
        expandedKey_d0 = "XXXXXXXX";
    }
}

void expandKey::thread_expandedKey_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        expandedKey_d1 = xor_ln161_2_reg_712.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expandedKey_d1 = xor_ln161_reg_682.read();
    } else {
        expandedKey_d1 = "XXXXXXXX";
    }
}

void expandKey::thread_expandedKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        expandedKey_we0 = ap_const_logic_1;
    } else {
        expandedKey_we0 = ap_const_logic_0;
    }
}

void expandKey::thread_expandedKey_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        expandedKey_we1 = ap_const_logic_1;
    } else {
        expandedKey_we1 = ap_const_logic_0;
    }
}

void expandKey::thread_i_fu_289_p2() {
    i_fu_289_p2 = (!i_0_reg_245.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_245.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void expandKey::thread_icmp_ln126_fu_283_p2() {
    icmp_ln126_fu_283_p2 = (!i_0_reg_245.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_245.read() == ap_const_lv5_10);
}

void expandKey::thread_icmp_ln130_fu_300_p2() {
    icmp_ln130_fu_300_p2 = (!currentSize_0_reg_256.read().is_01() || !ap_const_lv8_B0.is_01())? sc_lv<1>(): (sc_biguint<8>(currentSize_0_reg_256.read()) < sc_biguint<8>(ap_const_lv8_B0));
}

void expandKey::thread_icmp_ln142_fu_332_p2() {
    icmp_ln142_fu_332_p2 = (!trunc_ln130_fu_306_p1.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln130_fu_306_p1.read() == ap_const_lv4_0);
}

void expandKey::thread_key_address0() {
    key_address0 =  (sc_lv<4>) (zext_ln127_fu_295_p1.read());
}

void expandKey::thread_key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_ce0 = ap_const_logic_1;
    } else {
        key_ce0 = ap_const_logic_0;
    }
}

void expandKey::thread_or_ln162_1_fu_476_p2() {
    or_ln162_1_fu_476_p2 = (currentSize_0_reg_256.read() | ap_const_lv8_3);
}

void expandKey::thread_or_ln162_fu_404_p2() {
    or_ln162_fu_404_p2 = (currentSize_0_reg_256.read() | ap_const_lv8_1);
}

void expandKey::thread_rconIteration_1_fu_353_p3() {
    rconIteration_1_fu_353_p3 = (!icmp_ln142_fu_332_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln142_fu_332_p2.read()[0].to_bool())? rconIteration_fu_338_p2.read(): iteration_assign_reg_268.read());
}

void expandKey::thread_rconIteration_fu_338_p2() {
    rconIteration_fu_338_p2 = (!ap_const_lv32_1.is_01() || !iteration_assign_reg_268.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(iteration_assign_reg_268.read()));
}

void expandKey::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_3_fu_501_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_2_fu_429_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_1_fu_388_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln43_fu_383_p1.read());
    } else {
        sbox_address0 = "XXXXXXXX";
    }
}

void expandKey::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void expandKey::thread_sext_ln161_1_fu_467_p1() {
    sext_ln161_1_fu_467_p1 = esl_sext<32,9>(add_ln161_2_fu_462_p2.read());
}

void expandKey::thread_sext_ln161_2_fu_492_p1() {
    sext_ln161_2_fu_492_p1 = esl_sext<32,9>(add_ln161_3_fu_486_p2.read());
}

void expandKey::thread_sext_ln161_fu_420_p1() {
    sext_ln161_fu_420_p1 = esl_sext<32,9>(add_ln161_1_fu_414_p2.read());
}

void expandKey::thread_t_0_2_fu_443_p3() {
    t_0_2_fu_443_p3 = (!icmp_ln142_reg_592.read()[0].is_01())? sc_lv<8>(): ((icmp_ln142_reg_592.read()[0].to_bool())? t_0_fu_433_p2.read(): reg_279.read());
}

void expandKey::thread_t_0_fu_433_p2() {
    t_0_fu_433_p2 = (Rcon_load_reg_630.read() ^ sbox_load_reg_646.read());
}

void expandKey::thread_t_1_2_fu_437_p3() {
    t_1_2_fu_437_p3 = (!icmp_ln142_reg_592.read()[0].is_01())? sc_lv<8>(): ((icmp_ln142_reg_592.read()[0].to_bool())? sbox_q0.read(): t_1_1_reg_610.read());
}

void expandKey::thread_t_2_2_fu_506_p3() {
    t_2_2_fu_506_p3 = (!icmp_ln142_reg_592.read()[0].is_01())? sc_lv<8>(): ((icmp_ln142_reg_592.read()[0].to_bool())? sbox_q0.read(): t_2_1_reg_635.read());
}

void expandKey::thread_t_3_2_fu_527_p3() {
    t_3_2_fu_527_p3 = (!icmp_ln142_reg_592.read()[0].is_01())? sc_lv<8>(): ((icmp_ln142_reg_592.read()[0].to_bool())? sbox_q0.read(): t_3_1_reg_640.read());
}

void expandKey::thread_trunc_ln109_fu_344_p1() {
    trunc_ln109_fu_344_p1 = iteration_assign_reg_268.read().range(8-1, 0);
}

void expandKey::thread_trunc_ln130_fu_306_p1() {
    trunc_ln130_fu_306_p1 = currentSize_0_reg_256.read().range(4-1, 0);
}

void expandKey::thread_xor_ln161_1_fu_456_p2() {
    xor_ln161_1_fu_456_p2 = (expandedKey_q0.read() ^ t_1_2_fu_437_p3.read());
}

void expandKey::thread_xor_ln161_2_fu_521_p2() {
    xor_ln161_2_fu_521_p2 = (expandedKey_q1.read() ^ t_2_2_fu_506_p3.read());
}

void expandKey::thread_xor_ln161_3_fu_549_p2() {
    xor_ln161_3_fu_549_p2 = (reg_279.read() ^ t_3_2_fu_527_p3.read());
}

void expandKey::thread_xor_ln161_fu_450_p2() {
    xor_ln161_fu_450_p2 = (expandedKey_q1.read() ^ t_0_2_fu_443_p3.read());
}

void expandKey::thread_zext_ln127_fu_295_p1() {
    zext_ln127_fu_295_p1 = esl_zext<64,5>(i_0_reg_245.read());
}

void expandKey::thread_zext_ln136_1_fu_327_p1() {
    zext_ln136_1_fu_327_p1 = esl_zext<64,8>(add_ln136_1_fu_321_p2.read());
}

void expandKey::thread_zext_ln136_2_fu_367_p1() {
    zext_ln136_2_fu_367_p1 = esl_zext<64,8>(add_ln136_2_fu_361_p2.read());
}

void expandKey::thread_zext_ln136_3_fu_378_p1() {
    zext_ln136_3_fu_378_p1 = esl_zext<64,8>(add_ln136_3_fu_372_p2.read());
}

void expandKey::thread_zext_ln136_fu_316_p1() {
    zext_ln136_fu_316_p1 = esl_zext<64,8>(add_ln136_fu_310_p2.read());
}

void expandKey::thread_zext_ln161_1_fu_512_p1() {
    zext_ln161_1_fu_512_p1 = esl_zext<64,8>(currentSize_0_reg_256.read());
}

void expandKey::thread_zext_ln161_2_fu_424_p1() {
    zext_ln161_2_fu_424_p1 = esl_zext<64,32>(sext_ln161_fu_420_p1.read());
}

void expandKey::thread_zext_ln161_3_fu_517_p1() {
    zext_ln161_3_fu_517_p1 = esl_zext<64,8>(or_ln162_reg_661.read());
}

void expandKey::thread_zext_ln161_4_fu_471_p1() {
    zext_ln161_4_fu_471_p1 = esl_zext<64,32>(sext_ln161_1_fu_467_p1.read());
}

void expandKey::thread_zext_ln161_5_fu_544_p1() {
    zext_ln161_5_fu_544_p1 = esl_zext<64,9>(add_ln162_fu_539_p2.read());
}

void expandKey::thread_zext_ln161_6_fu_496_p1() {
    zext_ln161_6_fu_496_p1 = esl_zext<64,32>(sext_ln161_2_fu_492_p1.read());
}

void expandKey::thread_zext_ln161_7_fu_556_p1() {
    zext_ln161_7_fu_556_p1 = esl_zext<64,8>(or_ln162_1_reg_697.read());
}

void expandKey::thread_zext_ln161_fu_399_p1() {
    zext_ln161_fu_399_p1 = esl_zext<64,8>(add_ln161_fu_393_p2.read());
}

void expandKey::thread_zext_ln162_1_fu_482_p1() {
    zext_ln162_1_fu_482_p1 = esl_zext<9,8>(or_ln162_1_fu_476_p2.read());
}

void expandKey::thread_zext_ln162_fu_410_p1() {
    zext_ln162_fu_410_p1 = esl_zext<9,8>(or_ln162_fu_404_p2.read());
}

void expandKey::thread_zext_ln43_1_fu_388_p1() {
    zext_ln43_1_fu_388_p1 = esl_zext<64,8>(expandedKey_q1.read());
}

void expandKey::thread_zext_ln43_2_fu_429_p1() {
    zext_ln43_2_fu_429_p1 = esl_zext<64,8>(t_3_1_reg_640.read());
}

void expandKey::thread_zext_ln43_3_fu_501_p1() {
    zext_ln43_3_fu_501_p1 = esl_zext<64,8>(reg_279.read());
}

void expandKey::thread_zext_ln43_fu_383_p1() {
    zext_ln43_fu_383_p1 = esl_zext<64,8>(expandedKey_q1.read());
}

void expandKey::thread_zext_ln92_fu_348_p1() {
    zext_ln92_fu_348_p1 = esl_zext<64,8>(trunc_ln109_fu_344_p1.read());
}

void expandKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln126_fu_283_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln130_fu_300_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

