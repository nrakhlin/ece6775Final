// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _encrypt_dut_HH_
#define _encrypt_dut_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aes_encrypt.h"

namespace ap_rtl {

struct encrypt_dut : public sc_module {
    // Port declarations 70
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_0;
    sc_in< sc_lv<8> > input_1;
    sc_in< sc_lv<8> > input_2;
    sc_in< sc_lv<8> > input_3;
    sc_in< sc_lv<8> > input_4;
    sc_in< sc_lv<8> > input_5;
    sc_in< sc_lv<8> > input_6;
    sc_in< sc_lv<8> > input_7;
    sc_in< sc_lv<8> > input_8;
    sc_in< sc_lv<8> > input_9;
    sc_in< sc_lv<8> > input_10;
    sc_in< sc_lv<8> > input_11;
    sc_in< sc_lv<8> > input_12;
    sc_in< sc_lv<8> > input_13;
    sc_in< sc_lv<8> > input_14;
    sc_in< sc_lv<8> > input_15;
    sc_out< sc_lv<8> > output_0;
    sc_out< sc_logic > output_0_ap_vld;
    sc_out< sc_lv<8> > output_1;
    sc_out< sc_logic > output_1_ap_vld;
    sc_out< sc_lv<8> > output_2;
    sc_out< sc_logic > output_2_ap_vld;
    sc_out< sc_lv<8> > output_3;
    sc_out< sc_logic > output_3_ap_vld;
    sc_out< sc_lv<8> > output_4;
    sc_out< sc_logic > output_4_ap_vld;
    sc_out< sc_lv<8> > output_5;
    sc_out< sc_logic > output_5_ap_vld;
    sc_out< sc_lv<8> > output_6;
    sc_out< sc_logic > output_6_ap_vld;
    sc_out< sc_lv<8> > output_7;
    sc_out< sc_logic > output_7_ap_vld;
    sc_out< sc_lv<8> > output_8;
    sc_out< sc_logic > output_8_ap_vld;
    sc_out< sc_lv<8> > output_9;
    sc_out< sc_logic > output_9_ap_vld;
    sc_out< sc_lv<8> > output_10;
    sc_out< sc_logic > output_10_ap_vld;
    sc_out< sc_lv<8> > output_11;
    sc_out< sc_logic > output_11_ap_vld;
    sc_out< sc_lv<8> > output_12;
    sc_out< sc_logic > output_12_ap_vld;
    sc_out< sc_lv<8> > output_13;
    sc_out< sc_logic > output_13_ap_vld;
    sc_out< sc_lv<8> > output_14;
    sc_out< sc_logic > output_14_ap_vld;
    sc_out< sc_lv<8> > output_15;
    sc_out< sc_logic > output_15_ap_vld;
    sc_in< sc_lv<8> > key_0;
    sc_in< sc_lv<8> > key_1;
    sc_in< sc_lv<8> > key_2;
    sc_in< sc_lv<8> > key_3;
    sc_in< sc_lv<8> > key_4;
    sc_in< sc_lv<8> > key_5;
    sc_in< sc_lv<8> > key_6;
    sc_in< sc_lv<8> > key_7;
    sc_in< sc_lv<8> > key_8;
    sc_in< sc_lv<8> > key_9;
    sc_in< sc_lv<8> > key_10;
    sc_in< sc_lv<8> > key_11;
    sc_in< sc_lv<8> > key_12;
    sc_in< sc_lv<8> > key_13;
    sc_in< sc_lv<8> > key_14;
    sc_in< sc_lv<8> > key_15;


    // Module declarations
    encrypt_dut(sc_module_name name);
    SC_HAS_PROCESS(encrypt_dut);

    ~encrypt_dut();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    aes_encrypt* grp_aes_encrypt_fu_302;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_ap_start;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_ap_done;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_ap_idle;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_ap_ready;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_0;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_0_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_1;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_1_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_2;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_2_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_3;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_3_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_4;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_4_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_5;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_5_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_6;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_6_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_7;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_7_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_8;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_8_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_9;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_9_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_10;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_10_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_11;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_11_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_12;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_12_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_13;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_13_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_14;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_14_ap_vld;
    sc_signal< sc_lv<8> > grp_aes_encrypt_fu_302_output_15;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_output_15_ap_vld;
    sc_signal< sc_logic > grp_aes_encrypt_fu_302_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_aes_encrypt_fu_302_ap_start();
    void thread_output_0();
    void thread_output_0_ap_vld();
    void thread_output_1();
    void thread_output_10();
    void thread_output_10_ap_vld();
    void thread_output_11();
    void thread_output_11_ap_vld();
    void thread_output_12();
    void thread_output_12_ap_vld();
    void thread_output_13();
    void thread_output_13_ap_vld();
    void thread_output_14();
    void thread_output_14_ap_vld();
    void thread_output_15();
    void thread_output_15_ap_vld();
    void thread_output_1_ap_vld();
    void thread_output_2();
    void thread_output_2_ap_vld();
    void thread_output_3();
    void thread_output_3_ap_vld();
    void thread_output_4();
    void thread_output_4_ap_vld();
    void thread_output_5();
    void thread_output_5_ap_vld();
    void thread_output_6();
    void thread_output_6_ap_vld();
    void thread_output_7();
    void thread_output_7_ap_vld();
    void thread_output_8();
    void thread_output_8_ap_vld();
    void thread_output_9();
    void thread_output_9_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
