// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shiftRows.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shiftRows::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shiftRows::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> shiftRows::ap_ST_fsm_state1 = "1";
const sc_lv<6> shiftRows::ap_ST_fsm_state2 = "10";
const sc_lv<6> shiftRows::ap_ST_fsm_state3 = "100";
const sc_lv<6> shiftRows::ap_ST_fsm_state4 = "1000";
const sc_lv<6> shiftRows::ap_ST_fsm_state5 = "10000";
const sc_lv<6> shiftRows::ap_ST_fsm_state6 = "100000";
const sc_lv<32> shiftRows::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shiftRows::ap_const_lv32_1 = "1";
const sc_lv<1> shiftRows::ap_const_lv1_0 = "0";
const sc_lv<32> shiftRows::ap_const_lv32_2 = "10";
const sc_lv<32> shiftRows::ap_const_lv32_3 = "11";
const sc_lv<32> shiftRows::ap_const_lv32_4 = "100";
const sc_lv<1> shiftRows::ap_const_lv1_1 = "1";
const sc_lv<3> shiftRows::ap_const_lv3_0 = "000";
const sc_lv<2> shiftRows::ap_const_lv2_0 = "00";
const sc_lv<32> shiftRows::ap_const_lv32_5 = "101";
const sc_lv<3> shiftRows::ap_const_lv3_4 = "100";
const sc_lv<3> shiftRows::ap_const_lv3_1 = "1";
const sc_lv<4> shiftRows::ap_const_lv4_3 = "11";
const sc_lv<2> shiftRows::ap_const_lv2_1 = "1";
const bool shiftRows::ap_const_boolean_1 = true;

shiftRows::shiftRows(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln179_fu_95_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln179_fu_95_p2 );

    SC_METHOD(thread_i_fu_101_p2);
    sensitive << ( indvars_iv_reg_62 );

    SC_METHOD(thread_icmp_ln179_fu_95_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvars_iv_reg_62 );

    SC_METHOD(thread_icmp_ln187_fu_147_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( indvars_iv_reg_62 );
    sensitive << ( zext_ln187_fu_143_p1 );

    SC_METHOD(thread_icmp_ln190_fu_159_p2);
    sensitive << ( zext_ln190_reg_198 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_0_reg_85 );

    SC_METHOD(thread_j_1_fu_164_p2);
    sensitive << ( j_0_reg_85 );

    SC_METHOD(thread_k_fu_153_p2);
    sensitive << ( k_0_reg_74 );

    SC_METHOD(thread_or_ln190_fu_128_p2);
    sensitive << ( ptr_fu_111_p3 );

    SC_METHOD(thread_ptr_fu_111_p3);
    sensitive << ( trunc_ln183_fu_107_p1 );

    SC_METHOD(thread_sext_ln191_1_fu_175_p1);
    sensitive << ( j_0_reg_85 );

    SC_METHOD(thread_sext_ln191_fu_170_p1);
    sensitive << ( j_1_fu_164_p2 );

    SC_METHOD(thread_state_address0);
    sensitive << ( state_addr_reg_193 );
    sensitive << ( state_addr_1_reg_203 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln190_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( sext_ln191_fu_170_p1 );
    sensitive << ( sext_ln191_1_fu_175_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln190_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_d0);
    sensitive << ( state_q0 );
    sensitive << ( tmp_reg_216 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln190_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln190_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_trunc_ln183_fu_107_p1);
    sensitive << ( indvars_iv_reg_62 );

    SC_METHOD(thread_zext_ln183_fu_119_p1);
    sensitive << ( ptr_fu_111_p3 );

    SC_METHOD(thread_zext_ln187_fu_143_p1);
    sensitive << ( k_0_reg_74 );

    SC_METHOD(thread_zext_ln189_fu_123_p1);
    sensitive << ( ptr_fu_111_p3 );

    SC_METHOD(thread_zext_ln190_fu_134_p1);
    sensitive << ( or_ln190_fu_128_p2 );

    SC_METHOD(thread_zext_ln192_fu_138_p1);
    sensitive << ( or_ln190_fu_128_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln179_fu_95_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln190_fu_159_p2 );
    sensitive << ( icmp_ln187_fu_147_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shiftRows_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_101_p2, "i_fu_101_p2");
    sc_trace(mVcdFile, i_reg_183, "i_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln183_fu_119_p1, "zext_ln183_fu_119_p1");
    sc_trace(mVcdFile, zext_ln183_reg_188, "zext_ln183_reg_188");
    sc_trace(mVcdFile, icmp_ln179_fu_95_p2, "icmp_ln179_fu_95_p2");
    sc_trace(mVcdFile, state_addr_reg_193, "state_addr_reg_193");
    sc_trace(mVcdFile, zext_ln190_fu_134_p1, "zext_ln190_fu_134_p1");
    sc_trace(mVcdFile, zext_ln190_reg_198, "zext_ln190_reg_198");
    sc_trace(mVcdFile, state_addr_1_reg_203, "state_addr_1_reg_203");
    sc_trace(mVcdFile, k_fu_153_p2, "k_fu_153_p2");
    sc_trace(mVcdFile, k_reg_211, "k_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_reg_216, "tmp_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_1_fu_164_p2, "j_1_fu_164_p2");
    sc_trace(mVcdFile, j_1_reg_224, "j_1_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln190_fu_159_p2, "icmp_ln190_fu_159_p2");
    sc_trace(mVcdFile, indvars_iv_reg_62, "indvars_iv_reg_62");
    sc_trace(mVcdFile, icmp_ln187_fu_147_p2, "icmp_ln187_fu_147_p2");
    sc_trace(mVcdFile, k_0_reg_74, "k_0_reg_74");
    sc_trace(mVcdFile, j_0_reg_85, "j_0_reg_85");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln189_fu_123_p1, "zext_ln189_fu_123_p1");
    sc_trace(mVcdFile, zext_ln192_fu_138_p1, "zext_ln192_fu_138_p1");
    sc_trace(mVcdFile, sext_ln191_fu_170_p1, "sext_ln191_fu_170_p1");
    sc_trace(mVcdFile, sext_ln191_1_fu_175_p1, "sext_ln191_1_fu_175_p1");
    sc_trace(mVcdFile, trunc_ln183_fu_107_p1, "trunc_ln183_fu_107_p1");
    sc_trace(mVcdFile, ptr_fu_111_p3, "ptr_fu_111_p3");
    sc_trace(mVcdFile, or_ln190_fu_128_p2, "or_ln190_fu_128_p2");
    sc_trace(mVcdFile, zext_ln187_fu_143_p1, "zext_ln187_fu_143_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shiftRows::~shiftRows() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void shiftRows::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln187_fu_147_p2.read()))) {
        indvars_iv_reg_62 = i_reg_183.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_62 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_0_reg_85 = j_1_reg_224.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_85 = zext_ln183_reg_188.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read()))) {
        k_0_reg_74 = k_reg_211.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln179_fu_95_p2.read(), ap_const_lv1_0))) {
        k_0_reg_74 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_183 = i_fu_101_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln190_fu_159_p2.read(), ap_const_lv1_1))) {
        j_1_reg_224 = j_1_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_211 = k_fu_153_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln179_fu_95_p2.read(), ap_const_lv1_0))) {
        state_addr_1_reg_203 =  (sc_lv<4>) (zext_ln192_fu_138_p1.read());
        state_addr_reg_193 =  (sc_lv<4>) (zext_ln189_fu_123_p1.read());
        zext_ln183_reg_188 = zext_ln183_fu_119_p1.read();
        zext_ln190_reg_198 = zext_ln190_fu_134_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_reg_216 = state_q0.read();
    }
}

void shiftRows::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shiftRows::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shiftRows::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shiftRows::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shiftRows::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void shiftRows::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void shiftRows::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln179_fu_95_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shiftRows::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shiftRows::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln179_fu_95_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shiftRows::thread_i_fu_101_p2() {
    i_fu_101_p2 = (!indvars_iv_reg_62.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(indvars_iv_reg_62.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void shiftRows::thread_icmp_ln179_fu_95_p2() {
    icmp_ln179_fu_95_p2 = (!indvars_iv_reg_62.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(indvars_iv_reg_62.read() == ap_const_lv3_4);
}

void shiftRows::thread_icmp_ln187_fu_147_p2() {
    icmp_ln187_fu_147_p2 = (!zext_ln187_fu_143_p1.read().is_01() || !indvars_iv_reg_62.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln187_fu_143_p1.read() == indvars_iv_reg_62.read());
}

void shiftRows::thread_icmp_ln190_fu_159_p2() {
    icmp_ln190_fu_159_p2 = (!j_0_reg_85.read().is_01() || !zext_ln190_reg_198.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_0_reg_85.read()) < sc_bigint<32>(zext_ln190_reg_198.read()));
}

void shiftRows::thread_j_1_fu_164_p2() {
    j_1_fu_164_p2 = (!j_0_reg_85.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(j_0_reg_85.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void shiftRows::thread_k_fu_153_p2() {
    k_fu_153_p2 = (!k_0_reg_74.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k_0_reg_74.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void shiftRows::thread_or_ln190_fu_128_p2() {
    or_ln190_fu_128_p2 = (ptr_fu_111_p3.read() | ap_const_lv4_3);
}

void shiftRows::thread_ptr_fu_111_p3() {
    ptr_fu_111_p3 = esl_concat<2,2>(trunc_ln183_fu_107_p1.read(), ap_const_lv2_0);
}

void shiftRows::thread_sext_ln191_1_fu_175_p1() {
    sext_ln191_1_fu_175_p1 = esl_sext<64,32>(j_0_reg_85.read());
}

void shiftRows::thread_sext_ln191_fu_170_p1() {
    sext_ln191_fu_170_p1 = esl_sext<64,32>(j_1_fu_164_p2.read());
}

void shiftRows::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (sext_ln191_1_fu_175_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read()))) {
        state_address0 = state_addr_1_reg_203.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln190_fu_159_p2.read(), ap_const_lv1_1))) {
        state_address0 =  (sc_lv<4>) (sext_ln191_fu_170_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 = state_addr_reg_193.read();
    } else {
        state_address0 = "XXXX";
    }
}

void shiftRows::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln190_fu_159_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void shiftRows::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_d0 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read()))) {
        state_d0 = tmp_reg_216.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void shiftRows::thread_state_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void shiftRows::thread_trunc_ln183_fu_107_p1() {
    trunc_ln183_fu_107_p1 = indvars_iv_reg_62.read().range(2-1, 0);
}

void shiftRows::thread_zext_ln183_fu_119_p1() {
    zext_ln183_fu_119_p1 = esl_zext<32,4>(ptr_fu_111_p3.read());
}

void shiftRows::thread_zext_ln187_fu_143_p1() {
    zext_ln187_fu_143_p1 = esl_zext<3,2>(k_0_reg_74.read());
}

void shiftRows::thread_zext_ln189_fu_123_p1() {
    zext_ln189_fu_123_p1 = esl_zext<64,4>(ptr_fu_111_p3.read());
}

void shiftRows::thread_zext_ln190_fu_134_p1() {
    zext_ln190_fu_134_p1 = esl_zext<32,4>(or_ln190_fu_128_p2.read());
}

void shiftRows::thread_zext_ln192_fu_138_p1() {
    zext_ln192_fu_138_p1 = esl_zext<64,4>(or_ln190_fu_128_p2.read());
}

void shiftRows::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln179_fu_95_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln187_fu_147_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_159_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

