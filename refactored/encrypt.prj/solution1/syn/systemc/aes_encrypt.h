// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_encrypt_HH_
#define _aes_encrypt_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aes_main.h"
#include "expandKey.h"
#include "encrypt_dut_mux_1cud.h"
#include "aes_encrypt_block.h"
#include "aes_encrypt_expanbkb.h"

namespace ap_rtl {

struct aes_encrypt : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_0_read;
    sc_in< sc_lv<8> > input_1_read;
    sc_in< sc_lv<8> > input_2_read;
    sc_in< sc_lv<8> > input_3_read;
    sc_in< sc_lv<8> > input_4_read;
    sc_in< sc_lv<8> > input_5_read;
    sc_in< sc_lv<8> > input_6_read;
    sc_in< sc_lv<8> > input_7_read;
    sc_in< sc_lv<8> > input_8_read;
    sc_in< sc_lv<8> > input_9_read;
    sc_in< sc_lv<8> > input_10_read;
    sc_in< sc_lv<8> > input_11_read;
    sc_in< sc_lv<8> > input_12_read;
    sc_in< sc_lv<8> > input_13_read;
    sc_in< sc_lv<8> > input_14_read;
    sc_in< sc_lv<8> > input_15_read;
    sc_out< sc_lv<4> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<8> > output_r_d0;
    sc_out< sc_lv<4> > key_address0;
    sc_out< sc_logic > key_ce0;
    sc_in< sc_lv<8> > key_q0;


    // Module declarations
    aes_encrypt(sc_module_name name);
    SC_HAS_PROCESS(aes_encrypt);

    ~aes_encrypt();

    sc_trace_file* mVcdFile;

    aes_encrypt_block* block_U;
    aes_encrypt_expanbkb* expandedKey_U;
    aes_main* grp_aes_main_fu_247;
    expandKey* grp_expandKey_fu_255;
    encrypt_dut_mux_1cud<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8>* encrypt_dut_mux_1cud_U50;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > zext_ln47_fu_266_p1;
    sc_signal< sc_lv<4> > zext_ln47_reg_515;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_fu_276_p2;
    sc_signal< sc_lv<3> > i_reg_523;
    sc_signal< sc_lv<4> > shl_ln_fu_286_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_528;
    sc_signal< sc_lv<1> > icmp_ln47_fu_270_p2;
    sc_signal< sc_lv<3> > j_fu_304_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > zext_ln63_fu_360_p1;
    sc_signal< sc_lv<4> > zext_ln63_reg_541;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > i_2_fu_370_p2;
    sc_signal< sc_lv<3> > i_2_reg_549;
    sc_signal< sc_lv<4> > shl_ln1_fu_380_p3;
    sc_signal< sc_lv<4> > shl_ln1_reg_554;
    sc_signal< sc_lv<1> > icmp_ln63_fu_364_p2;
    sc_signal< sc_lv<3> > j_2_fu_398_p2;
    sc_signal< sc_lv<3> > j_2_reg_562;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln66_fu_392_p2;
    sc_signal< sc_lv<4> > add_ln68_1_fu_426_p2;
    sc_signal< sc_lv<4> > add_ln68_1_reg_572;
    sc_signal< sc_lv<4> > block_address0;
    sc_signal< sc_logic > block_ce0;
    sc_signal< sc_logic > block_we0;
    sc_signal< sc_lv<8> > block_d0;
    sc_signal< sc_lv<8> > block_q0;
    sc_signal< sc_logic > block_ce1;
    sc_signal< sc_logic > block_we1;
    sc_signal< sc_lv<8> > block_q1;
    sc_signal< sc_lv<8> > expandedKey_address0;
    sc_signal< sc_logic > expandedKey_ce0;
    sc_signal< sc_logic > expandedKey_we0;
    sc_signal< sc_lv<8> > expandedKey_q0;
    sc_signal< sc_lv<8> > expandedKey_address1;
    sc_signal< sc_logic > expandedKey_ce1;
    sc_signal< sc_logic > expandedKey_we1;
    sc_signal< sc_lv<8> > expandedKey_q1;
    sc_signal< sc_logic > grp_aes_main_fu_247_ap_start;
    sc_signal< sc_logic > grp_aes_main_fu_247_ap_done;
    sc_signal< sc_logic > grp_aes_main_fu_247_ap_idle;
    sc_signal< sc_logic > grp_aes_main_fu_247_ap_ready;
    sc_signal< sc_lv<4> > grp_aes_main_fu_247_state_address0;
    sc_signal< sc_logic > grp_aes_main_fu_247_state_ce0;
    sc_signal< sc_logic > grp_aes_main_fu_247_state_we0;
    sc_signal< sc_lv<8> > grp_aes_main_fu_247_state_d0;
    sc_signal< sc_lv<4> > grp_aes_main_fu_247_state_address1;
    sc_signal< sc_logic > grp_aes_main_fu_247_state_ce1;
    sc_signal< sc_logic > grp_aes_main_fu_247_state_we1;
    sc_signal< sc_lv<8> > grp_aes_main_fu_247_state_d1;
    sc_signal< sc_lv<8> > grp_aes_main_fu_247_expandedKey_address0;
    sc_signal< sc_logic > grp_aes_main_fu_247_expandedKey_ce0;
    sc_signal< sc_lv<8> > grp_aes_main_fu_247_expandedKey_address1;
    sc_signal< sc_logic > grp_aes_main_fu_247_expandedKey_ce1;
    sc_signal< sc_logic > grp_expandKey_fu_255_ap_start;
    sc_signal< sc_logic > grp_expandKey_fu_255_ap_done;
    sc_signal< sc_logic > grp_expandKey_fu_255_ap_idle;
    sc_signal< sc_logic > grp_expandKey_fu_255_ap_ready;
    sc_signal< sc_lv<8> > grp_expandKey_fu_255_expandedKey_address0;
    sc_signal< sc_logic > grp_expandKey_fu_255_expandedKey_ce0;
    sc_signal< sc_logic > grp_expandKey_fu_255_expandedKey_we0;
    sc_signal< sc_lv<8> > grp_expandKey_fu_255_expandedKey_d0;
    sc_signal< sc_lv<8> > grp_expandKey_fu_255_expandedKey_address1;
    sc_signal< sc_logic > grp_expandKey_fu_255_expandedKey_ce1;
    sc_signal< sc_logic > grp_expandKey_fu_255_expandedKey_we1;
    sc_signal< sc_lv<8> > grp_expandKey_fu_255_expandedKey_d1;
    sc_signal< sc_lv<4> > grp_expandKey_fu_255_key_address0;
    sc_signal< sc_logic > grp_expandKey_fu_255_key_ce0;
    sc_signal< sc_lv<3> > i_0_reg_203;
    sc_signal< sc_lv<1> > icmp_ln50_fu_298_p2;
    sc_signal< sc_lv<3> > j_0_reg_214;
    sc_signal< sc_lv<3> > i_1_reg_225;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > j_1_reg_236;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > grp_aes_main_fu_247_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_expandKey_fu_255_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln52_fu_355_p1;
    sc_signal< sc_lv<64> > zext_ln68_fu_421_p1;
    sc_signal< sc_lv<64> > zext_ln68_1_fu_431_p1;
    sc_signal< sc_lv<8> > tmp_fu_315_p18;
    sc_signal< sc_lv<2> > trunc_ln52_fu_282_p1;
    sc_signal< sc_lv<4> > zext_ln50_fu_294_p1;
    sc_signal< sc_lv<4> > tmp_fu_315_p17;
    sc_signal< sc_lv<2> > trunc_ln52_1_fu_338_p1;
    sc_signal< sc_lv<4> > shl_ln52_1_fu_342_p3;
    sc_signal< sc_lv<4> > add_ln52_1_fu_350_p2;
    sc_signal< sc_lv<2> > trunc_ln68_fu_376_p1;
    sc_signal< sc_lv<2> > trunc_ln68_1_fu_404_p1;
    sc_signal< sc_lv<4> > shl_ln68_1_fu_408_p3;
    sc_signal< sc_lv<4> > add_ln68_fu_416_p2;
    sc_signal< sc_lv<4> > zext_ln66_fu_388_p1;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln52_1_fu_350_p2();
    void thread_add_ln68_1_fu_426_p2();
    void thread_add_ln68_fu_416_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_block_address0();
    void thread_block_ce0();
    void thread_block_ce1();
    void thread_block_d0();
    void thread_block_we0();
    void thread_block_we1();
    void thread_expandedKey_address0();
    void thread_expandedKey_address1();
    void thread_expandedKey_ce0();
    void thread_expandedKey_ce1();
    void thread_expandedKey_we0();
    void thread_expandedKey_we1();
    void thread_grp_aes_main_fu_247_ap_start();
    void thread_grp_expandKey_fu_255_ap_start();
    void thread_i_2_fu_370_p2();
    void thread_i_fu_276_p2();
    void thread_icmp_ln47_fu_270_p2();
    void thread_icmp_ln50_fu_298_p2();
    void thread_icmp_ln63_fu_364_p2();
    void thread_icmp_ln66_fu_392_p2();
    void thread_j_2_fu_398_p2();
    void thread_j_fu_304_p2();
    void thread_key_address0();
    void thread_key_ce0();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_shl_ln1_fu_380_p3();
    void thread_shl_ln52_1_fu_342_p3();
    void thread_shl_ln68_1_fu_408_p3();
    void thread_shl_ln_fu_286_p3();
    void thread_tmp_fu_315_p17();
    void thread_trunc_ln52_1_fu_338_p1();
    void thread_trunc_ln52_fu_282_p1();
    void thread_trunc_ln68_1_fu_404_p1();
    void thread_trunc_ln68_fu_376_p1();
    void thread_zext_ln47_fu_266_p1();
    void thread_zext_ln50_fu_294_p1();
    void thread_zext_ln52_fu_355_p1();
    void thread_zext_ln63_fu_360_p1();
    void thread_zext_ln66_fu_388_p1();
    void thread_zext_ln68_1_fu_431_p1();
    void thread_zext_ln68_fu_421_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
