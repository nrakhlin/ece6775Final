// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module expandKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_0_address0,
        expandedKey_0_ce0,
        expandedKey_0_we0,
        expandedKey_0_d0,
        expandedKey_0_q0,
        expandedKey_0_address1,
        expandedKey_0_ce1,
        expandedKey_0_we1,
        expandedKey_0_d1,
        expandedKey_0_q1,
        expandedKey_1_address0,
        expandedKey_1_ce0,
        expandedKey_1_we0,
        expandedKey_1_d0,
        expandedKey_1_q0,
        expandedKey_1_address1,
        expandedKey_1_ce1,
        expandedKey_1_we1,
        expandedKey_1_d1,
        expandedKey_1_q1,
        expandedKey_2_address0,
        expandedKey_2_ce0,
        expandedKey_2_we0,
        expandedKey_2_d0,
        expandedKey_2_q0,
        expandedKey_3_address0,
        expandedKey_3_ce0,
        expandedKey_3_we0,
        expandedKey_3_d0,
        expandedKey_3_q0,
        expandedKey_3_address1,
        expandedKey_3_ce1,
        expandedKey_3_we1,
        expandedKey_3_d1,
        expandedKey_3_q1,
        key_0_read,
        key_1_read,
        key_2_read,
        key_3_read,
        key_4_read,
        key_5_read,
        key_6_read,
        key_7_read,
        key_8_read,
        key_9_read,
        key_10_read,
        key_11_read,
        key_12_read,
        key_13_read,
        key_14_read,
        key_15_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] expandedKey_0_address0;
output   expandedKey_0_ce0;
output   expandedKey_0_we0;
output  [7:0] expandedKey_0_d0;
input  [7:0] expandedKey_0_q0;
output  [5:0] expandedKey_0_address1;
output   expandedKey_0_ce1;
output   expandedKey_0_we1;
output  [7:0] expandedKey_0_d1;
input  [7:0] expandedKey_0_q1;
output  [5:0] expandedKey_1_address0;
output   expandedKey_1_ce0;
output   expandedKey_1_we0;
output  [7:0] expandedKey_1_d0;
input  [7:0] expandedKey_1_q0;
output  [5:0] expandedKey_1_address1;
output   expandedKey_1_ce1;
output   expandedKey_1_we1;
output  [7:0] expandedKey_1_d1;
input  [7:0] expandedKey_1_q1;
output  [5:0] expandedKey_2_address0;
output   expandedKey_2_ce0;
output   expandedKey_2_we0;
output  [7:0] expandedKey_2_d0;
input  [7:0] expandedKey_2_q0;
output  [5:0] expandedKey_3_address0;
output   expandedKey_3_ce0;
output   expandedKey_3_we0;
output  [7:0] expandedKey_3_d0;
input  [7:0] expandedKey_3_q0;
output  [5:0] expandedKey_3_address1;
output   expandedKey_3_ce1;
output   expandedKey_3_we1;
output  [7:0] expandedKey_3_d1;
input  [7:0] expandedKey_3_q1;
input  [7:0] key_0_read;
input  [7:0] key_1_read;
input  [7:0] key_2_read;
input  [7:0] key_3_read;
input  [7:0] key_4_read;
input  [7:0] key_5_read;
input  [7:0] key_6_read;
input  [7:0] key_7_read;
input  [7:0] key_8_read;
input  [7:0] key_9_read;
input  [7:0] key_10_read;
input  [7:0] key_11_read;
input  [7:0] key_12_read;
input  [7:0] key_13_read;
input  [7:0] key_14_read;
input  [7:0] key_15_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] expandedKey_0_address0;
reg expandedKey_0_ce0;
reg expandedKey_0_we0;
reg[5:0] expandedKey_0_address1;
reg expandedKey_0_ce1;
reg expandedKey_0_we1;
reg[5:0] expandedKey_1_address0;
reg expandedKey_1_ce0;
reg expandedKey_1_we0;
reg[5:0] expandedKey_1_address1;
reg expandedKey_1_ce1;
reg expandedKey_1_we1;
reg[5:0] expandedKey_2_address0;
reg expandedKey_2_ce0;
reg expandedKey_2_we0;
reg[7:0] expandedKey_2_d0;
reg[5:0] expandedKey_3_address0;
reg expandedKey_3_ce0;
reg expandedKey_3_we0;
reg[5:0] expandedKey_3_address1;
reg expandedKey_3_ce1;
reg expandedKey_3_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [7:0] currentSize_0_reg_445;
reg   [31:0] iteration_assign_reg_457;
wire   [0:0] icmp_ln135_fu_468_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_474_p2;
wire   [0:0] icmp_ln139_fu_532_p2;
reg   [0:0] icmp_ln139_reg_975;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln139_reg_975_pp0_iter1_reg;
wire   [0:0] icmp_ln151_fu_584_p2;
reg   [0:0] icmp_ln151_reg_989;
reg   [0:0] icmp_ln151_reg_989_pp0_iter1_reg;
wire   [31:0] rconIteration_1_fu_605_p3;
reg   [31:0] rconIteration_1_reg_1002;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] zext_ln172_fu_640_p1;
reg   [8:0] zext_ln172_reg_1012;
reg   [7:0] t_0_3_reg_1028;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] t_3_1_reg_1038;
reg   [7:0] Rcon_load_reg_1049;
reg   [7:0] expandedKey_0_load_reg_1054;
reg   [7:0] expandedKey_1_load_reg_1059;
reg   [7:0] expandedKey_3_load_reg_1064;
reg   [7:0] t_1_1_reg_1069;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] zext_ln171_fu_772_p1;
reg   [63:0] zext_ln171_reg_1084;
reg   [7:0] t_2_1_reg_1090;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [7:0] currentSize_fu_799_p2;
reg   [7:0] currentSize_reg_1100;
reg   [6:0] lshr_ln171_1_reg_1115;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [4:0] i_0_reg_434;
reg   [7:0] ap_phi_mux_currentSize_0_phi_fu_449_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_iteration_assign_phi_fu_461_p4;
wire   [63:0] zext_ln136_fu_524_p1;
wire   [63:0] zext_ln145_fu_558_p1;
wire   [63:0] zext_ln145_3_fu_579_p1;
wire   [63:0] zext_ln97_fu_600_p1;
wire   [63:0] zext_ln170_fu_629_p1;
wire   [63:0] zext_ln170_1_fu_664_p1;
wire   [63:0] zext_ln170_3_fu_699_p1;
wire   [63:0] zext_ln145_1_fu_720_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln46_3_fu_725_p1;
wire   [63:0] zext_ln145_2_fu_746_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln46_fu_751_p1;
wire   [63:0] zext_ln46_1_fu_783_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln46_2_fu_811_p1;
wire   [63:0] zext_ln170_2_fu_851_p1;
wire   [63:0] zext_ln171_1_fu_879_p1;
wire   [1:0] trunc_ln136_1_fu_510_p1;
wire   [7:0] tmp_fu_484_p18;
wire   [7:0] xor_ln171_2_fu_872_p2;
wire   [3:0] tmp_fu_484_p17;
wire   [2:0] lshr_ln_fu_514_p4;
wire   [7:0] add_ln145_fu_542_p2;
wire   [5:0] lshr_ln1_fu_548_p4;
wire   [7:0] add_ln145_3_fu_563_p2;
wire   [5:0] lshr_ln145_3_fu_569_p4;
wire   [3:0] trunc_ln139_fu_538_p1;
wire   [7:0] trunc_ln114_fu_596_p1;
wire   [31:0] rconIteration_fu_590_p2;
wire   [7:0] add_ln170_fu_613_p2;
wire   [5:0] lshr_ln2_fu_619_p4;
wire   [7:0] or_ln172_fu_634_p2;
wire   [8:0] add_ln170_1_fu_644_p2;
wire   [6:0] trunc_ln2_fu_650_p4;
wire  signed [29:0] sext_ln170_fu_660_p1;
wire   [7:0] or_ln172_1_fu_669_p2;
wire   [8:0] zext_ln172_1_fu_675_p1;
wire   [8:0] add_ln170_3_fu_679_p2;
wire   [6:0] trunc_ln170_2_fu_685_p4;
wire  signed [29:0] sext_ln170_2_fu_695_p1;
wire   [7:0] add_ln145_1_fu_704_p2;
wire   [5:0] lshr_ln145_1_fu_710_p4;
wire   [7:0] add_ln145_2_fu_730_p2;
wire   [5:0] lshr_ln145_2_fu_736_p4;
wire   [5:0] lshr_ln3_fu_762_p4;
wire   [7:0] t_3_2_fu_756_p3;
wire   [7:0] t_0_fu_788_p2;
wire   [7:0] t_0_2_fu_793_p3;
wire   [7:0] t_1_2_fu_815_p3;
wire   [8:0] add_ln170_2_fu_832_p2;
wire   [6:0] trunc_ln170_1_fu_837_p4;
wire  signed [29:0] sext_ln170_1_fu_847_p1;
wire   [8:0] add_ln172_fu_827_p2;
wire   [7:0] t_2_2_fu_866_p3;
wire    ap_CS_fsm_state9;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

expandKey_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

expandKey_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

encrypt_dut_mux_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_1bkb_U1(
    .din0(key_0_read),
    .din1(key_1_read),
    .din2(key_2_read),
    .din3(key_3_read),
    .din4(key_4_read),
    .din5(key_5_read),
    .din6(key_6_read),
    .din7(key_7_read),
    .din8(key_8_read),
    .din9(key_9_read),
    .din10(key_10_read),
    .din11(key_11_read),
    .din12(key_12_read),
    .din13(key_13_read),
    .din14(key_14_read),
    .din15(key_15_read),
    .din16(tmp_fu_484_p17),
    .dout(tmp_fu_484_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd1))) begin
        currentSize_0_reg_445 <= 8'd16;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_reg_975 == 1'd1))) begin
        currentSize_0_reg_445 <= currentSize_reg_1100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_434 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd0))) begin
        i_0_reg_434 <= i_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd1))) begin
        iteration_assign_reg_457 <= 32'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_reg_975 == 1'd1))) begin
        iteration_assign_reg_457 <= rconIteration_1_reg_1002;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln139_reg_975 == 1'd1))) begin
        Rcon_load_reg_1049 <= Rcon_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_reg_975 == 1'd1))) begin
        currentSize_reg_1100 <= currentSize_fu_799_p2;
        t_2_1_reg_1090 <= expandedKey_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_reg_975 == 1'd1))) begin
        expandedKey_0_load_reg_1054 <= expandedKey_0_q1;
        expandedKey_1_load_reg_1059 <= expandedKey_1_q0;
        expandedKey_3_load_reg_1064 <= expandedKey_3_q1;
        t_0_3_reg_1028 <= expandedKey_0_q0;
        t_3_1_reg_1038 <= expandedKey_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln139_reg_975 <= icmp_ln139_fu_532_p2;
        icmp_ln139_reg_975_pp0_iter1_reg <= icmp_ln139_reg_975;
        icmp_ln151_reg_989_pp0_iter1_reg <= icmp_ln151_reg_989;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_fu_532_p2 == 1'd1))) begin
        icmp_ln151_reg_989 <= icmp_ln151_fu_584_p2;
        zext_ln172_reg_1012[7 : 1] <= zext_ln172_fu_640_p1[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_reg_975 == 1'd1))) begin
        lshr_ln171_1_reg_1115 <= {{add_ln172_fu_827_p2[8:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_fu_532_p2 == 1'd1))) begin
        rconIteration_1_reg_1002 <= rconIteration_1_fu_605_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_reg_975 == 1'd1))) begin
        t_1_1_reg_1069 <= expandedKey_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln139_reg_975 == 1'd1))) begin
        zext_ln171_reg_1084[5 : 0] <= zext_ln171_fu_772_p1[5 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln139_fu_532_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln139_reg_975 == 1'd1))) begin
        ap_phi_mux_currentSize_0_phi_fu_449_p4 = currentSize_reg_1100;
    end else begin
        ap_phi_mux_currentSize_0_phi_fu_449_p4 = currentSize_0_reg_445;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln139_reg_975 == 1'd1))) begin
        ap_phi_mux_iteration_assign_phi_fu_461_p4 = rconIteration_1_reg_1002;
    end else begin
        ap_phi_mux_iteration_assign_phi_fu_461_p4 = iteration_assign_reg_457;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_0_address0 = zext_ln145_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_0_address0 = zext_ln136_fu_524_p1;
    end else begin
        expandedKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            expandedKey_0_address1 = zext_ln171_reg_1084;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_0_address1 = zext_ln170_fu_629_p1;
        end else begin
            expandedKey_0_address1 = 'bx;
        end
    end else begin
        expandedKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_0_ce0 = 1'b1;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_0_ce1 = 1'b1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln136_1_fu_510_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd0))) begin
        expandedKey_0_we0 = 1'b1;
    end else begin
        expandedKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_reg_975 == 1'd1))) begin
        expandedKey_0_we1 = 1'b1;
    end else begin
        expandedKey_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_1_address0 = zext_ln170_1_fu_664_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_1_address0 = zext_ln136_fu_524_p1;
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_1_address1 = zext_ln171_reg_1084;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        expandedKey_1_address1 = zext_ln145_1_fu_720_p1;
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_1_ce0 = 1'b1;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_1_ce1 = 1'b1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln136_1_fu_510_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd0))) begin
        expandedKey_1_we0 = 1'b1;
    end else begin
        expandedKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln139_reg_975 == 1'd1))) begin
        expandedKey_1_we1 = 1'b1;
    end else begin
        expandedKey_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        expandedKey_2_address0 = zext_ln171_1_fu_879_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_2_address0 = zext_ln170_2_fu_851_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        expandedKey_2_address0 = zext_ln145_2_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_2_address0 = zext_ln136_fu_524_p1;
    end else begin
        expandedKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_2_ce0 = 1'b1;
    end else begin
        expandedKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        expandedKey_2_d0 = xor_ln171_2_fu_872_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_2_d0 = tmp_fu_484_p18;
    end else begin
        expandedKey_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln139_reg_975_pp0_iter1_reg == 1'd1)) | ((trunc_ln136_1_fu_510_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd0)))) begin
        expandedKey_2_we0 = 1'b1;
    end else begin
        expandedKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        expandedKey_3_address0 = zext_ln145_3_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_3_address0 = zext_ln136_fu_524_p1;
    end else begin
        expandedKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            expandedKey_3_address1 = zext_ln171_fu_772_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            expandedKey_3_address1 = zext_ln170_3_fu_699_p1;
        end else begin
            expandedKey_3_address1 = 'bx;
        end
    end else begin
        expandedKey_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_3_ce0 = 1'b1;
    end else begin
        expandedKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        expandedKey_3_ce1 = 1'b1;
    end else begin
        expandedKey_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln136_1_fu_510_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd0))) begin
        expandedKey_3_we0 = 1'b1;
    end else begin
        expandedKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_reg_975 == 1'd1))) begin
        expandedKey_3_we1 = 1'b1;
    end else begin
        expandedKey_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_address0 = zext_ln46_2_fu_811_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sbox_address0 = zext_ln46_1_fu_783_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sbox_address0 = zext_ln46_fu_751_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sbox_address0 = zext_ln46_3_fu_725_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln135_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_fu_532_p2 == 1'd0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln139_fu_532_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln97_fu_600_p1;

assign add_ln145_1_fu_704_p2 = ($signed(8'd253) + $signed(currentSize_0_reg_445));

assign add_ln145_2_fu_730_p2 = ($signed(8'd254) + $signed(currentSize_0_reg_445));

assign add_ln145_3_fu_563_p2 = ($signed(8'd255) + $signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));

assign add_ln145_fu_542_p2 = ($signed(8'd252) + $signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));

assign add_ln170_1_fu_644_p2 = ($signed(9'd496) + $signed(zext_ln172_fu_640_p1));

assign add_ln170_2_fu_832_p2 = ($signed(9'd497) + $signed(zext_ln172_reg_1012));

assign add_ln170_3_fu_679_p2 = ($signed(9'd496) + $signed(zext_ln172_1_fu_675_p1));

assign add_ln170_fu_613_p2 = ($signed(8'd240) + $signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));

assign add_ln172_fu_827_p2 = (9'd1 + zext_ln172_reg_1012);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign currentSize_fu_799_p2 = (8'd4 + currentSize_0_reg_445);

assign expandedKey_0_d0 = tmp_fu_484_p18;

assign expandedKey_0_d1 = (t_0_2_fu_793_p3 ^ expandedKey_0_load_reg_1054);

assign expandedKey_1_d0 = tmp_fu_484_p18;

assign expandedKey_1_d1 = (t_1_2_fu_815_p3 ^ expandedKey_1_load_reg_1059);

assign expandedKey_3_d0 = tmp_fu_484_p18;

assign expandedKey_3_d1 = (t_3_2_fu_756_p3 ^ expandedKey_3_load_reg_1064);

assign i_fu_474_p2 = (i_0_reg_434 + 5'd1);

assign icmp_ln135_fu_468_p2 = ((i_0_reg_434 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_532_p2 = ((ap_phi_mux_currentSize_0_phi_fu_449_p4 < 8'd176) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_584_p2 = ((trunc_ln139_fu_538_p1 == 4'd0) ? 1'b1 : 1'b0);

assign lshr_ln145_1_fu_710_p4 = {{add_ln145_1_fu_704_p2[7:2]}};

assign lshr_ln145_2_fu_736_p4 = {{add_ln145_2_fu_730_p2[7:2]}};

assign lshr_ln145_3_fu_569_p4 = {{add_ln145_3_fu_563_p2[7:2]}};

assign lshr_ln1_fu_548_p4 = {{add_ln145_fu_542_p2[7:2]}};

assign lshr_ln2_fu_619_p4 = {{add_ln170_fu_613_p2[7:2]}};

assign lshr_ln3_fu_762_p4 = {{currentSize_0_reg_445[7:2]}};

assign lshr_ln_fu_514_p4 = {{i_0_reg_434[4:2]}};

assign or_ln172_1_fu_669_p2 = (ap_phi_mux_currentSize_0_phi_fu_449_p4 | 8'd3);

assign or_ln172_fu_634_p2 = (ap_phi_mux_currentSize_0_phi_fu_449_p4 | 8'd1);

assign rconIteration_1_fu_605_p3 = ((icmp_ln151_fu_584_p2[0:0] === 1'b1) ? rconIteration_fu_590_p2 : ap_phi_mux_iteration_assign_phi_fu_461_p4);

assign rconIteration_fu_590_p2 = (32'd1 + ap_phi_mux_iteration_assign_phi_fu_461_p4);

assign sext_ln170_1_fu_847_p1 = $signed(trunc_ln170_1_fu_837_p4);

assign sext_ln170_2_fu_695_p1 = $signed(trunc_ln170_2_fu_685_p4);

assign sext_ln170_fu_660_p1 = $signed(trunc_ln2_fu_650_p4);

assign t_0_2_fu_793_p3 = ((icmp_ln151_reg_989[0:0] === 1'b1) ? t_0_fu_788_p2 : t_0_3_reg_1028);

assign t_0_fu_788_p2 = (sbox_q0 ^ Rcon_load_reg_1049);

assign t_1_2_fu_815_p3 = ((icmp_ln151_reg_989[0:0] === 1'b1) ? sbox_q0 : t_1_1_reg_1069);

assign t_2_2_fu_866_p3 = ((icmp_ln151_reg_989_pp0_iter1_reg[0:0] === 1'b1) ? sbox_q0 : t_2_1_reg_1090);

assign t_3_2_fu_756_p3 = ((icmp_ln151_reg_989[0:0] === 1'b1) ? sbox_q0 : t_3_1_reg_1038);

assign tmp_fu_484_p17 = i_0_reg_434[3:0];

assign trunc_ln114_fu_596_p1 = ap_phi_mux_iteration_assign_phi_fu_461_p4[7:0];

assign trunc_ln136_1_fu_510_p1 = i_0_reg_434[1:0];

assign trunc_ln139_fu_538_p1 = ap_phi_mux_currentSize_0_phi_fu_449_p4[3:0];

assign trunc_ln170_1_fu_837_p4 = {{add_ln170_2_fu_832_p2[8:2]}};

assign trunc_ln170_2_fu_685_p4 = {{add_ln170_3_fu_679_p2[8:2]}};

assign trunc_ln2_fu_650_p4 = {{add_ln170_1_fu_644_p2[8:2]}};

assign xor_ln171_2_fu_872_p2 = (t_2_2_fu_866_p3 ^ expandedKey_2_q0);

assign zext_ln136_fu_524_p1 = lshr_ln_fu_514_p4;

assign zext_ln145_1_fu_720_p1 = lshr_ln145_1_fu_710_p4;

assign zext_ln145_2_fu_746_p1 = lshr_ln145_2_fu_736_p4;

assign zext_ln145_3_fu_579_p1 = lshr_ln145_3_fu_569_p4;

assign zext_ln145_fu_558_p1 = lshr_ln1_fu_548_p4;

assign zext_ln170_1_fu_664_p1 = $unsigned(sext_ln170_fu_660_p1);

assign zext_ln170_2_fu_851_p1 = $unsigned(sext_ln170_1_fu_847_p1);

assign zext_ln170_3_fu_699_p1 = $unsigned(sext_ln170_2_fu_695_p1);

assign zext_ln170_fu_629_p1 = lshr_ln2_fu_619_p4;

assign zext_ln171_1_fu_879_p1 = lshr_ln171_1_reg_1115;

assign zext_ln171_fu_772_p1 = lshr_ln3_fu_762_p4;

assign zext_ln172_1_fu_675_p1 = or_ln172_1_fu_669_p2;

assign zext_ln172_fu_640_p1 = or_ln172_fu_634_p2;

assign zext_ln46_1_fu_783_p1 = expandedKey_2_q0;

assign zext_ln46_2_fu_811_p1 = t_3_1_reg_1038;

assign zext_ln46_3_fu_725_p1 = expandedKey_0_q0;

assign zext_ln46_fu_751_p1 = expandedKey_1_q1;

assign zext_ln97_fu_600_p1 = trunc_ln114_fu_596_p1;

always @ (posedge ap_clk) begin
    zext_ln172_reg_1012[0] <= 1'b1;
    zext_ln172_reg_1012[8] <= 1'b0;
    zext_ln171_reg_1084[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //expandKey
