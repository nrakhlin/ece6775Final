// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_read,
        input_1_read,
        input_2_read,
        input_3_read,
        input_4_read,
        input_5_read,
        input_6_read,
        input_7_read,
        input_8_read,
        input_9_read,
        input_10_read,
        input_11_read,
        input_12_read,
        input_13_read,
        input_14_read,
        input_15_read,
        output_0,
        output_0_ap_vld,
        output_1,
        output_1_ap_vld,
        output_2,
        output_2_ap_vld,
        output_3,
        output_3_ap_vld,
        output_4,
        output_4_ap_vld,
        output_5,
        output_5_ap_vld,
        output_6,
        output_6_ap_vld,
        output_7,
        output_7_ap_vld,
        output_8,
        output_8_ap_vld,
        output_9,
        output_9_ap_vld,
        output_10,
        output_10_ap_vld,
        output_11,
        output_11_ap_vld,
        output_12,
        output_12_ap_vld,
        output_13,
        output_13_ap_vld,
        output_14,
        output_14_ap_vld,
        output_15,
        output_15_ap_vld,
        key_0_read,
        key_1_read,
        key_2_read,
        key_3_read,
        key_4_read,
        key_5_read,
        key_6_read,
        key_7_read,
        key_8_read,
        key_9_read,
        key_10_read,
        key_11_read,
        key_12_read,
        key_13_read,
        key_14_read,
        key_15_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_0_read;
input  [7:0] input_1_read;
input  [7:0] input_2_read;
input  [7:0] input_3_read;
input  [7:0] input_4_read;
input  [7:0] input_5_read;
input  [7:0] input_6_read;
input  [7:0] input_7_read;
input  [7:0] input_8_read;
input  [7:0] input_9_read;
input  [7:0] input_10_read;
input  [7:0] input_11_read;
input  [7:0] input_12_read;
input  [7:0] input_13_read;
input  [7:0] input_14_read;
input  [7:0] input_15_read;
output  [7:0] output_0;
output   output_0_ap_vld;
output  [7:0] output_1;
output   output_1_ap_vld;
output  [7:0] output_2;
output   output_2_ap_vld;
output  [7:0] output_3;
output   output_3_ap_vld;
output  [7:0] output_4;
output   output_4_ap_vld;
output  [7:0] output_5;
output   output_5_ap_vld;
output  [7:0] output_6;
output   output_6_ap_vld;
output  [7:0] output_7;
output   output_7_ap_vld;
output  [7:0] output_8;
output   output_8_ap_vld;
output  [7:0] output_9;
output   output_9_ap_vld;
output  [7:0] output_10;
output   output_10_ap_vld;
output  [7:0] output_11;
output   output_11_ap_vld;
output  [7:0] output_12;
output   output_12_ap_vld;
output  [7:0] output_13;
output   output_13_ap_vld;
output  [7:0] output_14;
output   output_14_ap_vld;
output  [7:0] output_15;
output   output_15_ap_vld;
input  [7:0] key_0_read;
input  [7:0] key_1_read;
input  [7:0] key_2_read;
input  [7:0] key_3_read;
input  [7:0] key_4_read;
input  [7:0] key_5_read;
input  [7:0] key_6_read;
input  [7:0] key_7_read;
input  [7:0] key_8_read;
input  [7:0] key_9_read;
input  [7:0] key_10_read;
input  [7:0] key_11_read;
input  [7:0] key_12_read;
input  [7:0] key_13_read;
input  [7:0] key_14_read;
input  [7:0] key_15_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_0_ap_vld;
reg output_1_ap_vld;
reg output_2_ap_vld;
reg output_3_ap_vld;
reg output_4_ap_vld;
reg output_5_ap_vld;
reg output_6_ap_vld;
reg output_7_ap_vld;
reg output_8_ap_vld;
reg output_9_ap_vld;
reg output_10_ap_vld;
reg output_11_ap_vld;
reg output_12_ap_vld;
reg output_13_ap_vld;
reg output_14_ap_vld;
reg output_15_ap_vld;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] zext_ln49_fu_600_p1;
reg   [3:0] zext_ln49_reg_925;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_610_p2;
reg   [2:0] i_reg_933;
wire   [3:0] shl_ln_fu_620_p3;
reg   [3:0] shl_ln_reg_938;
wire   [0:0] icmp_ln49_fu_604_p2;
wire   [2:0] j_fu_638_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] zext_ln65_fu_694_p1;
reg   [3:0] zext_ln65_reg_951;
wire    ap_CS_fsm_state7;
wire   [2:0] i_2_fu_704_p2;
reg   [2:0] i_2_reg_959;
wire   [3:0] shl_ln1_fu_714_p3;
reg   [3:0] shl_ln1_reg_964;
wire   [0:0] icmp_ln65_fu_698_p2;
wire   [2:0] j_2_fu_732_p2;
reg   [2:0] j_2_reg_972;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln68_fu_726_p2;
wire   [3:0] add_ln70_1_fu_760_p2;
reg   [3:0] add_ln70_1_reg_982;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
reg   [7:0] block_d0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire   [7:0] block_q1;
reg   [5:0] expandedKey_0_address0;
reg    expandedKey_0_ce0;
reg    expandedKey_0_we0;
wire   [7:0] expandedKey_0_q0;
reg   [5:0] expandedKey_0_address1;
reg    expandedKey_0_ce1;
reg    expandedKey_0_we1;
wire   [7:0] expandedKey_0_q1;
reg   [5:0] expandedKey_1_address0;
reg    expandedKey_1_ce0;
reg    expandedKey_1_we0;
wire   [7:0] expandedKey_1_q0;
reg   [5:0] expandedKey_1_address1;
reg    expandedKey_1_ce1;
reg    expandedKey_1_we1;
wire   [7:0] expandedKey_1_q1;
reg   [5:0] expandedKey_2_address0;
reg    expandedKey_2_ce0;
reg    expandedKey_2_we0;
wire   [7:0] expandedKey_2_q0;
reg    expandedKey_2_ce1;
wire   [7:0] expandedKey_2_q1;
reg   [5:0] expandedKey_3_address0;
reg    expandedKey_3_ce0;
reg    expandedKey_3_we0;
wire   [7:0] expandedKey_3_q0;
reg   [5:0] expandedKey_3_address1;
reg    expandedKey_3_ce1;
reg    expandedKey_3_we1;
wire   [7:0] expandedKey_3_q1;
wire    grp_aes_main_fu_561_ap_start;
wire    grp_aes_main_fu_561_ap_done;
wire    grp_aes_main_fu_561_ap_idle;
wire    grp_aes_main_fu_561_ap_ready;
wire   [3:0] grp_aes_main_fu_561_state_address0;
wire    grp_aes_main_fu_561_state_ce0;
wire    grp_aes_main_fu_561_state_we0;
wire   [7:0] grp_aes_main_fu_561_state_d0;
wire   [3:0] grp_aes_main_fu_561_state_address1;
wire    grp_aes_main_fu_561_state_ce1;
wire    grp_aes_main_fu_561_state_we1;
wire   [7:0] grp_aes_main_fu_561_state_d1;
wire   [5:0] grp_aes_main_fu_561_expandedKey_0_address0;
wire    grp_aes_main_fu_561_expandedKey_0_ce0;
wire   [5:0] grp_aes_main_fu_561_expandedKey_0_address1;
wire    grp_aes_main_fu_561_expandedKey_0_ce1;
wire   [5:0] grp_aes_main_fu_561_expandedKey_1_address0;
wire    grp_aes_main_fu_561_expandedKey_1_ce0;
wire   [5:0] grp_aes_main_fu_561_expandedKey_1_address1;
wire    grp_aes_main_fu_561_expandedKey_1_ce1;
wire   [5:0] grp_aes_main_fu_561_expandedKey_2_address0;
wire    grp_aes_main_fu_561_expandedKey_2_ce0;
wire   [5:0] grp_aes_main_fu_561_expandedKey_2_address1;
wire    grp_aes_main_fu_561_expandedKey_2_ce1;
wire   [5:0] grp_aes_main_fu_561_expandedKey_3_address0;
wire    grp_aes_main_fu_561_expandedKey_3_ce0;
wire   [5:0] grp_aes_main_fu_561_expandedKey_3_address1;
wire    grp_aes_main_fu_561_expandedKey_3_ce1;
wire    grp_expandKey_fu_572_ap_start;
wire    grp_expandKey_fu_572_ap_done;
wire    grp_expandKey_fu_572_ap_idle;
wire    grp_expandKey_fu_572_ap_ready;
wire   [5:0] grp_expandKey_fu_572_expandedKey_0_address0;
wire    grp_expandKey_fu_572_expandedKey_0_ce0;
wire    grp_expandKey_fu_572_expandedKey_0_we0;
wire   [7:0] grp_expandKey_fu_572_expandedKey_0_d0;
wire   [5:0] grp_expandKey_fu_572_expandedKey_0_address1;
wire    grp_expandKey_fu_572_expandedKey_0_ce1;
wire    grp_expandKey_fu_572_expandedKey_0_we1;
wire   [7:0] grp_expandKey_fu_572_expandedKey_0_d1;
wire   [5:0] grp_expandKey_fu_572_expandedKey_1_address0;
wire    grp_expandKey_fu_572_expandedKey_1_ce0;
wire    grp_expandKey_fu_572_expandedKey_1_we0;
wire   [7:0] grp_expandKey_fu_572_expandedKey_1_d0;
wire   [5:0] grp_expandKey_fu_572_expandedKey_1_address1;
wire    grp_expandKey_fu_572_expandedKey_1_ce1;
wire    grp_expandKey_fu_572_expandedKey_1_we1;
wire   [7:0] grp_expandKey_fu_572_expandedKey_1_d1;
wire   [5:0] grp_expandKey_fu_572_expandedKey_2_address0;
wire    grp_expandKey_fu_572_expandedKey_2_ce0;
wire    grp_expandKey_fu_572_expandedKey_2_we0;
wire   [7:0] grp_expandKey_fu_572_expandedKey_2_d0;
wire   [5:0] grp_expandKey_fu_572_expandedKey_3_address0;
wire    grp_expandKey_fu_572_expandedKey_3_ce0;
wire    grp_expandKey_fu_572_expandedKey_3_we0;
wire   [7:0] grp_expandKey_fu_572_expandedKey_3_d0;
wire   [5:0] grp_expandKey_fu_572_expandedKey_3_address1;
wire    grp_expandKey_fu_572_expandedKey_3_ce1;
wire    grp_expandKey_fu_572_expandedKey_3_we1;
wire   [7:0] grp_expandKey_fu_572_expandedKey_3_d1;
reg   [2:0] i_0_reg_517;
wire   [0:0] icmp_ln52_fu_632_p2;
reg   [2:0] j_0_reg_528;
reg   [2:0] i_1_reg_539;
wire    ap_CS_fsm_state6;
reg   [2:0] j_1_reg_550;
wire    ap_CS_fsm_state9;
reg    grp_aes_main_fu_561_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_expandKey_fu_572_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln54_fu_689_p1;
wire   [63:0] zext_ln70_fu_755_p1;
wire   [7:0] tmp_fu_649_p18;
wire   [1:0] trunc_ln54_fu_616_p1;
wire   [3:0] zext_ln52_fu_628_p1;
wire   [3:0] tmp_fu_649_p17;
wire   [1:0] trunc_ln54_1_fu_672_p1;
wire   [3:0] shl_ln54_1_fu_676_p3;
wire   [3:0] add_ln54_1_fu_684_p2;
wire   [1:0] trunc_ln70_fu_710_p1;
wire   [1:0] trunc_ln70_1_fu_738_p1;
wire   [3:0] shl_ln70_1_fu_742_p3;
wire   [3:0] add_ln70_fu_750_p2;
wire   [3:0] zext_ln68_fu_722_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_aes_main_fu_561_ap_start_reg = 1'b0;
#0 grp_expandKey_fu_572_ap_start_reg = 1'b0;
end

aes_encrypt_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(block_d0),
    .q0(block_q0),
    .address1(grp_aes_main_fu_561_state_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_aes_main_fu_561_state_d1),
    .q1(block_q1)
);

aes_encrypt_expandEe #(
    .DataWidth( 8 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
expandedKey_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_0_address0),
    .ce0(expandedKey_0_ce0),
    .we0(expandedKey_0_we0),
    .d0(grp_expandKey_fu_572_expandedKey_0_d0),
    .q0(expandedKey_0_q0),
    .address1(expandedKey_0_address1),
    .ce1(expandedKey_0_ce1),
    .we1(expandedKey_0_we1),
    .d1(grp_expandKey_fu_572_expandedKey_0_d1),
    .q1(expandedKey_0_q1)
);

aes_encrypt_expandEe #(
    .DataWidth( 8 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
expandedKey_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_1_address0),
    .ce0(expandedKey_1_ce0),
    .we0(expandedKey_1_we0),
    .d0(grp_expandKey_fu_572_expandedKey_1_d0),
    .q0(expandedKey_1_q0),
    .address1(expandedKey_1_address1),
    .ce1(expandedKey_1_ce1),
    .we1(expandedKey_1_we1),
    .d1(grp_expandKey_fu_572_expandedKey_1_d1),
    .q1(expandedKey_1_q1)
);

aes_encrypt_expanfYi #(
    .DataWidth( 8 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
expandedKey_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_2_address0),
    .ce0(expandedKey_2_ce0),
    .we0(expandedKey_2_we0),
    .d0(grp_expandKey_fu_572_expandedKey_2_d0),
    .q0(expandedKey_2_q0),
    .address1(grp_aes_main_fu_561_expandedKey_2_address1),
    .ce1(expandedKey_2_ce1),
    .q1(expandedKey_2_q1)
);

aes_encrypt_expandEe #(
    .DataWidth( 8 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
expandedKey_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_3_address0),
    .ce0(expandedKey_3_ce0),
    .we0(expandedKey_3_we0),
    .d0(grp_expandKey_fu_572_expandedKey_3_d0),
    .q0(expandedKey_3_q0),
    .address1(expandedKey_3_address1),
    .ce1(expandedKey_3_ce1),
    .we1(expandedKey_3_we1),
    .d1(grp_expandKey_fu_572_expandedKey_3_d1),
    .q1(expandedKey_3_q1)
);

aes_main grp_aes_main_fu_561(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_main_fu_561_ap_start),
    .ap_done(grp_aes_main_fu_561_ap_done),
    .ap_idle(grp_aes_main_fu_561_ap_idle),
    .ap_ready(grp_aes_main_fu_561_ap_ready),
    .state_address0(grp_aes_main_fu_561_state_address0),
    .state_ce0(grp_aes_main_fu_561_state_ce0),
    .state_we0(grp_aes_main_fu_561_state_we0),
    .state_d0(grp_aes_main_fu_561_state_d0),
    .state_q0(block_q0),
    .state_address1(grp_aes_main_fu_561_state_address1),
    .state_ce1(grp_aes_main_fu_561_state_ce1),
    .state_we1(grp_aes_main_fu_561_state_we1),
    .state_d1(grp_aes_main_fu_561_state_d1),
    .state_q1(block_q1),
    .expandedKey_0_address0(grp_aes_main_fu_561_expandedKey_0_address0),
    .expandedKey_0_ce0(grp_aes_main_fu_561_expandedKey_0_ce0),
    .expandedKey_0_q0(expandedKey_0_q0),
    .expandedKey_0_address1(grp_aes_main_fu_561_expandedKey_0_address1),
    .expandedKey_0_ce1(grp_aes_main_fu_561_expandedKey_0_ce1),
    .expandedKey_0_q1(expandedKey_0_q1),
    .expandedKey_1_address0(grp_aes_main_fu_561_expandedKey_1_address0),
    .expandedKey_1_ce0(grp_aes_main_fu_561_expandedKey_1_ce0),
    .expandedKey_1_q0(expandedKey_1_q0),
    .expandedKey_1_address1(grp_aes_main_fu_561_expandedKey_1_address1),
    .expandedKey_1_ce1(grp_aes_main_fu_561_expandedKey_1_ce1),
    .expandedKey_1_q1(expandedKey_1_q1),
    .expandedKey_2_address0(grp_aes_main_fu_561_expandedKey_2_address0),
    .expandedKey_2_ce0(grp_aes_main_fu_561_expandedKey_2_ce0),
    .expandedKey_2_q0(expandedKey_2_q0),
    .expandedKey_2_address1(grp_aes_main_fu_561_expandedKey_2_address1),
    .expandedKey_2_ce1(grp_aes_main_fu_561_expandedKey_2_ce1),
    .expandedKey_2_q1(expandedKey_2_q1),
    .expandedKey_3_address0(grp_aes_main_fu_561_expandedKey_3_address0),
    .expandedKey_3_ce0(grp_aes_main_fu_561_expandedKey_3_ce0),
    .expandedKey_3_q0(expandedKey_3_q0),
    .expandedKey_3_address1(grp_aes_main_fu_561_expandedKey_3_address1),
    .expandedKey_3_ce1(grp_aes_main_fu_561_expandedKey_3_ce1),
    .expandedKey_3_q1(expandedKey_3_q1)
);

expandKey grp_expandKey_fu_572(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_expandKey_fu_572_ap_start),
    .ap_done(grp_expandKey_fu_572_ap_done),
    .ap_idle(grp_expandKey_fu_572_ap_idle),
    .ap_ready(grp_expandKey_fu_572_ap_ready),
    .expandedKey_0_address0(grp_expandKey_fu_572_expandedKey_0_address0),
    .expandedKey_0_ce0(grp_expandKey_fu_572_expandedKey_0_ce0),
    .expandedKey_0_we0(grp_expandKey_fu_572_expandedKey_0_we0),
    .expandedKey_0_d0(grp_expandKey_fu_572_expandedKey_0_d0),
    .expandedKey_0_q0(expandedKey_0_q0),
    .expandedKey_0_address1(grp_expandKey_fu_572_expandedKey_0_address1),
    .expandedKey_0_ce1(grp_expandKey_fu_572_expandedKey_0_ce1),
    .expandedKey_0_we1(grp_expandKey_fu_572_expandedKey_0_we1),
    .expandedKey_0_d1(grp_expandKey_fu_572_expandedKey_0_d1),
    .expandedKey_0_q1(expandedKey_0_q1),
    .expandedKey_1_address0(grp_expandKey_fu_572_expandedKey_1_address0),
    .expandedKey_1_ce0(grp_expandKey_fu_572_expandedKey_1_ce0),
    .expandedKey_1_we0(grp_expandKey_fu_572_expandedKey_1_we0),
    .expandedKey_1_d0(grp_expandKey_fu_572_expandedKey_1_d0),
    .expandedKey_1_q0(expandedKey_1_q0),
    .expandedKey_1_address1(grp_expandKey_fu_572_expandedKey_1_address1),
    .expandedKey_1_ce1(grp_expandKey_fu_572_expandedKey_1_ce1),
    .expandedKey_1_we1(grp_expandKey_fu_572_expandedKey_1_we1),
    .expandedKey_1_d1(grp_expandKey_fu_572_expandedKey_1_d1),
    .expandedKey_1_q1(expandedKey_1_q1),
    .expandedKey_2_address0(grp_expandKey_fu_572_expandedKey_2_address0),
    .expandedKey_2_ce0(grp_expandKey_fu_572_expandedKey_2_ce0),
    .expandedKey_2_we0(grp_expandKey_fu_572_expandedKey_2_we0),
    .expandedKey_2_d0(grp_expandKey_fu_572_expandedKey_2_d0),
    .expandedKey_2_q0(expandedKey_2_q0),
    .expandedKey_3_address0(grp_expandKey_fu_572_expandedKey_3_address0),
    .expandedKey_3_ce0(grp_expandKey_fu_572_expandedKey_3_ce0),
    .expandedKey_3_we0(grp_expandKey_fu_572_expandedKey_3_we0),
    .expandedKey_3_d0(grp_expandKey_fu_572_expandedKey_3_d0),
    .expandedKey_3_q0(expandedKey_3_q0),
    .expandedKey_3_address1(grp_expandKey_fu_572_expandedKey_3_address1),
    .expandedKey_3_ce1(grp_expandKey_fu_572_expandedKey_3_ce1),
    .expandedKey_3_we1(grp_expandKey_fu_572_expandedKey_3_we1),
    .expandedKey_3_d1(grp_expandKey_fu_572_expandedKey_3_d1),
    .expandedKey_3_q1(expandedKey_3_q1),
    .key_0_read(key_0_read),
    .key_1_read(key_1_read),
    .key_2_read(key_2_read),
    .key_3_read(key_3_read),
    .key_4_read(key_4_read),
    .key_5_read(key_5_read),
    .key_6_read(key_6_read),
    .key_7_read(key_7_read),
    .key_8_read(key_8_read),
    .key_9_read(key_9_read),
    .key_10_read(key_10_read),
    .key_11_read(key_11_read),
    .key_12_read(key_12_read),
    .key_13_read(key_13_read),
    .key_14_read(key_14_read),
    .key_15_read(key_15_read)
);

encrypt_dut_mux_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
encrypt_dut_mux_1bkb_U81(
    .din0(input_0_read),
    .din1(input_1_read),
    .din2(input_2_read),
    .din3(input_3_read),
    .din4(input_4_read),
    .din5(input_5_read),
    .din6(input_6_read),
    .din7(input_7_read),
    .din8(input_8_read),
    .din9(input_9_read),
    .din10(input_10_read),
    .din11(input_11_read),
    .din12(input_12_read),
    .din13(input_13_read),
    .din14(input_14_read),
    .din15(input_15_read),
    .din16(tmp_fu_649_p17),
    .dout(tmp_fu_649_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_main_fu_561_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_aes_main_fu_561_ap_start_reg <= 1'b1;
        end else if ((grp_aes_main_fu_561_ap_ready == 1'b1)) begin
            grp_aes_main_fu_561_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_expandKey_fu_572_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_604_p2 == 1'd1))) begin
            grp_expandKey_fu_572_ap_start_reg <= 1'b1;
        end else if ((grp_expandKey_fu_572_ap_ready == 1'b1)) begin
            grp_expandKey_fu_572_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_632_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_517 <= i_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_517 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_1_reg_539 <= i_2_reg_959;
    end else if (((grp_aes_main_fu_561_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_1_reg_539 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_604_p2 == 1'd0))) begin
        j_0_reg_528 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln52_fu_632_p2 == 1'd0))) begin
        j_0_reg_528 <= j_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_698_p2 == 1'd0))) begin
        j_1_reg_550 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_550 <= j_2_reg_972;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln68_fu_726_p2 == 1'd0))) begin
        add_ln70_1_reg_982 <= add_ln70_1_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_959 <= i_2_fu_704_p2;
        zext_ln65_reg_951[2 : 0] <= zext_ln65_fu_694_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_933 <= i_fu_610_p2;
        zext_ln49_reg_925[2 : 0] <= zext_ln49_fu_600_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_2_reg_972 <= j_2_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_698_p2 == 1'd0))) begin
        shl_ln1_reg_964[3 : 2] <= shl_ln1_fu_714_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_604_p2 == 1'd0))) begin
        shl_ln_reg_938[3 : 2] <= shl_ln_fu_620_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_698_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_698_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        block_address0 = zext_ln70_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_address0 = zext_ln54_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_address0 = grp_aes_main_fu_561_state_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce0 = grp_aes_main_fu_561_state_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce1 = grp_aes_main_fu_561_state_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_d0 = tmp_fu_649_p18;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_d0 = grp_aes_main_fu_561_state_d0;
    end else begin
        block_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln52_fu_632_p2 == 1'd0))) begin
        block_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_we0 = grp_aes_main_fu_561_state_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_we1 = grp_aes_main_fu_561_state_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_address0 = grp_expandKey_fu_572_expandedKey_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_0_address0 = grp_aes_main_fu_561_expandedKey_0_address0;
    end else begin
        expandedKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_address1 = grp_expandKey_fu_572_expandedKey_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_0_address1 = grp_aes_main_fu_561_expandedKey_0_address1;
    end else begin
        expandedKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_ce0 = grp_expandKey_fu_572_expandedKey_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_0_ce0 = grp_aes_main_fu_561_expandedKey_0_ce0;
    end else begin
        expandedKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_ce1 = grp_expandKey_fu_572_expandedKey_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_0_ce1 = grp_aes_main_fu_561_expandedKey_0_ce1;
    end else begin
        expandedKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_we0 = grp_expandKey_fu_572_expandedKey_0_we0;
    end else begin
        expandedKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_0_we1 = grp_expandKey_fu_572_expandedKey_0_we1;
    end else begin
        expandedKey_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_address0 = grp_expandKey_fu_572_expandedKey_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_1_address0 = grp_aes_main_fu_561_expandedKey_1_address0;
    end else begin
        expandedKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_address1 = grp_expandKey_fu_572_expandedKey_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_1_address1 = grp_aes_main_fu_561_expandedKey_1_address1;
    end else begin
        expandedKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_ce0 = grp_expandKey_fu_572_expandedKey_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_1_ce0 = grp_aes_main_fu_561_expandedKey_1_ce0;
    end else begin
        expandedKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_ce1 = grp_expandKey_fu_572_expandedKey_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_1_ce1 = grp_aes_main_fu_561_expandedKey_1_ce1;
    end else begin
        expandedKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_we0 = grp_expandKey_fu_572_expandedKey_1_we0;
    end else begin
        expandedKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_1_we1 = grp_expandKey_fu_572_expandedKey_1_we1;
    end else begin
        expandedKey_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_2_address0 = grp_expandKey_fu_572_expandedKey_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_2_address0 = grp_aes_main_fu_561_expandedKey_2_address0;
    end else begin
        expandedKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_2_ce0 = grp_expandKey_fu_572_expandedKey_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_2_ce0 = grp_aes_main_fu_561_expandedKey_2_ce0;
    end else begin
        expandedKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_2_ce1 = grp_aes_main_fu_561_expandedKey_2_ce1;
    end else begin
        expandedKey_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_2_we0 = grp_expandKey_fu_572_expandedKey_2_we0;
    end else begin
        expandedKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_address0 = grp_expandKey_fu_572_expandedKey_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_3_address0 = grp_aes_main_fu_561_expandedKey_3_address0;
    end else begin
        expandedKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_address1 = grp_expandKey_fu_572_expandedKey_3_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_3_address1 = grp_aes_main_fu_561_expandedKey_3_address1;
    end else begin
        expandedKey_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_ce0 = grp_expandKey_fu_572_expandedKey_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_3_ce0 = grp_aes_main_fu_561_expandedKey_3_ce0;
    end else begin
        expandedKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_ce1 = grp_expandKey_fu_572_expandedKey_3_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_3_ce1 = grp_aes_main_fu_561_expandedKey_3_ce1;
    end else begin
        expandedKey_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_we0 = grp_expandKey_fu_572_expandedKey_3_we0;
    end else begin
        expandedKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_3_we1 = grp_expandKey_fu_572_expandedKey_3_we1;
    end else begin
        expandedKey_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((4'd0 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_0_ap_vld = 1'b1;
    end else begin
        output_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd10 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_10_ap_vld = 1'b1;
    end else begin
        output_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd11 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_11_ap_vld = 1'b1;
    end else begin
        output_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd12 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_12_ap_vld = 1'b1;
    end else begin
        output_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd13 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_13_ap_vld = 1'b1;
    end else begin
        output_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd14 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_14_ap_vld = 1'b1;
    end else begin
        output_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd15 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_15_ap_vld = 1'b1;
    end else begin
        output_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd1 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_1_ap_vld = 1'b1;
    end else begin
        output_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd2 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_2_ap_vld = 1'b1;
    end else begin
        output_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd3 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_3_ap_vld = 1'b1;
    end else begin
        output_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd4 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_4_ap_vld = 1'b1;
    end else begin
        output_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd5 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_5_ap_vld = 1'b1;
    end else begin
        output_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd6 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_6_ap_vld = 1'b1;
    end else begin
        output_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd7 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_7_ap_vld = 1'b1;
    end else begin
        output_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd8 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_8_ap_vld = 1'b1;
    end else begin
        output_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd9 == add_ln70_1_reg_982) & (1'b1 == ap_CS_fsm_state9))) begin
        output_9_ap_vld = 1'b1;
    end else begin
        output_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_604_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln52_fu_632_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_expandKey_fu_572_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_aes_main_fu_561_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_698_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln68_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_684_p2 = (zext_ln49_reg_925 + shl_ln54_1_fu_676_p3);

assign add_ln70_1_fu_760_p2 = (zext_ln68_fu_722_p1 + shl_ln1_reg_964);

assign add_ln70_fu_750_p2 = (zext_ln65_reg_951 + shl_ln70_1_fu_742_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_aes_main_fu_561_ap_start = grp_aes_main_fu_561_ap_start_reg;

assign grp_expandKey_fu_572_ap_start = grp_expandKey_fu_572_ap_start_reg;

assign i_2_fu_704_p2 = (i_1_reg_539 + 3'd1);

assign i_fu_610_p2 = (i_0_reg_517 + 3'd1);

assign icmp_ln49_fu_604_p2 = ((i_0_reg_517 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_632_p2 = ((j_0_reg_528 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_698_p2 = ((i_1_reg_539 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_726_p2 = ((j_1_reg_550 == 3'd4) ? 1'b1 : 1'b0);

assign j_2_fu_732_p2 = (j_1_reg_550 + 3'd1);

assign j_fu_638_p2 = (j_0_reg_528 + 3'd1);

assign output_0 = block_q0;

assign output_1 = block_q0;

assign output_10 = block_q0;

assign output_11 = block_q0;

assign output_12 = block_q0;

assign output_13 = block_q0;

assign output_14 = block_q0;

assign output_15 = block_q0;

assign output_2 = block_q0;

assign output_3 = block_q0;

assign output_4 = block_q0;

assign output_5 = block_q0;

assign output_6 = block_q0;

assign output_7 = block_q0;

assign output_8 = block_q0;

assign output_9 = block_q0;

assign shl_ln1_fu_714_p3 = {{trunc_ln70_fu_710_p1}, {2'd0}};

assign shl_ln54_1_fu_676_p3 = {{trunc_ln54_1_fu_672_p1}, {2'd0}};

assign shl_ln70_1_fu_742_p3 = {{trunc_ln70_1_fu_738_p1}, {2'd0}};

assign shl_ln_fu_620_p3 = {{trunc_ln54_fu_616_p1}, {2'd0}};

assign tmp_fu_649_p17 = (zext_ln52_fu_628_p1 + shl_ln_reg_938);

assign trunc_ln54_1_fu_672_p1 = j_0_reg_528[1:0];

assign trunc_ln54_fu_616_p1 = i_0_reg_517[1:0];

assign trunc_ln70_1_fu_738_p1 = j_1_reg_550[1:0];

assign trunc_ln70_fu_710_p1 = i_1_reg_539[1:0];

assign zext_ln49_fu_600_p1 = i_0_reg_517;

assign zext_ln52_fu_628_p1 = j_0_reg_528;

assign zext_ln54_fu_689_p1 = add_ln54_1_fu_684_p2;

assign zext_ln65_fu_694_p1 = i_1_reg_539;

assign zext_ln68_fu_722_p1 = j_1_reg_550;

assign zext_ln70_fu_755_p1 = add_ln70_fu_750_p2;

always @ (posedge ap_clk) begin
    zext_ln49_reg_925[3] <= 1'b0;
    shl_ln_reg_938[1:0] <= 2'b00;
    zext_ln65_reg_951[3] <= 1'b0;
    shl_ln1_reg_964[1:0] <= 2'b00;
end

endmodule //aes_encrypt
