-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expandKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_0_ce0 : OUT STD_LOGIC;
    expandedKey_0_we0 : OUT STD_LOGIC;
    expandedKey_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_0_ce1 : OUT STD_LOGIC;
    expandedKey_0_we1 : OUT STD_LOGIC;
    expandedKey_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_1_ce0 : OUT STD_LOGIC;
    expandedKey_1_we0 : OUT STD_LOGIC;
    expandedKey_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_1_ce1 : OUT STD_LOGIC;
    expandedKey_1_we1 : OUT STD_LOGIC;
    expandedKey_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_2_ce0 : OUT STD_LOGIC;
    expandedKey_2_we0 : OUT STD_LOGIC;
    expandedKey_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_3_ce0 : OUT STD_LOGIC;
    expandedKey_3_we0 : OUT STD_LOGIC;
    expandedKey_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_3_ce1 : OUT STD_LOGIC;
    expandedKey_3_we1 : OUT STD_LOGIC;
    expandedKey_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_15_read : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of expandKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1F1 : STD_LOGIC_VECTOR (8 downto 0) := "111110001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal currentSize_0_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal iteration_assign_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln135_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln139_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln139_reg_975_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_989_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rconIteration_1_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rconIteration_1_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln172_fu_640_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln172_reg_1012 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_0_3_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal t_3_1_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_load_reg_1049 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_load_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_load_reg_1059 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_3_load_reg_1064 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_1_1_reg_1069 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln171_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln171_reg_1084 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_2_1_reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal currentSize_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal currentSize_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln171_1_reg_1115 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal i_0_reg_434 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_currentSize_0_phi_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iteration_assign_phi_fu_461_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln136_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_3_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_3_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_1_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln46_3_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_2_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln46_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln46_2_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_2_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln171_1_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln136_1_fu_510_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_484_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln171_2_fu_872_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_484_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln_fu_514_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln145_fu_542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_548_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln145_3_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln145_3_fu_569_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln139_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln114_fu_596_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rconIteration_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_fu_619_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln172_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln170_1_fu_644_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln2_fu_650_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln170_fu_660_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln172_1_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln172_1_fu_675_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln170_3_fu_679_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln170_2_fu_685_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln170_2_fu_695_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln145_1_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln145_1_fu_710_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln145_2_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln145_2_fu_736_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln3_fu_762_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_3_2_fu_756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_2_fu_793_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_1_2_fu_815_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln170_2_fu_832_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln170_1_fu_837_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln170_1_fu_847_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln172_fu_827_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_2_2_fu_866_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component encrypt_dut_mux_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expandKey_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expandKey_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component expandKey_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    Rcon_U : component expandKey_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);

    encrypt_dut_mux_1bkb_U1 : component encrypt_dut_mux_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => key_0_read,
        din1 => key_1_read,
        din2 => key_2_read,
        din3 => key_3_read,
        din4 => key_4_read,
        din5 => key_5_read,
        din6 => key_6_read,
        din7 => key_7_read,
        din8 => key_8_read,
        din9 => key_9_read,
        din10 => key_10_read,
        din11 => key_11_read,
        din12 => key_12_read,
        din13 => key_13_read,
        din14 => key_14_read,
        din15 => key_15_read,
        din16 => tmp_fu_484_p17,
        dout => tmp_fu_484_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    currentSize_0_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_1))) then 
                currentSize_0_reg_445 <= ap_const_lv8_10;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
                currentSize_0_reg_445 <= currentSize_reg_1100;
            end if; 
        end if;
    end process;

    i_0_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_434 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_0))) then 
                i_0_reg_434 <= i_fu_474_p2;
            end if; 
        end if;
    end process;

    iteration_assign_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_1))) then 
                iteration_assign_reg_457 <= ap_const_lv32_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
                iteration_assign_reg_457 <= rconIteration_1_reg_1002;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                Rcon_load_reg_1049 <= Rcon_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                currentSize_reg_1100 <= currentSize_fu_799_p2;
                t_2_1_reg_1090 <= expandedKey_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                expandedKey_0_load_reg_1054 <= expandedKey_0_q1;
                expandedKey_1_load_reg_1059 <= expandedKey_1_q0;
                expandedKey_3_load_reg_1064 <= expandedKey_3_q1;
                t_0_3_reg_1028 <= expandedKey_0_q0;
                t_3_1_reg_1038 <= expandedKey_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln139_reg_975 <= icmp_ln139_fu_532_p2;
                icmp_ln139_reg_975_pp0_iter1_reg <= icmp_ln139_reg_975;
                icmp_ln151_reg_989_pp0_iter1_reg <= icmp_ln151_reg_989;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_fu_532_p2 = ap_const_lv1_1))) then
                icmp_ln151_reg_989 <= icmp_ln151_fu_584_p2;
                    zext_ln172_reg_1012(7 downto 1) <= zext_ln172_fu_640_p1(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                lshr_ln171_1_reg_1115 <= add_ln172_fu_827_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_fu_532_p2 = ap_const_lv1_1))) then
                rconIteration_1_reg_1002 <= rconIteration_1_fu_605_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                t_1_1_reg_1069 <= expandedKey_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then
                    zext_ln171_reg_1084(5 downto 0) <= zext_ln171_fu_772_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln172_reg_1012(0) <= '1';
    zext_ln172_reg_1012(8) <= '0';
    zext_ln171_reg_1084(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln135_fu_468_p2, ap_CS_fsm_state2, icmp_ln139_fu_532_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_fu_532_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_fu_532_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Rcon_address0 <= zext_ln97_fu_600_p1(8 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln145_1_fu_704_p2 <= std_logic_vector(signed(ap_const_lv8_FD) + signed(currentSize_0_reg_445));
    add_ln145_2_fu_730_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(currentSize_0_reg_445));
    add_ln145_3_fu_563_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));
    add_ln145_fu_542_p2 <= std_logic_vector(signed(ap_const_lv8_FC) + signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));
    add_ln170_1_fu_644_p2 <= std_logic_vector(signed(ap_const_lv9_1F0) + signed(zext_ln172_fu_640_p1));
    add_ln170_2_fu_832_p2 <= std_logic_vector(signed(ap_const_lv9_1F1) + signed(zext_ln172_reg_1012));
    add_ln170_3_fu_679_p2 <= std_logic_vector(signed(ap_const_lv9_1F0) + signed(zext_ln172_1_fu_675_p1));
    add_ln170_fu_613_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(ap_phi_mux_currentSize_0_phi_fu_449_p4));
    add_ln172_fu_827_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln172_reg_1012));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln139_fu_532_p2)
    begin
        if ((icmp_ln139_fu_532_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_currentSize_0_phi_fu_449_p4_assign_proc : process(currentSize_0_reg_445, icmp_ln139_reg_975, ap_CS_fsm_pp0_stage0, currentSize_reg_1100, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
            ap_phi_mux_currentSize_0_phi_fu_449_p4 <= currentSize_reg_1100;
        else 
            ap_phi_mux_currentSize_0_phi_fu_449_p4 <= currentSize_0_reg_445;
        end if; 
    end process;


    ap_phi_mux_iteration_assign_phi_fu_461_p4_assign_proc : process(iteration_assign_reg_457, icmp_ln139_reg_975, ap_CS_fsm_pp0_stage0, rconIteration_1_reg_1002, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
            ap_phi_mux_iteration_assign_phi_fu_461_p4 <= rconIteration_1_reg_1002;
        else 
            ap_phi_mux_iteration_assign_phi_fu_461_p4 <= iteration_assign_reg_457;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    currentSize_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(currentSize_0_reg_445));

    expandedKey_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln136_fu_524_p1, zext_ln145_fu_558_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            expandedKey_0_address0 <= zext_ln145_fu_558_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_0_address0 <= zext_ln136_fu_524_p1(6 - 1 downto 0);
        else 
            expandedKey_0_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln171_reg_1084, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln170_fu_629_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_0_address1 <= zext_ln171_reg_1084(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_0_address1 <= zext_ln170_fu_629_p1(6 - 1 downto 0);
            else 
                expandedKey_0_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_0_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_0_ce0 <= ap_const_logic_1;
        else 
            expandedKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_0_ce1 <= ap_const_logic_1;
        else 
            expandedKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_0_d0 <= tmp_fu_484_p18;
    expandedKey_0_d1 <= (t_0_2_fu_793_p3 xor expandedKey_0_load_reg_1054);

    expandedKey_0_we0_assign_proc : process(icmp_ln135_fu_468_p2, ap_CS_fsm_state2, trunc_ln136_1_fu_510_p1)
    begin
        if (((trunc_ln136_1_fu_510_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_0))) then 
            expandedKey_0_we0 <= ap_const_logic_1;
        else 
            expandedKey_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_we1_assign_proc : process(icmp_ln139_reg_975, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
            expandedKey_0_we1 <= ap_const_logic_1;
        else 
            expandedKey_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln136_fu_524_p1, zext_ln170_1_fu_664_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            expandedKey_1_address0 <= zext_ln170_1_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_1_address0 <= zext_ln136_fu_524_p1(6 - 1 downto 0);
        else 
            expandedKey_1_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln171_reg_1084, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln145_1_fu_720_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            expandedKey_1_address1 <= zext_ln171_reg_1084(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            expandedKey_1_address1 <= zext_ln145_1_fu_720_p1(6 - 1 downto 0);
        else 
            expandedKey_1_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_1_ce0 <= ap_const_logic_1;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_1_ce1 <= ap_const_logic_1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_1_d0 <= tmp_fu_484_p18;
    expandedKey_1_d1 <= (t_1_2_fu_815_p3 xor expandedKey_1_load_reg_1059);

    expandedKey_1_we0_assign_proc : process(icmp_ln135_fu_468_p2, ap_CS_fsm_state2, trunc_ln136_1_fu_510_p1)
    begin
        if (((trunc_ln136_1_fu_510_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_0))) then 
            expandedKey_1_we0 <= ap_const_logic_1;
        else 
            expandedKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_we1_assign_proc : process(icmp_ln139_reg_975, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
            expandedKey_1_we1 <= ap_const_logic_1;
        else 
            expandedKey_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln136_fu_524_p1, ap_block_pp0_stage1, zext_ln145_2_fu_746_p1, ap_block_pp0_stage2, zext_ln170_2_fu_851_p1, zext_ln171_1_fu_879_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            expandedKey_2_address0 <= zext_ln171_1_fu_879_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            expandedKey_2_address0 <= zext_ln170_2_fu_851_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            expandedKey_2_address0 <= zext_ln145_2_fu_746_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_2_address0 <= zext_ln136_fu_524_p1(6 - 1 downto 0);
        else 
            expandedKey_2_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_2_ce0 <= ap_const_logic_1;
        else 
            expandedKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, tmp_fu_484_p18, xor_ln171_2_fu_872_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            expandedKey_2_d0 <= xor_ln171_2_fu_872_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_2_d0 <= tmp_fu_484_p18;
        else 
            expandedKey_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_2_we0_assign_proc : process(icmp_ln135_fu_468_p2, ap_CS_fsm_state2, icmp_ln139_reg_975_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, trunc_ln136_1_fu_510_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln139_reg_975_pp0_iter1_reg = ap_const_lv1_1)) or ((trunc_ln136_1_fu_510_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_0)))) then 
            expandedKey_2_we0 <= ap_const_logic_1;
        else 
            expandedKey_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln136_fu_524_p1, zext_ln145_3_fu_579_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            expandedKey_3_address0 <= zext_ln145_3_fu_579_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_3_address0 <= zext_ln136_fu_524_p1(6 - 1 downto 0);
        else 
            expandedKey_3_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, zext_ln171_fu_772_p1, ap_block_pp0_stage0, zext_ln170_3_fu_699_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_3_address1 <= zext_ln171_fu_772_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_3_address1 <= zext_ln170_3_fu_699_p1(6 - 1 downto 0);
            else 
                expandedKey_3_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_3_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_3_ce0 <= ap_const_logic_1;
        else 
            expandedKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_3_ce1 <= ap_const_logic_1;
        else 
            expandedKey_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    expandedKey_3_d0 <= tmp_fu_484_p18;
    expandedKey_3_d1 <= (t_3_2_fu_756_p3 xor expandedKey_3_load_reg_1064);

    expandedKey_3_we0_assign_proc : process(icmp_ln135_fu_468_p2, ap_CS_fsm_state2, trunc_ln136_1_fu_510_p1)
    begin
        if (((trunc_ln136_1_fu_510_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln135_fu_468_p2 = ap_const_lv1_0))) then 
            expandedKey_3_we0 <= ap_const_logic_1;
        else 
            expandedKey_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_we1_assign_proc : process(icmp_ln139_reg_975, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln139_reg_975 = ap_const_lv1_1))) then 
            expandedKey_3_we1 <= ap_const_logic_1;
        else 
            expandedKey_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_474_p2 <= std_logic_vector(unsigned(i_0_reg_434) + unsigned(ap_const_lv5_1));
    icmp_ln135_fu_468_p2 <= "1" when (i_0_reg_434 = ap_const_lv5_10) else "0";
    icmp_ln139_fu_532_p2 <= "1" when (unsigned(ap_phi_mux_currentSize_0_phi_fu_449_p4) < unsigned(ap_const_lv8_B0)) else "0";
    icmp_ln151_fu_584_p2 <= "1" when (trunc_ln139_fu_538_p1 = ap_const_lv4_0) else "0";
    lshr_ln145_1_fu_710_p4 <= add_ln145_1_fu_704_p2(7 downto 2);
    lshr_ln145_2_fu_736_p4 <= add_ln145_2_fu_730_p2(7 downto 2);
    lshr_ln145_3_fu_569_p4 <= add_ln145_3_fu_563_p2(7 downto 2);
    lshr_ln1_fu_548_p4 <= add_ln145_fu_542_p2(7 downto 2);
    lshr_ln2_fu_619_p4 <= add_ln170_fu_613_p2(7 downto 2);
    lshr_ln3_fu_762_p4 <= currentSize_0_reg_445(7 downto 2);
    lshr_ln_fu_514_p4 <= i_0_reg_434(4 downto 2);
    or_ln172_1_fu_669_p2 <= (ap_phi_mux_currentSize_0_phi_fu_449_p4 or ap_const_lv8_3);
    or_ln172_fu_634_p2 <= (ap_phi_mux_currentSize_0_phi_fu_449_p4 or ap_const_lv8_1);
    rconIteration_1_fu_605_p3 <= 
        rconIteration_fu_590_p2 when (icmp_ln151_fu_584_p2(0) = '1') else 
        ap_phi_mux_iteration_assign_phi_fu_461_p4;
    rconIteration_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_iteration_assign_phi_fu_461_p4));

    sbox_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln46_3_fu_725_p1, ap_block_pp0_stage2, zext_ln46_fu_751_p1, zext_ln46_1_fu_783_p1, ap_block_pp0_stage3, zext_ln46_2_fu_811_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_address0 <= zext_ln46_2_fu_811_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sbox_address0 <= zext_ln46_1_fu_783_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sbox_address0 <= zext_ln46_fu_751_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sbox_address0 <= zext_ln46_3_fu_725_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln170_1_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln170_1_fu_837_p4),30));

        sext_ln170_2_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln170_2_fu_685_p4),30));

        sext_ln170_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_650_p4),30));

    t_0_2_fu_793_p3 <= 
        t_0_fu_788_p2 when (icmp_ln151_reg_989(0) = '1') else 
        t_0_3_reg_1028;
    t_0_fu_788_p2 <= (sbox_q0 xor Rcon_load_reg_1049);
    t_1_2_fu_815_p3 <= 
        sbox_q0 when (icmp_ln151_reg_989(0) = '1') else 
        t_1_1_reg_1069;
    t_2_2_fu_866_p3 <= 
        sbox_q0 when (icmp_ln151_reg_989_pp0_iter1_reg(0) = '1') else 
        t_2_1_reg_1090;
    t_3_2_fu_756_p3 <= 
        sbox_q0 when (icmp_ln151_reg_989(0) = '1') else 
        t_3_1_reg_1038;
    tmp_fu_484_p17 <= i_0_reg_434(4 - 1 downto 0);
    trunc_ln114_fu_596_p1 <= ap_phi_mux_iteration_assign_phi_fu_461_p4(8 - 1 downto 0);
    trunc_ln136_1_fu_510_p1 <= i_0_reg_434(2 - 1 downto 0);
    trunc_ln139_fu_538_p1 <= ap_phi_mux_currentSize_0_phi_fu_449_p4(4 - 1 downto 0);
    trunc_ln170_1_fu_837_p4 <= add_ln170_2_fu_832_p2(8 downto 2);
    trunc_ln170_2_fu_685_p4 <= add_ln170_3_fu_679_p2(8 downto 2);
    trunc_ln2_fu_650_p4 <= add_ln170_1_fu_644_p2(8 downto 2);
    xor_ln171_2_fu_872_p2 <= (t_2_2_fu_866_p3 xor expandedKey_2_q0);
    zext_ln136_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_514_p4),64));
    zext_ln145_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln145_1_fu_710_p4),64));
    zext_ln145_2_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln145_2_fu_736_p4),64));
    zext_ln145_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln145_3_fu_569_p4),64));
    zext_ln145_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_548_p4),64));
    zext_ln170_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln170_fu_660_p1),64));
    zext_ln170_2_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln170_1_fu_847_p1),64));
    zext_ln170_3_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln170_2_fu_695_p1),64));
    zext_ln170_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_619_p4),64));
    zext_ln171_1_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln171_1_reg_1115),64));
    zext_ln171_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_762_p4),64));
    zext_ln172_1_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln172_1_fu_669_p2),9));
    zext_ln172_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln172_fu_634_p2),9));
    zext_ln46_1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKey_2_q0),64));
    zext_ln46_2_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_3_1_reg_1038),64));
    zext_ln46_3_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKey_0_q0),64));
    zext_ln46_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKey_1_q1),64));
    zext_ln97_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln114_fu_596_p1),64));
end behav;
