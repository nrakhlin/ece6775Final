-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_0_ap_vld : OUT STD_LOGIC;
    output_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_1_ap_vld : OUT STD_LOGIC;
    output_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_2_ap_vld : OUT STD_LOGIC;
    output_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_3_ap_vld : OUT STD_LOGIC;
    output_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_4_ap_vld : OUT STD_LOGIC;
    output_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_5_ap_vld : OUT STD_LOGIC;
    output_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_6_ap_vld : OUT STD_LOGIC;
    output_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_7_ap_vld : OUT STD_LOGIC;
    output_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_8_ap_vld : OUT STD_LOGIC;
    output_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_9_ap_vld : OUT STD_LOGIC;
    output_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_10_ap_vld : OUT STD_LOGIC;
    output_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_11_ap_vld : OUT STD_LOGIC;
    output_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_12_ap_vld : OUT STD_LOGIC;
    output_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_13_ap_vld : OUT STD_LOGIC;
    output_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_14_ap_vld : OUT STD_LOGIC;
    output_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_15_ap_vld : OUT STD_LOGIC;
    key_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    key_15_read : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln49_fu_600_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln49_reg_925 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_610_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_933 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_620_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_938 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln49_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_638_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln65_fu_694_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_reg_951 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_fu_704_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_959 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_714_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_964 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln65_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_732_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_972 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln68_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_1_fu_760_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_1_reg_982 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_0_ce0 : STD_LOGIC;
    signal expandedKey_0_we0 : STD_LOGIC;
    signal expandedKey_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_0_ce1 : STD_LOGIC;
    signal expandedKey_0_we1 : STD_LOGIC;
    signal expandedKey_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_1_ce0 : STD_LOGIC;
    signal expandedKey_1_we0 : STD_LOGIC;
    signal expandedKey_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_1_ce1 : STD_LOGIC;
    signal expandedKey_1_we1 : STD_LOGIC;
    signal expandedKey_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_2_ce0 : STD_LOGIC;
    signal expandedKey_2_we0 : STD_LOGIC;
    signal expandedKey_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_2_ce1 : STD_LOGIC;
    signal expandedKey_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_3_ce0 : STD_LOGIC;
    signal expandedKey_3_we0 : STD_LOGIC;
    signal expandedKey_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal expandedKey_3_ce1 : STD_LOGIC;
    signal expandedKey_3_we1 : STD_LOGIC;
    signal expandedKey_3_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_561_ap_start : STD_LOGIC;
    signal grp_aes_main_fu_561_ap_done : STD_LOGIC;
    signal grp_aes_main_fu_561_ap_idle : STD_LOGIC;
    signal grp_aes_main_fu_561_ap_ready : STD_LOGIC;
    signal grp_aes_main_fu_561_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_561_state_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_561_state_we0 : STD_LOGIC;
    signal grp_aes_main_fu_561_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_561_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_561_state_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_561_state_we1 : STD_LOGIC;
    signal grp_aes_main_fu_561_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_561_expandedKey_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_0_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_0_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_1_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_1_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_2_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_2_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_3_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_561_expandedKey_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_main_fu_561_expandedKey_3_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_572_ap_start : STD_LOGIC;
    signal grp_expandKey_fu_572_ap_done : STD_LOGIC;
    signal grp_expandKey_fu_572_ap_idle : STD_LOGIC;
    signal grp_expandKey_fu_572_ap_ready : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_0_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_0_we0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_0_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_0_we1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_1_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_1_we0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_1_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_1_we1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_2_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_2_we0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_3_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_3_we0 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_572_expandedKey_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_expandKey_fu_572_expandedKey_3_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_3_we1 : STD_LOGIC;
    signal grp_expandKey_fu_572_expandedKey_3_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_517 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln52_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_539 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_reg_550 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes_main_fu_561_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_expandKey_fu_572_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln54_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_649_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_fu_616_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln52_fu_628_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_649_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln54_1_fu_672_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln54_1_fu_676_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln54_1_fu_684_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln70_fu_710_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_1_fu_738_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln70_1_fu_742_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_fu_750_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_fu_722_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component aes_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_0_ce0 : OUT STD_LOGIC;
        expandedKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_0_ce1 : OUT STD_LOGIC;
        expandedKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_1_ce0 : OUT STD_LOGIC;
        expandedKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_1_ce1 : OUT STD_LOGIC;
        expandedKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_2_ce0 : OUT STD_LOGIC;
        expandedKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_2_ce1 : OUT STD_LOGIC;
        expandedKey_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_3_ce0 : OUT STD_LOGIC;
        expandedKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_3_ce1 : OUT STD_LOGIC;
        expandedKey_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expandKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_0_ce0 : OUT STD_LOGIC;
        expandedKey_0_we0 : OUT STD_LOGIC;
        expandedKey_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_0_ce1 : OUT STD_LOGIC;
        expandedKey_0_we1 : OUT STD_LOGIC;
        expandedKey_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_1_ce0 : OUT STD_LOGIC;
        expandedKey_1_we0 : OUT STD_LOGIC;
        expandedKey_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_1_ce1 : OUT STD_LOGIC;
        expandedKey_1_we1 : OUT STD_LOGIC;
        expandedKey_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_2_ce0 : OUT STD_LOGIC;
        expandedKey_2_we0 : OUT STD_LOGIC;
        expandedKey_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_3_ce0 : OUT STD_LOGIC;
        expandedKey_3_we0 : OUT STD_LOGIC;
        expandedKey_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        expandedKey_3_ce1 : OUT STD_LOGIC;
        expandedKey_3_we1 : OUT STD_LOGIC;
        expandedKey_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
        key_15_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component encrypt_dut_mux_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_expandEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_expanfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component aes_encrypt_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => block_d0,
        q0 => block_q0,
        address1 => grp_aes_main_fu_561_state_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_aes_main_fu_561_state_d1,
        q1 => block_q1);

    expandedKey_0_U : component aes_encrypt_expandEe
    generic map (
        DataWidth => 8,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expandedKey_0_address0,
        ce0 => expandedKey_0_ce0,
        we0 => expandedKey_0_we0,
        d0 => grp_expandKey_fu_572_expandedKey_0_d0,
        q0 => expandedKey_0_q0,
        address1 => expandedKey_0_address1,
        ce1 => expandedKey_0_ce1,
        we1 => expandedKey_0_we1,
        d1 => grp_expandKey_fu_572_expandedKey_0_d1,
        q1 => expandedKey_0_q1);

    expandedKey_1_U : component aes_encrypt_expandEe
    generic map (
        DataWidth => 8,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expandedKey_1_address0,
        ce0 => expandedKey_1_ce0,
        we0 => expandedKey_1_we0,
        d0 => grp_expandKey_fu_572_expandedKey_1_d0,
        q0 => expandedKey_1_q0,
        address1 => expandedKey_1_address1,
        ce1 => expandedKey_1_ce1,
        we1 => expandedKey_1_we1,
        d1 => grp_expandKey_fu_572_expandedKey_1_d1,
        q1 => expandedKey_1_q1);

    expandedKey_2_U : component aes_encrypt_expanfYi
    generic map (
        DataWidth => 8,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expandedKey_2_address0,
        ce0 => expandedKey_2_ce0,
        we0 => expandedKey_2_we0,
        d0 => grp_expandKey_fu_572_expandedKey_2_d0,
        q0 => expandedKey_2_q0,
        address1 => grp_aes_main_fu_561_expandedKey_2_address1,
        ce1 => expandedKey_2_ce1,
        q1 => expandedKey_2_q1);

    expandedKey_3_U : component aes_encrypt_expandEe
    generic map (
        DataWidth => 8,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expandedKey_3_address0,
        ce0 => expandedKey_3_ce0,
        we0 => expandedKey_3_we0,
        d0 => grp_expandKey_fu_572_expandedKey_3_d0,
        q0 => expandedKey_3_q0,
        address1 => expandedKey_3_address1,
        ce1 => expandedKey_3_ce1,
        we1 => expandedKey_3_we1,
        d1 => grp_expandKey_fu_572_expandedKey_3_d1,
        q1 => expandedKey_3_q1);

    grp_aes_main_fu_561 : component aes_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_main_fu_561_ap_start,
        ap_done => grp_aes_main_fu_561_ap_done,
        ap_idle => grp_aes_main_fu_561_ap_idle,
        ap_ready => grp_aes_main_fu_561_ap_ready,
        state_address0 => grp_aes_main_fu_561_state_address0,
        state_ce0 => grp_aes_main_fu_561_state_ce0,
        state_we0 => grp_aes_main_fu_561_state_we0,
        state_d0 => grp_aes_main_fu_561_state_d0,
        state_q0 => block_q0,
        state_address1 => grp_aes_main_fu_561_state_address1,
        state_ce1 => grp_aes_main_fu_561_state_ce1,
        state_we1 => grp_aes_main_fu_561_state_we1,
        state_d1 => grp_aes_main_fu_561_state_d1,
        state_q1 => block_q1,
        expandedKey_0_address0 => grp_aes_main_fu_561_expandedKey_0_address0,
        expandedKey_0_ce0 => grp_aes_main_fu_561_expandedKey_0_ce0,
        expandedKey_0_q0 => expandedKey_0_q0,
        expandedKey_0_address1 => grp_aes_main_fu_561_expandedKey_0_address1,
        expandedKey_0_ce1 => grp_aes_main_fu_561_expandedKey_0_ce1,
        expandedKey_0_q1 => expandedKey_0_q1,
        expandedKey_1_address0 => grp_aes_main_fu_561_expandedKey_1_address0,
        expandedKey_1_ce0 => grp_aes_main_fu_561_expandedKey_1_ce0,
        expandedKey_1_q0 => expandedKey_1_q0,
        expandedKey_1_address1 => grp_aes_main_fu_561_expandedKey_1_address1,
        expandedKey_1_ce1 => grp_aes_main_fu_561_expandedKey_1_ce1,
        expandedKey_1_q1 => expandedKey_1_q1,
        expandedKey_2_address0 => grp_aes_main_fu_561_expandedKey_2_address0,
        expandedKey_2_ce0 => grp_aes_main_fu_561_expandedKey_2_ce0,
        expandedKey_2_q0 => expandedKey_2_q0,
        expandedKey_2_address1 => grp_aes_main_fu_561_expandedKey_2_address1,
        expandedKey_2_ce1 => grp_aes_main_fu_561_expandedKey_2_ce1,
        expandedKey_2_q1 => expandedKey_2_q1,
        expandedKey_3_address0 => grp_aes_main_fu_561_expandedKey_3_address0,
        expandedKey_3_ce0 => grp_aes_main_fu_561_expandedKey_3_ce0,
        expandedKey_3_q0 => expandedKey_3_q0,
        expandedKey_3_address1 => grp_aes_main_fu_561_expandedKey_3_address1,
        expandedKey_3_ce1 => grp_aes_main_fu_561_expandedKey_3_ce1,
        expandedKey_3_q1 => expandedKey_3_q1);

    grp_expandKey_fu_572 : component expandKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_expandKey_fu_572_ap_start,
        ap_done => grp_expandKey_fu_572_ap_done,
        ap_idle => grp_expandKey_fu_572_ap_idle,
        ap_ready => grp_expandKey_fu_572_ap_ready,
        expandedKey_0_address0 => grp_expandKey_fu_572_expandedKey_0_address0,
        expandedKey_0_ce0 => grp_expandKey_fu_572_expandedKey_0_ce0,
        expandedKey_0_we0 => grp_expandKey_fu_572_expandedKey_0_we0,
        expandedKey_0_d0 => grp_expandKey_fu_572_expandedKey_0_d0,
        expandedKey_0_q0 => expandedKey_0_q0,
        expandedKey_0_address1 => grp_expandKey_fu_572_expandedKey_0_address1,
        expandedKey_0_ce1 => grp_expandKey_fu_572_expandedKey_0_ce1,
        expandedKey_0_we1 => grp_expandKey_fu_572_expandedKey_0_we1,
        expandedKey_0_d1 => grp_expandKey_fu_572_expandedKey_0_d1,
        expandedKey_0_q1 => expandedKey_0_q1,
        expandedKey_1_address0 => grp_expandKey_fu_572_expandedKey_1_address0,
        expandedKey_1_ce0 => grp_expandKey_fu_572_expandedKey_1_ce0,
        expandedKey_1_we0 => grp_expandKey_fu_572_expandedKey_1_we0,
        expandedKey_1_d0 => grp_expandKey_fu_572_expandedKey_1_d0,
        expandedKey_1_q0 => expandedKey_1_q0,
        expandedKey_1_address1 => grp_expandKey_fu_572_expandedKey_1_address1,
        expandedKey_1_ce1 => grp_expandKey_fu_572_expandedKey_1_ce1,
        expandedKey_1_we1 => grp_expandKey_fu_572_expandedKey_1_we1,
        expandedKey_1_d1 => grp_expandKey_fu_572_expandedKey_1_d1,
        expandedKey_1_q1 => expandedKey_1_q1,
        expandedKey_2_address0 => grp_expandKey_fu_572_expandedKey_2_address0,
        expandedKey_2_ce0 => grp_expandKey_fu_572_expandedKey_2_ce0,
        expandedKey_2_we0 => grp_expandKey_fu_572_expandedKey_2_we0,
        expandedKey_2_d0 => grp_expandKey_fu_572_expandedKey_2_d0,
        expandedKey_2_q0 => expandedKey_2_q0,
        expandedKey_3_address0 => grp_expandKey_fu_572_expandedKey_3_address0,
        expandedKey_3_ce0 => grp_expandKey_fu_572_expandedKey_3_ce0,
        expandedKey_3_we0 => grp_expandKey_fu_572_expandedKey_3_we0,
        expandedKey_3_d0 => grp_expandKey_fu_572_expandedKey_3_d0,
        expandedKey_3_q0 => expandedKey_3_q0,
        expandedKey_3_address1 => grp_expandKey_fu_572_expandedKey_3_address1,
        expandedKey_3_ce1 => grp_expandKey_fu_572_expandedKey_3_ce1,
        expandedKey_3_we1 => grp_expandKey_fu_572_expandedKey_3_we1,
        expandedKey_3_d1 => grp_expandKey_fu_572_expandedKey_3_d1,
        expandedKey_3_q1 => expandedKey_3_q1,
        key_0_read => key_0_read,
        key_1_read => key_1_read,
        key_2_read => key_2_read,
        key_3_read => key_3_read,
        key_4_read => key_4_read,
        key_5_read => key_5_read,
        key_6_read => key_6_read,
        key_7_read => key_7_read,
        key_8_read => key_8_read,
        key_9_read => key_9_read,
        key_10_read => key_10_read,
        key_11_read => key_11_read,
        key_12_read => key_12_read,
        key_13_read => key_13_read,
        key_14_read => key_14_read,
        key_15_read => key_15_read);

    encrypt_dut_mux_1bkb_U81 : component encrypt_dut_mux_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => input_0_read,
        din1 => input_1_read,
        din2 => input_2_read,
        din3 => input_3_read,
        din4 => input_4_read,
        din5 => input_5_read,
        din6 => input_6_read,
        din7 => input_7_read,
        din8 => input_8_read,
        din9 => input_9_read,
        din10 => input_10_read,
        din11 => input_11_read,
        din12 => input_12_read,
        din13 => input_13_read,
        din14 => input_14_read,
        din15 => input_15_read,
        din16 => tmp_fu_649_p17,
        dout => tmp_fu_649_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_main_fu_561_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_main_fu_561_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_main_fu_561_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_main_fu_561_ap_ready = ap_const_logic_1)) then 
                    grp_aes_main_fu_561_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_expandKey_fu_572_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_expandKey_fu_572_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_604_p2 = ap_const_lv1_1))) then 
                    grp_expandKey_fu_572_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expandKey_fu_572_ap_ready = ap_const_logic_1)) then 
                    grp_expandKey_fu_572_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_517 <= i_reg_933;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_517 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_726_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_reg_539 <= i_2_reg_959;
            elsif (((grp_aes_main_fu_561_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_539 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_604_p2 = ap_const_lv1_0))) then 
                j_0_reg_528 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_632_p2 = ap_const_lv1_0))) then 
                j_0_reg_528 <= j_fu_638_p2;
            end if; 
        end if;
    end process;

    j_1_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln65_fu_698_p2 = ap_const_lv1_0))) then 
                j_1_reg_550 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_550 <= j_2_reg_972;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln68_fu_726_p2 = ap_const_lv1_0))) then
                add_ln70_1_reg_982 <= add_ln70_1_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_959 <= i_2_fu_704_p2;
                    zext_ln65_reg_951(2 downto 0) <= zext_ln65_fu_694_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_933 <= i_fu_610_p2;
                    zext_ln49_reg_925(2 downto 0) <= zext_ln49_fu_600_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_2_reg_972 <= j_2_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln65_fu_698_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_964(3 downto 2) <= shl_ln1_fu_714_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_604_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_938(3 downto 2) <= shl_ln_fu_620_p3(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln49_reg_925(3) <= '0';
    shl_ln_reg_938(1 downto 0) <= "00";
    zext_ln65_reg_951(3) <= '0';
    shl_ln1_reg_964(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln49_fu_604_p2, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln65_fu_698_p2, ap_CS_fsm_state8, icmp_ln68_fu_726_p2, grp_aes_main_fu_561_ap_done, grp_expandKey_fu_572_ap_done, icmp_ln52_fu_632_p2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_604_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_expandKey_fu_572_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_aes_main_fu_561_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln65_fu_698_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln68_fu_726_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln54_1_fu_684_p2 <= std_logic_vector(unsigned(zext_ln49_reg_925) + unsigned(shl_ln54_1_fu_676_p3));
    add_ln70_1_fu_760_p2 <= std_logic_vector(unsigned(zext_ln68_fu_722_p1) + unsigned(shl_ln1_reg_964));
    add_ln70_fu_750_p2 <= std_logic_vector(unsigned(zext_ln65_reg_951) + unsigned(shl_ln70_1_fu_742_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln65_fu_698_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln65_fu_698_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln65_fu_698_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln65_fu_698_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_aes_main_fu_561_state_address0, ap_CS_fsm_state6, zext_ln54_fu_689_p1, zext_ln70_fu_755_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            block_address0 <= zext_ln70_fu_755_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_address0 <= zext_ln54_fu_689_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= grp_aes_main_fu_561_state_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_aes_main_fu_561_state_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce0 <= grp_aes_main_fu_561_state_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_aes_main_fu_561_state_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce1 <= grp_aes_main_fu_561_state_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_d0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_561_state_d0, ap_CS_fsm_state6, tmp_fu_649_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_d0 <= tmp_fu_649_p18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_d0 <= grp_aes_main_fu_561_state_d0;
        else 
            block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_we0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_561_state_we0, icmp_ln52_fu_632_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_632_p2 = ap_const_lv1_0))) then 
            block_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we0 <= grp_aes_main_fu_561_state_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_aes_main_fu_561_state_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we1 <= grp_aes_main_fu_561_state_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_address0_assign_proc : process(grp_aes_main_fu_561_expandedKey_0_address0, grp_expandKey_fu_572_expandedKey_0_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_address0 <= grp_expandKey_fu_572_expandedKey_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_0_address0 <= grp_aes_main_fu_561_expandedKey_0_address0;
        else 
            expandedKey_0_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_address1_assign_proc : process(grp_aes_main_fu_561_expandedKey_0_address1, grp_expandKey_fu_572_expandedKey_0_address1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_address1 <= grp_expandKey_fu_572_expandedKey_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_0_address1 <= grp_aes_main_fu_561_expandedKey_0_address1;
        else 
            expandedKey_0_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_ce0_assign_proc : process(grp_aes_main_fu_561_expandedKey_0_ce0, grp_expandKey_fu_572_expandedKey_0_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_ce0 <= grp_expandKey_fu_572_expandedKey_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_0_ce0 <= grp_aes_main_fu_561_expandedKey_0_ce0;
        else 
            expandedKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_ce1_assign_proc : process(grp_aes_main_fu_561_expandedKey_0_ce1, grp_expandKey_fu_572_expandedKey_0_ce1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_ce1 <= grp_expandKey_fu_572_expandedKey_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_0_ce1 <= grp_aes_main_fu_561_expandedKey_0_ce1;
        else 
            expandedKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_we0_assign_proc : process(grp_expandKey_fu_572_expandedKey_0_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_we0 <= grp_expandKey_fu_572_expandedKey_0_we0;
        else 
            expandedKey_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_we1_assign_proc : process(grp_expandKey_fu_572_expandedKey_0_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_0_we1 <= grp_expandKey_fu_572_expandedKey_0_we1;
        else 
            expandedKey_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_address0_assign_proc : process(grp_aes_main_fu_561_expandedKey_1_address0, grp_expandKey_fu_572_expandedKey_1_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_address0 <= grp_expandKey_fu_572_expandedKey_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_1_address0 <= grp_aes_main_fu_561_expandedKey_1_address0;
        else 
            expandedKey_1_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_address1_assign_proc : process(grp_aes_main_fu_561_expandedKey_1_address1, grp_expandKey_fu_572_expandedKey_1_address1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_address1 <= grp_expandKey_fu_572_expandedKey_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_1_address1 <= grp_aes_main_fu_561_expandedKey_1_address1;
        else 
            expandedKey_1_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_ce0_assign_proc : process(grp_aes_main_fu_561_expandedKey_1_ce0, grp_expandKey_fu_572_expandedKey_1_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_ce0 <= grp_expandKey_fu_572_expandedKey_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_1_ce0 <= grp_aes_main_fu_561_expandedKey_1_ce0;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(grp_aes_main_fu_561_expandedKey_1_ce1, grp_expandKey_fu_572_expandedKey_1_ce1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_ce1 <= grp_expandKey_fu_572_expandedKey_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_1_ce1 <= grp_aes_main_fu_561_expandedKey_1_ce1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_we0_assign_proc : process(grp_expandKey_fu_572_expandedKey_1_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_we0 <= grp_expandKey_fu_572_expandedKey_1_we0;
        else 
            expandedKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_we1_assign_proc : process(grp_expandKey_fu_572_expandedKey_1_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_1_we1 <= grp_expandKey_fu_572_expandedKey_1_we1;
        else 
            expandedKey_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_address0_assign_proc : process(grp_aes_main_fu_561_expandedKey_2_address0, grp_expandKey_fu_572_expandedKey_2_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_2_address0 <= grp_expandKey_fu_572_expandedKey_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_2_address0 <= grp_aes_main_fu_561_expandedKey_2_address0;
        else 
            expandedKey_2_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_2_ce0_assign_proc : process(grp_aes_main_fu_561_expandedKey_2_ce0, grp_expandKey_fu_572_expandedKey_2_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_2_ce0 <= grp_expandKey_fu_572_expandedKey_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_2_ce0 <= grp_aes_main_fu_561_expandedKey_2_ce0;
        else 
            expandedKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_ce1_assign_proc : process(grp_aes_main_fu_561_expandedKey_2_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_2_ce1 <= grp_aes_main_fu_561_expandedKey_2_ce1;
        else 
            expandedKey_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_we0_assign_proc : process(grp_expandKey_fu_572_expandedKey_2_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_2_we0 <= grp_expandKey_fu_572_expandedKey_2_we0;
        else 
            expandedKey_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_address0_assign_proc : process(grp_aes_main_fu_561_expandedKey_3_address0, grp_expandKey_fu_572_expandedKey_3_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_address0 <= grp_expandKey_fu_572_expandedKey_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_3_address0 <= grp_aes_main_fu_561_expandedKey_3_address0;
        else 
            expandedKey_3_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_address1_assign_proc : process(grp_aes_main_fu_561_expandedKey_3_address1, grp_expandKey_fu_572_expandedKey_3_address1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_address1 <= grp_expandKey_fu_572_expandedKey_3_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_3_address1 <= grp_aes_main_fu_561_expandedKey_3_address1;
        else 
            expandedKey_3_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_ce0_assign_proc : process(grp_aes_main_fu_561_expandedKey_3_ce0, grp_expandKey_fu_572_expandedKey_3_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_ce0 <= grp_expandKey_fu_572_expandedKey_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_3_ce0 <= grp_aes_main_fu_561_expandedKey_3_ce0;
        else 
            expandedKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_ce1_assign_proc : process(grp_aes_main_fu_561_expandedKey_3_ce1, grp_expandKey_fu_572_expandedKey_3_ce1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_ce1 <= grp_expandKey_fu_572_expandedKey_3_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_3_ce1 <= grp_aes_main_fu_561_expandedKey_3_ce1;
        else 
            expandedKey_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_we0_assign_proc : process(grp_expandKey_fu_572_expandedKey_3_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_we0 <= grp_expandKey_fu_572_expandedKey_3_we0;
        else 
            expandedKey_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_we1_assign_proc : process(grp_expandKey_fu_572_expandedKey_3_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_3_we1 <= grp_expandKey_fu_572_expandedKey_3_we1;
        else 
            expandedKey_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_main_fu_561_ap_start <= grp_aes_main_fu_561_ap_start_reg;
    grp_expandKey_fu_572_ap_start <= grp_expandKey_fu_572_ap_start_reg;
    i_2_fu_704_p2 <= std_logic_vector(unsigned(i_1_reg_539) + unsigned(ap_const_lv3_1));
    i_fu_610_p2 <= std_logic_vector(unsigned(i_0_reg_517) + unsigned(ap_const_lv3_1));
    icmp_ln49_fu_604_p2 <= "1" when (i_0_reg_517 = ap_const_lv3_4) else "0";
    icmp_ln52_fu_632_p2 <= "1" when (j_0_reg_528 = ap_const_lv3_4) else "0";
    icmp_ln65_fu_698_p2 <= "1" when (i_1_reg_539 = ap_const_lv3_4) else "0";
    icmp_ln68_fu_726_p2 <= "1" when (j_1_reg_550 = ap_const_lv3_4) else "0";
    j_2_fu_732_p2 <= std_logic_vector(unsigned(j_1_reg_550) + unsigned(ap_const_lv3_1));
    j_fu_638_p2 <= std_logic_vector(unsigned(j_0_reg_528) + unsigned(ap_const_lv3_1));
    output_0 <= block_q0;

    output_0_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_0 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_0_ap_vld <= ap_const_logic_1;
        else 
            output_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_1 <= block_q0;
    output_10 <= block_q0;

    output_10_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_A = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_10_ap_vld <= ap_const_logic_1;
        else 
            output_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_11 <= block_q0;

    output_11_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_B = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_11_ap_vld <= ap_const_logic_1;
        else 
            output_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_12 <= block_q0;

    output_12_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_C = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_12_ap_vld <= ap_const_logic_1;
        else 
            output_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_13 <= block_q0;

    output_13_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_D = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_13_ap_vld <= ap_const_logic_1;
        else 
            output_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_14 <= block_q0;

    output_14_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_E = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_14_ap_vld <= ap_const_logic_1;
        else 
            output_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_15 <= block_q0;

    output_15_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_F = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_15_ap_vld <= ap_const_logic_1;
        else 
            output_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_1 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_1_ap_vld <= ap_const_logic_1;
        else 
            output_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_2 <= block_q0;

    output_2_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_2 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_2_ap_vld <= ap_const_logic_1;
        else 
            output_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_3 <= block_q0;

    output_3_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_3 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_3_ap_vld <= ap_const_logic_1;
        else 
            output_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_4 <= block_q0;

    output_4_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_4 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_4_ap_vld <= ap_const_logic_1;
        else 
            output_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_5 <= block_q0;

    output_5_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_5 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_5_ap_vld <= ap_const_logic_1;
        else 
            output_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_6 <= block_q0;

    output_6_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_6 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_6_ap_vld <= ap_const_logic_1;
        else 
            output_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_7 <= block_q0;

    output_7_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_7 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_7_ap_vld <= ap_const_logic_1;
        else 
            output_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_8 <= block_q0;

    output_8_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_8 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_8_ap_vld <= ap_const_logic_1;
        else 
            output_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_9 <= block_q0;

    output_9_ap_vld_assign_proc : process(add_ln70_1_reg_982, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv4_9 = add_ln70_1_reg_982) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_9_ap_vld <= ap_const_logic_1;
        else 
            output_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_714_p3 <= (trunc_ln70_fu_710_p1 & ap_const_lv2_0);
    shl_ln54_1_fu_676_p3 <= (trunc_ln54_1_fu_672_p1 & ap_const_lv2_0);
    shl_ln70_1_fu_742_p3 <= (trunc_ln70_1_fu_738_p1 & ap_const_lv2_0);
    shl_ln_fu_620_p3 <= (trunc_ln54_fu_616_p1 & ap_const_lv2_0);
    tmp_fu_649_p17 <= std_logic_vector(unsigned(zext_ln52_fu_628_p1) + unsigned(shl_ln_reg_938));
    trunc_ln54_1_fu_672_p1 <= j_0_reg_528(2 - 1 downto 0);
    trunc_ln54_fu_616_p1 <= i_0_reg_517(2 - 1 downto 0);
    trunc_ln70_1_fu_738_p1 <= j_1_reg_550(2 - 1 downto 0);
    trunc_ln70_fu_710_p1 <= i_1_reg_539(2 - 1 downto 0);
    zext_ln49_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_517),4));
    zext_ln52_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_528),4));
    zext_ln54_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_684_p2),64));
    zext_ln65_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_539),4));
    zext_ln68_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_550),4));
    zext_ln70_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_750_p2),64));
end behav;
