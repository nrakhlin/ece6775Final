-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln47_fu_266_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln47_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_276_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_523 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_286_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln47_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln63_fu_360_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_reg_541 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_380_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_554 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln63_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_398_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_562 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln66_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_1_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_1_reg_572 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce0 : STD_LOGIC;
    signal expandedKey_we0 : STD_LOGIC;
    signal expandedKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce1 : STD_LOGIC;
    signal expandedKey_we1 : STD_LOGIC;
    signal expandedKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_247_ap_start : STD_LOGIC;
    signal grp_aes_main_fu_247_ap_done : STD_LOGIC;
    signal grp_aes_main_fu_247_ap_idle : STD_LOGIC;
    signal grp_aes_main_fu_247_ap_ready : STD_LOGIC;
    signal grp_aes_main_fu_247_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_247_state_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_247_state_we0 : STD_LOGIC;
    signal grp_aes_main_fu_247_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_247_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_247_state_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_247_state_we1 : STD_LOGIC;
    signal grp_aes_main_fu_247_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_247_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_247_expandedKey_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_247_expandedKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_247_expandedKey_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_255_ap_start : STD_LOGIC;
    signal grp_expandKey_fu_255_ap_done : STD_LOGIC;
    signal grp_expandKey_fu_255_ap_idle : STD_LOGIC;
    signal grp_expandKey_fu_255_ap_ready : STD_LOGIC;
    signal grp_expandKey_fu_255_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_255_expandedKey_ce0 : STD_LOGIC;
    signal grp_expandKey_fu_255_expandedKey_we0 : STD_LOGIC;
    signal grp_expandKey_fu_255_expandedKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_255_expandedKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_255_expandedKey_ce1 : STD_LOGIC;
    signal grp_expandKey_fu_255_expandedKey_we1 : STD_LOGIC;
    signal grp_expandKey_fu_255_expandedKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expandKey_fu_255_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_expandKey_fu_255_key_ce0 : STD_LOGIC;
    signal i_0_reg_203 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln50_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_214 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes_main_fu_247_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_expandKey_fu_255_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln52_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_315_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_fu_282_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln50_fu_294_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_315_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln52_1_fu_338_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln52_1_fu_342_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_1_fu_350_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln68_fu_376_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln68_1_fu_404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln68_1_fu_408_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_fu_416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln66_fu_388_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component aes_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce1 : OUT STD_LOGIC;
        expandedKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expandKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_we0 : OUT STD_LOGIC;
        expandedKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce1 : OUT STD_LOGIC;
        expandedKey_we1 : OUT STD_LOGIC;
        expandedKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component encrypt_dut_mux_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_expanbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component aes_encrypt_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => block_d0,
        q0 => block_q0,
        address1 => grp_aes_main_fu_247_state_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_aes_main_fu_247_state_d1,
        q1 => block_q1);

    expandedKey_U : component aes_encrypt_expanbkb
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expandedKey_address0,
        ce0 => expandedKey_ce0,
        we0 => expandedKey_we0,
        d0 => grp_expandKey_fu_255_expandedKey_d0,
        q0 => expandedKey_q0,
        address1 => expandedKey_address1,
        ce1 => expandedKey_ce1,
        we1 => expandedKey_we1,
        d1 => grp_expandKey_fu_255_expandedKey_d1,
        q1 => expandedKey_q1);

    grp_aes_main_fu_247 : component aes_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_main_fu_247_ap_start,
        ap_done => grp_aes_main_fu_247_ap_done,
        ap_idle => grp_aes_main_fu_247_ap_idle,
        ap_ready => grp_aes_main_fu_247_ap_ready,
        state_address0 => grp_aes_main_fu_247_state_address0,
        state_ce0 => grp_aes_main_fu_247_state_ce0,
        state_we0 => grp_aes_main_fu_247_state_we0,
        state_d0 => grp_aes_main_fu_247_state_d0,
        state_q0 => block_q0,
        state_address1 => grp_aes_main_fu_247_state_address1,
        state_ce1 => grp_aes_main_fu_247_state_ce1,
        state_we1 => grp_aes_main_fu_247_state_we1,
        state_d1 => grp_aes_main_fu_247_state_d1,
        state_q1 => block_q1,
        expandedKey_address0 => grp_aes_main_fu_247_expandedKey_address0,
        expandedKey_ce0 => grp_aes_main_fu_247_expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        expandedKey_address1 => grp_aes_main_fu_247_expandedKey_address1,
        expandedKey_ce1 => grp_aes_main_fu_247_expandedKey_ce1,
        expandedKey_q1 => expandedKey_q1);

    grp_expandKey_fu_255 : component expandKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_expandKey_fu_255_ap_start,
        ap_done => grp_expandKey_fu_255_ap_done,
        ap_idle => grp_expandKey_fu_255_ap_idle,
        ap_ready => grp_expandKey_fu_255_ap_ready,
        expandedKey_address0 => grp_expandKey_fu_255_expandedKey_address0,
        expandedKey_ce0 => grp_expandKey_fu_255_expandedKey_ce0,
        expandedKey_we0 => grp_expandKey_fu_255_expandedKey_we0,
        expandedKey_d0 => grp_expandKey_fu_255_expandedKey_d0,
        expandedKey_q0 => expandedKey_q0,
        expandedKey_address1 => grp_expandKey_fu_255_expandedKey_address1,
        expandedKey_ce1 => grp_expandKey_fu_255_expandedKey_ce1,
        expandedKey_we1 => grp_expandKey_fu_255_expandedKey_we1,
        expandedKey_d1 => grp_expandKey_fu_255_expandedKey_d1,
        expandedKey_q1 => expandedKey_q1,
        key_address0 => grp_expandKey_fu_255_key_address0,
        key_ce0 => grp_expandKey_fu_255_key_ce0,
        key_q0 => key_q0);

    encrypt_dut_mux_1cud_U50 : component encrypt_dut_mux_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => input_0_read,
        din1 => input_1_read,
        din2 => input_2_read,
        din3 => input_3_read,
        din4 => input_4_read,
        din5 => input_5_read,
        din6 => input_6_read,
        din7 => input_7_read,
        din8 => input_8_read,
        din9 => input_9_read,
        din10 => input_10_read,
        din11 => input_11_read,
        din12 => input_12_read,
        din13 => input_13_read,
        din14 => input_14_read,
        din15 => input_15_read,
        din16 => tmp_fu_315_p17,
        dout => tmp_fu_315_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_main_fu_247_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_main_fu_247_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_main_fu_247_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_main_fu_247_ap_ready = ap_const_logic_1)) then 
                    grp_aes_main_fu_247_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_expandKey_fu_255_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_expandKey_fu_255_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_270_p2 = ap_const_lv1_1))) then 
                    grp_expandKey_fu_255_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expandKey_fu_255_ap_ready = ap_const_logic_1)) then 
                    grp_expandKey_fu_255_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_203 <= i_reg_523;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_203 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln66_fu_392_p2 = ap_const_lv1_1))) then 
                i_1_reg_225 <= i_2_reg_549;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_main_fu_247_ap_done = ap_const_logic_1))) then 
                i_1_reg_225 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_270_p2 = ap_const_lv1_0))) then 
                j_0_reg_214 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_298_p2 = ap_const_lv1_0))) then 
                j_0_reg_214 <= j_fu_304_p2;
            end if; 
        end if;
    end process;

    j_1_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_364_p2 = ap_const_lv1_0))) then 
                j_1_reg_236 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_236 <= j_2_reg_562;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln66_fu_392_p2 = ap_const_lv1_0))) then
                add_ln68_1_reg_572 <= add_ln68_1_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_549 <= i_2_fu_370_p2;
                    zext_ln63_reg_541(2 downto 0) <= zext_ln63_fu_360_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_523 <= i_fu_276_p2;
                    zext_ln47_reg_515(2 downto 0) <= zext_ln47_fu_266_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_2_reg_562 <= j_2_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_364_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_554(3 downto 2) <= shl_ln1_fu_380_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_270_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_528(3 downto 2) <= shl_ln_fu_286_p3(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln47_reg_515(3) <= '0';
    shl_ln_reg_528(1 downto 0) <= "00";
    zext_ln63_reg_541(3) <= '0';
    shl_ln1_reg_554(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln47_fu_270_p2, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln63_fu_364_p2, ap_CS_fsm_state8, icmp_ln66_fu_392_p2, grp_aes_main_fu_247_ap_done, grp_expandKey_fu_255_ap_done, icmp_ln50_fu_298_p2, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_270_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln50_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_expandKey_fu_255_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_main_fu_247_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln66_fu_392_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln52_1_fu_350_p2 <= std_logic_vector(unsigned(zext_ln47_reg_515) + unsigned(shl_ln52_1_fu_342_p3));
    add_ln68_1_fu_426_p2 <= std_logic_vector(unsigned(zext_ln66_fu_388_p1) + unsigned(shl_ln1_reg_554));
    add_ln68_fu_416_p2 <= std_logic_vector(unsigned(shl_ln68_1_fu_408_p3) + unsigned(zext_ln63_reg_541));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln63_fu_364_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_364_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln63_fu_364_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_364_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_aes_main_fu_247_state_address0, ap_CS_fsm_state6, zext_ln52_fu_355_p1, zext_ln68_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            block_address0 <= zext_ln68_fu_421_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_address0 <= zext_ln52_fu_355_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= grp_aes_main_fu_247_state_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_aes_main_fu_247_state_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce0 <= grp_aes_main_fu_247_state_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_aes_main_fu_247_state_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce1 <= grp_aes_main_fu_247_state_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_d0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_247_state_d0, ap_CS_fsm_state6, tmp_fu_315_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_d0 <= tmp_fu_315_p18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_d0 <= grp_aes_main_fu_247_state_d0;
        else 
            block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_we0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_247_state_we0, icmp_ln50_fu_298_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_298_p2 = ap_const_lv1_0))) then 
            block_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we0 <= grp_aes_main_fu_247_state_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_aes_main_fu_247_state_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we1 <= grp_aes_main_fu_247_state_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_address0_assign_proc : process(grp_aes_main_fu_247_expandedKey_address0, grp_expandKey_fu_255_expandedKey_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address0 <= grp_expandKey_fu_255_expandedKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address0 <= grp_aes_main_fu_247_expandedKey_address0;
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_address1_assign_proc : process(grp_aes_main_fu_247_expandedKey_address1, grp_expandKey_fu_255_expandedKey_address1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address1 <= grp_expandKey_fu_255_expandedKey_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address1 <= grp_aes_main_fu_247_expandedKey_address1;
        else 
            expandedKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(grp_aes_main_fu_247_expandedKey_ce0, grp_expandKey_fu_255_expandedKey_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_ce0 <= grp_expandKey_fu_255_expandedKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_ce0 <= grp_aes_main_fu_247_expandedKey_ce0;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_ce1_assign_proc : process(grp_aes_main_fu_247_expandedKey_ce1, grp_expandKey_fu_255_expandedKey_ce1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_ce1 <= grp_expandKey_fu_255_expandedKey_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_ce1 <= grp_aes_main_fu_247_expandedKey_ce1;
        else 
            expandedKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_we0_assign_proc : process(grp_expandKey_fu_255_expandedKey_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_we0 <= grp_expandKey_fu_255_expandedKey_we0;
        else 
            expandedKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_we1_assign_proc : process(grp_expandKey_fu_255_expandedKey_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_we1 <= grp_expandKey_fu_255_expandedKey_we1;
        else 
            expandedKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_main_fu_247_ap_start <= grp_aes_main_fu_247_ap_start_reg;
    grp_expandKey_fu_255_ap_start <= grp_expandKey_fu_255_ap_start_reg;
    i_2_fu_370_p2 <= std_logic_vector(unsigned(i_1_reg_225) + unsigned(ap_const_lv3_1));
    i_fu_276_p2 <= std_logic_vector(unsigned(i_0_reg_203) + unsigned(ap_const_lv3_1));
    icmp_ln47_fu_270_p2 <= "1" when (i_0_reg_203 = ap_const_lv3_4) else "0";
    icmp_ln50_fu_298_p2 <= "1" when (j_0_reg_214 = ap_const_lv3_4) else "0";
    icmp_ln63_fu_364_p2 <= "1" when (i_1_reg_225 = ap_const_lv3_4) else "0";
    icmp_ln66_fu_392_p2 <= "1" when (j_1_reg_236 = ap_const_lv3_4) else "0";
    j_2_fu_398_p2 <= std_logic_vector(unsigned(j_1_reg_236) + unsigned(ap_const_lv3_1));
    j_fu_304_p2 <= std_logic_vector(unsigned(j_0_reg_214) + unsigned(ap_const_lv3_1));
    key_address0 <= grp_expandKey_fu_255_key_address0;
    key_ce0 <= grp_expandKey_fu_255_key_ce0;
    output_r_address0 <= zext_ln68_1_fu_431_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= block_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_380_p3 <= (trunc_ln68_fu_376_p1 & ap_const_lv2_0);
    shl_ln52_1_fu_342_p3 <= (trunc_ln52_1_fu_338_p1 & ap_const_lv2_0);
    shl_ln68_1_fu_408_p3 <= (trunc_ln68_1_fu_404_p1 & ap_const_lv2_0);
    shl_ln_fu_286_p3 <= (trunc_ln52_fu_282_p1 & ap_const_lv2_0);
    tmp_fu_315_p17 <= std_logic_vector(unsigned(zext_ln50_fu_294_p1) + unsigned(shl_ln_reg_528));
    trunc_ln52_1_fu_338_p1 <= j_0_reg_214(2 - 1 downto 0);
    trunc_ln52_fu_282_p1 <= i_0_reg_203(2 - 1 downto 0);
    trunc_ln68_1_fu_404_p1 <= j_1_reg_236(2 - 1 downto 0);
    trunc_ln68_fu_376_p1 <= i_1_reg_225(2 - 1 downto 0);
    zext_ln47_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_203),4));
    zext_ln50_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_214),4));
    zext_ln52_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_fu_350_p2),64));
    zext_ln63_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_225),4));
    zext_ln66_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_236),4));
    zext_ln68_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_1_reg_572),64));
    zext_ln68_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_416_p2),64));
end behav;
