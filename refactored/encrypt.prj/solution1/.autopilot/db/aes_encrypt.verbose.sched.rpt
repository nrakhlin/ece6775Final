

================================================================
== Vivado HLS Report for 'aes_encrypt'
================================================================
* Date:           Mon Dec  9 22:58:07 2024

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        encrypt.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.804 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      487|      487| 4.870 us | 4.870 us |  487|  487|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |             |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1     |       24|       24|         6|          -|          -|     4|    no    |
        | + Loop 1.1  |        4|        4|         1|          -|          -|     4|    no    |
        |- Loop 2     |       40|       40|        10|          -|          -|     4|    no    |
        | + Loop 2.1  |        8|        8|         2|          -|          -|     4|    no    |
        +-------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 4 3 
3 --> 3 2 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 7 
9 --> 8 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%key_15_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_15_read)"   --->   Operation 10 'read' 'key_15_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%key_14_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_14_read)"   --->   Operation 11 'read' 'key_14_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%key_13_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_13_read)"   --->   Operation 12 'read' 'key_13_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%key_12_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_12_read)"   --->   Operation 13 'read' 'key_12_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%key_11_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_11_read)"   --->   Operation 14 'read' 'key_11_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%key_10_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_10_read)"   --->   Operation 15 'read' 'key_10_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%key_9_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_9_read)"   --->   Operation 16 'read' 'key_9_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%key_8_read41 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_8_read)"   --->   Operation 17 'read' 'key_8_read41' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%key_7_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_7_read)"   --->   Operation 18 'read' 'key_7_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%key_6_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_6_read)"   --->   Operation 19 'read' 'key_6_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%key_5_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_5_read)"   --->   Operation 20 'read' 'key_5_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%key_4_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_4_read)"   --->   Operation 21 'read' 'key_4_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%key_3_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_3_read)"   --->   Operation 22 'read' 'key_3_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%key_2_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_2_read)"   --->   Operation 23 'read' 'key_2_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%key_1_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_1_read)"   --->   Operation 24 'read' 'key_1_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%key_0_read_2 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %key_0_read)"   --->   Operation 25 'read' 'key_0_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%input_15_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_15_read)"   --->   Operation 26 'read' 'input_15_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%input_14_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_14_read)"   --->   Operation 27 'read' 'input_14_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%input_13_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_13_read)"   --->   Operation 28 'read' 'input_13_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%input_12_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_12_read)"   --->   Operation 29 'read' 'input_12_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%input_11_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_11_read)"   --->   Operation 30 'read' 'input_11_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%input_10_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_10_read)"   --->   Operation 31 'read' 'input_10_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%input_9_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_9_read)"   --->   Operation 32 'read' 'input_9_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%input_8_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_8_read)"   --->   Operation 33 'read' 'input_8_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%input_7_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_7_read)"   --->   Operation 34 'read' 'input_7_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%input_6_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_6_read)"   --->   Operation 35 'read' 'input_6_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%input_5_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_5_read)"   --->   Operation 36 'read' 'input_5_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%input_4_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_4_read)"   --->   Operation 37 'read' 'input_4_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%input_3_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_3_read)"   --->   Operation 38 'read' 'input_3_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%input_2_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_2_read)"   --->   Operation 39 'read' 'input_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%input_1_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_1_read)"   --->   Operation 40 'read' 'input_1_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%input_0_read_1 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %input_0_read)"   --->   Operation 41 'read' 'input_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%block = alloca [16 x i8], align 16" [encrypt.cpp:44]   --->   Operation 42 'alloca' 'block' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%expandedKey_0 = alloca [44 x i8], align 1" [encrypt.cpp:46]   --->   Operation 43 'alloca' 'expandedKey_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%expandedKey_1 = alloca [44 x i8], align 1" [encrypt.cpp:46]   --->   Operation 44 'alloca' 'expandedKey_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%expandedKey_2 = alloca [44 x i8], align 1" [encrypt.cpp:46]   --->   Operation 45 'alloca' 'expandedKey_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%expandedKey_3 = alloca [44 x i8], align 1" [encrypt.cpp:46]   --->   Operation 46 'alloca' 'expandedKey_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (1.76ns)   --->   "br label %.loopexit49" [encrypt.cpp:49]   --->   Operation 47 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 1.76>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%i_0 = phi i3 [ 0, %0 ], [ %i, %.loopexit49.loopexit ]"   --->   Operation 48 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%zext_ln49 = zext i3 %i_0 to i4" [encrypt.cpp:49]   --->   Operation 49 'zext' 'zext_ln49' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (1.13ns)   --->   "%icmp_ln49 = icmp eq i3 %i_0, -4" [encrypt.cpp:49]   --->   Operation 50 'icmp' 'icmp_ln49' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 51 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (1.65ns)   --->   "%i = add i3 %i_0, 1" [encrypt.cpp:49]   --->   Operation 52 'add' 'i' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "br i1 %icmp_ln49, label %2, label %.preheader1.preheader" [encrypt.cpp:49]   --->   Operation 53 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%trunc_ln54 = trunc i3 %i_0 to i2" [encrypt.cpp:54]   --->   Operation 54 'trunc' 'trunc_ln54' <Predicate = (!icmp_ln49)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%shl_ln = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln54, i2 0)" [encrypt.cpp:54]   --->   Operation 55 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln49)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (1.76ns)   --->   "br label %.preheader1" [encrypt.cpp:52]   --->   Operation 56 'br' <Predicate = (!icmp_ln49)> <Delay = 1.76>
ST_2 : Operation 57 [2/2] (0.00ns)   --->   "call fastcc void @expandKey([44 x i8]* %expandedKey_0, [44 x i8]* %expandedKey_1, [44 x i8]* %expandedKey_2, [44 x i8]* %expandedKey_3, i8 %key_0_read_2, i8 %key_1_read_2, i8 %key_2_read_2, i8 %key_3_read_2, i8 %key_4_read_2, i8 %key_5_read_2, i8 %key_6_read_2, i8 %key_7_read_2, i8 %key_8_read41, i8 %key_9_read_2, i8 %key_10_read_2, i8 %key_11_read_2, i8 %key_12_read_2, i8 %key_13_read_2, i8 %key_14_read_2, i8 %key_15_read_2)" [encrypt.cpp:59]   --->   Operation 57 'call' <Predicate = (icmp_ln49)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 6.12>
ST_3 : Operation 58 [1/1] (0.00ns)   --->   "%j_0 = phi i3 [ %j, %1 ], [ 0, %.preheader1.preheader ]"   --->   Operation 58 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln52 = zext i3 %j_0 to i4" [encrypt.cpp:52]   --->   Operation 59 'zext' 'zext_ln52' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 60 [1/1] (1.13ns)   --->   "%icmp_ln52 = icmp eq i3 %j_0, -4" [encrypt.cpp:52]   --->   Operation 60 'icmp' 'icmp_ln52' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "%empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 61 'speclooptripcount' 'empty_14' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (1.65ns)   --->   "%j = add i3 %j_0, 1" [encrypt.cpp:52]   --->   Operation 62 'add' 'j' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "br i1 %icmp_ln52, label %.loopexit49.loopexit, label %1" [encrypt.cpp:52]   --->   Operation 63 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (1.73ns)   --->   "%add_ln54 = add i4 %zext_ln52, %shl_ln" [encrypt.cpp:54]   --->   Operation 64 'add' 'add_ln54' <Predicate = (!icmp_ln52)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 65 [1/1] (2.06ns)   --->   "%tmp = call i8 @_ssdm_op_Mux.ap_auto.16i8.i4(i8 %input_0_read_1, i8 %input_1_read_1, i8 %input_2_read_1, i8 %input_3_read_1, i8 %input_4_read_1, i8 %input_5_read_1, i8 %input_6_read_1, i8 %input_7_read_1, i8 %input_8_read_1, i8 %input_9_read_1, i8 %input_10_read_1, i8 %input_11_read_1, i8 %input_12_read_1, i8 %input_13_read_1, i8 %input_14_read_1, i8 %input_15_read_1, i4 %add_ln54)" [encrypt.cpp:54]   --->   Operation 65 'mux' 'tmp' <Predicate = (!icmp_ln52)> <Delay = 2.06> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 2.06> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "%trunc_ln54_1 = trunc i3 %j_0 to i2" [encrypt.cpp:54]   --->   Operation 66 'trunc' 'trunc_ln54_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "%shl_ln54_1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln54_1, i2 0)" [encrypt.cpp:54]   --->   Operation 67 'bitconcatenate' 'shl_ln54_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (1.73ns)   --->   "%add_ln54_1 = add i4 %zext_ln49, %shl_ln54_1" [encrypt.cpp:54]   --->   Operation 68 'add' 'add_ln54_1' <Predicate = (!icmp_ln52)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "%zext_ln54 = zext i4 %add_ln54_1 to i64" [encrypt.cpp:54]   --->   Operation 69 'zext' 'zext_ln54' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "%block_addr = getelementptr inbounds [16 x i8]* %block, i64 0, i64 %zext_ln54" [encrypt.cpp:54]   --->   Operation 70 'getelementptr' 'block_addr' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (2.32ns)   --->   "store i8 %tmp, i8* %block_addr, align 1" [encrypt.cpp:54]   --->   Operation 71 'store' <Predicate = (!icmp_ln52)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "br label %.preheader1" [encrypt.cpp:52]   --->   Operation 72 'br' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.00ns)   --->   "br label %.loopexit49"   --->   Operation 73 'br' <Predicate = (icmp_ln52)> <Delay = 0.00>

State 4 <SV = 2> <Delay = 0.00>
ST_4 : Operation 74 [1/2] (0.00ns)   --->   "call fastcc void @expandKey([44 x i8]* %expandedKey_0, [44 x i8]* %expandedKey_1, [44 x i8]* %expandedKey_2, [44 x i8]* %expandedKey_3, i8 %key_0_read_2, i8 %key_1_read_2, i8 %key_2_read_2, i8 %key_3_read_2, i8 %key_4_read_2, i8 %key_5_read_2, i8 %key_6_read_2, i8 %key_7_read_2, i8 %key_8_read41, i8 %key_9_read_2, i8 %key_10_read_2, i8 %key_11_read_2, i8 %key_12_read_2, i8 %key_13_read_2, i8 %key_14_read_2, i8 %key_15_read_2)" [encrypt.cpp:59]   --->   Operation 74 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 3> <Delay = 0.00>
ST_5 : Operation 75 [2/2] (0.00ns)   --->   "call fastcc void @aes_main([16 x i8]* %block, [44 x i8]* %expandedKey_0, [44 x i8]* %expandedKey_1, [44 x i8]* %expandedKey_2, [44 x i8]* %expandedKey_3)" [encrypt.cpp:62]   --->   Operation 75 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 4> <Delay = 1.76>
ST_6 : Operation 76 [1/2] (0.00ns)   --->   "call fastcc void @aes_main([16 x i8]* %block, [44 x i8]* %expandedKey_0, [44 x i8]* %expandedKey_1, [44 x i8]* %expandedKey_2, [44 x i8]* %expandedKey_3)" [encrypt.cpp:62]   --->   Operation 76 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 77 [1/1] (1.76ns)   --->   "br label %.loopexit" [encrypt.cpp:65]   --->   Operation 77 'br' <Predicate = true> <Delay = 1.76>

State 7 <SV = 5> <Delay = 1.76>
ST_7 : Operation 78 [1/1] (0.00ns)   --->   "%i_1 = phi i3 [ 0, %2 ], [ %i_2, %.loopexit.loopexit ]"   --->   Operation 78 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 79 [1/1] (0.00ns)   --->   "%zext_ln65 = zext i3 %i_1 to i4" [encrypt.cpp:65]   --->   Operation 79 'zext' 'zext_ln65' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 80 [1/1] (1.13ns)   --->   "%icmp_ln65 = icmp eq i3 %i_1, -4" [encrypt.cpp:65]   --->   Operation 80 'icmp' 'icmp_ln65' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 81 [1/1] (0.00ns)   --->   "%empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 81 'speclooptripcount' 'empty_15' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 82 [1/1] (1.65ns)   --->   "%i_2 = add i3 %i_1, 1" [encrypt.cpp:65]   --->   Operation 82 'add' 'i_2' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 83 [1/1] (0.00ns)   --->   "br i1 %icmp_ln65, label %5, label %.preheader.preheader" [encrypt.cpp:65]   --->   Operation 83 'br' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 84 [1/1] (0.00ns)   --->   "%trunc_ln70 = trunc i3 %i_1 to i2" [encrypt.cpp:70]   --->   Operation 84 'trunc' 'trunc_ln70' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_7 : Operation 85 [1/1] (0.00ns)   --->   "%shl_ln1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln70, i2 0)" [encrypt.cpp:70]   --->   Operation 85 'bitconcatenate' 'shl_ln1' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_7 : Operation 86 [1/1] (1.76ns)   --->   "br label %.preheader" [encrypt.cpp:68]   --->   Operation 86 'br' <Predicate = (!icmp_ln65)> <Delay = 1.76>
ST_7 : Operation 87 [1/1] (0.00ns)   --->   "ret void" [encrypt.cpp:73]   --->   Operation 87 'ret' <Predicate = (icmp_ln65)> <Delay = 0.00>

State 8 <SV = 6> <Delay = 4.05>
ST_8 : Operation 88 [1/1] (0.00ns)   --->   "%j_1 = phi i3 [ %j_2, %4 ], [ 0, %.preheader.preheader ]"   --->   Operation 88 'phi' 'j_1' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 89 [1/1] (0.00ns)   --->   "%zext_ln68 = zext i3 %j_1 to i4" [encrypt.cpp:68]   --->   Operation 89 'zext' 'zext_ln68' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 90 [1/1] (1.13ns)   --->   "%icmp_ln68 = icmp eq i3 %j_1, -4" [encrypt.cpp:68]   --->   Operation 90 'icmp' 'icmp_ln68' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 91 [1/1] (0.00ns)   --->   "%empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 91 'speclooptripcount' 'empty_16' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 92 [1/1] (1.65ns)   --->   "%j_2 = add i3 %j_1, 1" [encrypt.cpp:68]   --->   Operation 92 'add' 'j_2' <Predicate = true> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 93 [1/1] (0.00ns)   --->   "br i1 %icmp_ln68, label %.loopexit.loopexit, label %3" [encrypt.cpp:68]   --->   Operation 93 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 94 [1/1] (0.00ns)   --->   "%trunc_ln70_1 = trunc i3 %j_1 to i2" [encrypt.cpp:70]   --->   Operation 94 'trunc' 'trunc_ln70_1' <Predicate = (!icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 95 [1/1] (0.00ns)   --->   "%shl_ln70_1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %trunc_ln70_1, i2 0)" [encrypt.cpp:70]   --->   Operation 95 'bitconcatenate' 'shl_ln70_1' <Predicate = (!icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 96 [1/1] (1.73ns)   --->   "%add_ln70 = add i4 %zext_ln65, %shl_ln70_1" [encrypt.cpp:70]   --->   Operation 96 'add' 'add_ln70' <Predicate = (!icmp_ln68)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 97 [1/1] (0.00ns)   --->   "%zext_ln70 = zext i4 %add_ln70 to i64" [encrypt.cpp:70]   --->   Operation 97 'zext' 'zext_ln70' <Predicate = (!icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 98 [1/1] (0.00ns)   --->   "%block_addr_1 = getelementptr inbounds [16 x i8]* %block, i64 0, i64 %zext_ln70" [encrypt.cpp:70]   --->   Operation 98 'getelementptr' 'block_addr_1' <Predicate = (!icmp_ln68)> <Delay = 0.00>
ST_8 : Operation 99 [2/2] (2.32ns)   --->   "%block_load = load i8* %block_addr_1, align 1" [encrypt.cpp:70]   --->   Operation 99 'load' 'block_load' <Predicate = (!icmp_ln68)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_8 : Operation 100 [1/1] (1.73ns)   --->   "%add_ln70_1 = add i4 %zext_ln68, %shl_ln1" [encrypt.cpp:70]   --->   Operation 100 'add' 'add_ln70_1' <Predicate = (!icmp_ln68)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 101 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 101 'br' <Predicate = (icmp_ln68)> <Delay = 0.00>

State 9 <SV = 7> <Delay = 2.32>
ST_9 : Operation 102 [1/2] (2.32ns)   --->   "%block_load = load i8* %block_addr_1, align 1" [encrypt.cpp:70]   --->   Operation 102 'load' 'block_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_9 : Operation 103 [1/1] (1.42ns)   --->   "switch i4 %add_ln70_1, label %branch15 [
    i4 0, label %branch0
    i4 1, label %branch1
    i4 2, label %branch2
    i4 3, label %branch3
    i4 4, label %branch4
    i4 5, label %branch5
    i4 6, label %branch6
    i4 7, label %branch7
    i4 -8, label %branch8
    i4 -7, label %branch9
    i4 -6, label %branch10
    i4 -5, label %branch11
    i4 -4, label %branch12
    i4 -3, label %branch13
    i4 -2, label %branch14
  ]" [encrypt.cpp:70]   --->   Operation 103 'switch' <Predicate = true> <Delay = 1.42>
ST_9 : Operation 104 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_14, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 104 'write' <Predicate = (add_ln70_1 == 14)> <Delay = 0.00>
ST_9 : Operation 105 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 105 'br' <Predicate = (add_ln70_1 == 14)> <Delay = 0.00>
ST_9 : Operation 106 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_13, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 106 'write' <Predicate = (add_ln70_1 == 13)> <Delay = 0.00>
ST_9 : Operation 107 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 107 'br' <Predicate = (add_ln70_1 == 13)> <Delay = 0.00>
ST_9 : Operation 108 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_12, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 108 'write' <Predicate = (add_ln70_1 == 12)> <Delay = 0.00>
ST_9 : Operation 109 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 109 'br' <Predicate = (add_ln70_1 == 12)> <Delay = 0.00>
ST_9 : Operation 110 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_11, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 110 'write' <Predicate = (add_ln70_1 == 11)> <Delay = 0.00>
ST_9 : Operation 111 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 111 'br' <Predicate = (add_ln70_1 == 11)> <Delay = 0.00>
ST_9 : Operation 112 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_10, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 112 'write' <Predicate = (add_ln70_1 == 10)> <Delay = 0.00>
ST_9 : Operation 113 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 113 'br' <Predicate = (add_ln70_1 == 10)> <Delay = 0.00>
ST_9 : Operation 114 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_9, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 114 'write' <Predicate = (add_ln70_1 == 9)> <Delay = 0.00>
ST_9 : Operation 115 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 115 'br' <Predicate = (add_ln70_1 == 9)> <Delay = 0.00>
ST_9 : Operation 116 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_8, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 116 'write' <Predicate = (add_ln70_1 == 8)> <Delay = 0.00>
ST_9 : Operation 117 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 117 'br' <Predicate = (add_ln70_1 == 8)> <Delay = 0.00>
ST_9 : Operation 118 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_7, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 118 'write' <Predicate = (add_ln70_1 == 7)> <Delay = 0.00>
ST_9 : Operation 119 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 119 'br' <Predicate = (add_ln70_1 == 7)> <Delay = 0.00>
ST_9 : Operation 120 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_6, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 120 'write' <Predicate = (add_ln70_1 == 6)> <Delay = 0.00>
ST_9 : Operation 121 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 121 'br' <Predicate = (add_ln70_1 == 6)> <Delay = 0.00>
ST_9 : Operation 122 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_5, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 122 'write' <Predicate = (add_ln70_1 == 5)> <Delay = 0.00>
ST_9 : Operation 123 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 123 'br' <Predicate = (add_ln70_1 == 5)> <Delay = 0.00>
ST_9 : Operation 124 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_4, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 124 'write' <Predicate = (add_ln70_1 == 4)> <Delay = 0.00>
ST_9 : Operation 125 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 125 'br' <Predicate = (add_ln70_1 == 4)> <Delay = 0.00>
ST_9 : Operation 126 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_3, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 126 'write' <Predicate = (add_ln70_1 == 3)> <Delay = 0.00>
ST_9 : Operation 127 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 127 'br' <Predicate = (add_ln70_1 == 3)> <Delay = 0.00>
ST_9 : Operation 128 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_2, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 128 'write' <Predicate = (add_ln70_1 == 2)> <Delay = 0.00>
ST_9 : Operation 129 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 129 'br' <Predicate = (add_ln70_1 == 2)> <Delay = 0.00>
ST_9 : Operation 130 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_1, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 130 'write' <Predicate = (add_ln70_1 == 1)> <Delay = 0.00>
ST_9 : Operation 131 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 131 'br' <Predicate = (add_ln70_1 == 1)> <Delay = 0.00>
ST_9 : Operation 132 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_0, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 132 'write' <Predicate = (add_ln70_1 == 0)> <Delay = 0.00>
ST_9 : Operation 133 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 133 'br' <Predicate = (add_ln70_1 == 0)> <Delay = 0.00>
ST_9 : Operation 134 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %output_15, i8 %block_load)" [encrypt.cpp:70]   --->   Operation 134 'write' <Predicate = (add_ln70_1 == 15)> <Delay = 0.00>
ST_9 : Operation 135 [1/1] (0.00ns)   --->   "br label %4" [encrypt.cpp:70]   --->   Operation 135 'br' <Predicate = (add_ln70_1 == 15)> <Delay = 0.00>
ST_9 : Operation 136 [1/1] (0.00ns)   --->   "br label %.preheader" [encrypt.cpp:68]   --->   Operation 136 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', encrypt.cpp:49) [92]  (1.77 ns)

 <State 2>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', encrypt.cpp:52) [103]  (1.77 ns)

 <State 3>: 6.12ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', encrypt.cpp:52) [103]  (0 ns)
	'add' operation ('add_ln54', encrypt.cpp:54) [110]  (1.74 ns)
	'mux' operation ('tmp', encrypt.cpp:54) [111]  (2.06 ns)
	'store' operation ('store_ln54', encrypt.cpp:54) of variable 'tmp', encrypt.cpp:54 on array 'block', encrypt.cpp:44 [117]  (2.32 ns)

 <State 4>: 0ns
The critical path consists of the following:

 <State 5>: 0ns
The critical path consists of the following:

 <State 6>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', encrypt.cpp:65) [126]  (1.77 ns)

 <State 7>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', encrypt.cpp:68) [137]  (1.77 ns)

 <State 8>: 4.06ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', encrypt.cpp:68) [137]  (0 ns)
	'add' operation ('add_ln70', encrypt.cpp:70) [146]  (1.74 ns)
	'getelementptr' operation ('block_addr_1', encrypt.cpp:70) [148]  (0 ns)
	'load' operation ('block_load', encrypt.cpp:70) on array 'block', encrypt.cpp:44 [149]  (2.32 ns)

 <State 9>: 2.32ns
The critical path consists of the following:
	'load' operation ('block_load', encrypt.cpp:70) on array 'block', encrypt.cpp:44 [149]  (2.32 ns)
	wire write on port 'output_14' (encrypt.cpp:70) [153]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
