-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity createRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    expandedKey_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_0_ce0 : OUT STD_LOGIC;
    expandedKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_0_ce1 : OUT STD_LOGIC;
    expandedKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_1_ce0 : OUT STD_LOGIC;
    expandedKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_1_ce1 : OUT STD_LOGIC;
    expandedKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_2_ce0 : OUT STD_LOGIC;
    expandedKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_2_ce1 : OUT STD_LOGIC;
    expandedKey_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_3_ce0 : OUT STD_LOGIC;
    expandedKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    expandedKey_3_ce1 : OUT STD_LOGIC;
    expandedKey_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ptr : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of createRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal trunc_ln318_fu_662_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln318_reg_1121 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln318_1_fu_666_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln318_1_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln318_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln318_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_610_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_0_write_as_reg_1192 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_623_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_4_write_as_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_636_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_8_write_as_reg_1242 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_649_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_12_write_a_reg_1247 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_1_write_as_reg_1292 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal roundKey_5_write_as_reg_1297 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_9_write_as_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal roundKey_13_write_a_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_2_write_as_reg_1392 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal roundKey_6_write_as_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_10_write_a_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal roundKey_14_write_a_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_3_write_as_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_7_write_as_reg_1497 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal zext_ln318_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_2_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_3_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln318_4_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_5_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln318_6_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_7_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln318_8_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_9_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln318_10_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_11_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln318_12_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_13_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln318_14_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_15_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln318_16_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_610_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_623_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_670_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_1_fu_694_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_1_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_2_fu_722_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_2_fu_740_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_3_fu_745_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_3_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_4_fu_768_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_4_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_5_fu_791_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_5_fu_809_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_6_fu_814_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_6_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_7_fu_837_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_7_fu_855_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_8_fu_860_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_8_fu_878_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_9_fu_883_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_9_fu_901_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_s_fu_906_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_10_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_10_fu_929_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_11_fu_947_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_11_fu_952_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_12_fu_970_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_12_fu_975_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_13_fu_993_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_13_fu_998_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln318_14_fu_1016_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln318_14_fu_1021_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component decrypt_dut_mux_4bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    decrypt_dut_mux_4bkb_U23 : component decrypt_dut_mux_4bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_0_q0,
        din1 => expandedKey_1_q0,
        din2 => expandedKey_2_q0,
        din3 => expandedKey_3_q0,
        din4 => grp_fu_610_p5,
        dout => grp_fu_610_p6);

    decrypt_dut_mux_4bkb_U24 : component decrypt_dut_mux_4bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_1_q1,
        din1 => expandedKey_2_q1,
        din2 => expandedKey_3_q1,
        din3 => expandedKey_0_q1,
        din4 => grp_fu_623_p5,
        dout => grp_fu_623_p6);

    decrypt_dut_mux_4bkb_U25 : component decrypt_dut_mux_4bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_2_q0,
        din1 => expandedKey_3_q0,
        din2 => expandedKey_0_q0,
        din3 => expandedKey_1_q0,
        din4 => zext_ln318_reg_1184,
        dout => grp_fu_636_p6);

    decrypt_dut_mux_4bkb_U26 : component decrypt_dut_mux_4bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => expandedKey_3_q1,
        din1 => expandedKey_0_q1,
        din2 => expandedKey_1_q1,
        din3 => expandedKey_2_q1,
        din4 => zext_ln318_reg_1184,
        dout => grp_fu_649_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                roundKey_0_write_as_reg_1192 <= grp_fu_610_p6;
                roundKey_4_write_as_reg_1197 <= grp_fu_623_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                roundKey_10_write_a_reg_1442 <= grp_fu_636_p6;
                roundKey_14_write_a_reg_1447 <= grp_fu_649_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                roundKey_12_write_a_reg_1247 <= grp_fu_649_p6;
                roundKey_8_write_as_reg_1242 <= grp_fu_636_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                roundKey_13_write_a_reg_1347 <= grp_fu_649_p6;
                roundKey_9_write_as_reg_1342 <= grp_fu_636_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                roundKey_1_write_as_reg_1292 <= grp_fu_610_p6;
                roundKey_5_write_as_reg_1297 <= grp_fu_623_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                roundKey_2_write_as_reg_1392 <= grp_fu_610_p6;
                roundKey_6_write_as_reg_1397 <= grp_fu_623_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                roundKey_3_write_as_reg_1492 <= grp_fu_610_p6;
                roundKey_7_write_as_reg_1497 <= grp_fu_623_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln318_1_reg_1126 <= trunc_ln318_1_fu_666_p1;
                trunc_ln318_reg_1121 <= trunc_ln318_fu_662_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    zext_ln318_reg_1184(1 downto 0) <= zext_ln318_fu_712_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln318_reg_1184(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_reset_idle_pp0, ap_reset_start_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_start_pp0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_start_pp0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln318_10_fu_924_p2 <= std_logic_vector(unsigned(ap_const_lv8_B) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_11_fu_947_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_12_fu_970_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_13_fu_993_p2 <= std_logic_vector(unsigned(ap_const_lv8_E) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_14_fu_1016_p2 <= std_logic_vector(unsigned(ap_const_lv8_F) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_1_fu_717_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_2_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_3_fu_763_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_4_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_5_fu_809_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_6_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_7_fu_855_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_8_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_9_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv8_A) + unsigned(trunc_ln318_1_reg_1126));
    add_ln318_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln318_1_fu_666_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage6_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage7_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= roundKey_0_write_as_reg_1192;
    ap_return_1 <= roundKey_1_write_as_reg_1292;
    ap_return_10 <= roundKey_10_write_a_reg_1442;
    ap_return_11 <= grp_fu_636_p6;
    ap_return_12 <= roundKey_12_write_a_reg_1247;
    ap_return_13 <= roundKey_13_write_a_reg_1347;
    ap_return_14 <= roundKey_14_write_a_reg_1447;
    ap_return_15 <= grp_fu_649_p6;
    ap_return_2 <= roundKey_2_write_as_reg_1392;
    ap_return_3 <= roundKey_3_write_as_reg_1492;
    ap_return_4 <= roundKey_4_write_as_reg_1197;
    ap_return_5 <= roundKey_5_write_as_reg_1297;
    ap_return_6 <= roundKey_6_write_as_reg_1397;
    ap_return_7 <= roundKey_7_write_as_reg_1497;
    ap_return_8 <= roundKey_8_write_as_reg_1242;
    ap_return_9 <= roundKey_9_write_as_reg_1342;

    expandedKey_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_1_fu_680_p1, zext_ln318_3_fu_732_p1, ap_block_pp0_stage1, zext_ln318_5_fu_778_p1, ap_block_pp0_stage2, zext_ln318_7_fu_824_p1, ap_block_pp0_stage3, zext_ln318_9_fu_870_p1, ap_block_pp0_stage4, zext_ln318_11_fu_916_p1, ap_block_pp0_stage5, zext_ln318_13_fu_962_p1, ap_block_pp0_stage6, zext_ln318_15_fu_1008_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_0_address0 <= zext_ln318_15_fu_1008_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_0_address0 <= zext_ln318_13_fu_962_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_0_address0 <= zext_ln318_11_fu_916_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_0_address0 <= zext_ln318_9_fu_870_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_0_address0 <= zext_ln318_7_fu_824_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_0_address0 <= zext_ln318_5_fu_778_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_0_address0 <= zext_ln318_3_fu_732_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_0_address0 <= zext_ln318_1_fu_680_p1(6 - 1 downto 0);
            else 
                expandedKey_0_address0 <= "XXXXXX";
            end if;
        else 
            expandedKey_0_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_2_fu_704_p1, ap_block_pp0_stage1, zext_ln318_4_fu_755_p1, ap_block_pp0_stage2, zext_ln318_6_fu_801_p1, ap_block_pp0_stage3, zext_ln318_8_fu_847_p1, ap_block_pp0_stage4, zext_ln318_10_fu_893_p1, ap_block_pp0_stage5, zext_ln318_12_fu_939_p1, ap_block_pp0_stage6, zext_ln318_14_fu_985_p1, ap_block_pp0_stage7, zext_ln318_16_fu_1031_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_0_address1 <= zext_ln318_16_fu_1031_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_0_address1 <= zext_ln318_14_fu_985_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_0_address1 <= zext_ln318_12_fu_939_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_0_address1 <= zext_ln318_10_fu_893_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_0_address1 <= zext_ln318_8_fu_847_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_0_address1 <= zext_ln318_6_fu_801_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_0_address1 <= zext_ln318_4_fu_755_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_0_address1 <= zext_ln318_2_fu_704_p1(6 - 1 downto 0);
            else 
                expandedKey_0_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_0_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_0_ce0 <= ap_const_logic_1;
        else 
            expandedKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_0_ce1 <= ap_const_logic_1;
        else 
            expandedKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_1_fu_680_p1, zext_ln318_3_fu_732_p1, ap_block_pp0_stage1, zext_ln318_5_fu_778_p1, ap_block_pp0_stage2, zext_ln318_7_fu_824_p1, ap_block_pp0_stage3, zext_ln318_9_fu_870_p1, ap_block_pp0_stage4, zext_ln318_11_fu_916_p1, ap_block_pp0_stage5, zext_ln318_13_fu_962_p1, ap_block_pp0_stage6, zext_ln318_15_fu_1008_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_1_address0 <= zext_ln318_15_fu_1008_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_1_address0 <= zext_ln318_13_fu_962_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_1_address0 <= zext_ln318_11_fu_916_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_1_address0 <= zext_ln318_9_fu_870_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_1_address0 <= zext_ln318_7_fu_824_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_1_address0 <= zext_ln318_5_fu_778_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_1_address0 <= zext_ln318_3_fu_732_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_1_address0 <= zext_ln318_1_fu_680_p1(6 - 1 downto 0);
            else 
                expandedKey_1_address0 <= "XXXXXX";
            end if;
        else 
            expandedKey_1_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_2_fu_704_p1, ap_block_pp0_stage1, zext_ln318_4_fu_755_p1, ap_block_pp0_stage2, zext_ln318_6_fu_801_p1, ap_block_pp0_stage3, zext_ln318_8_fu_847_p1, ap_block_pp0_stage4, zext_ln318_10_fu_893_p1, ap_block_pp0_stage5, zext_ln318_12_fu_939_p1, ap_block_pp0_stage6, zext_ln318_14_fu_985_p1, ap_block_pp0_stage7, zext_ln318_16_fu_1031_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_1_address1 <= zext_ln318_16_fu_1031_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_1_address1 <= zext_ln318_14_fu_985_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_1_address1 <= zext_ln318_12_fu_939_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_1_address1 <= zext_ln318_10_fu_893_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_1_address1 <= zext_ln318_8_fu_847_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_1_address1 <= zext_ln318_6_fu_801_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_1_address1 <= zext_ln318_4_fu_755_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_1_address1 <= zext_ln318_2_fu_704_p1(6 - 1 downto 0);
            else 
                expandedKey_1_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_1_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_1_ce0 <= ap_const_logic_1;
        else 
            expandedKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_1_ce1 <= ap_const_logic_1;
        else 
            expandedKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_1_fu_680_p1, zext_ln318_3_fu_732_p1, ap_block_pp0_stage1, zext_ln318_5_fu_778_p1, ap_block_pp0_stage2, zext_ln318_7_fu_824_p1, ap_block_pp0_stage3, zext_ln318_9_fu_870_p1, ap_block_pp0_stage4, zext_ln318_11_fu_916_p1, ap_block_pp0_stage5, zext_ln318_13_fu_962_p1, ap_block_pp0_stage6, zext_ln318_15_fu_1008_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_2_address0 <= zext_ln318_15_fu_1008_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_2_address0 <= zext_ln318_13_fu_962_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_2_address0 <= zext_ln318_11_fu_916_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_2_address0 <= zext_ln318_9_fu_870_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_2_address0 <= zext_ln318_7_fu_824_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_2_address0 <= zext_ln318_5_fu_778_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_2_address0 <= zext_ln318_3_fu_732_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_2_address0 <= zext_ln318_1_fu_680_p1(6 - 1 downto 0);
            else 
                expandedKey_2_address0 <= "XXXXXX";
            end if;
        else 
            expandedKey_2_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_2_fu_704_p1, ap_block_pp0_stage1, zext_ln318_4_fu_755_p1, ap_block_pp0_stage2, zext_ln318_6_fu_801_p1, ap_block_pp0_stage3, zext_ln318_8_fu_847_p1, ap_block_pp0_stage4, zext_ln318_10_fu_893_p1, ap_block_pp0_stage5, zext_ln318_12_fu_939_p1, ap_block_pp0_stage6, zext_ln318_14_fu_985_p1, ap_block_pp0_stage7, zext_ln318_16_fu_1031_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_2_address1 <= zext_ln318_16_fu_1031_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_2_address1 <= zext_ln318_14_fu_985_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_2_address1 <= zext_ln318_12_fu_939_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_2_address1 <= zext_ln318_10_fu_893_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_2_address1 <= zext_ln318_8_fu_847_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_2_address1 <= zext_ln318_6_fu_801_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_2_address1 <= zext_ln318_4_fu_755_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_2_address1 <= zext_ln318_2_fu_704_p1(6 - 1 downto 0);
            else 
                expandedKey_2_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_2_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_2_ce0 <= ap_const_logic_1;
        else 
            expandedKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_2_ce1 <= ap_const_logic_1;
        else 
            expandedKey_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_1_fu_680_p1, zext_ln318_3_fu_732_p1, ap_block_pp0_stage1, zext_ln318_5_fu_778_p1, ap_block_pp0_stage2, zext_ln318_7_fu_824_p1, ap_block_pp0_stage3, zext_ln318_9_fu_870_p1, ap_block_pp0_stage4, zext_ln318_11_fu_916_p1, ap_block_pp0_stage5, zext_ln318_13_fu_962_p1, ap_block_pp0_stage6, zext_ln318_15_fu_1008_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_3_address0 <= zext_ln318_15_fu_1008_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_3_address0 <= zext_ln318_13_fu_962_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_3_address0 <= zext_ln318_11_fu_916_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_3_address0 <= zext_ln318_9_fu_870_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_3_address0 <= zext_ln318_7_fu_824_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_3_address0 <= zext_ln318_5_fu_778_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_3_address0 <= zext_ln318_3_fu_732_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_3_address0 <= zext_ln318_1_fu_680_p1(6 - 1 downto 0);
            else 
                expandedKey_3_address0 <= "XXXXXX";
            end if;
        else 
            expandedKey_3_address0 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln318_2_fu_704_p1, ap_block_pp0_stage1, zext_ln318_4_fu_755_p1, ap_block_pp0_stage2, zext_ln318_6_fu_801_p1, ap_block_pp0_stage3, zext_ln318_8_fu_847_p1, ap_block_pp0_stage4, zext_ln318_10_fu_893_p1, ap_block_pp0_stage5, zext_ln318_12_fu_939_p1, ap_block_pp0_stage6, zext_ln318_14_fu_985_p1, ap_block_pp0_stage7, zext_ln318_16_fu_1031_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                expandedKey_3_address1 <= zext_ln318_16_fu_1031_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                expandedKey_3_address1 <= zext_ln318_14_fu_985_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                expandedKey_3_address1 <= zext_ln318_12_fu_939_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                expandedKey_3_address1 <= zext_ln318_10_fu_893_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                expandedKey_3_address1 <= zext_ln318_8_fu_847_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                expandedKey_3_address1 <= zext_ln318_6_fu_801_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                expandedKey_3_address1 <= zext_ln318_4_fu_755_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                expandedKey_3_address1 <= zext_ln318_2_fu_704_p1(6 - 1 downto 0);
            else 
                expandedKey_3_address1 <= "XXXXXX";
            end if;
        else 
            expandedKey_3_address1 <= "XXXXXX";
        end if; 
    end process;


    expandedKey_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_3_ce0 <= ap_const_logic_1;
        else 
            expandedKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            expandedKey_3_ce1 <= ap_const_logic_1;
        else 
            expandedKey_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_610_p5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, zext_ln318_fu_712_p1, zext_ln318_reg_1184, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage5, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_610_p5 <= zext_ln318_reg_1184;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_610_p5 <= zext_ln318_fu_712_p1;
        else 
            grp_fu_610_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_623_p5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, zext_ln318_fu_712_p1, zext_ln318_reg_1184, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage5, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_623_p5 <= zext_ln318_reg_1184;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_623_p5 <= zext_ln318_fu_712_p1;
        else 
            grp_fu_623_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    lshr_ln318_10_fu_929_p4 <= add_ln318_10_fu_924_p2(7 downto 2);
    lshr_ln318_11_fu_952_p4 <= add_ln318_11_fu_947_p2(7 downto 2);
    lshr_ln318_12_fu_975_p4 <= add_ln318_12_fu_970_p2(7 downto 2);
    lshr_ln318_13_fu_998_p4 <= add_ln318_13_fu_993_p2(7 downto 2);
    lshr_ln318_14_fu_1021_p4 <= add_ln318_14_fu_1016_p2(7 downto 2);
    lshr_ln318_1_fu_694_p4 <= add_ln318_fu_688_p2(7 downto 2);
    lshr_ln318_2_fu_722_p4 <= add_ln318_1_fu_717_p2(7 downto 2);
    lshr_ln318_3_fu_745_p4 <= add_ln318_2_fu_740_p2(7 downto 2);
    lshr_ln318_4_fu_768_p4 <= add_ln318_3_fu_763_p2(7 downto 2);
    lshr_ln318_5_fu_791_p4 <= add_ln318_4_fu_786_p2(7 downto 2);
    lshr_ln318_6_fu_814_p4 <= add_ln318_5_fu_809_p2(7 downto 2);
    lshr_ln318_7_fu_837_p4 <= add_ln318_6_fu_832_p2(7 downto 2);
    lshr_ln318_8_fu_860_p4 <= add_ln318_7_fu_855_p2(7 downto 2);
    lshr_ln318_9_fu_883_p4 <= add_ln318_8_fu_878_p2(7 downto 2);
    lshr_ln318_s_fu_906_p4 <= add_ln318_9_fu_901_p2(7 downto 2);
    lshr_ln_fu_670_p4 <= ptr(7 downto 2);
    trunc_ln318_1_fu_666_p1 <= ptr(8 - 1 downto 0);
    trunc_ln318_fu_662_p1 <= ptr(2 - 1 downto 0);
    zext_ln318_10_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_9_fu_883_p4),64));
    zext_ln318_11_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_s_fu_906_p4),64));
    zext_ln318_12_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_10_fu_929_p4),64));
    zext_ln318_13_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_11_fu_952_p4),64));
    zext_ln318_14_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_12_fu_975_p4),64));
    zext_ln318_15_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_13_fu_998_p4),64));
    zext_ln318_16_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_14_fu_1021_p4),64));
    zext_ln318_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_670_p4),64));
    zext_ln318_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_1_fu_694_p4),64));
    zext_ln318_3_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_2_fu_722_p4),64));
    zext_ln318_4_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_3_fu_745_p4),64));
    zext_ln318_5_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_4_fu_768_p4),64));
    zext_ln318_6_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_5_fu_791_p4),64));
    zext_ln318_7_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_6_fu_814_p4),64));
    zext_ln318_8_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_7_fu_837_p4),64));
    zext_ln318_9_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln318_8_fu_860_p4),64));
    zext_ln318_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln318_reg_1121),32));
end behav;
