// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module expandKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_we0,
        expandedKey_d0,
        expandedKey_q0,
        expandedKey_address1,
        expandedKey_ce1,
        expandedKey_we1,
        expandedKey_d1,
        expandedKey_q1,
        key_address0,
        key_ce0,
        key_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
output   expandedKey_we0;
output  [7:0] expandedKey_d0;
input  [7:0] expandedKey_q0;
output  [7:0] expandedKey_address1;
output   expandedKey_ce1;
output   expandedKey_we1;
output  [7:0] expandedKey_d1;
input  [7:0] expandedKey_q1;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] expandedKey_address0;
reg expandedKey_ce0;
reg expandedKey_we0;
reg[7:0] expandedKey_d0;
reg[7:0] expandedKey_address1;
reg expandedKey_ce1;
reg expandedKey_we1;
reg[7:0] expandedKey_d1;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [7:0] reg_279;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln126_fu_283_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_289_p2;
reg   [4:0] i_reg_564;
wire   [63:0] zext_ln127_fu_295_p1;
reg   [63:0] zext_ln127_reg_569;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln130_fu_300_p2;
wire   [0:0] icmp_ln142_fu_332_p2;
reg   [0:0] icmp_ln142_reg_592;
wire   [31:0] rconIteration_1_fu_353_p3;
reg   [31:0] rconIteration_1_reg_605;
reg   [7:0] t_1_1_reg_610;
reg   [7:0] Rcon_load_reg_630;
reg   [7:0] t_2_1_reg_635;
wire    ap_CS_fsm_state6;
reg   [7:0] t_3_1_reg_640;
reg   [7:0] sbox_load_reg_646;
wire   [7:0] or_ln162_fu_404_p2;
reg   [7:0] or_ln162_reg_661;
wire   [8:0] zext_ln162_fu_410_p1;
reg   [8:0] zext_ln162_reg_666;
wire    ap_CS_fsm_state7;
wire   [7:0] xor_ln161_fu_450_p2;
reg   [7:0] xor_ln161_reg_682;
wire   [7:0] xor_ln161_1_fu_456_p2;
reg   [7:0] xor_ln161_1_reg_687;
wire   [7:0] or_ln162_1_fu_476_p2;
reg   [7:0] or_ln162_1_reg_697;
wire   [7:0] xor_ln161_2_fu_521_p2;
reg   [7:0] xor_ln161_2_reg_712;
wire   [7:0] currentSize_fu_533_p2;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_reg_245;
wire    ap_CS_fsm_state3;
reg   [7:0] currentSize_0_reg_256;
reg   [31:0] iteration_assign_reg_268;
wire   [63:0] zext_ln136_fu_316_p1;
wire   [63:0] zext_ln136_1_fu_327_p1;
wire   [63:0] zext_ln92_fu_348_p1;
wire   [63:0] zext_ln136_2_fu_367_p1;
wire   [63:0] zext_ln136_3_fu_378_p1;
wire   [63:0] zext_ln43_fu_383_p1;
wire   [63:0] zext_ln43_1_fu_388_p1;
wire   [63:0] zext_ln161_fu_399_p1;
wire   [63:0] zext_ln161_2_fu_424_p1;
wire   [63:0] zext_ln43_2_fu_429_p1;
wire   [63:0] zext_ln161_4_fu_471_p1;
wire   [63:0] zext_ln161_6_fu_496_p1;
wire   [63:0] zext_ln43_3_fu_501_p1;
wire   [63:0] zext_ln161_1_fu_512_p1;
wire   [63:0] zext_ln161_3_fu_517_p1;
wire   [63:0] zext_ln161_5_fu_544_p1;
wire   [63:0] zext_ln161_7_fu_556_p1;
wire   [7:0] xor_ln161_3_fu_549_p2;
wire   [7:0] add_ln136_fu_310_p2;
wire   [7:0] add_ln136_1_fu_321_p2;
wire   [3:0] trunc_ln130_fu_306_p1;
wire   [7:0] trunc_ln109_fu_344_p1;
wire   [31:0] rconIteration_fu_338_p2;
wire   [7:0] add_ln136_2_fu_361_p2;
wire   [7:0] add_ln136_3_fu_372_p2;
wire   [7:0] add_ln161_fu_393_p2;
wire   [8:0] add_ln161_1_fu_414_p2;
wire  signed [31:0] sext_ln161_fu_420_p1;
wire   [7:0] t_0_fu_433_p2;
wire   [7:0] t_0_2_fu_443_p3;
wire   [7:0] t_1_2_fu_437_p3;
wire   [8:0] add_ln161_2_fu_462_p2;
wire  signed [31:0] sext_ln161_1_fu_467_p1;
wire   [8:0] zext_ln162_1_fu_482_p1;
wire   [8:0] add_ln161_3_fu_486_p2;
wire  signed [31:0] sext_ln161_2_fu_492_p1;
wire   [7:0] t_2_2_fu_506_p3;
wire   [8:0] add_ln162_fu_539_p2;
wire   [7:0] t_3_2_fu_527_p3;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

expandKey_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

expandKey_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        currentSize_0_reg_256 <= 8'd16;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        currentSize_0_reg_256 <= currentSize_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_245 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_245 <= i_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        iteration_assign_reg_268 <= 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        iteration_assign_reg_268 <= rconIteration_1_reg_605;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Rcon_load_reg_630 <= Rcon_q0;
        t_1_1_reg_610 <= expandedKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_564 <= i_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln142_reg_592 <= icmp_ln142_fu_332_p2;
        rconIteration_1_reg_605 <= rconIteration_1_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln162_1_reg_697[7 : 2] <= or_ln162_1_fu_476_p2[7 : 2];
        xor_ln161_1_reg_687 <= xor_ln161_1_fu_456_p2;
        xor_ln161_reg_682 <= xor_ln161_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln162_reg_661[7 : 1] <= or_ln162_fu_404_p2[7 : 1];
        t_2_1_reg_635 <= expandedKey_q1;
        t_3_1_reg_640 <= expandedKey_q0;
        zext_ln162_reg_666[7 : 1] <= zext_ln162_fu_410_p1[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_279 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_reg_592 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sbox_load_reg_646 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln161_2_reg_712 <= xor_ln161_2_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln127_reg_569[4 : 0] <= zext_ln127_fu_295_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_address0 = zext_ln161_7_fu_556_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_address0 = zext_ln161_3_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address0 = zext_ln161_6_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address0 = zext_ln161_2_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address0 = zext_ln136_3_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address0 = zext_ln136_fu_316_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_address0 = zext_ln127_reg_569;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_address1 = zext_ln161_5_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_address1 = zext_ln161_1_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address1 = zext_ln161_4_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address1 = zext_ln161_fu_399_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address1 = zext_ln136_2_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address1 = zext_ln136_1_fu_327_p1;
    end else begin
        expandedKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        expandedKey_ce1 = 1'b1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_d0 = xor_ln161_3_fu_549_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_d0 = xor_ln161_1_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_d0 = key_q0;
    end else begin
        expandedKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_d1 = xor_ln161_2_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_d1 = xor_ln161_reg_682;
    end else begin
        expandedKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        expandedKey_we0 = 1'b1;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        expandedKey_we1 = 1'b1;
    end else begin
        expandedKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln43_3_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln43_2_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address0 = zext_ln43_1_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_address0 = zext_ln43_fu_383_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln126_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln130_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln92_fu_348_p1;

assign add_ln136_1_fu_321_p2 = ($signed(8'd253) + $signed(currentSize_0_reg_256));

assign add_ln136_2_fu_361_p2 = ($signed(8'd254) + $signed(currentSize_0_reg_256));

assign add_ln136_3_fu_372_p2 = ($signed(8'd255) + $signed(currentSize_0_reg_256));

assign add_ln136_fu_310_p2 = ($signed(8'd252) + $signed(currentSize_0_reg_256));

assign add_ln161_1_fu_414_p2 = ($signed(9'd496) + $signed(zext_ln162_fu_410_p1));

assign add_ln161_2_fu_462_p2 = ($signed(9'd497) + $signed(zext_ln162_reg_666));

assign add_ln161_3_fu_486_p2 = ($signed(9'd496) + $signed(zext_ln162_1_fu_482_p1));

assign add_ln161_fu_393_p2 = ($signed(8'd240) + $signed(currentSize_0_reg_256));

assign add_ln162_fu_539_p2 = (9'd1 + zext_ln162_reg_666);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign currentSize_fu_533_p2 = (8'd4 + currentSize_0_reg_256);

assign i_fu_289_p2 = (i_0_reg_245 + 5'd1);

assign icmp_ln126_fu_283_p2 = ((i_0_reg_245 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_300_p2 = ((currentSize_0_reg_256 < 8'd176) ? 1'b1 : 1'b0);

assign icmp_ln142_fu_332_p2 = ((trunc_ln130_fu_306_p1 == 4'd0) ? 1'b1 : 1'b0);

assign key_address0 = zext_ln127_fu_295_p1;

assign or_ln162_1_fu_476_p2 = (currentSize_0_reg_256 | 8'd3);

assign or_ln162_fu_404_p2 = (currentSize_0_reg_256 | 8'd1);

assign rconIteration_1_fu_353_p3 = ((icmp_ln142_fu_332_p2[0:0] === 1'b1) ? rconIteration_fu_338_p2 : iteration_assign_reg_268);

assign rconIteration_fu_338_p2 = (32'd1 + iteration_assign_reg_268);

assign sext_ln161_1_fu_467_p1 = $signed(add_ln161_2_fu_462_p2);

assign sext_ln161_2_fu_492_p1 = $signed(add_ln161_3_fu_486_p2);

assign sext_ln161_fu_420_p1 = $signed(add_ln161_1_fu_414_p2);

assign t_0_2_fu_443_p3 = ((icmp_ln142_reg_592[0:0] === 1'b1) ? t_0_fu_433_p2 : reg_279);

assign t_0_fu_433_p2 = (sbox_load_reg_646 ^ Rcon_load_reg_630);

assign t_1_2_fu_437_p3 = ((icmp_ln142_reg_592[0:0] === 1'b1) ? sbox_q0 : t_1_1_reg_610);

assign t_2_2_fu_506_p3 = ((icmp_ln142_reg_592[0:0] === 1'b1) ? sbox_q0 : t_2_1_reg_635);

assign t_3_2_fu_527_p3 = ((icmp_ln142_reg_592[0:0] === 1'b1) ? sbox_q0 : t_3_1_reg_640);

assign trunc_ln109_fu_344_p1 = iteration_assign_reg_268[7:0];

assign trunc_ln130_fu_306_p1 = currentSize_0_reg_256[3:0];

assign xor_ln161_1_fu_456_p2 = (t_1_2_fu_437_p3 ^ expandedKey_q0);

assign xor_ln161_2_fu_521_p2 = (t_2_2_fu_506_p3 ^ expandedKey_q1);

assign xor_ln161_3_fu_549_p2 = (t_3_2_fu_527_p3 ^ reg_279);

assign xor_ln161_fu_450_p2 = (t_0_2_fu_443_p3 ^ expandedKey_q1);

assign zext_ln127_fu_295_p1 = i_0_reg_245;

assign zext_ln136_1_fu_327_p1 = add_ln136_1_fu_321_p2;

assign zext_ln136_2_fu_367_p1 = add_ln136_2_fu_361_p2;

assign zext_ln136_3_fu_378_p1 = add_ln136_3_fu_372_p2;

assign zext_ln136_fu_316_p1 = add_ln136_fu_310_p2;

assign zext_ln161_1_fu_512_p1 = currentSize_0_reg_256;

assign zext_ln161_2_fu_424_p1 = $unsigned(sext_ln161_fu_420_p1);

assign zext_ln161_3_fu_517_p1 = or_ln162_reg_661;

assign zext_ln161_4_fu_471_p1 = $unsigned(sext_ln161_1_fu_467_p1);

assign zext_ln161_5_fu_544_p1 = add_ln162_fu_539_p2;

assign zext_ln161_6_fu_496_p1 = $unsigned(sext_ln161_2_fu_492_p1);

assign zext_ln161_7_fu_556_p1 = or_ln162_1_reg_697;

assign zext_ln161_fu_399_p1 = add_ln161_fu_393_p2;

assign zext_ln162_1_fu_482_p1 = or_ln162_1_fu_476_p2;

assign zext_ln162_fu_410_p1 = or_ln162_fu_404_p2;

assign zext_ln43_1_fu_388_p1 = expandedKey_q1;

assign zext_ln43_2_fu_429_p1 = t_3_1_reg_640;

assign zext_ln43_3_fu_501_p1 = reg_279;

assign zext_ln43_fu_383_p1 = expandedKey_q1;

assign zext_ln92_fu_348_p1 = trunc_ln109_fu_344_p1;

always @ (posedge ap_clk) begin
    zext_ln127_reg_569[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    or_ln162_reg_661[0] <= 1'b1;
    zext_ln162_reg_666[0] <= 1'b1;
    zext_ln162_reg_666[8] <= 1'b0;
    or_ln162_1_reg_697[1:0] <= 2'b11;
end

endmodule //expandKey
