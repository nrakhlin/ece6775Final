-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expandKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_ce0 : OUT STD_LOGIC;
    expandedKey_we0 : OUT STD_LOGIC;
    expandedKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_ce1 : OUT STD_LOGIC;
    expandedKey_we1 : OUT STD_LOGIC;
    expandedKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of expandKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv9_1F1 : STD_LOGIC_VECTOR (8 downto 0) := "111110001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln126_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln127_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_reg_569 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln130_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal rconIteration_1_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rconIteration_1_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_1_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_load_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_2_1_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal t_3_1_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_load_reg_646 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln162_fu_404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln162_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln162_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln162_reg_666 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xor_ln161_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln161_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln161_1_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln161_1_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln162_1_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln162_1_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln161_2_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln161_2_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal currentSize_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal currentSize_0_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal iteration_assign_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln136_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_2_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_3_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_2_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_4_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_6_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_3_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_3_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_5_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_7_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln161_3_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_fu_310_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_1_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln130_fu_306_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln109_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rconIteration_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_2_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_3_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_1_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln161_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_0_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_2_fu_443_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_1_2_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_2_fu_462_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln161_1_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln162_1_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln161_3_fu_486_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln161_2_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_2_fu_506_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln162_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_3_2_fu_527_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component expandKey_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expandKey_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component expandKey_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    Rcon_U : component expandKey_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    currentSize_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                currentSize_0_reg_256 <= ap_const_lv8_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                currentSize_0_reg_256 <= currentSize_fu_533_p2;
            end if; 
        end if;
    end process;

    i_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_245 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_245 <= i_reg_564;
            end if; 
        end if;
    end process;

    iteration_assign_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iteration_assign_reg_268 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                iteration_assign_reg_268 <= rconIteration_1_reg_605;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Rcon_load_reg_630 <= Rcon_q0;
                t_1_1_reg_610 <= expandedKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_564 <= i_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln142_reg_592 <= icmp_ln142_fu_332_p2;
                rconIteration_1_reg_605 <= rconIteration_1_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    or_ln162_1_reg_697(7 downto 2) <= or_ln162_1_fu_476_p2(7 downto 2);
                xor_ln161_1_reg_687 <= xor_ln161_1_fu_456_p2;
                xor_ln161_reg_682 <= xor_ln161_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    or_ln162_reg_661(7 downto 1) <= or_ln162_fu_404_p2(7 downto 1);
                t_2_1_reg_635 <= expandedKey_q1;
                t_3_1_reg_640 <= expandedKey_q0;
                    zext_ln162_reg_666(7 downto 1) <= zext_ln162_fu_410_p1(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_279 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sbox_load_reg_646 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                xor_ln161_2_reg_712 <= xor_ln161_2_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln127_reg_569(4 downto 0) <= zext_ln127_fu_295_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln127_reg_569(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln162_reg_661(0) <= '1';
    zext_ln162_reg_666(0) <= '1';
    zext_ln162_reg_666(8) <= '0';
    or_ln162_1_reg_697(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln126_fu_283_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln130_fu_300_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln126_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln130_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Rcon_address0 <= zext_ln92_fu_348_p1(8 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln136_1_fu_321_p2 <= std_logic_vector(signed(ap_const_lv8_FD) + signed(currentSize_0_reg_256));
    add_ln136_2_fu_361_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(currentSize_0_reg_256));
    add_ln136_3_fu_372_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(currentSize_0_reg_256));
    add_ln136_fu_310_p2 <= std_logic_vector(signed(ap_const_lv8_FC) + signed(currentSize_0_reg_256));
    add_ln161_1_fu_414_p2 <= std_logic_vector(signed(ap_const_lv9_1F0) + signed(zext_ln162_fu_410_p1));
    add_ln161_2_fu_462_p2 <= std_logic_vector(signed(ap_const_lv9_1F1) + signed(zext_ln162_reg_666));
    add_ln161_3_fu_486_p2 <= std_logic_vector(signed(ap_const_lv9_1F0) + signed(zext_ln162_1_fu_482_p1));
    add_ln161_fu_393_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(currentSize_0_reg_256));
    add_ln162_fu_539_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln162_reg_666));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    currentSize_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(currentSize_0_reg_256));

    expandedKey_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln127_reg_569, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, zext_ln136_fu_316_p1, zext_ln136_3_fu_378_p1, zext_ln161_2_fu_424_p1, zext_ln161_6_fu_496_p1, zext_ln161_3_fu_517_p1, zext_ln161_7_fu_556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_address0 <= zext_ln161_7_fu_556_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_address0 <= zext_ln161_3_fu_517_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expandedKey_address0 <= zext_ln161_6_fu_496_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address0 <= zext_ln161_2_fu_424_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expandedKey_address0 <= zext_ln136_3_fu_378_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address0 <= zext_ln136_fu_316_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expandedKey_address0 <= zext_ln127_reg_569(8 - 1 downto 0);
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln136_1_fu_327_p1, zext_ln136_2_fu_367_p1, zext_ln161_fu_399_p1, zext_ln161_4_fu_471_p1, zext_ln161_1_fu_512_p1, zext_ln161_5_fu_544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_address1 <= zext_ln161_5_fu_544_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_address1 <= zext_ln161_1_fu_512_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expandedKey_address1 <= zext_ln161_4_fu_471_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address1 <= zext_ln161_fu_399_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expandedKey_address1 <= zext_ln136_2_fu_367_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address1 <= zext_ln136_1_fu_327_p1(8 - 1 downto 0);
        else 
            expandedKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            expandedKey_ce0 <= ap_const_logic_1;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            expandedKey_ce1 <= ap_const_logic_1;
        else 
            expandedKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_d0_assign_proc : process(key_q0, ap_CS_fsm_state8, xor_ln161_1_reg_687, ap_CS_fsm_state9, ap_CS_fsm_state3, xor_ln161_3_fu_549_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_d0 <= xor_ln161_3_fu_549_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_d0 <= xor_ln161_1_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expandedKey_d0 <= key_q0;
        else 
            expandedKey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_d1_assign_proc : process(ap_CS_fsm_state8, xor_ln161_reg_682, xor_ln161_2_reg_712, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_d1 <= xor_ln161_2_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_d1 <= xor_ln161_reg_682;
        else 
            expandedKey_d1 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expandedKey_we0 <= ap_const_logic_1;
        else 
            expandedKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            expandedKey_we1 <= ap_const_logic_1;
        else 
            expandedKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_289_p2 <= std_logic_vector(unsigned(i_0_reg_245) + unsigned(ap_const_lv5_1));
    icmp_ln126_fu_283_p2 <= "1" when (i_0_reg_245 = ap_const_lv5_10) else "0";
    icmp_ln130_fu_300_p2 <= "1" when (unsigned(currentSize_0_reg_256) < unsigned(ap_const_lv8_B0)) else "0";
    icmp_ln142_fu_332_p2 <= "1" when (trunc_ln130_fu_306_p1 = ap_const_lv4_0) else "0";
    key_address0 <= zext_ln127_fu_295_p1(4 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln162_1_fu_476_p2 <= (currentSize_0_reg_256 or ap_const_lv8_3);
    or_ln162_fu_404_p2 <= (currentSize_0_reg_256 or ap_const_lv8_1);
    rconIteration_1_fu_353_p3 <= 
        rconIteration_fu_338_p2 when (icmp_ln142_fu_332_p2(0) = '1') else 
        iteration_assign_reg_268;
    rconIteration_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(iteration_assign_reg_268));

    sbox_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln43_fu_383_p1, zext_ln43_1_fu_388_p1, zext_ln43_2_fu_429_p1, zext_ln43_3_fu_501_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= zext_ln43_3_fu_501_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address0 <= zext_ln43_2_fu_429_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address0 <= zext_ln43_1_fu_388_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address0 <= zext_ln43_fu_383_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln161_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln161_2_fu_462_p2),32));

        sext_ln161_2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln161_3_fu_486_p2),32));

        sext_ln161_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln161_1_fu_414_p2),32));

    t_0_2_fu_443_p3 <= 
        t_0_fu_433_p2 when (icmp_ln142_reg_592(0) = '1') else 
        reg_279;
    t_0_fu_433_p2 <= (sbox_load_reg_646 xor Rcon_load_reg_630);
    t_1_2_fu_437_p3 <= 
        sbox_q0 when (icmp_ln142_reg_592(0) = '1') else 
        t_1_1_reg_610;
    t_2_2_fu_506_p3 <= 
        sbox_q0 when (icmp_ln142_reg_592(0) = '1') else 
        t_2_1_reg_635;
    t_3_2_fu_527_p3 <= 
        sbox_q0 when (icmp_ln142_reg_592(0) = '1') else 
        t_3_1_reg_640;
    trunc_ln109_fu_344_p1 <= iteration_assign_reg_268(8 - 1 downto 0);
    trunc_ln130_fu_306_p1 <= currentSize_0_reg_256(4 - 1 downto 0);
    xor_ln161_1_fu_456_p2 <= (t_1_2_fu_437_p3 xor expandedKey_q0);
    xor_ln161_2_fu_521_p2 <= (t_2_2_fu_506_p3 xor expandedKey_q1);
    xor_ln161_3_fu_549_p2 <= (t_3_2_fu_527_p3 xor reg_279);
    xor_ln161_fu_450_p2 <= (t_0_2_fu_443_p3 xor expandedKey_q1);
    zext_ln127_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_245),64));
    zext_ln136_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_1_fu_321_p2),64));
    zext_ln136_2_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_2_fu_361_p2),64));
    zext_ln136_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_3_fu_372_p2),64));
    zext_ln136_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_310_p2),64));
    zext_ln161_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currentSize_0_reg_256),64));
    zext_ln161_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln161_fu_420_p1),64));
    zext_ln161_3_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln162_reg_661),64));
    zext_ln161_4_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln161_1_fu_467_p1),64));
    zext_ln161_5_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln162_fu_539_p2),64));
    zext_ln161_6_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln161_2_fu_492_p1),64));
    zext_ln161_7_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln162_1_reg_697),64));
    zext_ln161_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_fu_393_p2),64));
    zext_ln162_1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln162_1_fu_476_p2),9));
    zext_ln162_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln162_fu_404_p2),9));
    zext_ln43_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKey_q1),64));
    zext_ln43_2_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_3_1_reg_640),64));
    zext_ln43_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_279),64));
    zext_ln43_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(expandedKey_q1),64));
    zext_ln92_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln109_fu_344_p1),64));
end behav;
