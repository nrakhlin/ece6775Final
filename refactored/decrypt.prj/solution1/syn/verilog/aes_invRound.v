// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_invRound (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        roundKey_address0,
        roundKey_ce0,
        roundKey_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
input  [7:0] roundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg roundKey_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] rsbox_address0;
reg    rsbox_ce0;
wire   [7:0] rsbox_q0;
reg   [7:0] reg_236;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_243;
wire    ap_CS_fsm_state3;
wire   [3:0] state_addr_reg_296;
wire   [3:0] state_addr_2_reg_301;
wire   [3:0] state_addr_3_reg_306;
reg   [7:0] state_load_2_reg_316;
wire    ap_CS_fsm_state4;
reg   [7:0] state_load_5_reg_343;
wire    ap_CS_fsm_state5;
reg   [7:0] state_load_6_reg_348;
reg   [7:0] tmp_3_reg_365;
wire    ap_CS_fsm_state6;
wire   [3:0] state_addr_12_reg_375;
wire   [4:0] i_fu_255_p2;
reg   [4:0] i_reg_383;
wire    ap_CS_fsm_state11;
reg   [3:0] state_addr_13_reg_388;
wire   [0:0] icmp_ln315_fu_249_p2;
wire    ap_CS_fsm_state12;
wire   [4:0] i_6_fu_277_p2;
reg   [4:0] i_6_reg_402;
wire    ap_CS_fsm_state14;
reg   [3:0] state_addr_14_reg_407;
wire   [0:0] icmp_ln221_fu_271_p2;
wire    grp_invMixColumns_fu_230_ap_start;
wire    grp_invMixColumns_fu_230_ap_done;
wire    grp_invMixColumns_fu_230_ap_idle;
wire    grp_invMixColumns_fu_230_ap_ready;
wire   [3:0] grp_invMixColumns_fu_230_state_address0;
wire    grp_invMixColumns_fu_230_state_ce0;
wire    grp_invMixColumns_fu_230_state_we0;
wire   [7:0] grp_invMixColumns_fu_230_state_d0;
reg   [4:0] i_0_i_reg_208;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
reg   [4:0] i_0_i4_reg_219;
wire    ap_CS_fsm_state15;
reg    grp_invMixColumns_fu_230_ap_start_reg;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln317_fu_261_p1;
wire   [63:0] zext_ln48_fu_266_p1;
wire   [63:0] zext_ln222_fu_283_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [7:0] xor_ln222_fu_289_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_invMixColumns_fu_230_ap_start_reg = 1'b0;
end

aes_invRound_rsbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
rsbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rsbox_address0),
    .ce0(rsbox_ce0),
    .q0(rsbox_q0)
);

invMixColumns grp_invMixColumns_fu_230(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_invMixColumns_fu_230_ap_start),
    .ap_done(grp_invMixColumns_fu_230_ap_done),
    .ap_idle(grp_invMixColumns_fu_230_ap_idle),
    .ap_ready(grp_invMixColumns_fu_230_ap_ready),
    .state_address0(grp_invMixColumns_fu_230_state_address0),
    .state_ce0(grp_invMixColumns_fu_230_state_ce0),
    .state_we0(grp_invMixColumns_fu_230_state_we0),
    .state_d0(grp_invMixColumns_fu_230_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_invMixColumns_fu_230_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln221_fu_271_p2 == 1'd1))) begin
            grp_invMixColumns_fu_230_ap_start_reg <= 1'b1;
        end else if ((grp_invMixColumns_fu_230_ap_ready == 1'b1)) begin
            grp_invMixColumns_fu_230_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln315_fu_249_p2 == 1'd1))) begin
        i_0_i4_reg_219 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_i4_reg_219 <= i_6_reg_402;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_i_reg_208 <= i_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_i_reg_208 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_236 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_236 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_243 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_243 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_6_reg_402 <= i_6_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_383 <= i_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln315_fu_249_p2 == 1'd0))) begin
        state_addr_13_reg_388 <= zext_ln317_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln221_fu_271_p2 == 1'd0))) begin
        state_addr_14_reg_407 <= zext_ln222_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_load_2_reg_316 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_load_5_reg_343 <= state_q0;
        state_load_6_reg_348 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_3_reg_365 <= state_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (grp_invMixColumns_fu_230_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_invMixColumns_fu_230_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rsbox_ce0 = 1'b1;
    end else begin
        rsbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln221_fu_271_p2 == 1'd0))) begin
        state_address0 = zext_ln222_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = zext_ln317_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = state_addr_3_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = state_addr_reg_296;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = grp_invMixColumns_fu_230_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_14_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_13_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_12_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = state_addr_2_reg_301;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd6;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln221_fu_271_p2 == 1'd0)))) begin
        state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_ce0 = grp_invMixColumns_fu_230_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = tmp_3_reg_365;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = state_load_6_reg_348;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d0 = state_load_2_reg_316;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = reg_236;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d0 = state_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = state_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = grp_invMixColumns_fu_230_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = xor_ln222_fu_289_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = rsbox_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = reg_236;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d1 = state_load_5_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        state_d1 = reg_243;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d1 = state_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_d1 = state_q0;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_we0 = grp_invMixColumns_fu_230_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln315_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln221_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_invMixColumns_fu_230_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_invMixColumns_fu_230_ap_start = grp_invMixColumns_fu_230_ap_start_reg;

assign i_6_fu_277_p2 = (i_0_i4_reg_219 + 5'd1);

assign i_fu_255_p2 = (i_0_i_reg_208 + 5'd1);

assign icmp_ln221_fu_271_p2 = ((i_0_i4_reg_219 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln315_fu_249_p2 = ((i_0_i_reg_208 == 5'd16) ? 1'b1 : 1'b0);

assign roundKey_address0 = zext_ln222_fu_283_p1;

assign rsbox_address0 = zext_ln48_fu_266_p1;

assign state_addr_12_reg_375 = 64'd12;

assign state_addr_2_reg_301 = 64'd6;

assign state_addr_3_reg_306 = 64'd5;

assign state_addr_reg_296 = 64'd7;

assign xor_ln222_fu_289_p2 = (state_q0 ^ roundKey_q0);

assign zext_ln222_fu_283_p1 = i_0_i4_reg_219;

assign zext_ln317_fu_261_p1 = i_0_i_reg_208;

assign zext_ln48_fu_266_p1 = state_q0;

endmodule //aes_invRound
