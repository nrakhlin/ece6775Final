// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_decrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        key_address0,
        key_ce0,
        key_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [7:0] input_r_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [7:0] output_r_d0;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] zext_ln71_fu_152_p1;
reg   [3:0] zext_ln71_reg_302;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_162_p2;
reg   [2:0] i_reg_310;
wire   [3:0] shl_ln_fu_172_p3;
reg   [3:0] shl_ln_reg_315;
wire   [0:0] icmp_ln71_fu_156_p2;
wire   [2:0] j_fu_190_p2;
reg   [2:0] j_reg_323;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln74_fu_184_p2;
wire   [3:0] add_ln76_1_fu_218_p2;
reg   [3:0] add_ln76_1_reg_333;
wire   [3:0] zext_ln87_fu_227_p1;
reg   [3:0] zext_ln87_reg_338;
wire    ap_CS_fsm_state8;
wire   [2:0] i_10_fu_237_p2;
reg   [2:0] i_10_reg_346;
wire   [3:0] shl_ln2_fu_247_p3;
reg   [3:0] shl_ln2_reg_351;
wire   [0:0] icmp_ln87_fu_231_p2;
wire   [2:0] j_3_fu_265_p2;
reg   [2:0] j_3_reg_359;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln90_fu_259_p2;
wire   [3:0] add_ln92_1_fu_293_p2;
reg   [3:0] add_ln92_1_reg_369;
reg   [7:0] expandedKey_address0;
reg    expandedKey_ce0;
reg    expandedKey_we0;
wire   [7:0] expandedKey_q0;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
reg   [7:0] block_d0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire   [7:0] block_q1;
wire    grp_aes_invMain_fu_133_ap_start;
wire    grp_aes_invMain_fu_133_ap_done;
wire    grp_aes_invMain_fu_133_ap_idle;
wire    grp_aes_invMain_fu_133_ap_ready;
wire   [3:0] grp_aes_invMain_fu_133_state_address0;
wire    grp_aes_invMain_fu_133_state_ce0;
wire    grp_aes_invMain_fu_133_state_we0;
wire   [7:0] grp_aes_invMain_fu_133_state_d0;
wire   [3:0] grp_aes_invMain_fu_133_state_address1;
wire    grp_aes_invMain_fu_133_state_ce1;
wire    grp_aes_invMain_fu_133_state_we1;
wire   [7:0] grp_aes_invMain_fu_133_state_d1;
wire   [7:0] grp_aes_invMain_fu_133_expandedKey_address0;
wire    grp_aes_invMain_fu_133_expandedKey_ce0;
wire    grp_expandKey_fu_141_ap_start;
wire    grp_expandKey_fu_141_ap_done;
wire    grp_expandKey_fu_141_ap_idle;
wire    grp_expandKey_fu_141_ap_ready;
wire   [7:0] grp_expandKey_fu_141_expandedKey_address0;
wire    grp_expandKey_fu_141_expandedKey_ce0;
wire    grp_expandKey_fu_141_expandedKey_we0;
wire   [7:0] grp_expandKey_fu_141_expandedKey_d0;
wire   [3:0] grp_expandKey_fu_141_key_address0;
wire    grp_expandKey_fu_141_key_ce0;
reg   [2:0] i_0_reg_89;
reg   [2:0] j_0_reg_100;
wire    ap_CS_fsm_state4;
reg   [2:0] i_1_reg_111;
wire    ap_CS_fsm_state7;
reg   [2:0] j_1_reg_122;
wire    ap_CS_fsm_state10;
reg    grp_aes_invMain_fu_133_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_expandKey_fu_141_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln76_fu_201_p1;
wire   [63:0] zext_ln76_1_fu_223_p1;
wire   [63:0] zext_ln92_fu_288_p1;
wire   [63:0] zext_ln92_1_fu_298_p1;
wire   [1:0] trunc_ln76_fu_168_p1;
wire   [3:0] zext_ln74_fu_180_p1;
wire   [3:0] add_ln76_fu_196_p2;
wire   [1:0] trunc_ln76_1_fu_206_p1;
wire   [3:0] shl_ln76_1_fu_210_p3;
wire   [1:0] trunc_ln92_fu_243_p1;
wire   [1:0] trunc_ln92_1_fu_271_p1;
wire   [3:0] shl_ln92_1_fu_275_p3;
wire   [3:0] add_ln92_fu_283_p2;
wire   [3:0] zext_ln90_fu_255_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_aes_invMain_fu_133_ap_start_reg = 1'b0;
#0 grp_expandKey_fu_141_ap_start_reg = 1'b0;
end

aes_decrypt_expaneOg #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expandedKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_address0),
    .ce0(expandedKey_ce0),
    .we0(expandedKey_we0),
    .d0(grp_expandKey_fu_141_expandedKey_d0),
    .q0(expandedKey_q0)
);

aes_decrypt_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(block_d0),
    .q0(block_q0),
    .address1(grp_aes_invMain_fu_133_state_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_aes_invMain_fu_133_state_d1),
    .q1(block_q1)
);

aes_invMain grp_aes_invMain_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_invMain_fu_133_ap_start),
    .ap_done(grp_aes_invMain_fu_133_ap_done),
    .ap_idle(grp_aes_invMain_fu_133_ap_idle),
    .ap_ready(grp_aes_invMain_fu_133_ap_ready),
    .state_address0(grp_aes_invMain_fu_133_state_address0),
    .state_ce0(grp_aes_invMain_fu_133_state_ce0),
    .state_we0(grp_aes_invMain_fu_133_state_we0),
    .state_d0(grp_aes_invMain_fu_133_state_d0),
    .state_q0(block_q0),
    .state_address1(grp_aes_invMain_fu_133_state_address1),
    .state_ce1(grp_aes_invMain_fu_133_state_ce1),
    .state_we1(grp_aes_invMain_fu_133_state_we1),
    .state_d1(grp_aes_invMain_fu_133_state_d1),
    .state_q1(block_q1),
    .expandedKey_address0(grp_aes_invMain_fu_133_expandedKey_address0),
    .expandedKey_ce0(grp_aes_invMain_fu_133_expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0)
);

expandKey grp_expandKey_fu_141(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_expandKey_fu_141_ap_start),
    .ap_done(grp_expandKey_fu_141_ap_done),
    .ap_idle(grp_expandKey_fu_141_ap_idle),
    .ap_ready(grp_expandKey_fu_141_ap_ready),
    .expandedKey_address0(grp_expandKey_fu_141_expandedKey_address0),
    .expandedKey_ce0(grp_expandKey_fu_141_expandedKey_ce0),
    .expandedKey_we0(grp_expandKey_fu_141_expandedKey_we0),
    .expandedKey_d0(grp_expandKey_fu_141_expandedKey_d0),
    .expandedKey_q0(expandedKey_q0),
    .key_address0(grp_expandKey_fu_141_key_address0),
    .key_ce0(grp_expandKey_fu_141_key_ce0),
    .key_q0(key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_invMain_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_aes_invMain_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_aes_invMain_fu_133_ap_ready == 1'b1)) begin
            grp_aes_invMain_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_expandKey_fu_141_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln71_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_expandKey_fu_141_ap_start_reg <= 1'b1;
        end else if ((grp_expandKey_fu_141_ap_ready == 1'b1)) begin
            grp_expandKey_fu_141_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_89 <= i_reg_310;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_89 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln90_fu_259_p2 == 1'd1))) begin
        i_1_reg_111 <= i_10_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_aes_invMain_fu_133_ap_done == 1'b1))) begin
        i_1_reg_111 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_100 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_100 <= j_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_1_reg_122 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_1_reg_122 <= j_3_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln76_1_reg_333 <= add_ln76_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln92_1_reg_369 <= add_ln92_1_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_10_reg_346 <= i_10_fu_237_p2;
        zext_ln87_reg_338[2 : 0] <= zext_ln87_fu_227_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_310 <= i_fu_162_p2;
        zext_ln71_reg_302[2 : 0] <= zext_ln71_fu_152_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_3_reg_359 <= j_3_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_323 <= j_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        shl_ln2_reg_351[3 : 2] <= shl_ln2_fu_247_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_315[3 : 2] <= shl_ln_fu_172_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln87_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        block_address0 = zext_ln92_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_address0 = zext_ln76_1_fu_223_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        block_address0 = grp_aes_invMain_fu_133_state_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        block_ce0 = grp_aes_invMain_fu_133_state_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        block_ce1 = grp_aes_invMain_fu_133_state_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_d0 = input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        block_d0 = grp_aes_invMain_fu_133_state_d0;
    end else begin
        block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        block_we0 = grp_aes_invMain_fu_133_state_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        block_we1 = grp_aes_invMain_fu_133_state_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address0 = grp_expandKey_fu_141_expandedKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address0 = grp_aes_invMain_fu_133_expandedKey_address0;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_ce0 = grp_expandKey_fu_141_expandedKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_ce0 = grp_aes_invMain_fu_133_expandedKey_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_we0 = grp_expandKey_fu_141_expandedKey_we0;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln71_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln74_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_expandKey_fu_141_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_aes_invMain_fu_133_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln87_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln90_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln76_1_fu_218_p2 = (shl_ln76_1_fu_210_p3 + zext_ln71_reg_302);

assign add_ln76_fu_196_p2 = (zext_ln74_fu_180_p1 + shl_ln_reg_315);

assign add_ln92_1_fu_293_p2 = (zext_ln90_fu_255_p1 + shl_ln2_reg_351);

assign add_ln92_fu_283_p2 = (shl_ln92_1_fu_275_p3 + zext_ln87_reg_338);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_aes_invMain_fu_133_ap_start = grp_aes_invMain_fu_133_ap_start_reg;

assign grp_expandKey_fu_141_ap_start = grp_expandKey_fu_141_ap_start_reg;

assign i_10_fu_237_p2 = (i_1_reg_111 + 3'd1);

assign i_fu_162_p2 = (i_0_reg_89 + 3'd1);

assign icmp_ln71_fu_156_p2 = ((i_0_reg_89 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_184_p2 = ((j_0_reg_100 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_231_p2 = ((i_1_reg_111 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_259_p2 = ((j_1_reg_122 == 3'd4) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln76_fu_201_p1;

assign j_3_fu_265_p2 = (j_1_reg_122 + 3'd1);

assign j_fu_190_p2 = (j_0_reg_100 + 3'd1);

assign key_address0 = grp_expandKey_fu_141_key_address0;

assign key_ce0 = grp_expandKey_fu_141_key_ce0;

assign output_r_address0 = zext_ln92_1_fu_298_p1;

assign output_r_d0 = block_q0;

assign shl_ln2_fu_247_p3 = {{trunc_ln92_fu_243_p1}, {2'd0}};

assign shl_ln76_1_fu_210_p3 = {{trunc_ln76_1_fu_206_p1}, {2'd0}};

assign shl_ln92_1_fu_275_p3 = {{trunc_ln92_1_fu_271_p1}, {2'd0}};

assign shl_ln_fu_172_p3 = {{trunc_ln76_fu_168_p1}, {2'd0}};

assign trunc_ln76_1_fu_206_p1 = j_0_reg_100[1:0];

assign trunc_ln76_fu_168_p1 = i_0_reg_89[1:0];

assign trunc_ln92_1_fu_271_p1 = j_1_reg_122[1:0];

assign trunc_ln92_fu_243_p1 = i_1_reg_111[1:0];

assign zext_ln71_fu_152_p1 = i_0_reg_89;

assign zext_ln74_fu_180_p1 = j_0_reg_100;

assign zext_ln76_1_fu_223_p1 = add_ln76_1_reg_333;

assign zext_ln76_fu_201_p1 = add_ln76_fu_196_p2;

assign zext_ln87_fu_227_p1 = i_1_reg_111;

assign zext_ln90_fu_255_p1 = j_1_reg_122;

assign zext_ln92_1_fu_298_p1 = add_ln92_1_reg_369;

assign zext_ln92_fu_288_p1 = add_ln92_fu_283_p2;

always @ (posedge ap_clk) begin
    zext_ln71_reg_302[3] <= 1'b0;
    shl_ln_reg_315[1:0] <= 2'b00;
    zext_ln87_reg_338[3] <= 1'b0;
    shl_ln2_reg_351[1:0] <= 2'b00;
end

endmodule //aes_decrypt
