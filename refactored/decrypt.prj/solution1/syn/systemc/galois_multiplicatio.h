// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _galois_multiplicatio_HH_
#define _galois_multiplicatio_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct galois_multiplicatio : public sc_module {
    // Port declarations 4
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > a;
    sc_in< sc_lv<5> > b;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    galois_multiplicatio(sc_module_name name);
    SC_HAS_PROCESS(galois_multiplicatio);

    ~galois_multiplicatio();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > trunc_ln245_fu_38_p1;
    sc_signal< sc_lv<8> > shl_ln248_fu_50_p2;
    sc_signal< sc_lv<1> > tmp_fu_56_p3;
    sc_signal< sc_lv<8> > xor_ln250_fu_64_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_78_p3;
    sc_signal< sc_lv<8> > select_ln249_fu_70_p3;
    sc_signal< sc_lv<8> > shl_ln248_1_fu_94_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_100_p3;
    sc_signal< sc_lv<8> > xor_ln250_1_fu_108_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_122_p3;
    sc_signal< sc_lv<8> > select_ln249_1_fu_114_p3;
    sc_signal< sc_lv<8> > shl_ln248_2_fu_138_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_144_p3;
    sc_signal< sc_lv<8> > xor_ln250_2_fu_152_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_166_p3;
    sc_signal< sc_lv<8> > select_ln249_2_fu_158_p3;
    sc_signal< sc_lv<8> > select_ln245_fu_42_p3;
    sc_signal< sc_lv<8> > select_ln245_2_fu_130_p3;
    sc_signal< sc_lv<8> > xor_ln245_fu_182_p2;
    sc_signal< sc_lv<8> > select_ln245_1_fu_86_p3;
    sc_signal< sc_lv<8> > select_ln245_3_fu_174_p3;
    sc_signal< sc_lv<8> > xor_ln245_1_fu_188_p2;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_1B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_select_ln245_1_fu_86_p3();
    void thread_select_ln245_2_fu_130_p3();
    void thread_select_ln245_3_fu_174_p3();
    void thread_select_ln245_fu_42_p3();
    void thread_select_ln249_1_fu_114_p3();
    void thread_select_ln249_2_fu_158_p3();
    void thread_select_ln249_fu_70_p3();
    void thread_shl_ln248_1_fu_94_p2();
    void thread_shl_ln248_2_fu_138_p2();
    void thread_shl_ln248_fu_50_p2();
    void thread_tmp_1_fu_78_p3();
    void thread_tmp_2_fu_100_p3();
    void thread_tmp_3_fu_122_p3();
    void thread_tmp_4_fu_144_p3();
    void thread_tmp_5_fu_166_p3();
    void thread_tmp_fu_56_p3();
    void thread_trunc_ln245_fu_38_p1();
    void thread_xor_ln245_1_fu_188_p2();
    void thread_xor_ln245_fu_182_p2();
    void thread_xor_ln250_1_fu_108_p2();
    void thread_xor_ln250_2_fu_152_p2();
    void thread_xor_ln250_fu_64_p2();
};

}

using namespace ap_rtl;

#endif
