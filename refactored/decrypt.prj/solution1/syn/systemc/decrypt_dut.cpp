// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "decrypt_dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic decrypt_dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic decrypt_dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> decrypt_dut::ap_ST_fsm_state1 = "1";
const sc_lv<2> decrypt_dut::ap_ST_fsm_state2 = "10";
const sc_lv<32> decrypt_dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> decrypt_dut::ap_const_lv32_1 = "1";
const bool decrypt_dut::ap_const_boolean_1 = true;

decrypt_dut::decrypt_dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_aes_decrypt_fu_148 = new aes_decrypt("grp_aes_decrypt_fu_148");
    grp_aes_decrypt_fu_148->ap_clk(ap_clk);
    grp_aes_decrypt_fu_148->ap_rst(ap_rst);
    grp_aes_decrypt_fu_148->ap_start(grp_aes_decrypt_fu_148_ap_start);
    grp_aes_decrypt_fu_148->ap_done(grp_aes_decrypt_fu_148_ap_done);
    grp_aes_decrypt_fu_148->ap_idle(grp_aes_decrypt_fu_148_ap_idle);
    grp_aes_decrypt_fu_148->ap_ready(grp_aes_decrypt_fu_148_ap_ready);
    grp_aes_decrypt_fu_148->input_0_read(input_0);
    grp_aes_decrypt_fu_148->input_1_read(input_1);
    grp_aes_decrypt_fu_148->input_2_read(input_2);
    grp_aes_decrypt_fu_148->input_3_read(input_3);
    grp_aes_decrypt_fu_148->input_4_read(input_4);
    grp_aes_decrypt_fu_148->input_5_read(input_5);
    grp_aes_decrypt_fu_148->input_6_read(input_6);
    grp_aes_decrypt_fu_148->input_7_read(input_7);
    grp_aes_decrypt_fu_148->input_8_read(input_8);
    grp_aes_decrypt_fu_148->input_9_read(input_9);
    grp_aes_decrypt_fu_148->input_10_read(input_10);
    grp_aes_decrypt_fu_148->input_11_read(input_11);
    grp_aes_decrypt_fu_148->input_12_read(input_12);
    grp_aes_decrypt_fu_148->input_13_read(input_13);
    grp_aes_decrypt_fu_148->input_14_read(input_14);
    grp_aes_decrypt_fu_148->input_15_read(input_15);
    grp_aes_decrypt_fu_148->output_r_address0(grp_aes_decrypt_fu_148_output_r_address0);
    grp_aes_decrypt_fu_148->output_r_ce0(grp_aes_decrypt_fu_148_output_r_ce0);
    grp_aes_decrypt_fu_148->output_r_we0(grp_aes_decrypt_fu_148_output_r_we0);
    grp_aes_decrypt_fu_148->output_r_d0(grp_aes_decrypt_fu_148_output_r_d0);
    grp_aes_decrypt_fu_148->key_address0(grp_aes_decrypt_fu_148_key_address0);
    grp_aes_decrypt_fu_148->key_ce0(grp_aes_decrypt_fu_148_key_ce0);
    grp_aes_decrypt_fu_148->key_q0(key_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_aes_decrypt_fu_148_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_aes_decrypt_fu_148_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_aes_decrypt_fu_148_ap_start);
    sensitive << ( grp_aes_decrypt_fu_148_ap_start_reg );

    SC_METHOD(thread_key_address0);
    sensitive << ( grp_aes_decrypt_fu_148_key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( grp_aes_decrypt_fu_148_key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( grp_aes_decrypt_fu_148_output_r_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( grp_aes_decrypt_fu_148_output_r_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( grp_aes_decrypt_fu_148_output_r_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( grp_aes_decrypt_fu_148_output_r_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_aes_decrypt_fu_148_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    grp_aes_decrypt_fu_148_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "decrypt_dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_0, "(port)input_0");
    sc_trace(mVcdFile, input_1, "(port)input_1");
    sc_trace(mVcdFile, input_2, "(port)input_2");
    sc_trace(mVcdFile, input_3, "(port)input_3");
    sc_trace(mVcdFile, input_4, "(port)input_4");
    sc_trace(mVcdFile, input_5, "(port)input_5");
    sc_trace(mVcdFile, input_6, "(port)input_6");
    sc_trace(mVcdFile, input_7, "(port)input_7");
    sc_trace(mVcdFile, input_8, "(port)input_8");
    sc_trace(mVcdFile, input_9, "(port)input_9");
    sc_trace(mVcdFile, input_10, "(port)input_10");
    sc_trace(mVcdFile, input_11, "(port)input_11");
    sc_trace(mVcdFile, input_12, "(port)input_12");
    sc_trace(mVcdFile, input_13, "(port)input_13");
    sc_trace(mVcdFile, input_14, "(port)input_14");
    sc_trace(mVcdFile, input_15, "(port)input_15");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_ap_start, "grp_aes_decrypt_fu_148_ap_start");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_ap_done, "grp_aes_decrypt_fu_148_ap_done");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_ap_idle, "grp_aes_decrypt_fu_148_ap_idle");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_ap_ready, "grp_aes_decrypt_fu_148_ap_ready");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_output_r_address0, "grp_aes_decrypt_fu_148_output_r_address0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_output_r_ce0, "grp_aes_decrypt_fu_148_output_r_ce0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_output_r_we0, "grp_aes_decrypt_fu_148_output_r_we0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_output_r_d0, "grp_aes_decrypt_fu_148_output_r_d0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_key_address0, "grp_aes_decrypt_fu_148_key_address0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_key_ce0, "grp_aes_decrypt_fu_148_key_ce0");
    sc_trace(mVcdFile, grp_aes_decrypt_fu_148_ap_start_reg, "grp_aes_decrypt_fu_148_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("decrypt_dut.hdltvin.dat");
    mHdltvoutHandle.open("decrypt_dut.hdltvout.dat");
}

decrypt_dut::~decrypt_dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_aes_decrypt_fu_148;
}

void decrypt_dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes_decrypt_fu_148_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_aes_decrypt_fu_148_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes_decrypt_fu_148_ap_ready.read())) {
            grp_aes_decrypt_fu_148_ap_start_reg = ap_const_logic_0;
        }
    }
}

void decrypt_dut::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void decrypt_dut::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void decrypt_dut::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_aes_decrypt_fu_148_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void decrypt_dut::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void decrypt_dut::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_aes_decrypt_fu_148_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void decrypt_dut::thread_grp_aes_decrypt_fu_148_ap_start() {
    grp_aes_decrypt_fu_148_ap_start = grp_aes_decrypt_fu_148_ap_start_reg.read();
}

void decrypt_dut::thread_key_address0() {
    key_address0 = grp_aes_decrypt_fu_148_key_address0.read();
}

void decrypt_dut::thread_key_ce0() {
    key_ce0 = grp_aes_decrypt_fu_148_key_ce0.read();
}

void decrypt_dut::thread_output_r_address0() {
    output_r_address0 = grp_aes_decrypt_fu_148_output_r_address0.read();
}

void decrypt_dut::thread_output_r_ce0() {
    output_r_ce0 = grp_aes_decrypt_fu_148_output_r_ce0.read();
}

void decrypt_dut::thread_output_r_d0() {
    output_r_d0 = grp_aes_decrypt_fu_148_output_r_d0.read();
}

void decrypt_dut::thread_output_r_we0() {
    output_r_we0 = grp_aes_decrypt_fu_148_output_r_we0.read();
}

void decrypt_dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_aes_decrypt_fu_148_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void decrypt_dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_0\" :  \"" << input_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_1\" :  \"" << input_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_2\" :  \"" << input_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_3\" :  \"" << input_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_4\" :  \"" << input_4.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_5\" :  \"" << input_5.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_6\" :  \"" << input_6.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_7\" :  \"" << input_7.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_8\" :  \"" << input_8.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_9\" :  \"" << input_9.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_10\" :  \"" << input_10.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_11\" :  \"" << input_11.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_12\" :  \"" << input_12.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_13\" :  \"" << input_13.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_14\" :  \"" << input_14.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_15\" :  \"" << input_15.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address0\" :  \"" << key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce0\" :  \"" << key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q0\" :  \"" << key_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

