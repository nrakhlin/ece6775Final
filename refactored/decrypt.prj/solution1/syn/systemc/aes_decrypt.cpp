// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_decrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_decrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_decrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> aes_decrypt::ap_ST_fsm_state1 = "1";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state2 = "10";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state3 = "100";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> aes_decrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> aes_decrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_decrypt::ap_const_lv32_1 = "1";
const sc_lv<1> aes_decrypt::ap_const_lv1_0 = "0";
const sc_lv<32> aes_decrypt::ap_const_lv32_2 = "10";
const sc_lv<32> aes_decrypt::ap_const_lv32_7 = "111";
const sc_lv<32> aes_decrypt::ap_const_lv32_8 = "1000";
const sc_lv<3> aes_decrypt::ap_const_lv3_0 = "000";
const sc_lv<1> aes_decrypt::ap_const_lv1_1 = "1";
const sc_lv<32> aes_decrypt::ap_const_lv32_3 = "11";
const sc_lv<32> aes_decrypt::ap_const_lv32_6 = "110";
const sc_lv<32> aes_decrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_decrypt::ap_const_lv32_5 = "101";
const sc_lv<32> aes_decrypt::ap_const_lv32_4 = "100";
const sc_lv<3> aes_decrypt::ap_const_lv3_4 = "100";
const sc_lv<3> aes_decrypt::ap_const_lv3_1 = "1";
const sc_lv<2> aes_decrypt::ap_const_lv2_0 = "00";
const bool aes_decrypt::ap_const_boolean_1 = true;

aes_decrypt::aes_decrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    expandedKey_U = new aes_decrypt_expaneOg("expandedKey_U");
    expandedKey_U->clk(ap_clk);
    expandedKey_U->reset(ap_rst);
    expandedKey_U->address0(expandedKey_address0);
    expandedKey_U->ce0(expandedKey_ce0);
    expandedKey_U->we0(expandedKey_we0);
    expandedKey_U->d0(grp_expandKey_fu_141_expandedKey_d0);
    expandedKey_U->q0(expandedKey_q0);
    block_U = new aes_decrypt_block("block_U");
    block_U->clk(ap_clk);
    block_U->reset(ap_rst);
    block_U->address0(block_address0);
    block_U->ce0(block_ce0);
    block_U->we0(block_we0);
    block_U->d0(block_d0);
    block_U->q0(block_q0);
    block_U->address1(grp_aes_invMain_fu_133_state_address1);
    block_U->ce1(block_ce1);
    block_U->we1(block_we1);
    block_U->d1(grp_aes_invMain_fu_133_state_d1);
    block_U->q1(block_q1);
    grp_aes_invMain_fu_133 = new aes_invMain("grp_aes_invMain_fu_133");
    grp_aes_invMain_fu_133->ap_clk(ap_clk);
    grp_aes_invMain_fu_133->ap_rst(ap_rst);
    grp_aes_invMain_fu_133->ap_start(grp_aes_invMain_fu_133_ap_start);
    grp_aes_invMain_fu_133->ap_done(grp_aes_invMain_fu_133_ap_done);
    grp_aes_invMain_fu_133->ap_idle(grp_aes_invMain_fu_133_ap_idle);
    grp_aes_invMain_fu_133->ap_ready(grp_aes_invMain_fu_133_ap_ready);
    grp_aes_invMain_fu_133->state_address0(grp_aes_invMain_fu_133_state_address0);
    grp_aes_invMain_fu_133->state_ce0(grp_aes_invMain_fu_133_state_ce0);
    grp_aes_invMain_fu_133->state_we0(grp_aes_invMain_fu_133_state_we0);
    grp_aes_invMain_fu_133->state_d0(grp_aes_invMain_fu_133_state_d0);
    grp_aes_invMain_fu_133->state_q0(block_q0);
    grp_aes_invMain_fu_133->state_address1(grp_aes_invMain_fu_133_state_address1);
    grp_aes_invMain_fu_133->state_ce1(grp_aes_invMain_fu_133_state_ce1);
    grp_aes_invMain_fu_133->state_we1(grp_aes_invMain_fu_133_state_we1);
    grp_aes_invMain_fu_133->state_d1(grp_aes_invMain_fu_133_state_d1);
    grp_aes_invMain_fu_133->state_q1(block_q1);
    grp_aes_invMain_fu_133->expandedKey_address0(grp_aes_invMain_fu_133_expandedKey_address0);
    grp_aes_invMain_fu_133->expandedKey_ce0(grp_aes_invMain_fu_133_expandedKey_ce0);
    grp_aes_invMain_fu_133->expandedKey_q0(expandedKey_q0);
    grp_expandKey_fu_141 = new expandKey("grp_expandKey_fu_141");
    grp_expandKey_fu_141->ap_clk(ap_clk);
    grp_expandKey_fu_141->ap_rst(ap_rst);
    grp_expandKey_fu_141->ap_start(grp_expandKey_fu_141_ap_start);
    grp_expandKey_fu_141->ap_done(grp_expandKey_fu_141_ap_done);
    grp_expandKey_fu_141->ap_idle(grp_expandKey_fu_141_ap_idle);
    grp_expandKey_fu_141->ap_ready(grp_expandKey_fu_141_ap_ready);
    grp_expandKey_fu_141->expandedKey_address0(grp_expandKey_fu_141_expandedKey_address0);
    grp_expandKey_fu_141->expandedKey_ce0(grp_expandKey_fu_141_expandedKey_ce0);
    grp_expandKey_fu_141->expandedKey_we0(grp_expandKey_fu_141_expandedKey_we0);
    grp_expandKey_fu_141->expandedKey_d0(grp_expandKey_fu_141_expandedKey_d0);
    grp_expandKey_fu_141->expandedKey_q0(expandedKey_q0);
    grp_expandKey_fu_141->key_address0(grp_expandKey_fu_141_key_address0);
    grp_expandKey_fu_141->key_ce0(grp_expandKey_fu_141_key_ce0);
    grp_expandKey_fu_141->key_q0(key_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln76_1_fu_218_p2);
    sensitive << ( zext_ln71_reg_302 );
    sensitive << ( shl_ln76_1_fu_210_p3 );

    SC_METHOD(thread_add_ln76_fu_196_p2);
    sensitive << ( shl_ln_reg_315 );
    sensitive << ( zext_ln74_fu_180_p1 );

    SC_METHOD(thread_add_ln92_1_fu_293_p2);
    sensitive << ( shl_ln2_reg_351 );
    sensitive << ( zext_ln90_fu_255_p1 );

    SC_METHOD(thread_add_ln92_fu_283_p2);
    sensitive << ( zext_ln87_reg_338 );
    sensitive << ( shl_ln92_1_fu_275_p3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln87_fu_231_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln87_fu_231_p2 );

    SC_METHOD(thread_block_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_aes_invMain_fu_133_state_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln76_1_fu_223_p1 );
    sensitive << ( zext_ln92_fu_288_p1 );

    SC_METHOD(thread_block_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_aes_invMain_fu_133_state_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_block_ce1);
    sensitive << ( grp_aes_invMain_fu_133_state_ce1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_block_d0);
    sensitive << ( input_r_q0 );
    sensitive << ( grp_aes_invMain_fu_133_state_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_block_we0);
    sensitive << ( grp_aes_invMain_fu_133_state_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_block_we1);
    sensitive << ( grp_aes_invMain_fu_133_state_we1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_expandedKey_address0);
    sensitive << ( grp_aes_invMain_fu_133_expandedKey_address0 );
    sensitive << ( grp_expandKey_fu_141_expandedKey_address0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_expandedKey_ce0);
    sensitive << ( grp_aes_invMain_fu_133_expandedKey_ce0 );
    sensitive << ( grp_expandKey_fu_141_expandedKey_ce0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_expandedKey_we0);
    sensitive << ( grp_expandKey_fu_141_expandedKey_we0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_aes_invMain_fu_133_ap_start);
    sensitive << ( grp_aes_invMain_fu_133_ap_start_reg );

    SC_METHOD(thread_grp_expandKey_fu_141_ap_start);
    sensitive << ( grp_expandKey_fu_141_ap_start_reg );

    SC_METHOD(thread_i_10_fu_237_p2);
    sensitive << ( i_1_reg_111 );

    SC_METHOD(thread_i_fu_162_p2);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_icmp_ln71_fu_156_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_icmp_ln74_fu_184_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_icmp_ln87_fu_231_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_1_reg_111 );

    SC_METHOD(thread_icmp_ln90_fu_259_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( j_1_reg_122 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln76_fu_201_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_3_fu_265_p2);
    sensitive << ( j_1_reg_122 );

    SC_METHOD(thread_j_fu_190_p2);
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_key_address0);
    sensitive << ( grp_expandKey_fu_141_key_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( grp_expandKey_fu_141_key_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln92_1_fu_298_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( block_q0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_shl_ln2_fu_247_p3);
    sensitive << ( trunc_ln92_fu_243_p1 );

    SC_METHOD(thread_shl_ln76_1_fu_210_p3);
    sensitive << ( trunc_ln76_1_fu_206_p1 );

    SC_METHOD(thread_shl_ln92_1_fu_275_p3);
    sensitive << ( trunc_ln92_1_fu_271_p1 );

    SC_METHOD(thread_shl_ln_fu_172_p3);
    sensitive << ( trunc_ln76_fu_168_p1 );

    SC_METHOD(thread_trunc_ln76_1_fu_206_p1);
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_trunc_ln76_fu_168_p1);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_trunc_ln92_1_fu_271_p1);
    sensitive << ( j_1_reg_122 );

    SC_METHOD(thread_trunc_ln92_fu_243_p1);
    sensitive << ( i_1_reg_111 );

    SC_METHOD(thread_zext_ln71_fu_152_p1);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_zext_ln74_fu_180_p1);
    sensitive << ( j_0_reg_100 );

    SC_METHOD(thread_zext_ln76_1_fu_223_p1);
    sensitive << ( add_ln76_1_reg_333 );

    SC_METHOD(thread_zext_ln76_fu_201_p1);
    sensitive << ( add_ln76_fu_196_p2 );

    SC_METHOD(thread_zext_ln87_fu_227_p1);
    sensitive << ( i_1_reg_111 );

    SC_METHOD(thread_zext_ln90_fu_255_p1);
    sensitive << ( j_1_reg_122 );

    SC_METHOD(thread_zext_ln92_1_fu_298_p1);
    sensitive << ( add_ln92_1_reg_369 );

    SC_METHOD(thread_zext_ln92_fu_288_p1);
    sensitive << ( add_ln92_fu_283_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln71_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln74_fu_184_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln87_fu_231_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln90_fu_259_p2 );
    sensitive << ( grp_aes_invMain_fu_133_ap_done );
    sensitive << ( grp_expandKey_fu_141_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    ap_CS_fsm = "0000000001";
    grp_aes_invMain_fu_133_ap_start_reg = SC_LOGIC_0;
    grp_expandKey_fu_141_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_decrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln71_fu_152_p1, "zext_ln71_fu_152_p1");
    sc_trace(mVcdFile, zext_ln71_reg_302, "zext_ln71_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_162_p2, "i_fu_162_p2");
    sc_trace(mVcdFile, i_reg_310, "i_reg_310");
    sc_trace(mVcdFile, shl_ln_fu_172_p3, "shl_ln_fu_172_p3");
    sc_trace(mVcdFile, shl_ln_reg_315, "shl_ln_reg_315");
    sc_trace(mVcdFile, icmp_ln71_fu_156_p2, "icmp_ln71_fu_156_p2");
    sc_trace(mVcdFile, j_fu_190_p2, "j_fu_190_p2");
    sc_trace(mVcdFile, j_reg_323, "j_reg_323");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln74_fu_184_p2, "icmp_ln74_fu_184_p2");
    sc_trace(mVcdFile, add_ln76_1_fu_218_p2, "add_ln76_1_fu_218_p2");
    sc_trace(mVcdFile, add_ln76_1_reg_333, "add_ln76_1_reg_333");
    sc_trace(mVcdFile, zext_ln87_fu_227_p1, "zext_ln87_fu_227_p1");
    sc_trace(mVcdFile, zext_ln87_reg_338, "zext_ln87_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_10_fu_237_p2, "i_10_fu_237_p2");
    sc_trace(mVcdFile, i_10_reg_346, "i_10_reg_346");
    sc_trace(mVcdFile, shl_ln2_fu_247_p3, "shl_ln2_fu_247_p3");
    sc_trace(mVcdFile, shl_ln2_reg_351, "shl_ln2_reg_351");
    sc_trace(mVcdFile, icmp_ln87_fu_231_p2, "icmp_ln87_fu_231_p2");
    sc_trace(mVcdFile, j_3_fu_265_p2, "j_3_fu_265_p2");
    sc_trace(mVcdFile, j_3_reg_359, "j_3_reg_359");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, icmp_ln90_fu_259_p2, "icmp_ln90_fu_259_p2");
    sc_trace(mVcdFile, add_ln92_1_fu_293_p2, "add_ln92_1_fu_293_p2");
    sc_trace(mVcdFile, add_ln92_1_reg_369, "add_ln92_1_reg_369");
    sc_trace(mVcdFile, expandedKey_address0, "expandedKey_address0");
    sc_trace(mVcdFile, expandedKey_ce0, "expandedKey_ce0");
    sc_trace(mVcdFile, expandedKey_we0, "expandedKey_we0");
    sc_trace(mVcdFile, expandedKey_q0, "expandedKey_q0");
    sc_trace(mVcdFile, block_address0, "block_address0");
    sc_trace(mVcdFile, block_ce0, "block_ce0");
    sc_trace(mVcdFile, block_we0, "block_we0");
    sc_trace(mVcdFile, block_d0, "block_d0");
    sc_trace(mVcdFile, block_q0, "block_q0");
    sc_trace(mVcdFile, block_ce1, "block_ce1");
    sc_trace(mVcdFile, block_we1, "block_we1");
    sc_trace(mVcdFile, block_q1, "block_q1");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_ap_start, "grp_aes_invMain_fu_133_ap_start");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_ap_done, "grp_aes_invMain_fu_133_ap_done");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_ap_idle, "grp_aes_invMain_fu_133_ap_idle");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_ap_ready, "grp_aes_invMain_fu_133_ap_ready");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_address0, "grp_aes_invMain_fu_133_state_address0");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_ce0, "grp_aes_invMain_fu_133_state_ce0");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_we0, "grp_aes_invMain_fu_133_state_we0");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_d0, "grp_aes_invMain_fu_133_state_d0");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_address1, "grp_aes_invMain_fu_133_state_address1");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_ce1, "grp_aes_invMain_fu_133_state_ce1");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_we1, "grp_aes_invMain_fu_133_state_we1");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_state_d1, "grp_aes_invMain_fu_133_state_d1");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_expandedKey_address0, "grp_aes_invMain_fu_133_expandedKey_address0");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_expandedKey_ce0, "grp_aes_invMain_fu_133_expandedKey_ce0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_ap_start, "grp_expandKey_fu_141_ap_start");
    sc_trace(mVcdFile, grp_expandKey_fu_141_ap_done, "grp_expandKey_fu_141_ap_done");
    sc_trace(mVcdFile, grp_expandKey_fu_141_ap_idle, "grp_expandKey_fu_141_ap_idle");
    sc_trace(mVcdFile, grp_expandKey_fu_141_ap_ready, "grp_expandKey_fu_141_ap_ready");
    sc_trace(mVcdFile, grp_expandKey_fu_141_expandedKey_address0, "grp_expandKey_fu_141_expandedKey_address0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_expandedKey_ce0, "grp_expandKey_fu_141_expandedKey_ce0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_expandedKey_we0, "grp_expandKey_fu_141_expandedKey_we0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_expandedKey_d0, "grp_expandKey_fu_141_expandedKey_d0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_key_address0, "grp_expandKey_fu_141_key_address0");
    sc_trace(mVcdFile, grp_expandKey_fu_141_key_ce0, "grp_expandKey_fu_141_key_ce0");
    sc_trace(mVcdFile, i_0_reg_89, "i_0_reg_89");
    sc_trace(mVcdFile, j_0_reg_100, "j_0_reg_100");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_111, "i_1_reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, j_1_reg_122, "j_1_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_aes_invMain_fu_133_ap_start_reg, "grp_aes_invMain_fu_133_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_expandKey_fu_141_ap_start_reg, "grp_expandKey_fu_141_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln76_fu_201_p1, "zext_ln76_fu_201_p1");
    sc_trace(mVcdFile, zext_ln76_1_fu_223_p1, "zext_ln76_1_fu_223_p1");
    sc_trace(mVcdFile, zext_ln92_fu_288_p1, "zext_ln92_fu_288_p1");
    sc_trace(mVcdFile, zext_ln92_1_fu_298_p1, "zext_ln92_1_fu_298_p1");
    sc_trace(mVcdFile, trunc_ln76_fu_168_p1, "trunc_ln76_fu_168_p1");
    sc_trace(mVcdFile, zext_ln74_fu_180_p1, "zext_ln74_fu_180_p1");
    sc_trace(mVcdFile, add_ln76_fu_196_p2, "add_ln76_fu_196_p2");
    sc_trace(mVcdFile, trunc_ln76_1_fu_206_p1, "trunc_ln76_1_fu_206_p1");
    sc_trace(mVcdFile, shl_ln76_1_fu_210_p3, "shl_ln76_1_fu_210_p3");
    sc_trace(mVcdFile, trunc_ln92_fu_243_p1, "trunc_ln92_fu_243_p1");
    sc_trace(mVcdFile, trunc_ln92_1_fu_271_p1, "trunc_ln92_1_fu_271_p1");
    sc_trace(mVcdFile, shl_ln92_1_fu_275_p3, "shl_ln92_1_fu_275_p3");
    sc_trace(mVcdFile, add_ln92_fu_283_p2, "add_ln92_fu_283_p2");
    sc_trace(mVcdFile, zext_ln90_fu_255_p1, "zext_ln90_fu_255_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_decrypt::~aes_decrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete expandedKey_U;
    delete block_U;
    delete grp_aes_invMain_fu_133;
    delete grp_expandKey_fu_141;
}

void aes_decrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes_invMain_fu_133_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            grp_aes_invMain_fu_133_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes_invMain_fu_133_ap_ready.read())) {
            grp_aes_invMain_fu_133_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_expandKey_fu_141_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln71_fu_156_p2.read(), ap_const_lv1_1))) {
            grp_expandKey_fu_141_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_expandKey_fu_141_ap_ready.read())) {
            grp_expandKey_fu_141_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln74_fu_184_p2.read(), ap_const_lv1_1))) {
        i_0_reg_89 = i_reg_310.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_89 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(icmp_ln90_fu_259_p2.read(), ap_const_lv1_1))) {
        i_1_reg_111 = i_10_reg_346.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(grp_aes_invMain_fu_133_ap_done.read(), ap_const_logic_1))) {
        i_1_reg_111 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln71_fu_156_p2.read(), ap_const_lv1_0))) {
        j_0_reg_100 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_100 = j_reg_323.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_231_p2.read()))) {
        j_1_reg_122 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        j_1_reg_122 = j_3_reg_359.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln74_fu_184_p2.read()))) {
        add_ln76_1_reg_333 = add_ln76_1_fu_218_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln90_fu_259_p2.read()))) {
        add_ln92_1_reg_369 = add_ln92_1_fu_293_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_10_reg_346 = i_10_fu_237_p2.read();
        zext_ln87_reg_338 = zext_ln87_fu_227_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_310 = i_fu_162_p2.read();
        zext_ln71_reg_302 = zext_ln71_fu_152_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_3_reg_359 = j_3_fu_265_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_323 = j_fu_190_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_231_p2.read()))) {
        shl_ln2_reg_351 = shl_ln2_fu_247_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln71_fu_156_p2.read(), ap_const_lv1_0))) {
        shl_ln_reg_315 = shl_ln_fu_172_p3.read();
    }
}

void aes_decrypt::thread_add_ln76_1_fu_218_p2() {
    add_ln76_1_fu_218_p2 = (!shl_ln76_1_fu_210_p3.read().is_01() || !zext_ln71_reg_302.read().is_01())? sc_lv<4>(): (sc_biguint<4>(shl_ln76_1_fu_210_p3.read()) + sc_biguint<4>(zext_ln71_reg_302.read()));
}

void aes_decrypt::thread_add_ln76_fu_196_p2() {
    add_ln76_fu_196_p2 = (!zext_ln74_fu_180_p1.read().is_01() || !shl_ln_reg_315.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln74_fu_180_p1.read()) + sc_biguint<4>(shl_ln_reg_315.read()));
}

void aes_decrypt::thread_add_ln92_1_fu_293_p2() {
    add_ln92_1_fu_293_p2 = (!zext_ln90_fu_255_p1.read().is_01() || !shl_ln2_reg_351.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln90_fu_255_p1.read()) + sc_biguint<4>(shl_ln2_reg_351.read()));
}

void aes_decrypt::thread_add_ln92_fu_283_p2() {
    add_ln92_fu_283_p2 = (!shl_ln92_1_fu_275_p3.read().is_01() || !zext_ln87_reg_338.read().is_01())? sc_lv<4>(): (sc_biguint<4>(shl_ln92_1_fu_275_p3.read()) + sc_biguint<4>(zext_ln87_reg_338.read()));
}

void aes_decrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_decrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_decrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_decrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_decrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_decrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_decrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_decrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_decrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_decrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_decrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(icmp_ln87_fu_231_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_decrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_decrypt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln87_fu_231_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_decrypt::thread_block_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        block_address0 =  (sc_lv<4>) (zext_ln92_fu_288_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        block_address0 =  (sc_lv<4>) (zext_ln76_1_fu_223_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_address0 = grp_aes_invMain_fu_133_state_address0.read();
    } else {
        block_address0 = "XXXX";
    }
}

void aes_decrypt::thread_block_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        block_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_ce0 = grp_aes_invMain_fu_133_state_ce0.read();
    } else {
        block_ce0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_block_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_ce1 = grp_aes_invMain_fu_133_state_ce1.read();
    } else {
        block_ce1 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_block_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        block_d0 = input_r_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_d0 = grp_aes_invMain_fu_133_state_d0.read();
    } else {
        block_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_decrypt::thread_block_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        block_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_we0 = grp_aes_invMain_fu_133_state_we0.read();
    } else {
        block_we0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_block_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        block_we1 = grp_aes_invMain_fu_133_state_we1.read();
    } else {
        block_we1 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_expandedKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expandedKey_address0 = grp_expandKey_fu_141_expandedKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expandedKey_address0 = grp_aes_invMain_fu_133_expandedKey_address0.read();
    } else {
        expandedKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_decrypt::thread_expandedKey_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expandedKey_ce0 = grp_expandKey_fu_141_expandedKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        expandedKey_ce0 = grp_aes_invMain_fu_133_expandedKey_ce0.read();
    } else {
        expandedKey_ce0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_expandedKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        expandedKey_we0 = grp_expandKey_fu_141_expandedKey_we0.read();
    } else {
        expandedKey_we0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_grp_aes_invMain_fu_133_ap_start() {
    grp_aes_invMain_fu_133_ap_start = grp_aes_invMain_fu_133_ap_start_reg.read();
}

void aes_decrypt::thread_grp_expandKey_fu_141_ap_start() {
    grp_expandKey_fu_141_ap_start = grp_expandKey_fu_141_ap_start_reg.read();
}

void aes_decrypt::thread_i_10_fu_237_p2() {
    i_10_fu_237_p2 = (!i_1_reg_111.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_111.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_decrypt::thread_i_fu_162_p2() {
    i_fu_162_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_89.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_decrypt::thread_icmp_ln71_fu_156_p2() {
    icmp_ln71_fu_156_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_89.read() == ap_const_lv3_4);
}

void aes_decrypt::thread_icmp_ln74_fu_184_p2() {
    icmp_ln74_fu_184_p2 = (!j_0_reg_100.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_100.read() == ap_const_lv3_4);
}

void aes_decrypt::thread_icmp_ln87_fu_231_p2() {
    icmp_ln87_fu_231_p2 = (!i_1_reg_111.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_111.read() == ap_const_lv3_4);
}

void aes_decrypt::thread_icmp_ln90_fu_259_p2() {
    icmp_ln90_fu_259_p2 = (!j_1_reg_122.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_122.read() == ap_const_lv3_4);
}

void aes_decrypt::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<4>) (zext_ln76_fu_201_p1.read());
}

void aes_decrypt::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_j_3_fu_265_p2() {
    j_3_fu_265_p2 = (!j_1_reg_122.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_1_reg_122.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_decrypt::thread_j_fu_190_p2() {
    j_fu_190_p2 = (!j_0_reg_100.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_100.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_decrypt::thread_key_address0() {
    key_address0 = grp_expandKey_fu_141_key_address0.read();
}

void aes_decrypt::thread_key_ce0() {
    key_ce0 = grp_expandKey_fu_141_key_ce0.read();
}

void aes_decrypt::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<4>) (zext_ln92_1_fu_298_p1.read());
}

void aes_decrypt::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_output_r_d0() {
    output_r_d0 = block_q0.read();
}

void aes_decrypt::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void aes_decrypt::thread_shl_ln2_fu_247_p3() {
    shl_ln2_fu_247_p3 = esl_concat<2,2>(trunc_ln92_fu_243_p1.read(), ap_const_lv2_0);
}

void aes_decrypt::thread_shl_ln76_1_fu_210_p3() {
    shl_ln76_1_fu_210_p3 = esl_concat<2,2>(trunc_ln76_1_fu_206_p1.read(), ap_const_lv2_0);
}

void aes_decrypt::thread_shl_ln92_1_fu_275_p3() {
    shl_ln92_1_fu_275_p3 = esl_concat<2,2>(trunc_ln92_1_fu_271_p1.read(), ap_const_lv2_0);
}

void aes_decrypt::thread_shl_ln_fu_172_p3() {
    shl_ln_fu_172_p3 = esl_concat<2,2>(trunc_ln76_fu_168_p1.read(), ap_const_lv2_0);
}

void aes_decrypt::thread_trunc_ln76_1_fu_206_p1() {
    trunc_ln76_1_fu_206_p1 = j_0_reg_100.read().range(2-1, 0);
}

void aes_decrypt::thread_trunc_ln76_fu_168_p1() {
    trunc_ln76_fu_168_p1 = i_0_reg_89.read().range(2-1, 0);
}

void aes_decrypt::thread_trunc_ln92_1_fu_271_p1() {
    trunc_ln92_1_fu_271_p1 = j_1_reg_122.read().range(2-1, 0);
}

void aes_decrypt::thread_trunc_ln92_fu_243_p1() {
    trunc_ln92_fu_243_p1 = i_1_reg_111.read().range(2-1, 0);
}

void aes_decrypt::thread_zext_ln71_fu_152_p1() {
    zext_ln71_fu_152_p1 = esl_zext<4,3>(i_0_reg_89.read());
}

void aes_decrypt::thread_zext_ln74_fu_180_p1() {
    zext_ln74_fu_180_p1 = esl_zext<4,3>(j_0_reg_100.read());
}

void aes_decrypt::thread_zext_ln76_1_fu_223_p1() {
    zext_ln76_1_fu_223_p1 = esl_zext<64,4>(add_ln76_1_reg_333.read());
}

void aes_decrypt::thread_zext_ln76_fu_201_p1() {
    zext_ln76_fu_201_p1 = esl_zext<64,4>(add_ln76_fu_196_p2.read());
}

void aes_decrypt::thread_zext_ln87_fu_227_p1() {
    zext_ln87_fu_227_p1 = esl_zext<4,3>(i_1_reg_111.read());
}

void aes_decrypt::thread_zext_ln90_fu_255_p1() {
    zext_ln90_fu_255_p1 = esl_zext<4,3>(j_1_reg_122.read());
}

void aes_decrypt::thread_zext_ln92_1_fu_298_p1() {
    zext_ln92_1_fu_298_p1 = esl_zext<64,4>(add_ln92_1_reg_369.read());
}

void aes_decrypt::thread_zext_ln92_fu_288_p1() {
    zext_ln92_fu_288_p1 = esl_zext<64,4>(add_ln92_fu_283_p2.read());
}

void aes_decrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln71_fu_156_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln74_fu_184_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_expandKey_fu_141_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_aes_invMain_fu_133_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln87_fu_231_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(icmp_ln90_fu_259_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

