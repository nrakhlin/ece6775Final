// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "feistel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic feistel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic feistel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> feistel::ap_ST_fsm_pp0_stage0 = "1";
const bool feistel::ap_const_boolean_1 = true;
const sc_lv<32> feistel::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool feistel::ap_const_boolean_0 = false;
const sc_lv<32> feistel::ap_const_lv32_18 = "11000";
const sc_lv<32> feistel::ap_const_lv32_1F = "11111";
const sc_lv<32> feistel::ap_const_lv32_10 = "10000";
const sc_lv<32> feistel::ap_const_lv32_17 = "10111";
const sc_lv<32> feistel::ap_const_lv32_8 = "1000";
const sc_lv<32> feistel::ap_const_lv32_F = "1111";

feistel::feistel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln119_fu_130_p1 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln119_1_fu_135_p1 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln119_2_fu_140_p1 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln119_3_fu_145_p1 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_a_fu_96_p4);
    sensitive << ( x );

    SC_METHOD(thread_add_ln119_fu_150_p2);
    sensitive << ( S_0_q0 );
    sensitive << ( S_1_q0 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( S_3_q0 );
    sensitive << ( xor_ln119_fu_156_p2 );

    SC_METHOD(thread_b_fu_106_p4);
    sensitive << ( x );

    SC_METHOD(thread_c_fu_116_p4);
    sensitive << ( x );

    SC_METHOD(thread_d_fu_126_p1);
    sensitive << ( x );

    SC_METHOD(thread_xor_ln119_fu_156_p2);
    sensitive << ( S_2_q0 );
    sensitive << ( add_ln119_fu_150_p2 );

    SC_METHOD(thread_zext_ln119_1_fu_135_p1);
    sensitive << ( b_fu_106_p4 );

    SC_METHOD(thread_zext_ln119_2_fu_140_p1);
    sensitive << ( c_fu_116_p4 );

    SC_METHOD(thread_zext_ln119_3_fu_145_p1);
    sensitive << ( d_fu_126_p1 );

    SC_METHOD(thread_zext_ln119_fu_130_p1);
    sensitive << ( a_fu_96_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "feistel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln119_fu_130_p1, "zext_ln119_fu_130_p1");
    sc_trace(mVcdFile, zext_ln119_1_fu_135_p1, "zext_ln119_1_fu_135_p1");
    sc_trace(mVcdFile, zext_ln119_2_fu_140_p1, "zext_ln119_2_fu_140_p1");
    sc_trace(mVcdFile, zext_ln119_3_fu_145_p1, "zext_ln119_3_fu_145_p1");
    sc_trace(mVcdFile, a_fu_96_p4, "a_fu_96_p4");
    sc_trace(mVcdFile, b_fu_106_p4, "b_fu_106_p4");
    sc_trace(mVcdFile, c_fu_116_p4, "c_fu_116_p4");
    sc_trace(mVcdFile, d_fu_126_p1, "d_fu_126_p1");
    sc_trace(mVcdFile, add_ln119_fu_150_p2, "add_ln119_fu_150_p2");
    sc_trace(mVcdFile, xor_ln119_fu_156_p2, "xor_ln119_fu_156_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

feistel::~feistel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void feistel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
}

void feistel::thread_S_0_address0() {
    S_0_address0 =  (sc_lv<8>) (zext_ln119_fu_130_p1.read());
}

void feistel::thread_S_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        S_0_ce0 = ap_const_logic_1;
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void feistel::thread_S_1_address0() {
    S_1_address0 =  (sc_lv<8>) (zext_ln119_1_fu_135_p1.read());
}

void feistel::thread_S_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        S_1_ce0 = ap_const_logic_1;
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void feistel::thread_S_2_address0() {
    S_2_address0 =  (sc_lv<8>) (zext_ln119_2_fu_140_p1.read());
}

void feistel::thread_S_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        S_2_ce0 = ap_const_logic_1;
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void feistel::thread_S_3_address0() {
    S_3_address0 =  (sc_lv<8>) (zext_ln119_3_fu_145_p1.read());
}

void feistel::thread_S_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        S_3_ce0 = ap_const_logic_1;
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void feistel::thread_a_fu_96_p4() {
    a_fu_96_p4 = x.read().range(31, 24);
}

void feistel::thread_add_ln119_fu_150_p2() {
    add_ln119_fu_150_p2 = (!S_1_q0.read().is_01() || !S_0_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_1_q0.read()) + sc_biguint<32>(S_0_q0.read()));
}

void feistel::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void feistel::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void feistel::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void feistel::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void feistel::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void feistel::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void feistel::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void feistel::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void feistel::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void feistel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void feistel::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void feistel::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void feistel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void feistel::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void feistel::thread_ap_return() {
    ap_return = (!S_3_q0.read().is_01() || !xor_ln119_fu_156_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_3_q0.read()) + sc_biguint<32>(xor_ln119_fu_156_p2.read()));
}

void feistel::thread_b_fu_106_p4() {
    b_fu_106_p4 = x.read().range(23, 16);
}

void feistel::thread_c_fu_116_p4() {
    c_fu_116_p4 = x.read().range(15, 8);
}

void feistel::thread_d_fu_126_p1() {
    d_fu_126_p1 = x.read().range(8-1, 0);
}

void feistel::thread_xor_ln119_fu_156_p2() {
    xor_ln119_fu_156_p2 = (S_2_q0.read() ^ add_ln119_fu_150_p2.read());
}

void feistel::thread_zext_ln119_1_fu_135_p1() {
    zext_ln119_1_fu_135_p1 = esl_zext<64,8>(b_fu_106_p4.read());
}

void feistel::thread_zext_ln119_2_fu_140_p1() {
    zext_ln119_2_fu_140_p1 = esl_zext<64,8>(c_fu_116_p4.read());
}

void feistel::thread_zext_ln119_3_fu_145_p1() {
    zext_ln119_3_fu_145_p1 = esl_zext<64,8>(d_fu_126_p1.read());
}

void feistel::thread_zext_ln119_fu_130_p1() {
    zext_ln119_fu_130_p1 = esl_zext<64,8>(a_fu_96_p4.read());
}

void feistel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

