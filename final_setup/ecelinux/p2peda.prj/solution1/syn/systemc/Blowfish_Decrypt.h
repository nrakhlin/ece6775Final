// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Blowfish_Decrypt_HH_
#define _Blowfish_Decrypt_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "feistel.h"

namespace ap_rtl {

struct Blowfish_Decrypt : public sc_module {
    // Port declarations 50
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > ciphertext_address0;
    sc_out< sc_logic > ciphertext_ce0;
    sc_in< sc_lv<8> > ciphertext_q0;
    sc_out< sc_lv<3> > ciphertext_address1;
    sc_out< sc_logic > ciphertext_ce1;
    sc_in< sc_lv<8> > ciphertext_q1;
    sc_out< sc_lv<3> > decryptedtext_address0;
    sc_out< sc_logic > decryptedtext_ce0;
    sc_out< sc_logic > decryptedtext_we0;
    sc_out< sc_lv<8> > decryptedtext_d0;
    sc_out< sc_lv<3> > decryptedtext_address1;
    sc_out< sc_logic > decryptedtext_ce1;
    sc_out< sc_logic > decryptedtext_we1;
    sc_out< sc_lv<8> > decryptedtext_d1;
    sc_in< sc_lv<32> > P_0_read;
    sc_in< sc_lv<32> > P_1_read;
    sc_in< sc_lv<32> > P_2_read;
    sc_in< sc_lv<32> > P_3_read;
    sc_in< sc_lv<32> > P_4_read;
    sc_in< sc_lv<32> > P_5_read;
    sc_in< sc_lv<32> > P_6_read;
    sc_in< sc_lv<32> > P_7_read;
    sc_in< sc_lv<32> > P_8_read;
    sc_in< sc_lv<32> > P_9_read;
    sc_in< sc_lv<32> > P_10_read;
    sc_in< sc_lv<32> > P_11_read;
    sc_in< sc_lv<32> > P_12_read;
    sc_in< sc_lv<32> > P_13_read;
    sc_in< sc_lv<32> > P_14_read;
    sc_in< sc_lv<32> > P_15_read;
    sc_in< sc_lv<32> > P_16_read;
    sc_in< sc_lv<32> > P_17_read;
    sc_out< sc_lv<8> > S_0_address0;
    sc_out< sc_logic > S_0_ce0;
    sc_in< sc_lv<32> > S_0_q0;
    sc_out< sc_lv<8> > S_1_address0;
    sc_out< sc_logic > S_1_ce0;
    sc_in< sc_lv<32> > S_1_q0;
    sc_out< sc_lv<8> > S_2_address0;
    sc_out< sc_logic > S_2_ce0;
    sc_in< sc_lv<32> > S_2_q0;
    sc_out< sc_lv<8> > S_3_address0;
    sc_out< sc_logic > S_3_ce0;
    sc_in< sc_lv<32> > S_3_q0;


    // Module declarations
    Blowfish_Decrypt(sc_module_name name);
    SC_HAS_PROCESS(Blowfish_Decrypt);

    ~Blowfish_Decrypt();

    sc_trace_file* mVcdFile;

    feistel* grp_feistel_fu_489;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > left_9_reg_420;
    sc_signal< sc_lv<32> > right_7_reg_430;
    sc_signal< sc_lv<5> > i_0_reg_440;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > ciphertext_load_reg_714;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > ciphertext_load_1_reg_719;
    sc_signal< sc_lv<8> > ciphertext_load_2_reg_734;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > ciphertext_load_3_reg_739;
    sc_signal< sc_lv<8> > ciphertext_load_4_reg_754;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > ciphertext_load_5_reg_759;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > left_8_fu_502_p5;
    sc_signal< sc_lv<32> > right_6_fu_510_p5;
    sc_signal< sc_lv<1> > icmp_ln96_fu_530_p2;
    sc_signal< sc_lv<1> > icmp_ln96_reg_880;
    sc_signal< sc_lv<1> > icmp_ln96_reg_880_pp0_iter1_reg;
    sc_signal< sc_lv<32> > left_12_fu_536_p2;
    sc_signal< sc_lv<32> > left_12_reg_884;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<5> > i_fu_543_p2;
    sc_signal< sc_lv<5> > i_reg_890;
    sc_signal< sc_lv<32> > grp_feistel_fu_489_ap_return;
    sc_signal< sc_lv<32> > tmp_11_reg_895;
    sc_signal< sc_lv<32> > right_fu_549_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<8> > trunc_ln103_fu_592_p1;
    sc_signal< sc_lv<8> > trunc_ln103_reg_905;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<8> > trunc_ln7_reg_910;
    sc_signal< sc_lv<8> > trunc_ln8_reg_915;
    sc_signal< sc_lv<8> > trunc_ln9_reg_920;
    sc_signal< sc_lv<8> > trunc_ln10_reg_925;
    sc_signal< sc_lv<8> > xor_ln248_fu_688_p2;
    sc_signal< sc_lv<8> > xor_ln248_reg_930;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state6;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > grp_feistel_fu_489_ap_start;
    sc_signal< sc_logic > grp_feistel_fu_489_ap_done;
    sc_signal< sc_logic > grp_feistel_fu_489_ap_idle;
    sc_signal< sc_logic > grp_feistel_fu_489_ap_ready;
    sc_signal< sc_lv<32> > grp_feistel_fu_489_x;
    sc_signal< sc_lv<8> > grp_feistel_fu_489_S_0_address0;
    sc_signal< sc_logic > grp_feistel_fu_489_S_0_ce0;
    sc_signal< sc_lv<8> > grp_feistel_fu_489_S_1_address0;
    sc_signal< sc_logic > grp_feistel_fu_489_S_1_ce0;
    sc_signal< sc_lv<8> > grp_feistel_fu_489_S_2_address0;
    sc_signal< sc_logic > grp_feistel_fu_489_S_2_ce0;
    sc_signal< sc_lv<8> > grp_feistel_fu_489_S_3_address0;
    sc_signal< sc_logic > grp_feistel_fu_489_S_3_ce0;
    sc_signal< sc_lv<32> > ap_phi_mux_right_7_phi_fu_433_p4;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_444_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter0_phi_ln97_reg_452;
    sc_signal< sc_logic > grp_feistel_fu_489_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<8> > xor_ln244_fu_698_p2;
    sc_signal< sc_lv<4> > tmp_33_fu_520_p4;
    sc_signal< sc_lv<16> > trunc_ln102_5_fu_571_p1;
    sc_signal< sc_lv<16> > trunc_ln102_4_fu_568_p1;
    sc_signal< sc_lv<24> > trunc_ln102_3_fu_564_p1;
    sc_signal< sc_lv<24> > trunc_ln102_2_fu_561_p1;
    sc_signal< sc_lv<16> > trunc_ln103_5_fu_605_p1;
    sc_signal< sc_lv<16> > trunc_ln103_4_fu_602_p1;
    sc_signal< sc_lv<24> > trunc_ln103_3_fu_598_p1;
    sc_signal< sc_lv<24> > trunc_ln103_2_fu_595_p1;
    sc_signal< sc_lv<32> > left_fu_609_p2;
    sc_signal< sc_lv<24> > xor_ln103_2_fu_620_p2;
    sc_signal< sc_lv<16> > xor_ln103_1_fu_614_p2;
    sc_signal< sc_lv<32> > right_8_fu_575_p2;
    sc_signal< sc_lv<24> > xor_ln102_2_fu_586_p2;
    sc_signal< sc_lv<16> > xor_ln102_1_fu_580_p2;
    sc_signal< sc_lv<8> > trunc_ln102_1_fu_557_p1;
    sc_signal< sc_lv<8> > trunc_ln102_fu_554_p1;
    sc_signal< sc_lv<8> > trunc_ln103_1_fu_694_p1;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_620;
    sc_signal< bool > ap_condition_399;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_pp0_stage0;
    static const sc_lv<11> ap_ST_fsm_pp0_stage1;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<11> ap_ST_fsm_state12;
    static const sc_lv<11> ap_ST_fsm_state13;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_11;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<5> ap_const_lv5_5;
    static const sc_lv<5> ap_const_lv5_6;
    static const sc_lv<5> ap_const_lv5_7;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<5> ap_const_lv5_9;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<5> ap_const_lv5_B;
    static const sc_lv<5> ap_const_lv5_C;
    static const sc_lv<5> ap_const_lv5_D;
    static const sc_lv<5> ap_const_lv5_E;
    static const sc_lv<5> ap_const_lv5_F;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_S_0_address0();
    void thread_S_0_ce0();
    void thread_S_1_address0();
    void thread_S_1_ce0();
    void thread_S_2_address0();
    void thread_S_2_ce0();
    void thread_S_3_address0();
    void thread_S_3_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state6_pp0_stage0_iter0();
    void thread_ap_block_state7_pp0_stage1_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_block_state9_pp0_stage1_iter1();
    void thread_ap_condition_399();
    void thread_ap_condition_620();
    void thread_ap_condition_pp0_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_444_p4();
    void thread_ap_phi_mux_right_7_phi_fu_433_p4();
    void thread_ap_ready();
    void thread_ciphertext_address0();
    void thread_ciphertext_address1();
    void thread_ciphertext_ce0();
    void thread_ciphertext_ce1();
    void thread_decryptedtext_address0();
    void thread_decryptedtext_address1();
    void thread_decryptedtext_ce0();
    void thread_decryptedtext_ce1();
    void thread_decryptedtext_d0();
    void thread_decryptedtext_d1();
    void thread_decryptedtext_we0();
    void thread_decryptedtext_we1();
    void thread_grp_feistel_fu_489_ap_start();
    void thread_grp_feistel_fu_489_x();
    void thread_i_fu_543_p2();
    void thread_icmp_ln96_fu_530_p2();
    void thread_left_12_fu_536_p2();
    void thread_left_8_fu_502_p5();
    void thread_left_fu_609_p2();
    void thread_right_6_fu_510_p5();
    void thread_right_8_fu_575_p2();
    void thread_right_fu_549_p2();
    void thread_tmp_33_fu_520_p4();
    void thread_trunc_ln102_1_fu_557_p1();
    void thread_trunc_ln102_2_fu_561_p1();
    void thread_trunc_ln102_3_fu_564_p1();
    void thread_trunc_ln102_4_fu_568_p1();
    void thread_trunc_ln102_5_fu_571_p1();
    void thread_trunc_ln102_fu_554_p1();
    void thread_trunc_ln103_1_fu_694_p1();
    void thread_trunc_ln103_2_fu_595_p1();
    void thread_trunc_ln103_3_fu_598_p1();
    void thread_trunc_ln103_4_fu_602_p1();
    void thread_trunc_ln103_5_fu_605_p1();
    void thread_trunc_ln103_fu_592_p1();
    void thread_xor_ln102_1_fu_580_p2();
    void thread_xor_ln102_2_fu_586_p2();
    void thread_xor_ln103_1_fu_614_p2();
    void thread_xor_ln103_2_fu_620_p2();
    void thread_xor_ln244_fu_698_p2();
    void thread_xor_ln248_fu_688_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
