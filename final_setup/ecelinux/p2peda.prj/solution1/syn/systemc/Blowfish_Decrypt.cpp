// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Decrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Decrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Decrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state1 = "1";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state2 = "10";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state3 = "100";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_5 = "101";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_0 = "0";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_6 = "110";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_7 = "111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_A = "1010";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_11 = "10001";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_7 = "111";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_B = "1011";
const sc_lv<4> Blowfish_Decrypt::ap_const_lv4_0 = "0000";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_1F = "11111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1F = "11111";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_E1 = "11100001";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_17 = "10111";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_A0 = "10100000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_F = "1111";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_2D = "101101";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_C = "1100";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_E7 = "11100111";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_61 = "1100001";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_4F = "1001111";
const sc_lv<8> Blowfish_Decrypt::ap_const_lv8_4D = "1001101";
const bool Blowfish_Decrypt::ap_const_boolean_1 = true;

Blowfish_Decrypt::Blowfish_Decrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    P_U = new Blowfish_Decrypt_P("P_U");
    P_U->clk(ap_clk);
    P_U->reset(ap_rst);
    P_U->address0(P_address0);
    P_U->ce0(P_ce0);
    P_U->q0(P_q0);
    S_0_U = new Blowfish_Decrypt_g8j("S_0_U");
    S_0_U->clk(ap_clk);
    S_0_U->reset(ap_rst);
    S_0_U->address0(S_0_address0);
    S_0_U->ce0(S_0_ce0);
    S_0_U->q0(S_0_q0);
    S_1_U = new Blowfish_Decrypt_hbi("S_1_U");
    S_1_U->clk(ap_clk);
    S_1_U->reset(ap_rst);
    S_1_U->address0(S_1_address0);
    S_1_U->ce0(S_1_ce0);
    S_1_U->q0(S_1_q0);
    S_2_U = new Blowfish_Decrypt_ibs("S_2_U");
    S_2_U->clk(ap_clk);
    S_2_U->reset(ap_rst);
    S_2_U->address0(S_2_address0);
    S_2_U->ce0(S_2_ce0);
    S_2_U->q0(S_2_q0);
    S_3_U = new Blowfish_Decrypt_jbC("S_3_U");
    S_3_U->clk(ap_clk);
    S_3_U->reset(ap_rst);
    S_3_U->address0(S_3_address0);
    S_3_U->ce0(S_3_ce0);
    S_3_U->q0(S_3_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_P_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln110_fu_378_p1 );

    SC_METHOD(thread_P_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln140_fu_501_p1 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln140_1_fu_506_p1 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln140_2_fu_511_p1 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln140_3_fu_516_p1 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_a_fu_465_p4);
    sensitive << ( left_4_fu_447_p2 );

    SC_METHOD(thread_add_ln140_1_fu_533_p2);
    sensitive << ( S_3_q0 );
    sensitive << ( xor_ln140_fu_527_p2 );

    SC_METHOD(thread_add_ln140_fu_521_p2);
    sensitive << ( S_0_q0 );
    sensitive << ( S_1_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_b_fu_475_p4);
    sensitive << ( xor_ln110_2_fu_459_p2 );

    SC_METHOD(thread_c_fu_485_p4);
    sensitive << ( xor_ln110_1_fu_453_p2 );

    SC_METHOD(thread_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_d_fu_495_p2);
    sensitive << ( trunc_ln110_1_fu_427_p1 );
    sensitive << ( trunc_ln110_fu_423_p1 );

    SC_METHOD(thread_decryptedtext_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( xor_ln262_fu_399_p2 );
    sensitive << ( xor_ln264_fu_558_p2 );
    sensitive << ( xor_ln266_fu_586_p2 );
    sensitive << ( xor_ln268_fu_620_p2 );

    SC_METHOD(thread_decryptedtext_d1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( xor_ln263_fu_416_p2 );
    sensitive << ( xor_ln265_fu_565_p2 );
    sensitive << ( xor_ln267_fu_603_p2 );
    sensitive << ( xor_ln269_fu_626_p2 );

    SC_METHOD(thread_decryptedtext_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln109_fu_372_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln109_fu_372_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_i_fu_383_p2);
    sensitive << ( i_0_reg_333 );

    SC_METHOD(thread_icmp_ln109_fu_372_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_fu_362_p4 );

    SC_METHOD(thread_left_4_fu_447_p2);
    sensitive << ( P_q0 );
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_left_fu_344_p5);
    sensitive << ( ciphertext_load_reg_642 );
    sensitive << ( ciphertext_load_1_reg_647 );
    sensitive << ( ciphertext_load_2_reg_662 );
    sensitive << ( ciphertext_load_3_reg_667 );

    SC_METHOD(thread_right_1_fu_352_p5);
    sensitive << ( ciphertext_q0 );
    sensitive << ( ciphertext_q1 );
    sensitive << ( ciphertext_load_4_reg_682 );
    sensitive << ( ciphertext_load_5_reg_687 );

    SC_METHOD(thread_right_fu_539_p2);
    sensitive << ( add_ln140_1_reg_750 );
    sensitive << ( left_1_reg_313 );

    SC_METHOD(thread_tmp_fu_362_p4);
    sensitive << ( i_0_reg_333 );

    SC_METHOD(thread_trunc_ln110_1_fu_427_p1);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_trunc_ln110_2_fu_431_p1);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_trunc_ln110_3_fu_435_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln110_4_fu_439_p1);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_trunc_ln110_5_fu_443_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln110_fu_423_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_trunc_ln115_fu_572_p1);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_trunc_ln116_fu_544_p1);
    sensitive << ( left_1_reg_313 );

    SC_METHOD(thread_trunc_ln262_1_fu_389_p4);
    sensitive << ( left_1_reg_313 );

    SC_METHOD(thread_trunc_ln263_1_fu_406_p4);
    sensitive << ( left_1_reg_313 );

    SC_METHOD(thread_trunc_ln264_1_fu_548_p4);
    sensitive << ( left_1_reg_313 );

    SC_METHOD(thread_trunc_ln266_1_fu_576_p4);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_trunc_ln267_1_fu_593_p4);
    sensitive << ( right_2_reg_323 );

    SC_METHOD(thread_xor_ln110_1_fu_453_p2);
    sensitive << ( trunc_ln110_5_fu_443_p1 );
    sensitive << ( trunc_ln110_4_fu_439_p1 );

    SC_METHOD(thread_xor_ln110_2_fu_459_p2);
    sensitive << ( trunc_ln110_3_fu_435_p1 );
    sensitive << ( trunc_ln110_2_fu_431_p1 );

    SC_METHOD(thread_xor_ln140_fu_527_p2);
    sensitive << ( S_2_q0 );
    sensitive << ( add_ln140_fu_521_p2 );

    SC_METHOD(thread_xor_ln262_fu_399_p2);
    sensitive << ( trunc_ln262_1_fu_389_p4 );

    SC_METHOD(thread_xor_ln263_fu_416_p2);
    sensitive << ( trunc_ln263_1_fu_406_p4 );

    SC_METHOD(thread_xor_ln264_fu_558_p2);
    sensitive << ( trunc_ln264_1_fu_548_p4 );

    SC_METHOD(thread_xor_ln265_fu_565_p2);
    sensitive << ( trunc_ln116_fu_544_p1 );

    SC_METHOD(thread_xor_ln266_fu_586_p2);
    sensitive << ( trunc_ln266_1_fu_576_p4 );

    SC_METHOD(thread_xor_ln267_fu_603_p2);
    sensitive << ( trunc_ln267_1_fu_593_p4 );

    SC_METHOD(thread_xor_ln268_fu_620_p2);
    sensitive << ( trunc_ln268_1_reg_765 );

    SC_METHOD(thread_xor_ln269_fu_626_p2);
    sensitive << ( trunc_ln115_reg_760 );

    SC_METHOD(thread_zext_ln110_fu_378_p1);
    sensitive << ( i_0_reg_333 );

    SC_METHOD(thread_zext_ln140_1_fu_506_p1);
    sensitive << ( b_fu_475_p4 );

    SC_METHOD(thread_zext_ln140_2_fu_511_p1);
    sensitive << ( c_fu_485_p4 );

    SC_METHOD(thread_zext_ln140_3_fu_516_p1);
    sensitive << ( d_fu_495_p2 );

    SC_METHOD(thread_zext_ln140_fu_501_p1);
    sensitive << ( a_fu_465_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln109_fu_372_p2 );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Decrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ciphertext_address0, "(port)ciphertext_address0");
    sc_trace(mVcdFile, ciphertext_ce0, "(port)ciphertext_ce0");
    sc_trace(mVcdFile, ciphertext_q0, "(port)ciphertext_q0");
    sc_trace(mVcdFile, ciphertext_address1, "(port)ciphertext_address1");
    sc_trace(mVcdFile, ciphertext_ce1, "(port)ciphertext_ce1");
    sc_trace(mVcdFile, ciphertext_q1, "(port)ciphertext_q1");
    sc_trace(mVcdFile, decryptedtext_address0, "(port)decryptedtext_address0");
    sc_trace(mVcdFile, decryptedtext_ce0, "(port)decryptedtext_ce0");
    sc_trace(mVcdFile, decryptedtext_we0, "(port)decryptedtext_we0");
    sc_trace(mVcdFile, decryptedtext_d0, "(port)decryptedtext_d0");
    sc_trace(mVcdFile, decryptedtext_address1, "(port)decryptedtext_address1");
    sc_trace(mVcdFile, decryptedtext_ce1, "(port)decryptedtext_ce1");
    sc_trace(mVcdFile, decryptedtext_we1, "(port)decryptedtext_we1");
    sc_trace(mVcdFile, decryptedtext_d1, "(port)decryptedtext_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, P_address0, "P_address0");
    sc_trace(mVcdFile, P_ce0, "P_ce0");
    sc_trace(mVcdFile, P_q0, "P_q0");
    sc_trace(mVcdFile, S_0_address0, "S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "S_3_q0");
    sc_trace(mVcdFile, ciphertext_load_reg_642, "ciphertext_load_reg_642");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ciphertext_load_1_reg_647, "ciphertext_load_1_reg_647");
    sc_trace(mVcdFile, ciphertext_load_2_reg_662, "ciphertext_load_2_reg_662");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ciphertext_load_3_reg_667, "ciphertext_load_3_reg_667");
    sc_trace(mVcdFile, ciphertext_load_4_reg_682, "ciphertext_load_4_reg_682");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ciphertext_load_5_reg_687, "ciphertext_load_5_reg_687");
    sc_trace(mVcdFile, left_fu_344_p5, "left_fu_344_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, right_1_fu_352_p5, "right_1_fu_352_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln109_fu_372_p2, "icmp_ln109_fu_372_p2");
    sc_trace(mVcdFile, i_fu_383_p2, "i_fu_383_p2");
    sc_trace(mVcdFile, i_reg_720, "i_reg_720");
    sc_trace(mVcdFile, left_4_fu_447_p2, "left_4_fu_447_p2");
    sc_trace(mVcdFile, left_4_reg_725, "left_4_reg_725");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, add_ln140_1_fu_533_p2, "add_ln140_1_fu_533_p2");
    sc_trace(mVcdFile, add_ln140_1_reg_750, "add_ln140_1_reg_750");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, right_fu_539_p2, "right_fu_539_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln115_fu_572_p1, "trunc_ln115_fu_572_p1");
    sc_trace(mVcdFile, trunc_ln115_reg_760, "trunc_ln115_reg_760");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, trunc_ln268_1_reg_765, "trunc_ln268_1_reg_765");
    sc_trace(mVcdFile, left_1_reg_313, "left_1_reg_313");
    sc_trace(mVcdFile, right_2_reg_323, "right_2_reg_323");
    sc_trace(mVcdFile, i_0_reg_333, "i_0_reg_333");
    sc_trace(mVcdFile, zext_ln110_fu_378_p1, "zext_ln110_fu_378_p1");
    sc_trace(mVcdFile, zext_ln140_fu_501_p1, "zext_ln140_fu_501_p1");
    sc_trace(mVcdFile, zext_ln140_1_fu_506_p1, "zext_ln140_1_fu_506_p1");
    sc_trace(mVcdFile, zext_ln140_2_fu_511_p1, "zext_ln140_2_fu_511_p1");
    sc_trace(mVcdFile, zext_ln140_3_fu_516_p1, "zext_ln140_3_fu_516_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, xor_ln262_fu_399_p2, "xor_ln262_fu_399_p2");
    sc_trace(mVcdFile, xor_ln263_fu_416_p2, "xor_ln263_fu_416_p2");
    sc_trace(mVcdFile, xor_ln264_fu_558_p2, "xor_ln264_fu_558_p2");
    sc_trace(mVcdFile, xor_ln265_fu_565_p2, "xor_ln265_fu_565_p2");
    sc_trace(mVcdFile, xor_ln266_fu_586_p2, "xor_ln266_fu_586_p2");
    sc_trace(mVcdFile, xor_ln267_fu_603_p2, "xor_ln267_fu_603_p2");
    sc_trace(mVcdFile, xor_ln268_fu_620_p2, "xor_ln268_fu_620_p2");
    sc_trace(mVcdFile, xor_ln269_fu_626_p2, "xor_ln269_fu_626_p2");
    sc_trace(mVcdFile, tmp_fu_362_p4, "tmp_fu_362_p4");
    sc_trace(mVcdFile, trunc_ln262_1_fu_389_p4, "trunc_ln262_1_fu_389_p4");
    sc_trace(mVcdFile, trunc_ln263_1_fu_406_p4, "trunc_ln263_1_fu_406_p4");
    sc_trace(mVcdFile, trunc_ln110_5_fu_443_p1, "trunc_ln110_5_fu_443_p1");
    sc_trace(mVcdFile, trunc_ln110_4_fu_439_p1, "trunc_ln110_4_fu_439_p1");
    sc_trace(mVcdFile, trunc_ln110_3_fu_435_p1, "trunc_ln110_3_fu_435_p1");
    sc_trace(mVcdFile, trunc_ln110_2_fu_431_p1, "trunc_ln110_2_fu_431_p1");
    sc_trace(mVcdFile, xor_ln110_2_fu_459_p2, "xor_ln110_2_fu_459_p2");
    sc_trace(mVcdFile, xor_ln110_1_fu_453_p2, "xor_ln110_1_fu_453_p2");
    sc_trace(mVcdFile, trunc_ln110_1_fu_427_p1, "trunc_ln110_1_fu_427_p1");
    sc_trace(mVcdFile, trunc_ln110_fu_423_p1, "trunc_ln110_fu_423_p1");
    sc_trace(mVcdFile, a_fu_465_p4, "a_fu_465_p4");
    sc_trace(mVcdFile, b_fu_475_p4, "b_fu_475_p4");
    sc_trace(mVcdFile, c_fu_485_p4, "c_fu_485_p4");
    sc_trace(mVcdFile, d_fu_495_p2, "d_fu_495_p2");
    sc_trace(mVcdFile, add_ln140_fu_521_p2, "add_ln140_fu_521_p2");
    sc_trace(mVcdFile, xor_ln140_fu_527_p2, "xor_ln140_fu_527_p2");
    sc_trace(mVcdFile, trunc_ln264_1_fu_548_p4, "trunc_ln264_1_fu_548_p4");
    sc_trace(mVcdFile, trunc_ln116_fu_544_p1, "trunc_ln116_fu_544_p1");
    sc_trace(mVcdFile, trunc_ln266_1_fu_576_p4, "trunc_ln266_1_fu_576_p4");
    sc_trace(mVcdFile, trunc_ln267_1_fu_593_p4, "trunc_ln267_1_fu_593_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Blowfish_Decrypt::~Blowfish_Decrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete P_U;
    delete S_0_U;
    delete S_1_U;
    delete S_2_U;
    delete S_3_U;
}

void Blowfish_Decrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_reg_333 = i_reg_720.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_333 = ap_const_lv5_11;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        left_1_reg_313 = left_4_reg_725.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        left_1_reg_313 = right_1_fu_352_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        right_2_reg_323 = right_fu_539_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_2_reg_323 = left_fu_344_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        add_ln140_1_reg_750 = add_ln140_1_fu_533_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_load_1_reg_647 = ciphertext_q1.read();
        ciphertext_load_reg_642 = ciphertext_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_load_2_reg_662 = ciphertext_q0.read();
        ciphertext_load_3_reg_667 = ciphertext_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_load_4_reg_682 = ciphertext_q0.read();
        ciphertext_load_5_reg_687 = ciphertext_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln109_fu_372_p2.read(), ap_const_lv1_0))) {
        i_reg_720 = i_fu_383_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        left_4_reg_725 = left_4_fu_447_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        trunc_ln115_reg_760 = trunc_ln115_fu_572_p1.read();
        trunc_ln268_1_reg_765 = right_2_reg_323.read().range(15, 8);
    }
}

void Blowfish_Decrypt::thread_P_address0() {
    P_address0 =  (sc_lv<5>) (zext_ln110_fu_378_p1.read());
}

void Blowfish_Decrypt::thread_P_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        P_ce0 = ap_const_logic_1;
    } else {
        P_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_0_address0() {
    S_0_address0 =  (sc_lv<8>) (zext_ln140_fu_501_p1.read());
}

void Blowfish_Decrypt::thread_S_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_0_ce0 = ap_const_logic_1;
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_1_address0() {
    S_1_address0 =  (sc_lv<8>) (zext_ln140_1_fu_506_p1.read());
}

void Blowfish_Decrypt::thread_S_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_1_ce0 = ap_const_logic_1;
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_2_address0() {
    S_2_address0 =  (sc_lv<8>) (zext_ln140_2_fu_511_p1.read());
}

void Blowfish_Decrypt::thread_S_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_2_ce0 = ap_const_logic_1;
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_3_address0() {
    S_3_address0 =  (sc_lv<8>) (zext_ln140_3_fu_516_p1.read());
}

void Blowfish_Decrypt::thread_S_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_3_ce0 = ap_const_logic_1;
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_a_fu_465_p4() {
    a_fu_465_p4 = left_4_fu_447_p2.read().range(31, 24);
}

void Blowfish_Decrypt::thread_add_ln140_1_fu_533_p2() {
    add_ln140_1_fu_533_p2 = (!S_3_q0.read().is_01() || !xor_ln140_fu_527_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_3_q0.read()) + sc_biguint<32>(xor_ln140_fu_527_p2.read()));
}

void Blowfish_Decrypt::thread_add_ln140_fu_521_p2() {
    add_ln140_fu_521_p2 = (!S_0_q0.read().is_01() || !S_1_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_0_q0.read()) + sc_biguint<32>(S_1_q0.read()));
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Blowfish_Decrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_b_fu_475_p4() {
    b_fu_475_p4 = xor_ln110_2_fu_459_p2.read().range(23, 16);
}

void Blowfish_Decrypt::thread_c_fu_485_p4() {
    c_fu_485_p4 = xor_ln110_1_fu_453_p2.read().range(15, 8);
}

void Blowfish_Decrypt::thread_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        ciphertext_address0 = "XXX";
    }
}

void Blowfish_Decrypt::thread_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        ciphertext_address1 = "XXX";
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce0 = ap_const_logic_1;
    } else {
        ciphertext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce1 = ap_const_logic_1;
    } else {
        ciphertext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_d_fu_495_p2() {
    d_fu_495_p2 = (trunc_ln110_1_fu_427_p1.read() ^ trunc_ln110_fu_423_p1.read());
}

void Blowfish_Decrypt::thread_decryptedtext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        decryptedtext_address0 = "XXX";
    }
}

void Blowfish_Decrypt::thread_decryptedtext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        decryptedtext_address1 = "XXX";
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_ce0 = ap_const_logic_1;
    } else {
        decryptedtext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_ce1 = ap_const_logic_1;
    } else {
        decryptedtext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d0 = xor_ln268_fu_620_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d0 = xor_ln266_fu_586_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d0 = xor_ln264_fu_558_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_d0 = xor_ln262_fu_399_p2.read();
    } else {
        decryptedtext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d1 = xor_ln269_fu_626_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d1 = xor_ln267_fu_603_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d1 = xor_ln265_fu_565_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_d1 = xor_ln263_fu_416_p2.read();
    } else {
        decryptedtext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln109_fu_372_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_we0 = ap_const_logic_1;
    } else {
        decryptedtext_we0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln109_fu_372_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_we1 = ap_const_logic_1;
    } else {
        decryptedtext_we1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_i_fu_383_p2() {
    i_fu_383_p2 = (!ap_const_lv5_1F.is_01() || !i_0_reg_333.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(i_0_reg_333.read()));
}

void Blowfish_Decrypt::thread_icmp_ln109_fu_372_p2() {
    icmp_ln109_fu_372_p2 = (!tmp_fu_362_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_362_p4.read() == ap_const_lv4_0);
}

void Blowfish_Decrypt::thread_left_4_fu_447_p2() {
    left_4_fu_447_p2 = (P_q0.read() ^ right_2_reg_323.read());
}

void Blowfish_Decrypt::thread_left_fu_344_p5() {
    left_fu_344_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_reg_642.read(), ciphertext_load_1_reg_647.read()), ciphertext_load_2_reg_662.read()), ciphertext_load_3_reg_667.read());
}

void Blowfish_Decrypt::thread_right_1_fu_352_p5() {
    right_1_fu_352_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_4_reg_682.read(), ciphertext_load_5_reg_687.read()), ciphertext_q0.read()), ciphertext_q1.read());
}

void Blowfish_Decrypt::thread_right_fu_539_p2() {
    right_fu_539_p2 = (left_1_reg_313.read() ^ add_ln140_1_reg_750.read());
}

void Blowfish_Decrypt::thread_tmp_fu_362_p4() {
    tmp_fu_362_p4 = i_0_reg_333.read().range(4, 1);
}

void Blowfish_Decrypt::thread_trunc_ln110_1_fu_427_p1() {
    trunc_ln110_1_fu_427_p1 = right_2_reg_323.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln110_2_fu_431_p1() {
    trunc_ln110_2_fu_431_p1 = right_2_reg_323.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln110_3_fu_435_p1() {
    trunc_ln110_3_fu_435_p1 = P_q0.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln110_4_fu_439_p1() {
    trunc_ln110_4_fu_439_p1 = right_2_reg_323.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln110_5_fu_443_p1() {
    trunc_ln110_5_fu_443_p1 = P_q0.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln110_fu_423_p1() {
    trunc_ln110_fu_423_p1 = P_q0.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln115_fu_572_p1() {
    trunc_ln115_fu_572_p1 = right_2_reg_323.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln116_fu_544_p1() {
    trunc_ln116_fu_544_p1 = left_1_reg_313.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln262_1_fu_389_p4() {
    trunc_ln262_1_fu_389_p4 = left_1_reg_313.read().range(31, 24);
}

void Blowfish_Decrypt::thread_trunc_ln263_1_fu_406_p4() {
    trunc_ln263_1_fu_406_p4 = left_1_reg_313.read().range(23, 16);
}

void Blowfish_Decrypt::thread_trunc_ln264_1_fu_548_p4() {
    trunc_ln264_1_fu_548_p4 = left_1_reg_313.read().range(15, 8);
}

void Blowfish_Decrypt::thread_trunc_ln266_1_fu_576_p4() {
    trunc_ln266_1_fu_576_p4 = right_2_reg_323.read().range(31, 24);
}

void Blowfish_Decrypt::thread_trunc_ln267_1_fu_593_p4() {
    trunc_ln267_1_fu_593_p4 = right_2_reg_323.read().range(23, 16);
}

void Blowfish_Decrypt::thread_xor_ln110_1_fu_453_p2() {
    xor_ln110_1_fu_453_p2 = (trunc_ln110_5_fu_443_p1.read() ^ trunc_ln110_4_fu_439_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln110_2_fu_459_p2() {
    xor_ln110_2_fu_459_p2 = (trunc_ln110_3_fu_435_p1.read() ^ trunc_ln110_2_fu_431_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln140_fu_527_p2() {
    xor_ln140_fu_527_p2 = (S_2_q0.read() ^ add_ln140_fu_521_p2.read());
}

void Blowfish_Decrypt::thread_xor_ln262_fu_399_p2() {
    xor_ln262_fu_399_p2 = (trunc_ln262_1_fu_389_p4.read() ^ ap_const_lv8_E1);
}

void Blowfish_Decrypt::thread_xor_ln263_fu_416_p2() {
    xor_ln263_fu_416_p2 = (trunc_ln263_1_fu_406_p4.read() ^ ap_const_lv8_A0);
}

void Blowfish_Decrypt::thread_xor_ln264_fu_558_p2() {
    xor_ln264_fu_558_p2 = (trunc_ln264_1_fu_548_p4.read() ^ ap_const_lv8_2D);
}

void Blowfish_Decrypt::thread_xor_ln265_fu_565_p2() {
    xor_ln265_fu_565_p2 = (trunc_ln116_fu_544_p1.read() ^ ap_const_lv8_C);
}

void Blowfish_Decrypt::thread_xor_ln266_fu_586_p2() {
    xor_ln266_fu_586_p2 = (trunc_ln266_1_fu_576_p4.read() ^ ap_const_lv8_E7);
}

void Blowfish_Decrypt::thread_xor_ln267_fu_603_p2() {
    xor_ln267_fu_603_p2 = (trunc_ln267_1_fu_593_p4.read() ^ ap_const_lv8_61);
}

void Blowfish_Decrypt::thread_xor_ln268_fu_620_p2() {
    xor_ln268_fu_620_p2 = (trunc_ln268_1_reg_765.read() ^ ap_const_lv8_4F);
}

void Blowfish_Decrypt::thread_xor_ln269_fu_626_p2() {
    xor_ln269_fu_626_p2 = (trunc_ln115_reg_760.read() ^ ap_const_lv8_4D);
}

void Blowfish_Decrypt::thread_zext_ln110_fu_378_p1() {
    zext_ln110_fu_378_p1 = esl_zext<64,5>(i_0_reg_333.read());
}

void Blowfish_Decrypt::thread_zext_ln140_1_fu_506_p1() {
    zext_ln140_1_fu_506_p1 = esl_zext<64,8>(b_fu_475_p4.read());
}

void Blowfish_Decrypt::thread_zext_ln140_2_fu_511_p1() {
    zext_ln140_2_fu_511_p1 = esl_zext<64,8>(c_fu_485_p4.read());
}

void Blowfish_Decrypt::thread_zext_ln140_3_fu_516_p1() {
    zext_ln140_3_fu_516_p1 = esl_zext<64,8>(d_fu_495_p2.read());
}

void Blowfish_Decrypt::thread_zext_ln140_fu_501_p1() {
    zext_ln140_fu_501_p1 = esl_zext<64,8>(a_fu_465_p4.read());
}

void Blowfish_Decrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln109_fu_372_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

}

