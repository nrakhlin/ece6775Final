// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Decrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Decrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Decrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state1 = "1";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state2 = "10";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state3 = "100";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> Blowfish_Decrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_5 = "101";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_1 = "1";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_6 = "110";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_7 = "111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_9 = "1001";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_11 = "10001";
const sc_lv<1> Blowfish_Decrypt::ap_const_lv1_0 = "0";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_3 = "11";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_4 = "100";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_5 = "101";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_6 = "110";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_7 = "111";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_8 = "1000";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_9 = "1001";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_A = "1010";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_B = "1011";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_C = "1100";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_D = "1101";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_E = "1110";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_F = "1111";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_2 = "10";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Blowfish_Decrypt::ap_const_lv64_7 = "111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_A = "1010";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_B = "1011";
const sc_lv<4> Blowfish_Decrypt::ap_const_lv4_0 = "0000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_1F = "11111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_Decrypt::ap_const_lv32_F = "1111";
const sc_lv<5> Blowfish_Decrypt::ap_const_lv5_1F = "11111";
const bool Blowfish_Decrypt::ap_const_boolean_1 = true;

Blowfish_Decrypt::Blowfish_Decrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln81_fu_705_p1 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln81_8_fu_710_p1 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln81_9_fu_715_p1 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln81_10_fu_720_p1 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_a_fu_669_p4);
    sensitive << ( left_12_fu_651_p2 );

    SC_METHOD(thread_add_ln81_4_fu_743_p2);
    sensitive << ( S_3_q0 );
    sensitive << ( xor_ln81_fu_737_p2 );

    SC_METHOD(thread_add_ln81_fu_731_p2);
    sensitive << ( S_0_q0 );
    sensitive << ( S_1_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_603);
    sensitive << ( ap_phi_mux_i_0_phi_fu_482_p4 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_482_p4);
    sensitive << ( i_0_reg_478 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_b_fu_679_p4);
    sensitive << ( xor_ln59_2_fu_663_p2 );

    SC_METHOD(thread_c_fu_689_p4);
    sensitive << ( xor_ln59_1_fu_657_p2 );

    SC_METHOD(thread_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ciphertext_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_d_fu_699_p2);
    sensitive << ( trunc_ln59_1_fu_631_p1 );
    sensitive << ( trunc_ln59_fu_627_p1 );

    SC_METHOD(thread_decryptedtext_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( trunc_ln7_reg_1022 );
    sensitive << ( trunc_ln8_reg_1067 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( trunc_ln10_reg_1077 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( left_fu_578_p2 );

    SC_METHOD(thread_decryptedtext_d1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( trunc_ln9_reg_1072 );
    sensitive << ( xor_ln172_reg_1082 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( xor_ln168_fu_796_p2 );
    sensitive << ( xor_ln65_2_fu_589_p2 );

    SC_METHOD(thread_decryptedtext_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln58_fu_555_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_decryptedtext_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln58_fu_555_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_i_fu_725_p2);
    sensitive << ( i_0_reg_478 );

    SC_METHOD(thread_icmp_ln58_fu_555_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_fu_545_p4 );

    SC_METHOD(thread_left_12_fu_651_p2);
    sensitive << ( right_7_reg_468 );
    sensitive << ( phi_ln59_reg_490 );

    SC_METHOD(thread_left_8_fu_527_p5);
    sensitive << ( ciphertext_load_reg_848 );
    sensitive << ( ciphertext_load_1_reg_853 );
    sensitive << ( ciphertext_load_2_reg_868 );
    sensitive << ( ciphertext_load_3_reg_873 );

    SC_METHOD(thread_left_fu_578_p2);
    sensitive << ( P_0_read );
    sensitive << ( left_9_reg_458 );

    SC_METHOD(thread_right_6_fu_535_p5);
    sensitive << ( ciphertext_q0 );
    sensitive << ( ciphertext_q1 );
    sensitive << ( ciphertext_load_4_reg_888 );
    sensitive << ( ciphertext_load_5_reg_893 );

    SC_METHOD(thread_right_8_fu_775_p2);
    sensitive << ( P_1_read );
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_right_fu_749_p2);
    sensitive << ( add_ln81_4_reg_1057 );
    sensitive << ( left_9_reg_458 );

    SC_METHOD(thread_tmp_fu_545_p4);
    sensitive << ( i_0_reg_478 );

    SC_METHOD(thread_trunc_ln59_1_fu_631_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln59_2_fu_635_p1);
    sensitive << ( phi_ln59_reg_490 );

    SC_METHOD(thread_trunc_ln59_3_fu_639_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln59_4_fu_643_p1);
    sensitive << ( phi_ln59_reg_490 );

    SC_METHOD(thread_trunc_ln59_5_fu_647_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln59_fu_627_p1);
    sensitive << ( phi_ln59_reg_490 );

    SC_METHOD(thread_trunc_ln64_1_fu_757_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln64_2_fu_761_p1);
    sensitive << ( P_1_read );

    SC_METHOD(thread_trunc_ln64_3_fu_764_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln64_4_fu_768_p1);
    sensitive << ( P_1_read );

    SC_METHOD(thread_trunc_ln64_5_fu_771_p1);
    sensitive << ( right_7_reg_468 );

    SC_METHOD(thread_trunc_ln64_fu_754_p1);
    sensitive << ( P_1_read );

    SC_METHOD(thread_trunc_ln65_1_fu_792_p1);
    sensitive << ( left_9_reg_458 );

    SC_METHOD(thread_trunc_ln65_2_fu_564_p1);
    sensitive << ( P_0_read );

    SC_METHOD(thread_trunc_ln65_3_fu_567_p1);
    sensitive << ( left_9_reg_458 );

    SC_METHOD(thread_trunc_ln65_4_fu_571_p1);
    sensitive << ( P_0_read );

    SC_METHOD(thread_trunc_ln65_5_fu_574_p1);
    sensitive << ( left_9_reg_458 );

    SC_METHOD(thread_trunc_ln65_fu_561_p1);
    sensitive << ( P_0_read );

    SC_METHOD(thread_xor_ln168_fu_796_p2);
    sensitive << ( trunc_ln65_reg_1017 );
    sensitive << ( trunc_ln65_1_fu_792_p1 );

    SC_METHOD(thread_xor_ln172_fu_832_p2);
    sensitive << ( trunc_ln64_1_fu_757_p1 );
    sensitive << ( trunc_ln64_fu_754_p1 );

    SC_METHOD(thread_xor_ln59_1_fu_657_p2);
    sensitive << ( trunc_ln59_5_fu_647_p1 );
    sensitive << ( trunc_ln59_4_fu_643_p1 );

    SC_METHOD(thread_xor_ln59_2_fu_663_p2);
    sensitive << ( trunc_ln59_3_fu_639_p1 );
    sensitive << ( trunc_ln59_2_fu_635_p1 );

    SC_METHOD(thread_xor_ln64_1_fu_780_p2);
    sensitive << ( trunc_ln64_5_fu_771_p1 );
    sensitive << ( trunc_ln64_4_fu_768_p1 );

    SC_METHOD(thread_xor_ln64_2_fu_786_p2);
    sensitive << ( trunc_ln64_3_fu_764_p1 );
    sensitive << ( trunc_ln64_2_fu_761_p1 );

    SC_METHOD(thread_xor_ln65_1_fu_583_p2);
    sensitive << ( trunc_ln65_5_fu_574_p1 );
    sensitive << ( trunc_ln65_4_fu_571_p1 );

    SC_METHOD(thread_xor_ln65_2_fu_589_p2);
    sensitive << ( trunc_ln65_3_fu_567_p1 );
    sensitive << ( trunc_ln65_2_fu_564_p1 );

    SC_METHOD(thread_xor_ln81_fu_737_p2);
    sensitive << ( S_2_q0 );
    sensitive << ( add_ln81_fu_731_p2 );

    SC_METHOD(thread_zext_ln81_10_fu_720_p1);
    sensitive << ( d_fu_699_p2 );

    SC_METHOD(thread_zext_ln81_8_fu_710_p1);
    sensitive << ( b_fu_679_p4 );

    SC_METHOD(thread_zext_ln81_9_fu_715_p1);
    sensitive << ( c_fu_689_p4 );

    SC_METHOD(thread_zext_ln81_fu_705_p1);
    sensitive << ( a_fu_669_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln58_fu_555_p2 );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Decrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ciphertext_address0, "(port)ciphertext_address0");
    sc_trace(mVcdFile, ciphertext_ce0, "(port)ciphertext_ce0");
    sc_trace(mVcdFile, ciphertext_q0, "(port)ciphertext_q0");
    sc_trace(mVcdFile, ciphertext_address1, "(port)ciphertext_address1");
    sc_trace(mVcdFile, ciphertext_ce1, "(port)ciphertext_ce1");
    sc_trace(mVcdFile, ciphertext_q1, "(port)ciphertext_q1");
    sc_trace(mVcdFile, decryptedtext_address0, "(port)decryptedtext_address0");
    sc_trace(mVcdFile, decryptedtext_ce0, "(port)decryptedtext_ce0");
    sc_trace(mVcdFile, decryptedtext_we0, "(port)decryptedtext_we0");
    sc_trace(mVcdFile, decryptedtext_d0, "(port)decryptedtext_d0");
    sc_trace(mVcdFile, decryptedtext_address1, "(port)decryptedtext_address1");
    sc_trace(mVcdFile, decryptedtext_ce1, "(port)decryptedtext_ce1");
    sc_trace(mVcdFile, decryptedtext_we1, "(port)decryptedtext_we1");
    sc_trace(mVcdFile, decryptedtext_d1, "(port)decryptedtext_d1");
    sc_trace(mVcdFile, P_0_read, "(port)P_0_read");
    sc_trace(mVcdFile, P_1_read, "(port)P_1_read");
    sc_trace(mVcdFile, P_2_read, "(port)P_2_read");
    sc_trace(mVcdFile, P_3_read, "(port)P_3_read");
    sc_trace(mVcdFile, P_4_read, "(port)P_4_read");
    sc_trace(mVcdFile, P_5_read, "(port)P_5_read");
    sc_trace(mVcdFile, P_6_read, "(port)P_6_read");
    sc_trace(mVcdFile, P_7_read, "(port)P_7_read");
    sc_trace(mVcdFile, P_8_read, "(port)P_8_read");
    sc_trace(mVcdFile, P_9_read, "(port)P_9_read");
    sc_trace(mVcdFile, P_10_read, "(port)P_10_read");
    sc_trace(mVcdFile, P_11_read, "(port)P_11_read");
    sc_trace(mVcdFile, P_12_read, "(port)P_12_read");
    sc_trace(mVcdFile, P_13_read, "(port)P_13_read");
    sc_trace(mVcdFile, P_14_read, "(port)P_14_read");
    sc_trace(mVcdFile, P_15_read, "(port)P_15_read");
    sc_trace(mVcdFile, P_16_read, "(port)P_16_read");
    sc_trace(mVcdFile, P_17_read, "(port)P_17_read");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ciphertext_load_reg_848, "ciphertext_load_reg_848");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ciphertext_load_1_reg_853, "ciphertext_load_1_reg_853");
    sc_trace(mVcdFile, ciphertext_load_2_reg_868, "ciphertext_load_2_reg_868");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ciphertext_load_3_reg_873, "ciphertext_load_3_reg_873");
    sc_trace(mVcdFile, ciphertext_load_4_reg_888, "ciphertext_load_4_reg_888");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ciphertext_load_5_reg_893, "ciphertext_load_5_reg_893");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, left_8_fu_527_p5, "left_8_fu_527_p5");
    sc_trace(mVcdFile, right_6_fu_535_p5, "right_6_fu_535_p5");
    sc_trace(mVcdFile, trunc_ln65_fu_561_p1, "trunc_ln65_fu_561_p1");
    sc_trace(mVcdFile, trunc_ln65_reg_1017, "trunc_ln65_reg_1017");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln58_fu_555_p2, "icmp_ln58_fu_555_p2");
    sc_trace(mVcdFile, trunc_ln7_reg_1022, "trunc_ln7_reg_1022");
    sc_trace(mVcdFile, left_12_fu_651_p2, "left_12_fu_651_p2");
    sc_trace(mVcdFile, left_12_reg_1027, "left_12_reg_1027");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_fu_725_p2, "i_fu_725_p2");
    sc_trace(mVcdFile, i_reg_1052, "i_reg_1052");
    sc_trace(mVcdFile, add_ln81_4_fu_743_p2, "add_ln81_4_fu_743_p2");
    sc_trace(mVcdFile, add_ln81_4_reg_1057, "add_ln81_4_reg_1057");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, right_fu_749_p2, "right_fu_749_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln8_reg_1067, "trunc_ln8_reg_1067");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, trunc_ln9_reg_1072, "trunc_ln9_reg_1072");
    sc_trace(mVcdFile, trunc_ln10_reg_1077, "trunc_ln10_reg_1077");
    sc_trace(mVcdFile, xor_ln172_fu_832_p2, "xor_ln172_fu_832_p2");
    sc_trace(mVcdFile, xor_ln172_reg_1082, "xor_ln172_reg_1082");
    sc_trace(mVcdFile, left_9_reg_458, "left_9_reg_458");
    sc_trace(mVcdFile, right_7_reg_468, "right_7_reg_468");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_482_p4, "ap_phi_mux_i_0_phi_fu_482_p4");
    sc_trace(mVcdFile, i_0_reg_478, "i_0_reg_478");
    sc_trace(mVcdFile, phi_ln59_reg_490, "phi_ln59_reg_490");
    sc_trace(mVcdFile, zext_ln81_fu_705_p1, "zext_ln81_fu_705_p1");
    sc_trace(mVcdFile, zext_ln81_8_fu_710_p1, "zext_ln81_8_fu_710_p1");
    sc_trace(mVcdFile, zext_ln81_9_fu_715_p1, "zext_ln81_9_fu_715_p1");
    sc_trace(mVcdFile, zext_ln81_10_fu_720_p1, "zext_ln81_10_fu_720_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, xor_ln168_fu_796_p2, "xor_ln168_fu_796_p2");
    sc_trace(mVcdFile, tmp_fu_545_p4, "tmp_fu_545_p4");
    sc_trace(mVcdFile, trunc_ln65_5_fu_574_p1, "trunc_ln65_5_fu_574_p1");
    sc_trace(mVcdFile, trunc_ln65_4_fu_571_p1, "trunc_ln65_4_fu_571_p1");
    sc_trace(mVcdFile, trunc_ln65_3_fu_567_p1, "trunc_ln65_3_fu_567_p1");
    sc_trace(mVcdFile, trunc_ln65_2_fu_564_p1, "trunc_ln65_2_fu_564_p1");
    sc_trace(mVcdFile, left_fu_578_p2, "left_fu_578_p2");
    sc_trace(mVcdFile, xor_ln65_2_fu_589_p2, "xor_ln65_2_fu_589_p2");
    sc_trace(mVcdFile, xor_ln65_1_fu_583_p2, "xor_ln65_1_fu_583_p2");
    sc_trace(mVcdFile, trunc_ln59_5_fu_647_p1, "trunc_ln59_5_fu_647_p1");
    sc_trace(mVcdFile, trunc_ln59_4_fu_643_p1, "trunc_ln59_4_fu_643_p1");
    sc_trace(mVcdFile, trunc_ln59_3_fu_639_p1, "trunc_ln59_3_fu_639_p1");
    sc_trace(mVcdFile, trunc_ln59_2_fu_635_p1, "trunc_ln59_2_fu_635_p1");
    sc_trace(mVcdFile, xor_ln59_2_fu_663_p2, "xor_ln59_2_fu_663_p2");
    sc_trace(mVcdFile, xor_ln59_1_fu_657_p2, "xor_ln59_1_fu_657_p2");
    sc_trace(mVcdFile, trunc_ln59_1_fu_631_p1, "trunc_ln59_1_fu_631_p1");
    sc_trace(mVcdFile, trunc_ln59_fu_627_p1, "trunc_ln59_fu_627_p1");
    sc_trace(mVcdFile, a_fu_669_p4, "a_fu_669_p4");
    sc_trace(mVcdFile, b_fu_679_p4, "b_fu_679_p4");
    sc_trace(mVcdFile, c_fu_689_p4, "c_fu_689_p4");
    sc_trace(mVcdFile, d_fu_699_p2, "d_fu_699_p2");
    sc_trace(mVcdFile, add_ln81_fu_731_p2, "add_ln81_fu_731_p2");
    sc_trace(mVcdFile, xor_ln81_fu_737_p2, "xor_ln81_fu_737_p2");
    sc_trace(mVcdFile, trunc_ln64_5_fu_771_p1, "trunc_ln64_5_fu_771_p1");
    sc_trace(mVcdFile, trunc_ln64_4_fu_768_p1, "trunc_ln64_4_fu_768_p1");
    sc_trace(mVcdFile, trunc_ln64_3_fu_764_p1, "trunc_ln64_3_fu_764_p1");
    sc_trace(mVcdFile, trunc_ln64_2_fu_761_p1, "trunc_ln64_2_fu_761_p1");
    sc_trace(mVcdFile, trunc_ln65_1_fu_792_p1, "trunc_ln65_1_fu_792_p1");
    sc_trace(mVcdFile, right_8_fu_775_p2, "right_8_fu_775_p2");
    sc_trace(mVcdFile, xor_ln64_2_fu_786_p2, "xor_ln64_2_fu_786_p2");
    sc_trace(mVcdFile, xor_ln64_1_fu_780_p2, "xor_ln64_1_fu_780_p2");
    sc_trace(mVcdFile, trunc_ln64_1_fu_757_p1, "trunc_ln64_1_fu_757_p1");
    sc_trace(mVcdFile, trunc_ln64_fu_754_p1, "trunc_ln64_fu_754_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_603, "ap_condition_603");
#endif

    }
}

Blowfish_Decrypt::~Blowfish_Decrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Blowfish_Decrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_reg_478 = i_reg_1052.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_478 = ap_const_lv5_11;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        left_9_reg_458 = left_12_reg_1027.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        left_9_reg_458 = right_6_fu_535_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln58_fu_555_p2.read(), ap_const_lv1_0))) {
        if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_2)) {
            phi_ln59_reg_490 = P_2_read.read();
        } else if (esl_seteq<1,1,1>(ap_condition_603.read(), ap_const_boolean_1)) {
            phi_ln59_reg_490 = P_17_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_10)) {
            phi_ln59_reg_490 = P_16_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_F)) {
            phi_ln59_reg_490 = P_15_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_E)) {
            phi_ln59_reg_490 = P_14_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_D)) {
            phi_ln59_reg_490 = P_13_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_C)) {
            phi_ln59_reg_490 = P_12_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_B)) {
            phi_ln59_reg_490 = P_11_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_A)) {
            phi_ln59_reg_490 = P_10_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_9)) {
            phi_ln59_reg_490 = P_9_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_8)) {
            phi_ln59_reg_490 = P_8_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_7)) {
            phi_ln59_reg_490 = P_7_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_6)) {
            phi_ln59_reg_490 = P_6_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_5)) {
            phi_ln59_reg_490 = P_5_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_4)) {
            phi_ln59_reg_490 = P_4_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_3)) {
            phi_ln59_reg_490 = P_3_read.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        right_7_reg_468 = right_fu_749_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_7_reg_468 = left_8_fu_527_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        add_ln81_4_reg_1057 = add_ln81_4_fu_743_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_load_1_reg_853 = ciphertext_q1.read();
        ciphertext_load_reg_848 = ciphertext_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_load_2_reg_868 = ciphertext_q0.read();
        ciphertext_load_3_reg_873 = ciphertext_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_load_4_reg_888 = ciphertext_q0.read();
        ciphertext_load_5_reg_893 = ciphertext_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_1052 = i_fu_725_p2.read();
        left_12_reg_1027 = left_12_fu_651_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        trunc_ln10_reg_1077 = xor_ln64_1_fu_780_p2.read().range(15, 8);
        trunc_ln8_reg_1067 = right_8_fu_775_p2.read().range(31, 24);
        trunc_ln9_reg_1072 = xor_ln64_2_fu_786_p2.read().range(23, 16);
        xor_ln172_reg_1082 = xor_ln172_fu_832_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln58_fu_555_p2.read(), ap_const_lv1_1))) {
        trunc_ln65_reg_1017 = trunc_ln65_fu_561_p1.read();
        trunc_ln7_reg_1022 = xor_ln65_1_fu_583_p2.read().range(15, 8);
    }
}

void Blowfish_Decrypt::thread_S_0_address0() {
    S_0_address0 =  (sc_lv<8>) (zext_ln81_fu_705_p1.read());
}

void Blowfish_Decrypt::thread_S_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_0_ce0 = ap_const_logic_1;
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_1_address0() {
    S_1_address0 =  (sc_lv<8>) (zext_ln81_8_fu_710_p1.read());
}

void Blowfish_Decrypt::thread_S_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_1_ce0 = ap_const_logic_1;
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_2_address0() {
    S_2_address0 =  (sc_lv<8>) (zext_ln81_9_fu_715_p1.read());
}

void Blowfish_Decrypt::thread_S_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_2_ce0 = ap_const_logic_1;
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_S_3_address0() {
    S_3_address0 =  (sc_lv<8>) (zext_ln81_10_fu_720_p1.read());
}

void Blowfish_Decrypt::thread_S_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        S_3_ce0 = ap_const_logic_1;
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_a_fu_669_p4() {
    a_fu_669_p4 = left_12_fu_651_p2.read().range(31, 24);
}

void Blowfish_Decrypt::thread_add_ln81_4_fu_743_p2() {
    add_ln81_4_fu_743_p2 = (!S_3_q0.read().is_01() || !xor_ln81_fu_737_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_3_q0.read()) + sc_biguint<32>(xor_ln81_fu_737_p2.read()));
}

void Blowfish_Decrypt::thread_add_ln81_fu_731_p2() {
    add_ln81_fu_731_p2 = (!S_0_q0.read().is_01() || !S_1_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_0_q0.read()) + sc_biguint<32>(S_1_q0.read()));
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Blowfish_Decrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Blowfish_Decrypt::thread_ap_condition_603() {
    ap_condition_603 = (!esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_2) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_3) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_4) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_5) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_6) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_7) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_8) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_9) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_A) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_B) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_C) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_D) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_E) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_F) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_482_p4.read(), ap_const_lv5_10));
}

void Blowfish_Decrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ap_phi_mux_i_0_phi_fu_482_p4() {
    ap_phi_mux_i_0_phi_fu_482_p4 = i_0_reg_478.read();
}

void Blowfish_Decrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_b_fu_679_p4() {
    b_fu_679_p4 = xor_ln59_2_fu_663_p2.read().range(23, 16);
}

void Blowfish_Decrypt::thread_c_fu_689_p4() {
    c_fu_689_p4 = xor_ln59_1_fu_657_p2.read().range(15, 8);
}

void Blowfish_Decrypt::thread_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        ciphertext_address0 = "XXX";
    }
}

void Blowfish_Decrypt::thread_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        ciphertext_address1 = "XXX";
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce0 = ap_const_logic_1;
    } else {
        ciphertext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_ciphertext_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ciphertext_ce1 = ap_const_logic_1;
    } else {
        ciphertext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_d_fu_699_p2() {
    d_fu_699_p2 = (trunc_ln59_1_fu_631_p1.read() ^ trunc_ln59_fu_627_p1.read());
}

void Blowfish_Decrypt::thread_decryptedtext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        decryptedtext_address0 = "XXX";
    }
}

void Blowfish_Decrypt::thread_decryptedtext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        decryptedtext_address1 = "XXX";
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_ce0 = ap_const_logic_1;
    } else {
        decryptedtext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_ce1 = ap_const_logic_1;
    } else {
        decryptedtext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d0 = trunc_ln10_reg_1077.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d0 = trunc_ln8_reg_1067.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d0 = trunc_ln7_reg_1022.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_d0 = left_fu_578_p2.read().range(31, 24);
    } else {
        decryptedtext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        decryptedtext_d1 = xor_ln172_reg_1082.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        decryptedtext_d1 = trunc_ln9_reg_1072.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        decryptedtext_d1 = xor_ln168_fu_796_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        decryptedtext_d1 = xor_ln65_2_fu_589_p2.read().range(23, 16);
    } else {
        decryptedtext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln58_fu_555_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_we0 = ap_const_logic_1;
    } else {
        decryptedtext_we0 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_decryptedtext_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln58_fu_555_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        decryptedtext_we1 = ap_const_logic_1;
    } else {
        decryptedtext_we1 = ap_const_logic_0;
    }
}

void Blowfish_Decrypt::thread_i_fu_725_p2() {
    i_fu_725_p2 = (!ap_const_lv5_1F.is_01() || !i_0_reg_478.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(i_0_reg_478.read()));
}

void Blowfish_Decrypt::thread_icmp_ln58_fu_555_p2() {
    icmp_ln58_fu_555_p2 = (!tmp_fu_545_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_545_p4.read() == ap_const_lv4_0);
}

void Blowfish_Decrypt::thread_left_12_fu_651_p2() {
    left_12_fu_651_p2 = (right_7_reg_468.read() ^ phi_ln59_reg_490.read());
}

void Blowfish_Decrypt::thread_left_8_fu_527_p5() {
    left_8_fu_527_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_reg_848.read(), ciphertext_load_1_reg_853.read()), ciphertext_load_2_reg_868.read()), ciphertext_load_3_reg_873.read());
}

void Blowfish_Decrypt::thread_left_fu_578_p2() {
    left_fu_578_p2 = (left_9_reg_458.read() ^ P_0_read.read());
}

void Blowfish_Decrypt::thread_right_6_fu_535_p5() {
    right_6_fu_535_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ciphertext_load_4_reg_888.read(), ciphertext_load_5_reg_893.read()), ciphertext_q0.read()), ciphertext_q1.read());
}

void Blowfish_Decrypt::thread_right_8_fu_775_p2() {
    right_8_fu_775_p2 = (right_7_reg_468.read() ^ P_1_read.read());
}

void Blowfish_Decrypt::thread_right_fu_749_p2() {
    right_fu_749_p2 = (left_9_reg_458.read() ^ add_ln81_4_reg_1057.read());
}

void Blowfish_Decrypt::thread_tmp_fu_545_p4() {
    tmp_fu_545_p4 = i_0_reg_478.read().range(4, 1);
}

void Blowfish_Decrypt::thread_trunc_ln59_1_fu_631_p1() {
    trunc_ln59_1_fu_631_p1 = right_7_reg_468.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln59_2_fu_635_p1() {
    trunc_ln59_2_fu_635_p1 = phi_ln59_reg_490.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln59_3_fu_639_p1() {
    trunc_ln59_3_fu_639_p1 = right_7_reg_468.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln59_4_fu_643_p1() {
    trunc_ln59_4_fu_643_p1 = phi_ln59_reg_490.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln59_5_fu_647_p1() {
    trunc_ln59_5_fu_647_p1 = right_7_reg_468.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln59_fu_627_p1() {
    trunc_ln59_fu_627_p1 = phi_ln59_reg_490.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_1_fu_757_p1() {
    trunc_ln64_1_fu_757_p1 = right_7_reg_468.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_2_fu_761_p1() {
    trunc_ln64_2_fu_761_p1 = P_1_read.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_3_fu_764_p1() {
    trunc_ln64_3_fu_764_p1 = right_7_reg_468.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_4_fu_768_p1() {
    trunc_ln64_4_fu_768_p1 = P_1_read.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_5_fu_771_p1() {
    trunc_ln64_5_fu_771_p1 = right_7_reg_468.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln64_fu_754_p1() {
    trunc_ln64_fu_754_p1 = P_1_read.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_1_fu_792_p1() {
    trunc_ln65_1_fu_792_p1 = left_9_reg_458.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_2_fu_564_p1() {
    trunc_ln65_2_fu_564_p1 = P_0_read.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_3_fu_567_p1() {
    trunc_ln65_3_fu_567_p1 = left_9_reg_458.read().range(24-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_4_fu_571_p1() {
    trunc_ln65_4_fu_571_p1 = P_0_read.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_5_fu_574_p1() {
    trunc_ln65_5_fu_574_p1 = left_9_reg_458.read().range(16-1, 0);
}

void Blowfish_Decrypt::thread_trunc_ln65_fu_561_p1() {
    trunc_ln65_fu_561_p1 = P_0_read.read().range(8-1, 0);
}

void Blowfish_Decrypt::thread_xor_ln168_fu_796_p2() {
    xor_ln168_fu_796_p2 = (trunc_ln65_1_fu_792_p1.read() ^ trunc_ln65_reg_1017.read());
}

void Blowfish_Decrypt::thread_xor_ln172_fu_832_p2() {
    xor_ln172_fu_832_p2 = (trunc_ln64_1_fu_757_p1.read() ^ trunc_ln64_fu_754_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln59_1_fu_657_p2() {
    xor_ln59_1_fu_657_p2 = (trunc_ln59_5_fu_647_p1.read() ^ trunc_ln59_4_fu_643_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln59_2_fu_663_p2() {
    xor_ln59_2_fu_663_p2 = (trunc_ln59_3_fu_639_p1.read() ^ trunc_ln59_2_fu_635_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln64_1_fu_780_p2() {
    xor_ln64_1_fu_780_p2 = (trunc_ln64_5_fu_771_p1.read() ^ trunc_ln64_4_fu_768_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln64_2_fu_786_p2() {
    xor_ln64_2_fu_786_p2 = (trunc_ln64_3_fu_764_p1.read() ^ trunc_ln64_2_fu_761_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln65_1_fu_583_p2() {
    xor_ln65_1_fu_583_p2 = (trunc_ln65_5_fu_574_p1.read() ^ trunc_ln65_4_fu_571_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln65_2_fu_589_p2() {
    xor_ln65_2_fu_589_p2 = (trunc_ln65_3_fu_567_p1.read() ^ trunc_ln65_2_fu_564_p1.read());
}

void Blowfish_Decrypt::thread_xor_ln81_fu_737_p2() {
    xor_ln81_fu_737_p2 = (S_2_q0.read() ^ add_ln81_fu_731_p2.read());
}

void Blowfish_Decrypt::thread_zext_ln81_10_fu_720_p1() {
    zext_ln81_10_fu_720_p1 = esl_zext<64,8>(d_fu_699_p2.read());
}

void Blowfish_Decrypt::thread_zext_ln81_8_fu_710_p1() {
    zext_ln81_8_fu_710_p1 = esl_zext<64,8>(b_fu_679_p4.read());
}

void Blowfish_Decrypt::thread_zext_ln81_9_fu_715_p1() {
    zext_ln81_9_fu_715_p1 = esl_zext<64,8>(c_fu_689_p4.read());
}

void Blowfish_Decrypt::thread_zext_ln81_fu_705_p1() {
    zext_ln81_fu_705_p1 = esl_zext<64,8>(a_fu_669_p4.read());
}

void Blowfish_Decrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln58_fu_555_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

}

