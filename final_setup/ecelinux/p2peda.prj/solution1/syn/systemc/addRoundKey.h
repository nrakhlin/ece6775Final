// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _addRoundKey_HH_
#define _addRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct addRoundKey : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<4> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<8> > state_d1;
    sc_in< sc_lv<8> > state_q1;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read1;
    sc_in< sc_lv<8> > p_read2;
    sc_in< sc_lv<8> > p_read3;
    sc_in< sc_lv<8> > p_read4;
    sc_in< sc_lv<8> > p_read5;
    sc_in< sc_lv<8> > p_read6;
    sc_in< sc_lv<8> > p_read7;
    sc_in< sc_lv<8> > p_read8;
    sc_in< sc_lv<8> > p_read9;
    sc_in< sc_lv<8> > p_read10;
    sc_in< sc_lv<8> > p_read11;
    sc_in< sc_lv<8> > p_read12;
    sc_in< sc_lv<8> > p_read13;
    sc_in< sc_lv<8> > p_read14;
    sc_in< sc_lv<8> > p_read15;


    // Module declarations
    addRoundKey(sc_module_name name);
    SC_HAS_PROCESS(addRoundKey);

    ~addRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > reg_317;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > reg_321;
    sc_signal< sc_lv<4> > state_addr_reg_425;
    sc_signal< sc_lv<4> > state_addr_31_reg_430;
    sc_signal< sc_lv<4> > state_addr_32_reg_435;
    sc_signal< sc_lv<4> > state_addr_33_reg_440;
    sc_signal< sc_lv<8> > state_load_2_reg_445;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > state_load_3_reg_450;
    sc_signal< sc_lv<4> > state_addr_34_reg_455;
    sc_signal< sc_lv<4> > state_addr_35_reg_460;
    sc_signal< sc_lv<8> > state_load_4_reg_465;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > state_load_5_reg_470;
    sc_signal< sc_lv<4> > state_addr_36_reg_475;
    sc_signal< sc_lv<4> > state_addr_37_reg_480;
    sc_signal< sc_lv<8> > state_load_6_reg_485;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > state_load_7_reg_490;
    sc_signal< sc_lv<4> > state_addr_38_reg_495;
    sc_signal< sc_lv<4> > state_addr_39_reg_500;
    sc_signal< sc_lv<8> > state_load_8_reg_505;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > state_load_9_reg_510;
    sc_signal< sc_lv<4> > state_addr_40_reg_515;
    sc_signal< sc_lv<4> > state_addr_41_reg_520;
    sc_signal< sc_lv<8> > state_load_10_reg_525;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > state_load_11_reg_530;
    sc_signal< sc_lv<4> > state_addr_42_reg_535;
    sc_signal< sc_lv<4> > state_addr_43_reg_540;
    sc_signal< sc_lv<8> > state_load_12_reg_545;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > state_load_13_reg_550;
    sc_signal< sc_lv<4> > state_addr_44_reg_555;
    sc_signal< sc_lv<4> > state_addr_45_reg_560;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<8> > xor_ln236_fu_325_p2;
    sc_signal< sc_lv<8> > xor_ln236_1_fu_332_p2;
    sc_signal< sc_lv<8> > xor_ln236_2_fu_339_p2;
    sc_signal< sc_lv<8> > xor_ln236_3_fu_345_p2;
    sc_signal< sc_lv<8> > xor_ln236_4_fu_351_p2;
    sc_signal< sc_lv<8> > xor_ln236_5_fu_357_p2;
    sc_signal< sc_lv<8> > xor_ln236_6_fu_363_p2;
    sc_signal< sc_lv<8> > xor_ln236_7_fu_369_p2;
    sc_signal< sc_lv<8> > xor_ln236_8_fu_375_p2;
    sc_signal< sc_lv<8> > xor_ln236_9_fu_381_p2;
    sc_signal< sc_lv<8> > xor_ln236_10_fu_387_p2;
    sc_signal< sc_lv<8> > xor_ln236_11_fu_393_p2;
    sc_signal< sc_lv<8> > xor_ln236_12_fu_399_p2;
    sc_signal< sc_lv<8> > xor_ln236_13_fu_405_p2;
    sc_signal< sc_lv<8> > xor_ln236_14_fu_411_p2;
    sc_signal< sc_lv<8> > xor_ln236_15_fu_418_p2;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_state_addr_31_reg_430();
    void thread_state_addr_32_reg_435();
    void thread_state_addr_33_reg_440();
    void thread_state_addr_34_reg_455();
    void thread_state_addr_35_reg_460();
    void thread_state_addr_36_reg_475();
    void thread_state_addr_37_reg_480();
    void thread_state_addr_38_reg_495();
    void thread_state_addr_39_reg_500();
    void thread_state_addr_40_reg_515();
    void thread_state_addr_41_reg_520();
    void thread_state_addr_42_reg_535();
    void thread_state_addr_43_reg_540();
    void thread_state_addr_44_reg_555();
    void thread_state_addr_45_reg_560();
    void thread_state_addr_reg_425();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_xor_ln236_10_fu_387_p2();
    void thread_xor_ln236_11_fu_393_p2();
    void thread_xor_ln236_12_fu_399_p2();
    void thread_xor_ln236_13_fu_405_p2();
    void thread_xor_ln236_14_fu_411_p2();
    void thread_xor_ln236_15_fu_418_p2();
    void thread_xor_ln236_1_fu_332_p2();
    void thread_xor_ln236_2_fu_339_p2();
    void thread_xor_ln236_3_fu_345_p2();
    void thread_xor_ln236_4_fu_351_p2();
    void thread_xor_ln236_5_fu_357_p2();
    void thread_xor_ln236_6_fu_363_p2();
    void thread_xor_ln236_7_fu_369_p2();
    void thread_xor_ln236_8_fu_375_p2();
    void thread_xor_ln236_9_fu_381_p2();
    void thread_xor_ln236_fu_325_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
