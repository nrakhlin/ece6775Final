// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Encrypt_SetKey_HH_
#define _Encrypt_SetKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Encrypt_SetKey : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > left_read;
    sc_in< sc_lv<32> > right_read;
    sc_in< sc_lv<32> > P_0_read;
    sc_in< sc_lv<32> > P_1_read;
    sc_in< sc_lv<32> > P_2_read;
    sc_in< sc_lv<32> > P_3_read;
    sc_in< sc_lv<32> > P_4_read;
    sc_in< sc_lv<32> > P_5_read;
    sc_in< sc_lv<32> > P_6_read;
    sc_in< sc_lv<32> > P_7_read;
    sc_in< sc_lv<32> > P_8_read;
    sc_in< sc_lv<32> > P_9_read;
    sc_in< sc_lv<32> > P_10_read;
    sc_in< sc_lv<32> > P_11_read;
    sc_in< sc_lv<32> > P_12_read;
    sc_in< sc_lv<32> > P_13_read;
    sc_in< sc_lv<32> > P_14_read;
    sc_in< sc_lv<32> > P_15_read;
    sc_in< sc_lv<32> > P_16_read;
    sc_in< sc_lv<32> > P_17_read;
    sc_out< sc_lv<8> > S_0_address0;
    sc_out< sc_logic > S_0_ce0;
    sc_in< sc_lv<32> > S_0_q0;
    sc_out< sc_lv<8> > S_1_address0;
    sc_out< sc_logic > S_1_ce0;
    sc_in< sc_lv<32> > S_1_q0;
    sc_out< sc_lv<8> > S_2_address0;
    sc_out< sc_logic > S_2_ce0;
    sc_in< sc_lv<32> > S_2_q0;
    sc_out< sc_lv<8> > S_3_address0;
    sc_out< sc_logic > S_3_ce0;
    sc_in< sc_lv<32> > S_3_q0;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    Encrypt_SetKey(sc_module_name name);
    SC_HAS_PROCESS(Encrypt_SetKey);

    ~Encrypt_SetKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_357_p2;
    sc_signal< sc_lv<5> > i_reg_609;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > localLeft_fu_387_p2;
    sc_signal< sc_lv<32> > localLeft_reg_614;
    sc_signal< sc_lv<1> > icmp_ln18_fu_351_p2;
    sc_signal< sc_lv<32> > feistel_result_fu_495_p2;
    sc_signal< sc_lv<32> > feistel_result_reg_639;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > localRight_fu_501_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > p_tmp_reg_284;
    sc_signal< sc_lv<32> > p_b_read_assign_reg_293;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_307_p4;
    sc_signal< sc_lv<5> > i_0_reg_303;
    sc_signal< sc_lv<32> > ap_phi_mux_phi_ln19_phi_fu_317_p32;
    sc_signal< sc_lv<64> > zext_ln81_fu_441_p1;
    sc_signal< sc_lv<64> > zext_ln81_2_fu_446_p1;
    sc_signal< sc_lv<64> > zext_ln81_3_fu_451_p1;
    sc_signal< sc_lv<64> > zext_ln81_4_fu_456_p1;
    sc_signal< sc_lv<16> > trunc_ln19_5_fu_383_p1;
    sc_signal< sc_lv<16> > trunc_ln19_4_fu_379_p1;
    sc_signal< sc_lv<24> > trunc_ln19_3_fu_375_p1;
    sc_signal< sc_lv<24> > trunc_ln19_2_fu_371_p1;
    sc_signal< sc_lv<24> > xor_ln19_2_fu_399_p2;
    sc_signal< sc_lv<16> > xor_ln19_1_fu_393_p2;
    sc_signal< sc_lv<8> > trunc_ln19_1_fu_367_p1;
    sc_signal< sc_lv<8> > trunc_ln19_fu_363_p1;
    sc_signal< sc_lv<8> > a_fu_405_p4;
    sc_signal< sc_lv<8> > b_fu_415_p4;
    sc_signal< sc_lv<8> > c_fu_425_p4;
    sc_signal< sc_lv<8> > d_fu_435_p2;
    sc_signal< sc_lv<32> > xor_ln27_fu_466_p2;
    sc_signal< sc_lv<32> > xor_ln26_fu_461_p2;
    sc_signal< sc_lv<32> > add_ln81_fu_483_p2;
    sc_signal< sc_lv<32> > xor_ln81_fu_489_p2;
    sc_signal< sc_lv<32> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_condition_387;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<5> ap_const_lv5_5;
    static const sc_lv<5> ap_const_lv5_6;
    static const sc_lv<5> ap_const_lv5_7;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<5> ap_const_lv5_9;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<5> ap_const_lv5_B;
    static const sc_lv<5> ap_const_lv5_C;
    static const sc_lv<5> ap_const_lv5_D;
    static const sc_lv<5> ap_const_lv5_E;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_S_0_address0();
    void thread_S_0_ce0();
    void thread_S_1_address0();
    void thread_S_1_ce0();
    void thread_S_2_address0();
    void thread_S_2_ce0();
    void thread_S_3_address0();
    void thread_S_3_ce0();
    void thread_a_fu_405_p4();
    void thread_add_ln81_fu_483_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_condition_387();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_0_phi_fu_307_p4();
    void thread_ap_phi_mux_phi_ln19_phi_fu_317_p32();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_b_fu_415_p4();
    void thread_c_fu_425_p4();
    void thread_d_fu_435_p2();
    void thread_feistel_result_fu_495_p2();
    void thread_i_fu_357_p2();
    void thread_icmp_ln18_fu_351_p2();
    void thread_localLeft_fu_387_p2();
    void thread_localRight_fu_501_p2();
    void thread_trunc_ln19_1_fu_367_p1();
    void thread_trunc_ln19_2_fu_371_p1();
    void thread_trunc_ln19_3_fu_375_p1();
    void thread_trunc_ln19_4_fu_379_p1();
    void thread_trunc_ln19_5_fu_383_p1();
    void thread_trunc_ln19_fu_363_p1();
    void thread_xor_ln19_1_fu_393_p2();
    void thread_xor_ln19_2_fu_399_p2();
    void thread_xor_ln26_fu_461_p2();
    void thread_xor_ln27_fu_466_p2();
    void thread_xor_ln81_fu_489_p2();
    void thread_zext_ln81_2_fu_446_p1();
    void thread_zext_ln81_3_fu_451_p1();
    void thread_zext_ln81_4_fu_456_p1();
    void thread_zext_ln81_fu_441_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
