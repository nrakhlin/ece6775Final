// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_invRound_HH_
#define _aes_invRound_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "invMixColumns.h"
#include "aes_invRound_rsbox.h"

namespace ap_rtl {

struct aes_invRound : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<4> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<8> > state_d1;
    sc_in< sc_lv<8> > state_q1;
    sc_out< sc_lv<4> > roundKey_address0;
    sc_out< sc_logic > roundKey_ce0;
    sc_in< sc_lv<8> > roundKey_q0;


    // Module declarations
    aes_invRound(sc_module_name name);
    SC_HAS_PROCESS(aes_invRound);

    ~aes_invRound();

    sc_trace_file* mVcdFile;

    aes_invRound_rsbox* rsbox_U;
    invMixColumns* grp_invMixColumns_fu_230;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > rsbox_address0;
    sc_signal< sc_logic > rsbox_ce0;
    sc_signal< sc_lv<8> > rsbox_q0;
    sc_signal< sc_lv<8> > reg_236;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > state_addr_reg_296;
    sc_signal< sc_lv<4> > state_addr_30_reg_301;
    sc_signal< sc_lv<4> > state_addr_31_reg_306;
    sc_signal< sc_lv<8> > state_load_28_reg_316;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > state_load_31_reg_343;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > state_load_32_reg_348;
    sc_signal< sc_lv<8> > tmp_13_reg_365;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > state_addr_40_reg_375;
    sc_signal< sc_lv<5> > i_fu_255_p2;
    sc_signal< sc_lv<5> > i_reg_383;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<4> > state_addr_41_reg_388;
    sc_signal< sc_lv<1> > icmp_ln319_fu_249_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<5> > i_11_fu_277_p2;
    sc_signal< sc_lv<5> > i_11_reg_402;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<4> > state_addr_42_reg_407;
    sc_signal< sc_lv<1> > icmp_ln225_fu_271_p2;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_ap_start;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_ap_done;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_ap_idle;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_ap_ready;
    sc_signal< sc_lv<4> > grp_invMixColumns_fu_230_state_address0;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_state_ce0;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_state_we0;
    sc_signal< sc_lv<8> > grp_invMixColumns_fu_230_state_d0;
    sc_signal< sc_lv<5> > i_0_i_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<5> > i_0_i4_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > grp_invMixColumns_fu_230_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<64> > zext_ln321_fu_261_p1;
    sc_signal< sc_lv<64> > zext_ln48_fu_266_p1;
    sc_signal< sc_lv<64> > zext_ln226_fu_283_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > xor_ln226_fu_289_p2;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_invMixColumns_fu_230_ap_start();
    void thread_i_11_fu_277_p2();
    void thread_i_fu_255_p2();
    void thread_icmp_ln225_fu_271_p2();
    void thread_icmp_ln319_fu_249_p2();
    void thread_roundKey_address0();
    void thread_roundKey_ce0();
    void thread_rsbox_address0();
    void thread_rsbox_ce0();
    void thread_state_addr_30_reg_301();
    void thread_state_addr_31_reg_306();
    void thread_state_addr_40_reg_375();
    void thread_state_addr_reg_296();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_xor_ln226_fu_289_p2();
    void thread_zext_ln226_fu_283_p1();
    void thread_zext_ln321_fu_261_p1();
    void thread_zext_ln48_fu_266_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
