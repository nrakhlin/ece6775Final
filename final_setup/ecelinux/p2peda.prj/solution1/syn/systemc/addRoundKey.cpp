// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "addRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic addRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic addRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> addRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<16> addRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<16> addRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<16> addRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state6 = "100000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> addRoundKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> addRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> addRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> addRoundKey::ap_const_lv32_8 = "1000";
const sc_lv<32> addRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> addRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> addRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> addRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> addRoundKey::ap_const_lv32_6 = "110";
const sc_lv<32> addRoundKey::ap_const_lv32_7 = "111";
const sc_lv<64> addRoundKey::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> addRoundKey::ap_const_lv64_1 = "1";
const sc_lv<64> addRoundKey::ap_const_lv64_2 = "10";
const sc_lv<64> addRoundKey::ap_const_lv64_3 = "11";
const sc_lv<64> addRoundKey::ap_const_lv64_4 = "100";
const sc_lv<64> addRoundKey::ap_const_lv64_5 = "101";
const sc_lv<64> addRoundKey::ap_const_lv64_6 = "110";
const sc_lv<64> addRoundKey::ap_const_lv64_7 = "111";
const sc_lv<64> addRoundKey::ap_const_lv64_8 = "1000";
const sc_lv<64> addRoundKey::ap_const_lv64_9 = "1001";
const sc_lv<64> addRoundKey::ap_const_lv64_A = "1010";
const sc_lv<64> addRoundKey::ap_const_lv64_B = "1011";
const sc_lv<64> addRoundKey::ap_const_lv64_C = "1100";
const sc_lv<64> addRoundKey::ap_const_lv64_D = "1101";
const sc_lv<64> addRoundKey::ap_const_lv64_E = "1110";
const sc_lv<64> addRoundKey::ap_const_lv64_F = "1111";
const sc_lv<32> addRoundKey::ap_const_lv32_9 = "1001";
const sc_lv<32> addRoundKey::ap_const_lv32_A = "1010";
const sc_lv<32> addRoundKey::ap_const_lv32_B = "1011";
const sc_lv<32> addRoundKey::ap_const_lv32_C = "1100";
const sc_lv<32> addRoundKey::ap_const_lv32_D = "1101";
const sc_lv<32> addRoundKey::ap_const_lv32_E = "1110";
const sc_lv<32> addRoundKey::ap_const_lv32_F = "1111";
const bool addRoundKey::ap_const_boolean_1 = true;

addRoundKey::addRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_addr_31_reg_430);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_addr_32_reg_435);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_33_reg_440);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_34_reg_455);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_35_reg_460);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_36_reg_475);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_37_reg_480);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_38_reg_495);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_39_reg_500);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_40_reg_515);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_41_reg_520);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_42_reg_535);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_43_reg_540);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_44_reg_555);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_45_reg_560);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_reg_425);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_reg_425 );
    sensitive << ( state_addr_32_reg_435 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_34_reg_455 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_36_reg_475 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_38_reg_495 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_40_reg_515 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_42_reg_535 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_addr_44_reg_555 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_31_reg_430 );
    sensitive << ( state_addr_33_reg_440 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_35_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_37_reg_480 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_39_reg_500 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_41_reg_520 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_43_reg_540 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_addr_45_reg_560 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( xor_ln236_fu_325_p2 );
    sensitive << ( xor_ln236_2_fu_339_p2 );
    sensitive << ( xor_ln236_4_fu_351_p2 );
    sensitive << ( xor_ln236_6_fu_363_p2 );
    sensitive << ( xor_ln236_8_fu_375_p2 );
    sensitive << ( xor_ln236_10_fu_387_p2 );
    sensitive << ( xor_ln236_12_fu_399_p2 );
    sensitive << ( xor_ln236_14_fu_411_p2 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( xor_ln236_1_fu_332_p2 );
    sensitive << ( xor_ln236_3_fu_345_p2 );
    sensitive << ( xor_ln236_5_fu_357_p2 );
    sensitive << ( xor_ln236_7_fu_369_p2 );
    sensitive << ( xor_ln236_9_fu_381_p2 );
    sensitive << ( xor_ln236_11_fu_393_p2 );
    sensitive << ( xor_ln236_13_fu_405_p2 );
    sensitive << ( xor_ln236_15_fu_418_p2 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_xor_ln236_10_fu_387_p2);
    sensitive << ( p_read10 );
    sensitive << ( state_load_10_reg_525 );

    SC_METHOD(thread_xor_ln236_11_fu_393_p2);
    sensitive << ( p_read11 );
    sensitive << ( state_load_11_reg_530 );

    SC_METHOD(thread_xor_ln236_12_fu_399_p2);
    sensitive << ( p_read12 );
    sensitive << ( state_load_12_reg_545 );

    SC_METHOD(thread_xor_ln236_13_fu_405_p2);
    sensitive << ( p_read13 );
    sensitive << ( state_load_13_reg_550 );

    SC_METHOD(thread_xor_ln236_14_fu_411_p2);
    sensitive << ( p_read14 );
    sensitive << ( reg_317 );

    SC_METHOD(thread_xor_ln236_15_fu_418_p2);
    sensitive << ( p_read15 );
    sensitive << ( reg_321 );

    SC_METHOD(thread_xor_ln236_1_fu_332_p2);
    sensitive << ( p_read1 );
    sensitive << ( reg_321 );

    SC_METHOD(thread_xor_ln236_2_fu_339_p2);
    sensitive << ( p_read2 );
    sensitive << ( state_load_2_reg_445 );

    SC_METHOD(thread_xor_ln236_3_fu_345_p2);
    sensitive << ( p_read3 );
    sensitive << ( state_load_3_reg_450 );

    SC_METHOD(thread_xor_ln236_4_fu_351_p2);
    sensitive << ( p_read4 );
    sensitive << ( state_load_4_reg_465 );

    SC_METHOD(thread_xor_ln236_5_fu_357_p2);
    sensitive << ( p_read5 );
    sensitive << ( state_load_5_reg_470 );

    SC_METHOD(thread_xor_ln236_6_fu_363_p2);
    sensitive << ( p_read6 );
    sensitive << ( state_load_6_reg_485 );

    SC_METHOD(thread_xor_ln236_7_fu_369_p2);
    sensitive << ( p_read7 );
    sensitive << ( state_load_7_reg_490 );

    SC_METHOD(thread_xor_ln236_8_fu_375_p2);
    sensitive << ( p_read8 );
    sensitive << ( state_load_8_reg_505 );

    SC_METHOD(thread_xor_ln236_9_fu_381_p2);
    sensitive << ( p_read9 );
    sensitive << ( state_load_9_reg_510 );

    SC_METHOD(thread_xor_ln236_fu_325_p2);
    sensitive << ( p_read );
    sensitive << ( reg_317 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "addRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read9, "(port)p_read9");
    sc_trace(mVcdFile, p_read10, "(port)p_read10");
    sc_trace(mVcdFile, p_read11, "(port)p_read11");
    sc_trace(mVcdFile, p_read12, "(port)p_read12");
    sc_trace(mVcdFile, p_read13, "(port)p_read13");
    sc_trace(mVcdFile, p_read14, "(port)p_read14");
    sc_trace(mVcdFile, p_read15, "(port)p_read15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_317, "reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_321, "reg_321");
    sc_trace(mVcdFile, state_addr_reg_425, "state_addr_reg_425");
    sc_trace(mVcdFile, state_addr_31_reg_430, "state_addr_31_reg_430");
    sc_trace(mVcdFile, state_addr_32_reg_435, "state_addr_32_reg_435");
    sc_trace(mVcdFile, state_addr_33_reg_440, "state_addr_33_reg_440");
    sc_trace(mVcdFile, state_load_2_reg_445, "state_load_2_reg_445");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, state_load_3_reg_450, "state_load_3_reg_450");
    sc_trace(mVcdFile, state_addr_34_reg_455, "state_addr_34_reg_455");
    sc_trace(mVcdFile, state_addr_35_reg_460, "state_addr_35_reg_460");
    sc_trace(mVcdFile, state_load_4_reg_465, "state_load_4_reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, state_load_5_reg_470, "state_load_5_reg_470");
    sc_trace(mVcdFile, state_addr_36_reg_475, "state_addr_36_reg_475");
    sc_trace(mVcdFile, state_addr_37_reg_480, "state_addr_37_reg_480");
    sc_trace(mVcdFile, state_load_6_reg_485, "state_load_6_reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_load_7_reg_490, "state_load_7_reg_490");
    sc_trace(mVcdFile, state_addr_38_reg_495, "state_addr_38_reg_495");
    sc_trace(mVcdFile, state_addr_39_reg_500, "state_addr_39_reg_500");
    sc_trace(mVcdFile, state_load_8_reg_505, "state_load_8_reg_505");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, state_load_9_reg_510, "state_load_9_reg_510");
    sc_trace(mVcdFile, state_addr_40_reg_515, "state_addr_40_reg_515");
    sc_trace(mVcdFile, state_addr_41_reg_520, "state_addr_41_reg_520");
    sc_trace(mVcdFile, state_load_10_reg_525, "state_load_10_reg_525");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, state_load_11_reg_530, "state_load_11_reg_530");
    sc_trace(mVcdFile, state_addr_42_reg_535, "state_addr_42_reg_535");
    sc_trace(mVcdFile, state_addr_43_reg_540, "state_addr_43_reg_540");
    sc_trace(mVcdFile, state_load_12_reg_545, "state_load_12_reg_545");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, state_load_13_reg_550, "state_load_13_reg_550");
    sc_trace(mVcdFile, state_addr_44_reg_555, "state_addr_44_reg_555");
    sc_trace(mVcdFile, state_addr_45_reg_560, "state_addr_45_reg_560");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, xor_ln236_fu_325_p2, "xor_ln236_fu_325_p2");
    sc_trace(mVcdFile, xor_ln236_1_fu_332_p2, "xor_ln236_1_fu_332_p2");
    sc_trace(mVcdFile, xor_ln236_2_fu_339_p2, "xor_ln236_2_fu_339_p2");
    sc_trace(mVcdFile, xor_ln236_3_fu_345_p2, "xor_ln236_3_fu_345_p2");
    sc_trace(mVcdFile, xor_ln236_4_fu_351_p2, "xor_ln236_4_fu_351_p2");
    sc_trace(mVcdFile, xor_ln236_5_fu_357_p2, "xor_ln236_5_fu_357_p2");
    sc_trace(mVcdFile, xor_ln236_6_fu_363_p2, "xor_ln236_6_fu_363_p2");
    sc_trace(mVcdFile, xor_ln236_7_fu_369_p2, "xor_ln236_7_fu_369_p2");
    sc_trace(mVcdFile, xor_ln236_8_fu_375_p2, "xor_ln236_8_fu_375_p2");
    sc_trace(mVcdFile, xor_ln236_9_fu_381_p2, "xor_ln236_9_fu_381_p2");
    sc_trace(mVcdFile, xor_ln236_10_fu_387_p2, "xor_ln236_10_fu_387_p2");
    sc_trace(mVcdFile, xor_ln236_11_fu_393_p2, "xor_ln236_11_fu_393_p2");
    sc_trace(mVcdFile, xor_ln236_12_fu_399_p2, "xor_ln236_12_fu_399_p2");
    sc_trace(mVcdFile, xor_ln236_13_fu_405_p2, "xor_ln236_13_fu_405_p2");
    sc_trace(mVcdFile, xor_ln236_14_fu_411_p2, "xor_ln236_14_fu_411_p2");
    sc_trace(mVcdFile, xor_ln236_15_fu_418_p2, "xor_ln236_15_fu_418_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

addRoundKey::~addRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void addRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_317 = state_q0.read();
        reg_321 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_load_10_reg_525 = state_q0.read();
        state_load_11_reg_530 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_load_12_reg_545 = state_q0.read();
        state_load_13_reg_550 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_load_2_reg_445 = state_q0.read();
        state_load_3_reg_450 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_load_4_reg_465 = state_q0.read();
        state_load_5_reg_470 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_load_6_reg_485 = state_q0.read();
        state_load_7_reg_490 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_load_8_reg_505 = state_q0.read();
        state_load_9_reg_510 = state_q1.read();
    }
}

void addRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void addRoundKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void addRoundKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void addRoundKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void addRoundKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void addRoundKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void addRoundKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void addRoundKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void addRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void addRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void addRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void addRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void addRoundKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void addRoundKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void addRoundKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void addRoundKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void addRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void addRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void addRoundKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void addRoundKey::thread_state_addr_31_reg_430() {
    state_addr_31_reg_430 =  (sc_lv<4>) (ap_const_lv64_1);
}

void addRoundKey::thread_state_addr_32_reg_435() {
    state_addr_32_reg_435 =  (sc_lv<4>) (ap_const_lv64_2);
}

void addRoundKey::thread_state_addr_33_reg_440() {
    state_addr_33_reg_440 =  (sc_lv<4>) (ap_const_lv64_3);
}

void addRoundKey::thread_state_addr_34_reg_455() {
    state_addr_34_reg_455 =  (sc_lv<4>) (ap_const_lv64_4);
}

void addRoundKey::thread_state_addr_35_reg_460() {
    state_addr_35_reg_460 =  (sc_lv<4>) (ap_const_lv64_5);
}

void addRoundKey::thread_state_addr_36_reg_475() {
    state_addr_36_reg_475 =  (sc_lv<4>) (ap_const_lv64_6);
}

void addRoundKey::thread_state_addr_37_reg_480() {
    state_addr_37_reg_480 =  (sc_lv<4>) (ap_const_lv64_7);
}

void addRoundKey::thread_state_addr_38_reg_495() {
    state_addr_38_reg_495 =  (sc_lv<4>) (ap_const_lv64_8);
}

void addRoundKey::thread_state_addr_39_reg_500() {
    state_addr_39_reg_500 =  (sc_lv<4>) (ap_const_lv64_9);
}

void addRoundKey::thread_state_addr_40_reg_515() {
    state_addr_40_reg_515 =  (sc_lv<4>) (ap_const_lv64_A);
}

void addRoundKey::thread_state_addr_41_reg_520() {
    state_addr_41_reg_520 =  (sc_lv<4>) (ap_const_lv64_B);
}

void addRoundKey::thread_state_addr_42_reg_535() {
    state_addr_42_reg_535 =  (sc_lv<4>) (ap_const_lv64_C);
}

void addRoundKey::thread_state_addr_43_reg_540() {
    state_addr_43_reg_540 =  (sc_lv<4>) (ap_const_lv64_D);
}

void addRoundKey::thread_state_addr_44_reg_555() {
    state_addr_44_reg_555 =  (sc_lv<4>) (ap_const_lv64_E);
}

void addRoundKey::thread_state_addr_45_reg_560() {
    state_addr_45_reg_560 =  (sc_lv<4>) (ap_const_lv64_F);
}

void addRoundKey::thread_state_addr_reg_425() {
    state_addr_reg_425 =  (sc_lv<4>) (ap_const_lv64_0);
}

void addRoundKey::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 = state_addr_44_reg_555.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 = state_addr_42_reg_535.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_40_reg_515.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 = state_addr_38_reg_495.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address0 = state_addr_36_reg_475.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 = state_addr_34_reg_455.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 = state_addr_32_reg_435.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = state_addr_reg_425.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 = "XXXX";
    }
}

void addRoundKey::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address1 = state_addr_45_reg_560.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_43_reg_540.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 = state_addr_41_reg_520.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address1 = state_addr_39_reg_500.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address1 = state_addr_37_reg_480.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 = state_addr_35_reg_460.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 = state_addr_33_reg_440.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 = state_addr_31_reg_430.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        state_address1 = "XXXX";
    }
}

void addRoundKey::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void addRoundKey::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void addRoundKey::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d0 = xor_ln236_14_fu_411_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = xor_ln236_12_fu_399_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d0 = xor_ln236_10_fu_387_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d0 = xor_ln236_8_fu_375_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d0 = xor_ln236_6_fu_363_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d0 = xor_ln236_4_fu_351_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d0 = xor_ln236_2_fu_339_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d0 = xor_ln236_fu_325_p2.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void addRoundKey::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d1 = xor_ln236_15_fu_418_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = xor_ln236_13_fu_405_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = xor_ln236_11_fu_393_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d1 = xor_ln236_9_fu_381_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d1 = xor_ln236_7_fu_369_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d1 = xor_ln236_5_fu_357_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d1 = xor_ln236_3_fu_345_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d1 = xor_ln236_1_fu_332_p2.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void addRoundKey::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void addRoundKey::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void addRoundKey::thread_xor_ln236_10_fu_387_p2() {
    xor_ln236_10_fu_387_p2 = (state_load_10_reg_525.read() ^ p_read10.read());
}

void addRoundKey::thread_xor_ln236_11_fu_393_p2() {
    xor_ln236_11_fu_393_p2 = (state_load_11_reg_530.read() ^ p_read11.read());
}

void addRoundKey::thread_xor_ln236_12_fu_399_p2() {
    xor_ln236_12_fu_399_p2 = (state_load_12_reg_545.read() ^ p_read12.read());
}

void addRoundKey::thread_xor_ln236_13_fu_405_p2() {
    xor_ln236_13_fu_405_p2 = (state_load_13_reg_550.read() ^ p_read13.read());
}

void addRoundKey::thread_xor_ln236_14_fu_411_p2() {
    xor_ln236_14_fu_411_p2 = (reg_317.read() ^ p_read14.read());
}

void addRoundKey::thread_xor_ln236_15_fu_418_p2() {
    xor_ln236_15_fu_418_p2 = (reg_321.read() ^ p_read15.read());
}

void addRoundKey::thread_xor_ln236_1_fu_332_p2() {
    xor_ln236_1_fu_332_p2 = (reg_321.read() ^ p_read1.read());
}

void addRoundKey::thread_xor_ln236_2_fu_339_p2() {
    xor_ln236_2_fu_339_p2 = (state_load_2_reg_445.read() ^ p_read2.read());
}

void addRoundKey::thread_xor_ln236_3_fu_345_p2() {
    xor_ln236_3_fu_345_p2 = (state_load_3_reg_450.read() ^ p_read3.read());
}

void addRoundKey::thread_xor_ln236_4_fu_351_p2() {
    xor_ln236_4_fu_351_p2 = (state_load_4_reg_465.read() ^ p_read4.read());
}

void addRoundKey::thread_xor_ln236_5_fu_357_p2() {
    xor_ln236_5_fu_357_p2 = (state_load_5_reg_470.read() ^ p_read5.read());
}

void addRoundKey::thread_xor_ln236_6_fu_363_p2() {
    xor_ln236_6_fu_363_p2 = (state_load_6_reg_485.read() ^ p_read6.read());
}

void addRoundKey::thread_xor_ln236_7_fu_369_p2() {
    xor_ln236_7_fu_369_p2 = (state_load_7_reg_490.read() ^ p_read7.read());
}

void addRoundKey::thread_xor_ln236_8_fu_375_p2() {
    xor_ln236_8_fu_375_p2 = (state_load_8_reg_505.read() ^ p_read8.read());
}

void addRoundKey::thread_xor_ln236_9_fu_381_p2() {
    xor_ln236_9_fu_381_p2 = (state_load_9_reg_510.read() ^ p_read9.read());
}

void addRoundKey::thread_xor_ln236_fu_325_p2() {
    xor_ln236_fu_325_p2 = (reg_317.read() ^ p_read.read());
}

void addRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

