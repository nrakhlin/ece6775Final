// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_invMain.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_invMain::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_invMain::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<22> aes_invMain::ap_ST_fsm_state1 = "1";
const sc_lv<22> aes_invMain::ap_ST_fsm_state2 = "10";
const sc_lv<22> aes_invMain::ap_ST_fsm_state3 = "100";
const sc_lv<22> aes_invMain::ap_ST_fsm_state4 = "1000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state5 = "10000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state6 = "100000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state7 = "1000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state8 = "10000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state9 = "100000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state10 = "1000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state11 = "10000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state12 = "100000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<22> aes_invMain::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<32> aes_invMain::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_invMain::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_invMain::ap_const_lv32_D = "1101";
const sc_lv<32> aes_invMain::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_invMain::ap_const_lv32_2 = "10";
const sc_lv<1> aes_invMain::ap_const_lv1_0 = "0";
const sc_lv<32> aes_invMain::ap_const_lv32_4 = "100";
const sc_lv<1> aes_invMain::ap_const_lv1_1 = "1";
const sc_lv<32> aes_invMain::ap_const_lv32_A = "1010";
const sc_lv<32> aes_invMain::ap_const_lv32_B = "1011";
const sc_lv<32> aes_invMain::ap_const_lv32_C = "1100";
const sc_lv<32> aes_invMain::ap_const_lv32_11 = "10001";
const sc_lv<32> aes_invMain::ap_const_lv32_12 = "10010";
const sc_lv<32> aes_invMain::ap_const_lv32_14 = "10100";
const sc_lv<5> aes_invMain::ap_const_lv5_0 = "00000";
const sc_lv<32> aes_invMain::ap_const_lv32_1 = "1";
const sc_lv<32> aes_invMain::ap_const_lv32_3 = "11";
const sc_lv<32> aes_invMain::ap_const_lv32_7 = "111";
const sc_lv<4> aes_invMain::ap_const_lv4_9 = "1001";
const sc_lv<32> aes_invMain::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_invMain::ap_const_lv32_13 = "10011";
const sc_lv<32> aes_invMain::ap_const_lv32_15 = "10101";
const sc_lv<32> aes_invMain::ap_const_lv32_6 = "110";
const sc_lv<32> aes_invMain::ap_const_lv32_F = "1111";
const sc_lv<32> aes_invMain::ap_const_lv32_5 = "101";
const sc_lv<9> aes_invMain::ap_const_lv9_A0 = "10100000";
const sc_lv<9> aes_invMain::ap_const_lv9_0 = "000000000";
const sc_lv<64> aes_invMain::ap_const_lv64_7 = "111";
const sc_lv<64> aes_invMain::ap_const_lv64_6 = "110";
const sc_lv<64> aes_invMain::ap_const_lv64_5 = "101";
const sc_lv<64> aes_invMain::ap_const_lv64_4 = "100";
const sc_lv<64> aes_invMain::ap_const_lv64_B = "1011";
const sc_lv<64> aes_invMain::ap_const_lv64_A = "1010";
const sc_lv<64> aes_invMain::ap_const_lv64_9 = "1001";
const sc_lv<64> aes_invMain::ap_const_lv64_8 = "1000";
const sc_lv<64> aes_invMain::ap_const_lv64_F = "1111";
const sc_lv<64> aes_invMain::ap_const_lv64_E = "1110";
const sc_lv<64> aes_invMain::ap_const_lv64_D = "1101";
const sc_lv<64> aes_invMain::ap_const_lv64_C = "1100";
const sc_lv<32> aes_invMain::ap_const_lv32_E = "1110";
const sc_lv<5> aes_invMain::ap_const_lv5_10 = "10000";
const sc_lv<5> aes_invMain::ap_const_lv5_1 = "1";
const sc_lv<4> aes_invMain::ap_const_lv4_0 = "0000";
const sc_lv<4> aes_invMain::ap_const_lv4_F = "1111";
const sc_lv<8> aes_invMain::ap_const_lv8_0 = "00000000";
const bool aes_invMain::ap_const_boolean_1 = true;

aes_invMain::aes_invMain(sc_module_name name) : sc_module(name), mVcdFile(0) {
    expandedKey23_U = new aes_invMain_expandEe("expandedKey23_U");
    expandedKey23_U->clk(ap_clk);
    expandedKey23_U->reset(ap_rst);
    expandedKey23_U->address0(grp_createRoundKey_fu_298_expandedKey_address0);
    expandedKey23_U->ce0(expandedKey23_ce0);
    expandedKey23_U->q0(expandedKey23_q0);
    rsbox_U = new aes_invRound_rsbox("rsbox_U");
    rsbox_U->clk(ap_clk);
    rsbox_U->reset(ap_rst);
    rsbox_U->address0(rsbox_address0);
    rsbox_U->ce0(rsbox_ce0);
    rsbox_U->q0(rsbox_q0);
    roundKey_U = new aes_main_roundKey("roundKey_U");
    roundKey_U->clk(ap_clk);
    roundKey_U->reset(ap_rst);
    roundKey_U->address0(roundKey_address0);
    roundKey_U->ce0(roundKey_ce0);
    roundKey_U->we0(roundKey_we0);
    roundKey_U->d0(grp_createRoundKey_fu_298_roundKey_d0);
    roundKey_U->q0(roundKey_q0);
    grp_aes_invRound_fu_289 = new aes_invRound("grp_aes_invRound_fu_289");
    grp_aes_invRound_fu_289->ap_clk(ap_clk);
    grp_aes_invRound_fu_289->ap_rst(ap_rst);
    grp_aes_invRound_fu_289->ap_start(grp_aes_invRound_fu_289_ap_start);
    grp_aes_invRound_fu_289->ap_done(grp_aes_invRound_fu_289_ap_done);
    grp_aes_invRound_fu_289->ap_idle(grp_aes_invRound_fu_289_ap_idle);
    grp_aes_invRound_fu_289->ap_ready(grp_aes_invRound_fu_289_ap_ready);
    grp_aes_invRound_fu_289->state_address0(grp_aes_invRound_fu_289_state_address0);
    grp_aes_invRound_fu_289->state_ce0(grp_aes_invRound_fu_289_state_ce0);
    grp_aes_invRound_fu_289->state_we0(grp_aes_invRound_fu_289_state_we0);
    grp_aes_invRound_fu_289->state_d0(grp_aes_invRound_fu_289_state_d0);
    grp_aes_invRound_fu_289->state_q0(state_q0);
    grp_aes_invRound_fu_289->state_address1(grp_aes_invRound_fu_289_state_address1);
    grp_aes_invRound_fu_289->state_ce1(grp_aes_invRound_fu_289_state_ce1);
    grp_aes_invRound_fu_289->state_we1(grp_aes_invRound_fu_289_state_we1);
    grp_aes_invRound_fu_289->state_d1(grp_aes_invRound_fu_289_state_d1);
    grp_aes_invRound_fu_289->state_q1(state_q1);
    grp_aes_invRound_fu_289->roundKey_address0(grp_aes_invRound_fu_289_roundKey_address0);
    grp_aes_invRound_fu_289->roundKey_ce0(grp_aes_invRound_fu_289_roundKey_ce0);
    grp_aes_invRound_fu_289->roundKey_q0(roundKey_q0);
    grp_createRoundKey_fu_298 = new createRoundKey("grp_createRoundKey_fu_298");
    grp_createRoundKey_fu_298->ap_clk(ap_clk);
    grp_createRoundKey_fu_298->ap_rst(ap_rst);
    grp_createRoundKey_fu_298->ap_start(grp_createRoundKey_fu_298_ap_start);
    grp_createRoundKey_fu_298->ap_done(grp_createRoundKey_fu_298_ap_done);
    grp_createRoundKey_fu_298->ap_idle(grp_createRoundKey_fu_298_ap_idle);
    grp_createRoundKey_fu_298->ap_ready(grp_createRoundKey_fu_298_ap_ready);
    grp_createRoundKey_fu_298->expandedKey_address0(grp_createRoundKey_fu_298_expandedKey_address0);
    grp_createRoundKey_fu_298->expandedKey_ce0(grp_createRoundKey_fu_298_expandedKey_ce0);
    grp_createRoundKey_fu_298->expandedKey_q0(expandedKey23_q0);
    grp_createRoundKey_fu_298->roundKey_address0(grp_createRoundKey_fu_298_roundKey_address0);
    grp_createRoundKey_fu_298->roundKey_ce0(grp_createRoundKey_fu_298_roundKey_ce0);
    grp_createRoundKey_fu_298->roundKey_we0(grp_createRoundKey_fu_298_roundKey_we0);
    grp_createRoundKey_fu_298->roundKey_d0(grp_createRoundKey_fu_298_roundKey_d0);
    grp_createRoundKey_fu_298->ptr(grp_createRoundKey_fu_298_ptr);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln34_fu_366_p2);
    sensitive << ( i_reg_256 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( icmp_ln225_2_fu_394_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( icmp_ln225_2_fu_394_p2 );

    SC_METHOD(thread_expandedKey23_ce0);
    sensitive << ( grp_createRoundKey_fu_298_expandedKey_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_aes_invRound_fu_289_ap_start);
    sensitive << ( grp_aes_invRound_fu_289_ap_start_reg );

    SC_METHOD(thread_grp_createRoundKey_fu_298_ap_start);
    sensitive << ( grp_createRoundKey_fu_298_ap_start_reg );

    SC_METHOD(thread_grp_createRoundKey_fu_298_ptr);
    sensitive << ( zext_ln36_reg_433 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_309_p2);
    sensitive << ( state_q0 );
    sensitive << ( roundKey_q0 );

    SC_METHOD(thread_i_10_fu_335_p2);
    sensitive << ( i_0_i_reg_245 );

    SC_METHOD(thread_i_11_fu_378_p2);
    sensitive << ( i_0_i3_reg_267 );

    SC_METHOD(thread_i_12_fu_400_p2);
    sensitive << ( i_0_i7_reg_278 );

    SC_METHOD(thread_icmp_ln225_2_fu_394_p2);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( i_0_i7_reg_278 );

    SC_METHOD(thread_icmp_ln225_fu_329_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_reg_245 );

    SC_METHOD(thread_icmp_ln319_fu_372_p2);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( i_0_i3_reg_267 );

    SC_METHOD(thread_icmp_ln34_fu_347_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_reg_256 );

    SC_METHOD(thread_roundKey_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_aes_invRound_fu_289_roundKey_address0 );
    sensitive << ( grp_createRoundKey_fu_298_roundKey_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln226_fu_341_p1 );
    sensitive << ( zext_ln226_2_fu_406_p1 );

    SC_METHOD(thread_roundKey_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_aes_invRound_fu_289_roundKey_ce0 );
    sensitive << ( grp_createRoundKey_fu_298_roundKey_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_roundKey_we0);
    sensitive << ( grp_createRoundKey_fu_298_roundKey_we0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_rsbox_address0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln48_fu_389_p1 );

    SC_METHOD(thread_rsbox_ce0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_shl_ln_fu_353_p3);
    sensitive << ( i_reg_256 );

    SC_METHOD(thread_state_addr_45_reg_455);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_addr_54_reg_524);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_reg_420 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( state_addr_54_reg_524 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_aes_invRound_fu_289_state_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( zext_ln226_fu_341_p1 );
    sensitive << ( zext_ln226_2_fu_406_p1 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_45_reg_455 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( state_addr_55_reg_537 );
    sensitive << ( state_addr_56_reg_555 );
    sensitive << ( grp_aes_invRound_fu_289_state_address1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( zext_ln321_fu_384_p1 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_aes_invRound_fu_289_state_ce0 );
    sensitive << ( grp_createRoundKey_fu_298_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_aes_invRound_fu_289_state_ce1 );
    sensitive << ( grp_createRoundKey_fu_298_ap_done );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_d0);
    sensitive << ( state_q0 );
    sensitive << ( reg_317 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( reg_323 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( state_load_45_reg_492 );
    sensitive << ( grp_aes_invRound_fu_289_state_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_fu_309_p2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_d1);
    sensitive << ( state_q0 );
    sensitive << ( state_q1 );
    sensitive << ( rsbox_q0 );
    sensitive << ( reg_317 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( state_load_42_reg_465 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( state_load_46_reg_497 );
    sensitive << ( tmp_16_reg_514 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( grp_aes_invRound_fu_289_state_d1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_fu_309_p2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_aes_invRound_fu_289_state_we0 );
    sensitive << ( grp_createRoundKey_fu_298_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( grp_aes_invRound_fu_289_state_we1 );
    sensitive << ( grp_createRoundKey_fu_298_ap_done );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_zext_ln226_2_fu_406_p1);
    sensitive << ( i_0_i7_reg_278 );

    SC_METHOD(thread_zext_ln226_fu_341_p1);
    sensitive << ( i_0_i_reg_245 );

    SC_METHOD(thread_zext_ln321_fu_384_p1);
    sensitive << ( i_0_i3_reg_267 );

    SC_METHOD(thread_zext_ln36_fu_361_p1);
    sensitive << ( shl_ln_fu_353_p3 );

    SC_METHOD(thread_zext_ln48_fu_389_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln225_fu_329_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln34_fu_347_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( icmp_ln319_fu_372_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( icmp_ln225_2_fu_394_p2 );
    sensitive << ( grp_aes_invRound_fu_289_ap_done );
    sensitive << ( grp_createRoundKey_fu_298_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state6 );

    ap_CS_fsm = "0000000000000000000001";
    grp_aes_invRound_fu_289_ap_start_reg = SC_LOGIC_0;
    grp_createRoundKey_fu_298_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_invMain_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, expandedKey23_ce0, "expandedKey23_ce0");
    sc_trace(mVcdFile, expandedKey23_q0, "expandedKey23_q0");
    sc_trace(mVcdFile, rsbox_address0, "rsbox_address0");
    sc_trace(mVcdFile, rsbox_ce0, "rsbox_ce0");
    sc_trace(mVcdFile, rsbox_q0, "rsbox_q0");
    sc_trace(mVcdFile, reg_317, "reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, reg_323, "reg_323");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_10_fu_335_p2, "i_10_fu_335_p2");
    sc_trace(mVcdFile, i_10_reg_415, "i_10_reg_415");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, state_addr_reg_420, "state_addr_reg_420");
    sc_trace(mVcdFile, icmp_ln225_fu_329_p2, "icmp_ln225_fu_329_p2");
    sc_trace(mVcdFile, zext_ln36_fu_361_p1, "zext_ln36_fu_361_p1");
    sc_trace(mVcdFile, zext_ln36_reg_433, "zext_ln36_reg_433");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln34_fu_347_p2, "icmp_ln34_fu_347_p2");
    sc_trace(mVcdFile, add_ln34_fu_366_p2, "add_ln34_fu_366_p2");
    sc_trace(mVcdFile, add_ln34_reg_438, "add_ln34_reg_438");
    sc_trace(mVcdFile, state_addr_45_reg_455, "state_addr_45_reg_455");
    sc_trace(mVcdFile, state_load_42_reg_465, "state_load_42_reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, state_load_45_reg_492, "state_load_45_reg_492");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, state_load_46_reg_497, "state_load_46_reg_497");
    sc_trace(mVcdFile, tmp_16_reg_514, "tmp_16_reg_514");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, state_addr_54_reg_524, "state_addr_54_reg_524");
    sc_trace(mVcdFile, i_11_fu_378_p2, "i_11_fu_378_p2");
    sc_trace(mVcdFile, i_11_reg_532, "i_11_reg_532");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, state_addr_55_reg_537, "state_addr_55_reg_537");
    sc_trace(mVcdFile, icmp_ln319_fu_372_p2, "icmp_ln319_fu_372_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, i_12_fu_400_p2, "i_12_fu_400_p2");
    sc_trace(mVcdFile, i_12_reg_550, "i_12_reg_550");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, state_addr_56_reg_555, "state_addr_56_reg_555");
    sc_trace(mVcdFile, icmp_ln225_2_fu_394_p2, "icmp_ln225_2_fu_394_p2");
    sc_trace(mVcdFile, roundKey_address0, "roundKey_address0");
    sc_trace(mVcdFile, roundKey_ce0, "roundKey_ce0");
    sc_trace(mVcdFile, roundKey_we0, "roundKey_we0");
    sc_trace(mVcdFile, roundKey_q0, "roundKey_q0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_ap_start, "grp_aes_invRound_fu_289_ap_start");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_ap_done, "grp_aes_invRound_fu_289_ap_done");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_ap_idle, "grp_aes_invRound_fu_289_ap_idle");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_ap_ready, "grp_aes_invRound_fu_289_ap_ready");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_address0, "grp_aes_invRound_fu_289_state_address0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_ce0, "grp_aes_invRound_fu_289_state_ce0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_we0, "grp_aes_invRound_fu_289_state_we0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_d0, "grp_aes_invRound_fu_289_state_d0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_address1, "grp_aes_invRound_fu_289_state_address1");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_ce1, "grp_aes_invRound_fu_289_state_ce1");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_we1, "grp_aes_invRound_fu_289_state_we1");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_state_d1, "grp_aes_invRound_fu_289_state_d1");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_roundKey_address0, "grp_aes_invRound_fu_289_roundKey_address0");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_roundKey_ce0, "grp_aes_invRound_fu_289_roundKey_ce0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ap_start, "grp_createRoundKey_fu_298_ap_start");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ap_done, "grp_createRoundKey_fu_298_ap_done");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ap_idle, "grp_createRoundKey_fu_298_ap_idle");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ap_ready, "grp_createRoundKey_fu_298_ap_ready");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_expandedKey_address0, "grp_createRoundKey_fu_298_expandedKey_address0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_expandedKey_ce0, "grp_createRoundKey_fu_298_expandedKey_ce0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_roundKey_address0, "grp_createRoundKey_fu_298_roundKey_address0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_roundKey_ce0, "grp_createRoundKey_fu_298_roundKey_ce0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_roundKey_we0, "grp_createRoundKey_fu_298_roundKey_we0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_roundKey_d0, "grp_createRoundKey_fu_298_roundKey_d0");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ptr, "grp_createRoundKey_fu_298_ptr");
    sc_trace(mVcdFile, i_0_i_reg_245, "i_0_i_reg_245");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_reg_256, "i_reg_256");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_0_i3_reg_267, "i_0_i3_reg_267");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, i_0_i7_reg_278, "i_0_i7_reg_278");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_aes_invRound_fu_289_ap_start_reg, "grp_aes_invRound_fu_289_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_createRoundKey_fu_298_ap_start_reg, "grp_createRoundKey_fu_298_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln226_fu_341_p1, "zext_ln226_fu_341_p1");
    sc_trace(mVcdFile, zext_ln321_fu_384_p1, "zext_ln321_fu_384_p1");
    sc_trace(mVcdFile, zext_ln48_fu_389_p1, "zext_ln48_fu_389_p1");
    sc_trace(mVcdFile, zext_ln226_2_fu_406_p1, "zext_ln226_2_fu_406_p1");
    sc_trace(mVcdFile, grp_fu_309_p2, "grp_fu_309_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, shl_ln_fu_353_p3, "shl_ln_fu_353_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_invMain::~aes_invMain() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete expandedKey23_U;
    delete rsbox_U;
    delete roundKey_U;
    delete grp_aes_invRound_fu_289;
    delete grp_createRoundKey_fu_298;
}

void aes_invMain::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes_invRound_fu_289_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            grp_aes_invRound_fu_289_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes_invRound_fu_289_ap_ready.read())) {
            grp_aes_invRound_fu_289_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_createRoundKey_fu_298_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln34_fu_347_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
            grp_createRoundKey_fu_298_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_createRoundKey_fu_298_ap_ready.read())) {
            grp_createRoundKey_fu_298_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i_0_i3_reg_267 = i_11_reg_532.read();
    } else if ((esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        i_0_i3_reg_267 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln319_fu_372_p2.read()))) {
        i_0_i7_reg_278 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_0_i7_reg_278 = i_12_reg_550.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_reg_245 = i_10_reg_415.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1))) {
        i_0_i_reg_245 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln225_fu_329_p2.read(), ap_const_lv1_1))) {
        i_reg_256 = ap_const_lv4_9;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(grp_aes_invRound_fu_289_ap_done.read(), ap_const_logic_1))) {
        i_reg_256 = add_ln34_reg_438.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        reg_323 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        reg_323 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln34_fu_347_p2.read()))) {
        add_ln34_reg_438 = add_ln34_fu_366_p2.read();
        zext_ln36_reg_433 = zext_ln36_fu_361_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_10_reg_415 = i_10_fu_335_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i_11_reg_532 = i_11_fu_378_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        i_12_reg_550 = i_12_fu_400_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        reg_317 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln319_fu_372_p2.read()))) {
        state_addr_55_reg_537 =  (sc_lv<4>) (zext_ln321_fu_384_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln225_2_fu_394_p2.read()))) {
        state_addr_56_reg_555 =  (sc_lv<4>) (zext_ln226_2_fu_406_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln225_fu_329_p2.read(), ap_const_lv1_0))) {
        state_addr_reg_420 =  (sc_lv<4>) (zext_ln226_fu_341_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_load_42_reg_465 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_load_45_reg_492 = state_q1.read();
        state_load_46_reg_497 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_16_reg_514 = state_q1.read();
    }
}

void aes_invMain::thread_add_ln34_fu_366_p2() {
    add_ln34_fu_366_p2 = (!i_reg_256.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_256.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void aes_invMain::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_invMain::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_invMain::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_invMain::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_invMain::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes_invMain::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes_invMain::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes_invMain::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes_invMain::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes_invMain::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes_invMain::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aes_invMain::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_invMain::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void aes_invMain::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void aes_invMain::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aes_invMain::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_invMain::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_invMain::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_invMain::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_invMain::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_invMain::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_invMain::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_invMain::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln225_2_fu_394_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_invMain::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_invMain::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln225_2_fu_394_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_invMain::thread_expandedKey23_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        expandedKey23_ce0 = grp_createRoundKey_fu_298_expandedKey_ce0.read();
    } else {
        expandedKey23_ce0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_grp_aes_invRound_fu_289_ap_start() {
    grp_aes_invRound_fu_289_ap_start = grp_aes_invRound_fu_289_ap_start_reg.read();
}

void aes_invMain::thread_grp_createRoundKey_fu_298_ap_start() {
    grp_createRoundKey_fu_298_ap_start = grp_createRoundKey_fu_298_ap_start_reg.read();
}

void aes_invMain::thread_grp_createRoundKey_fu_298_ptr() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_createRoundKey_fu_298_ptr = ap_const_lv9_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_createRoundKey_fu_298_ptr = zext_ln36_reg_433.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_createRoundKey_fu_298_ptr = ap_const_lv9_A0;
    } else {
        grp_createRoundKey_fu_298_ptr = "XXXXXXXXX";
    }
}

void aes_invMain::thread_grp_fu_309_p2() {
    grp_fu_309_p2 = (roundKey_q0.read() ^ state_q0.read());
}

void aes_invMain::thread_i_10_fu_335_p2() {
    i_10_fu_335_p2 = (!i_0_i_reg_245.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_245.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_invMain::thread_i_11_fu_378_p2() {
    i_11_fu_378_p2 = (!i_0_i3_reg_267.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i3_reg_267.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_invMain::thread_i_12_fu_400_p2() {
    i_12_fu_400_p2 = (!i_0_i7_reg_278.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i7_reg_278.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_invMain::thread_icmp_ln225_2_fu_394_p2() {
    icmp_ln225_2_fu_394_p2 = (!i_0_i7_reg_278.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i7_reg_278.read() == ap_const_lv5_10);
}

void aes_invMain::thread_icmp_ln225_fu_329_p2() {
    icmp_ln225_fu_329_p2 = (!i_0_i_reg_245.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_245.read() == ap_const_lv5_10);
}

void aes_invMain::thread_icmp_ln319_fu_372_p2() {
    icmp_ln319_fu_372_p2 = (!i_0_i3_reg_267.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i3_reg_267.read() == ap_const_lv5_10);
}

void aes_invMain::thread_icmp_ln34_fu_347_p2() {
    icmp_ln34_fu_347_p2 = (!i_reg_256.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_256.read() == ap_const_lv4_0);
}

void aes_invMain::thread_roundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        roundKey_address0 =  (sc_lv<4>) (zext_ln226_2_fu_406_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        roundKey_address0 =  (sc_lv<4>) (zext_ln226_fu_341_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        roundKey_address0 = grp_createRoundKey_fu_298_roundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        roundKey_address0 = grp_aes_invRound_fu_289_roundKey_address0.read();
    } else {
        roundKey_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_invMain::thread_roundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        roundKey_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        roundKey_ce0 = grp_createRoundKey_fu_298_roundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        roundKey_ce0 = grp_aes_invRound_fu_289_roundKey_ce0.read();
    } else {
        roundKey_ce0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_roundKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        roundKey_we0 = grp_createRoundKey_fu_298_roundKey_we0.read();
    } else {
        roundKey_we0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_rsbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        rsbox_address0 =  (sc_lv<8>) (zext_ln48_fu_389_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        rsbox_address0 = ap_const_lv8_0;
    } else {
        rsbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_invMain::thread_rsbox_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        rsbox_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        rsbox_ce0 = ap_const_logic_0;
    } else {
        rsbox_ce0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_shl_ln_fu_353_p3() {
    shl_ln_fu_353_p3 = esl_concat<4,4>(i_reg_256.read(), ap_const_lv4_0);
}

void aes_invMain::thread_state_addr_45_reg_455() {
    state_addr_45_reg_455 =  (sc_lv<4>) (ap_const_lv64_5);
}

void aes_invMain::thread_state_addr_54_reg_524() {
    state_addr_54_reg_524 =  (sc_lv<4>) (ap_const_lv64_C);
}

void aes_invMain::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln226_2_fu_406_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address0 = state_addr_54_reg_524.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 = state_addr_reg_420.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln226_fu_341_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 = grp_aes_invRound_fu_289_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_invMain::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_address1 = state_addr_56_reg_555.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_address1 = state_addr_55_reg_537.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address1 =  (sc_lv<4>) (zext_ln321_fu_384_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_45_reg_455.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 = grp_aes_invRound_fu_289_state_address1.read();
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_invMain::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_ce0 = grp_aes_invRound_fu_289_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         (esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_ce1 = grp_aes_invRound_fu_289_state_ce1.read();
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void aes_invMain::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_d0 = reg_317.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = state_load_45_reg_492.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_d0 = reg_323.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        state_d0 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_d0 = grp_fu_309_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_d0 = grp_aes_invRound_fu_289_state_d0.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_invMain::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_d1 = grp_fu_309_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_d1 = rsbox_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_d1 = tmp_16_reg_514.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d1 = state_load_46_reg_497.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = state_load_42_reg_465.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = reg_317.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d1 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d1 = state_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_d1 = grp_aes_invRound_fu_289_state_d1.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_invMain::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_we0 = grp_aes_invRound_fu_289_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void aes_invMain::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_we1 = grp_aes_invRound_fu_289_state_we1.read();
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void aes_invMain::thread_zext_ln226_2_fu_406_p1() {
    zext_ln226_2_fu_406_p1 = esl_zext<64,5>(i_0_i7_reg_278.read());
}

void aes_invMain::thread_zext_ln226_fu_341_p1() {
    zext_ln226_fu_341_p1 = esl_zext<64,5>(i_0_i_reg_245.read());
}

void aes_invMain::thread_zext_ln321_fu_384_p1() {
    zext_ln321_fu_384_p1 = esl_zext<64,5>(i_0_i3_reg_267.read());
}

void aes_invMain::thread_zext_ln36_fu_361_p1() {
    zext_ln36_fu_361_p1 = esl_zext<9,8>(shl_ln_fu_353_p3.read());
}

void aes_invMain::thread_zext_ln48_fu_389_p1() {
    zext_ln48_fu_389_p1 = esl_zext<64,8>(state_q1.read());
}

void aes_invMain::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln225_fu_329_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln34_fu_347_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_aes_invRound_fu_289_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(grp_createRoundKey_fu_298_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln319_fu_372_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln225_2_fu_394_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<22>) ("XXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

