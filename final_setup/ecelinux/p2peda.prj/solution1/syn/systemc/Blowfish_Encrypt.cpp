// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_Encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_Encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_Encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state1 = "1";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state2 = "10";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state3 = "100";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_pp0_stage0 = "100000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_pp0_stage1 = "1000000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state10 = "10000000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state11 = "100000000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state12 = "1000000000";
const sc_lv<11> Blowfish_Encrypt::ap_ST_fsm_state13 = "10000000000";
const bool Blowfish_Encrypt::ap_const_boolean_1 = true;
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_5 = "101";
const bool Blowfish_Encrypt::ap_const_boolean_0 = false;
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_1 = "1";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_4 = "100";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_6 = "110";
const sc_lv<1> Blowfish_Encrypt::ap_const_lv1_0 = "0";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_7 = "111";
const sc_lv<1> Blowfish_Encrypt::ap_const_lv1_1 = "1";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_0 = "00000";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_1 = "1";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_2 = "10";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_3 = "11";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_4 = "100";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_5 = "101";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_6 = "110";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_7 = "111";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_8 = "1000";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_9 = "1001";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_A = "1010";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_B = "1011";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_C = "1100";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_D = "1101";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_E = "1110";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_1 = "1";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_2 = "10";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_3 = "11";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_4 = "100";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_5 = "101";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_6 = "110";
const sc_lv<64> Blowfish_Encrypt::ap_const_lv64_7 = "111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_A = "1010";
const sc_lv<5> Blowfish_Encrypt::ap_const_lv5_10 = "10000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_1F = "11111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_Encrypt::ap_const_lv32_F = "1111";

Blowfish_Encrypt::Blowfish_Encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_feistel_fu_481 = new feistel("grp_feistel_fu_481");
    grp_feistel_fu_481->ap_clk(ap_clk);
    grp_feistel_fu_481->ap_rst(ap_rst);
    grp_feistel_fu_481->ap_start(grp_feistel_fu_481_ap_start);
    grp_feistel_fu_481->ap_done(grp_feistel_fu_481_ap_done);
    grp_feistel_fu_481->ap_idle(grp_feistel_fu_481_ap_idle);
    grp_feistel_fu_481->ap_ready(grp_feistel_fu_481_ap_ready);
    grp_feistel_fu_481->x(grp_feistel_fu_481_x);
    grp_feistel_fu_481->S_0_address0(grp_feistel_fu_481_S_0_address0);
    grp_feistel_fu_481->S_0_ce0(grp_feistel_fu_481_S_0_ce0);
    grp_feistel_fu_481->S_0_q0(S_0_q0);
    grp_feistel_fu_481->S_1_address0(grp_feistel_fu_481_S_1_address0);
    grp_feistel_fu_481->S_1_ce0(grp_feistel_fu_481_S_1_ce0);
    grp_feistel_fu_481->S_1_q0(S_1_q0);
    grp_feistel_fu_481->S_2_address0(grp_feistel_fu_481_S_2_address0);
    grp_feistel_fu_481->S_2_ce0(grp_feistel_fu_481_S_2_ce0);
    grp_feistel_fu_481->S_2_q0(S_2_q0);
    grp_feistel_fu_481->S_3_address0(grp_feistel_fu_481_S_3_address0);
    grp_feistel_fu_481->S_3_ce0(grp_feistel_fu_481_S_3_ce0);
    grp_feistel_fu_481->S_3_q0(S_3_q0);
    grp_feistel_fu_481->ap_return(grp_feistel_fu_481_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_0_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_0_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_1_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_1_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_2_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_2_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_3_address0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_feistel_fu_481_S_3_ce0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage1_iter1);

    SC_METHOD(thread_ap_condition_398);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln76_fu_512_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_condition_613);
    sensitive << ( ap_phi_mux_i_0_phi_fu_436_p4 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state6);
    sensitive << ( icmp_ln76_fu_512_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_436_p4);
    sensitive << ( i_0_reg_432 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( i_reg_866 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_right_4_phi_fu_425_p4);
    sensitive << ( right_4_reg_422 );
    sensitive << ( icmp_ln76_reg_862_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( right_fu_531_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_ce1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_d0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( trunc_ln2_reg_892 );
    sensitive << ( trunc_ln3_reg_897 );
    sensitive << ( trunc_ln5_reg_907 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( left_fu_591_p2 );

    SC_METHOD(thread_ciphertext_d1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( trunc_ln4_reg_902 );
    sensitive << ( xor_ln248_reg_912 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( xor_ln244_fu_680_p2 );
    sensitive << ( xor_ln83_2_fu_602_p2 );

    SC_METHOD(thread_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ciphertext_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_feistel_fu_481_ap_start);
    sensitive << ( grp_feistel_fu_481_ap_start_reg );

    SC_METHOD(thread_grp_feistel_fu_481_x);
    sensitive << ( icmp_ln76_reg_862 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_phi_mux_right_4_phi_fu_425_p4 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_phi_reg_pp0_iter0_phi_ln77_reg_444 );

    SC_METHOD(thread_i_fu_518_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_436_p4 );

    SC_METHOD(thread_icmp_ln76_fu_512_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_436_p4 );

    SC_METHOD(thread_left_3_fu_494_p5);
    sensitive << ( plaintext_load_reg_696 );
    sensitive << ( plaintext_load_1_reg_701 );
    sensitive << ( plaintext_load_2_reg_716 );
    sensitive << ( plaintext_load_3_reg_721 );

    SC_METHOD(thread_left_7_fu_524_p2);
    sensitive << ( ap_phi_mux_right_4_phi_fu_425_p4 );
    sensitive << ( ap_phi_reg_pp0_iter0_phi_ln77_reg_444 );

    SC_METHOD(thread_left_fu_591_p2);
    sensitive << ( P_17_read );
    sensitive << ( left_4_reg_412 );

    SC_METHOD(thread_plaintext_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_plaintext_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_plaintext_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_plaintext_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_right_3_fu_502_p5);
    sensitive << ( plaintext_q0 );
    sensitive << ( plaintext_q1 );
    sensitive << ( plaintext_load_4_reg_736 );
    sensitive << ( plaintext_load_5_reg_741 );

    SC_METHOD(thread_right_5_fu_557_p2);
    sensitive << ( P_16_read );
    sensitive << ( right_4_reg_422 );

    SC_METHOD(thread_right_fu_531_p2);
    sensitive << ( left_4_reg_412 );
    sensitive << ( tmp_10_reg_877 );

    SC_METHOD(thread_trunc_ln82_1_fu_539_p1);
    sensitive << ( right_4_reg_422 );

    SC_METHOD(thread_trunc_ln82_2_fu_543_p1);
    sensitive << ( P_16_read );

    SC_METHOD(thread_trunc_ln82_3_fu_546_p1);
    sensitive << ( right_4_reg_422 );

    SC_METHOD(thread_trunc_ln82_4_fu_550_p1);
    sensitive << ( P_16_read );

    SC_METHOD(thread_trunc_ln82_5_fu_553_p1);
    sensitive << ( right_4_reg_422 );

    SC_METHOD(thread_trunc_ln82_fu_536_p1);
    sensitive << ( P_16_read );

    SC_METHOD(thread_trunc_ln83_1_fu_676_p1);
    sensitive << ( left_4_reg_412 );

    SC_METHOD(thread_trunc_ln83_2_fu_577_p1);
    sensitive << ( P_17_read );

    SC_METHOD(thread_trunc_ln83_3_fu_580_p1);
    sensitive << ( left_4_reg_412 );

    SC_METHOD(thread_trunc_ln83_4_fu_584_p1);
    sensitive << ( P_17_read );

    SC_METHOD(thread_trunc_ln83_5_fu_587_p1);
    sensitive << ( left_4_reg_412 );

    SC_METHOD(thread_trunc_ln83_fu_574_p1);
    sensitive << ( P_17_read );

    SC_METHOD(thread_xor_ln244_fu_680_p2);
    sensitive << ( trunc_ln83_reg_887 );
    sensitive << ( trunc_ln83_1_fu_676_p1 );

    SC_METHOD(thread_xor_ln248_fu_670_p2);
    sensitive << ( trunc_ln82_1_fu_539_p1 );
    sensitive << ( trunc_ln82_fu_536_p1 );

    SC_METHOD(thread_xor_ln82_1_fu_562_p2);
    sensitive << ( trunc_ln82_5_fu_553_p1 );
    sensitive << ( trunc_ln82_4_fu_550_p1 );

    SC_METHOD(thread_xor_ln82_2_fu_568_p2);
    sensitive << ( trunc_ln82_3_fu_546_p1 );
    sensitive << ( trunc_ln82_2_fu_543_p1 );

    SC_METHOD(thread_xor_ln83_1_fu_596_p2);
    sensitive << ( trunc_ln83_5_fu_587_p1 );
    sensitive << ( trunc_ln83_4_fu_584_p1 );

    SC_METHOD(thread_xor_ln83_2_fu_602_p2);
    sensitive << ( trunc_ln83_3_fu_580_p1 );
    sensitive << ( trunc_ln83_2_fu_577_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln76_fu_512_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );

    ap_CS_fsm = "00000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    grp_feistel_fu_481_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_Encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, plaintext_address0, "(port)plaintext_address0");
    sc_trace(mVcdFile, plaintext_ce0, "(port)plaintext_ce0");
    sc_trace(mVcdFile, plaintext_q0, "(port)plaintext_q0");
    sc_trace(mVcdFile, plaintext_address1, "(port)plaintext_address1");
    sc_trace(mVcdFile, plaintext_ce1, "(port)plaintext_ce1");
    sc_trace(mVcdFile, plaintext_q1, "(port)plaintext_q1");
    sc_trace(mVcdFile, ciphertext_address0, "(port)ciphertext_address0");
    sc_trace(mVcdFile, ciphertext_ce0, "(port)ciphertext_ce0");
    sc_trace(mVcdFile, ciphertext_we0, "(port)ciphertext_we0");
    sc_trace(mVcdFile, ciphertext_d0, "(port)ciphertext_d0");
    sc_trace(mVcdFile, ciphertext_address1, "(port)ciphertext_address1");
    sc_trace(mVcdFile, ciphertext_ce1, "(port)ciphertext_ce1");
    sc_trace(mVcdFile, ciphertext_we1, "(port)ciphertext_we1");
    sc_trace(mVcdFile, ciphertext_d1, "(port)ciphertext_d1");
    sc_trace(mVcdFile, P_0_read, "(port)P_0_read");
    sc_trace(mVcdFile, P_1_read, "(port)P_1_read");
    sc_trace(mVcdFile, P_2_read, "(port)P_2_read");
    sc_trace(mVcdFile, P_3_read, "(port)P_3_read");
    sc_trace(mVcdFile, P_4_read, "(port)P_4_read");
    sc_trace(mVcdFile, P_5_read, "(port)P_5_read");
    sc_trace(mVcdFile, P_6_read, "(port)P_6_read");
    sc_trace(mVcdFile, P_7_read, "(port)P_7_read");
    sc_trace(mVcdFile, P_8_read, "(port)P_8_read");
    sc_trace(mVcdFile, P_9_read, "(port)P_9_read");
    sc_trace(mVcdFile, P_10_read, "(port)P_10_read");
    sc_trace(mVcdFile, P_11_read, "(port)P_11_read");
    sc_trace(mVcdFile, P_12_read, "(port)P_12_read");
    sc_trace(mVcdFile, P_13_read, "(port)P_13_read");
    sc_trace(mVcdFile, P_14_read, "(port)P_14_read");
    sc_trace(mVcdFile, P_15_read, "(port)P_15_read");
    sc_trace(mVcdFile, P_16_read, "(port)P_16_read");
    sc_trace(mVcdFile, P_17_read, "(port)P_17_read");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, left_4_reg_412, "left_4_reg_412");
    sc_trace(mVcdFile, right_4_reg_422, "right_4_reg_422");
    sc_trace(mVcdFile, i_0_reg_432, "i_0_reg_432");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter0, "ap_block_state6_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter1, "ap_block_state8_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, plaintext_load_reg_696, "plaintext_load_reg_696");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, plaintext_load_1_reg_701, "plaintext_load_1_reg_701");
    sc_trace(mVcdFile, plaintext_load_2_reg_716, "plaintext_load_2_reg_716");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, plaintext_load_3_reg_721, "plaintext_load_3_reg_721");
    sc_trace(mVcdFile, plaintext_load_4_reg_736, "plaintext_load_4_reg_736");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, plaintext_load_5_reg_741, "plaintext_load_5_reg_741");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, left_3_fu_494_p5, "left_3_fu_494_p5");
    sc_trace(mVcdFile, right_3_fu_502_p5, "right_3_fu_502_p5");
    sc_trace(mVcdFile, icmp_ln76_fu_512_p2, "icmp_ln76_fu_512_p2");
    sc_trace(mVcdFile, icmp_ln76_reg_862, "icmp_ln76_reg_862");
    sc_trace(mVcdFile, icmp_ln76_reg_862_pp0_iter1_reg, "icmp_ln76_reg_862_pp0_iter1_reg");
    sc_trace(mVcdFile, i_fu_518_p2, "i_fu_518_p2");
    sc_trace(mVcdFile, i_reg_866, "i_reg_866");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, left_7_fu_524_p2, "left_7_fu_524_p2");
    sc_trace(mVcdFile, left_7_reg_871, "left_7_reg_871");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage1_iter0, "ap_block_state7_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage1_iter1, "ap_block_state9_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_return, "grp_feistel_fu_481_ap_return");
    sc_trace(mVcdFile, tmp_10_reg_877, "tmp_10_reg_877");
    sc_trace(mVcdFile, right_fu_531_p2, "right_fu_531_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, trunc_ln83_fu_574_p1, "trunc_ln83_fu_574_p1");
    sc_trace(mVcdFile, trunc_ln83_reg_887, "trunc_ln83_reg_887");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, trunc_ln2_reg_892, "trunc_ln2_reg_892");
    sc_trace(mVcdFile, trunc_ln3_reg_897, "trunc_ln3_reg_897");
    sc_trace(mVcdFile, trunc_ln4_reg_902, "trunc_ln4_reg_902");
    sc_trace(mVcdFile, trunc_ln5_reg_907, "trunc_ln5_reg_907");
    sc_trace(mVcdFile, xor_ln248_fu_670_p2, "xor_ln248_fu_670_p2");
    sc_trace(mVcdFile, xor_ln248_reg_912, "xor_ln248_reg_912");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state6, "ap_condition_pp0_exit_iter0_state6");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_start, "grp_feistel_fu_481_ap_start");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_done, "grp_feistel_fu_481_ap_done");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_idle, "grp_feistel_fu_481_ap_idle");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_ready, "grp_feistel_fu_481_ap_ready");
    sc_trace(mVcdFile, grp_feistel_fu_481_x, "grp_feistel_fu_481_x");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_0_address0, "grp_feistel_fu_481_S_0_address0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_0_ce0, "grp_feistel_fu_481_S_0_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_1_address0, "grp_feistel_fu_481_S_1_address0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_1_ce0, "grp_feistel_fu_481_S_1_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_2_address0, "grp_feistel_fu_481_S_2_address0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_2_ce0, "grp_feistel_fu_481_S_2_ce0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_3_address0, "grp_feistel_fu_481_S_3_address0");
    sc_trace(mVcdFile, grp_feistel_fu_481_S_3_ce0, "grp_feistel_fu_481_S_3_ce0");
    sc_trace(mVcdFile, ap_phi_mux_right_4_phi_fu_425_p4, "ap_phi_mux_right_4_phi_fu_425_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_436_p4, "ap_phi_mux_i_0_phi_fu_436_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_phi_ln77_reg_444, "ap_phi_reg_pp0_iter0_phi_ln77_reg_444");
    sc_trace(mVcdFile, grp_feistel_fu_481_ap_start_reg, "grp_feistel_fu_481_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, xor_ln244_fu_680_p2, "xor_ln244_fu_680_p2");
    sc_trace(mVcdFile, trunc_ln82_5_fu_553_p1, "trunc_ln82_5_fu_553_p1");
    sc_trace(mVcdFile, trunc_ln82_4_fu_550_p1, "trunc_ln82_4_fu_550_p1");
    sc_trace(mVcdFile, trunc_ln82_3_fu_546_p1, "trunc_ln82_3_fu_546_p1");
    sc_trace(mVcdFile, trunc_ln82_2_fu_543_p1, "trunc_ln82_2_fu_543_p1");
    sc_trace(mVcdFile, trunc_ln83_5_fu_587_p1, "trunc_ln83_5_fu_587_p1");
    sc_trace(mVcdFile, trunc_ln83_4_fu_584_p1, "trunc_ln83_4_fu_584_p1");
    sc_trace(mVcdFile, trunc_ln83_3_fu_580_p1, "trunc_ln83_3_fu_580_p1");
    sc_trace(mVcdFile, trunc_ln83_2_fu_577_p1, "trunc_ln83_2_fu_577_p1");
    sc_trace(mVcdFile, left_fu_591_p2, "left_fu_591_p2");
    sc_trace(mVcdFile, xor_ln83_2_fu_602_p2, "xor_ln83_2_fu_602_p2");
    sc_trace(mVcdFile, xor_ln83_1_fu_596_p2, "xor_ln83_1_fu_596_p2");
    sc_trace(mVcdFile, right_5_fu_557_p2, "right_5_fu_557_p2");
    sc_trace(mVcdFile, xor_ln82_2_fu_568_p2, "xor_ln82_2_fu_568_p2");
    sc_trace(mVcdFile, xor_ln82_1_fu_562_p2, "xor_ln82_1_fu_562_p2");
    sc_trace(mVcdFile, trunc_ln82_1_fu_539_p1, "trunc_ln82_1_fu_539_p1");
    sc_trace(mVcdFile, trunc_ln82_fu_536_p1, "trunc_ln82_fu_536_p1");
    sc_trace(mVcdFile, trunc_ln83_1_fu_676_p1, "trunc_ln83_1_fu_676_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_613, "ap_condition_613");
    sc_trace(mVcdFile, ap_condition_398, "ap_condition_398");
#endif

    }
}

Blowfish_Encrypt::~Blowfish_Encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_feistel_fu_481;
}

void Blowfish_Encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_398.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_436_p4.read())) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_0_read.read();
        } else if (esl_seteq<1,1,1>(ap_condition_613.read(), ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_15_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_E)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_14_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_D)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_13_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_C)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_12_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_B)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_11_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_A)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_10_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_9)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_9_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_8)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_8_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_7)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_7_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_6)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_6_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_5)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_5_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_4)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_4_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_3)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_3_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_2)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_2_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_1)) {
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 = P_1_read.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_feistel_fu_481_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
             esl_seteq<1,1,1>(icmp_ln76_fu_512_p2.read(), ap_const_lv1_0))) {
            grp_feistel_fu_481_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_feistel_fu_481_ap_ready.read())) {
            grp_feistel_fu_481_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln76_reg_862.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_reg_432 = i_reg_866.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_432 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln76_reg_862_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        left_4_reg_412 = left_7_reg_871.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        left_4_reg_412 = right_3_fu_502_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln76_reg_862_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        right_4_reg_422 = right_fu_531_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        right_4_reg_422 = left_3_fu_494_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_866 = i_fu_518_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln76_reg_862 = icmp_ln76_fu_512_p2.read();
        icmp_ln76_reg_862_pp0_iter1_reg = icmp_ln76_reg_862.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln76_reg_862.read(), ap_const_lv1_0))) {
        left_7_reg_871 = left_7_fu_524_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        plaintext_load_1_reg_701 = plaintext_q1.read();
        plaintext_load_reg_696 = plaintext_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        plaintext_load_2_reg_716 = plaintext_q0.read();
        plaintext_load_3_reg_721 = plaintext_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        plaintext_load_4_reg_736 = plaintext_q0.read();
        plaintext_load_5_reg_741 = plaintext_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln76_reg_862.read(), ap_const_lv1_0))) {
        tmp_10_reg_877 = grp_feistel_fu_481_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        trunc_ln2_reg_892 = xor_ln83_1_fu_596_p2.read().range(15, 8);
        trunc_ln3_reg_897 = right_5_fu_557_p2.read().range(31, 24);
        trunc_ln4_reg_902 = xor_ln82_2_fu_568_p2.read().range(23, 16);
        trunc_ln5_reg_907 = xor_ln82_1_fu_562_p2.read().range(15, 8);
        trunc_ln83_reg_887 = trunc_ln83_fu_574_p1.read();
        xor_ln248_reg_912 = xor_ln248_fu_670_p2.read();
    }
}

void Blowfish_Encrypt::thread_S_0_address0() {
    S_0_address0 = grp_feistel_fu_481_S_0_address0.read();
}

void Blowfish_Encrypt::thread_S_0_ce0() {
    S_0_ce0 = grp_feistel_fu_481_S_0_ce0.read();
}

void Blowfish_Encrypt::thread_S_1_address0() {
    S_1_address0 = grp_feistel_fu_481_S_1_address0.read();
}

void Blowfish_Encrypt::thread_S_1_ce0() {
    S_1_ce0 = grp_feistel_fu_481_S_1_ce0.read();
}

void Blowfish_Encrypt::thread_S_2_address0() {
    S_2_address0 = grp_feistel_fu_481_S_2_address0.read();
}

void Blowfish_Encrypt::thread_S_2_ce0() {
    S_2_ce0 = grp_feistel_fu_481_S_2_ce0.read();
}

void Blowfish_Encrypt::thread_S_3_address0() {
    S_3_address0 = grp_feistel_fu_481_S_3_address0.read();
}

void Blowfish_Encrypt::thread_S_3_ce0() {
    S_3_ce0 = grp_feistel_fu_481_S_3_ce0.read();
}

void Blowfish_Encrypt::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[5];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[6];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[7];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[8];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[10];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_Encrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_state6_pp0_stage0_iter0() {
    ap_block_state6_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_state7_pp0_stage1_iter0() {
    ap_block_state7_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_state8_pp0_stage0_iter1() {
    ap_block_state8_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_block_state9_pp0_stage1_iter1() {
    ap_block_state9_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Blowfish_Encrypt::thread_ap_condition_398() {
    ap_condition_398 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln76_fu_512_p2.read(), ap_const_lv1_0));
}

void Blowfish_Encrypt::thread_ap_condition_613() {
    ap_condition_613 = (!esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_436_p4.read()) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_1) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_2) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_3) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_4) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_5) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_6) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_7) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_8) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_9) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_A) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_B) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_C) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_D) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_436_p4.read(), ap_const_lv5_E));
}

void Blowfish_Encrypt::thread_ap_condition_pp0_exit_iter0_state6() {
    if (esl_seteq<1,1,1>(icmp_ln76_fu_512_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Blowfish_Encrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ap_phi_mux_i_0_phi_fu_436_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln76_reg_862.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_436_p4 = i_reg_866.read();
    } else {
        ap_phi_mux_i_0_phi_fu_436_p4 = i_0_reg_432.read();
    }
}

void Blowfish_Encrypt::thread_ap_phi_mux_right_4_phi_fu_425_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln76_reg_862_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        ap_phi_mux_right_4_phi_fu_425_p4 = right_fu_531_p2.read();
    } else {
        ap_phi_mux_right_4_phi_fu_425_p4 = right_4_reg_422.read();
    }
}

void Blowfish_Encrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ciphertext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        ciphertext_address0 = "XXX";
    }
}

void Blowfish_Encrypt::thread_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ciphertext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        ciphertext_address1 = "XXX";
    }
}

void Blowfish_Encrypt::thread_ciphertext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ciphertext_ce0 = ap_const_logic_1;
    } else {
        ciphertext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ciphertext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ciphertext_ce1 = ap_const_logic_1;
    } else {
        ciphertext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ciphertext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ciphertext_d0 = trunc_ln5_reg_907.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ciphertext_d0 = trunc_ln3_reg_897.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ciphertext_d0 = trunc_ln2_reg_892.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ciphertext_d0 = left_fu_591_p2.read().range(31, 24);
    } else {
        ciphertext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Encrypt::thread_ciphertext_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ciphertext_d1 = xor_ln248_reg_912.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ciphertext_d1 = trunc_ln4_reg_902.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ciphertext_d1 = xor_ln244_fu_680_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ciphertext_d1 = xor_ln83_2_fu_602_p2.read().range(23, 16);
    } else {
        ciphertext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Blowfish_Encrypt::thread_ciphertext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ciphertext_we0 = ap_const_logic_1;
    } else {
        ciphertext_we0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_ciphertext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ciphertext_we1 = ap_const_logic_1;
    } else {
        ciphertext_we1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_grp_feistel_fu_481_ap_start() {
    grp_feistel_fu_481_ap_start = grp_feistel_fu_481_ap_start_reg.read();
}

void Blowfish_Encrypt::thread_grp_feistel_fu_481_x() {
    grp_feistel_fu_481_x = (ap_phi_mux_right_4_phi_fu_425_p4.read() ^ ap_phi_reg_pp0_iter0_phi_ln77_reg_444.read());
}

void Blowfish_Encrypt::thread_i_fu_518_p2() {
    i_fu_518_p2 = (!ap_phi_mux_i_0_phi_fu_436_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_0_phi_fu_436_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Blowfish_Encrypt::thread_icmp_ln76_fu_512_p2() {
    icmp_ln76_fu_512_p2 = (!ap_phi_mux_i_0_phi_fu_436_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_phi_fu_436_p4.read() == ap_const_lv5_10);
}

void Blowfish_Encrypt::thread_left_3_fu_494_p5() {
    left_3_fu_494_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(plaintext_load_reg_696.read(), plaintext_load_1_reg_701.read()), plaintext_load_2_reg_716.read()), plaintext_load_3_reg_721.read());
}

void Blowfish_Encrypt::thread_left_7_fu_524_p2() {
    left_7_fu_524_p2 = (ap_phi_mux_right_4_phi_fu_425_p4.read() ^ ap_phi_reg_pp0_iter0_phi_ln77_reg_444.read());
}

void Blowfish_Encrypt::thread_left_fu_591_p2() {
    left_fu_591_p2 = (left_4_reg_412.read() ^ P_17_read.read());
}

void Blowfish_Encrypt::thread_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        plaintext_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        plaintext_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        plaintext_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        plaintext_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        plaintext_address0 = "XXX";
    }
}

void Blowfish_Encrypt::thread_plaintext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        plaintext_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        plaintext_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        plaintext_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        plaintext_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        plaintext_address1 = "XXX";
    }
}

void Blowfish_Encrypt::thread_plaintext_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        plaintext_ce0 = ap_const_logic_1;
    } else {
        plaintext_ce0 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_plaintext_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        plaintext_ce1 = ap_const_logic_1;
    } else {
        plaintext_ce1 = ap_const_logic_0;
    }
}

void Blowfish_Encrypt::thread_right_3_fu_502_p5() {
    right_3_fu_502_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(plaintext_load_4_reg_736.read(), plaintext_load_5_reg_741.read()), plaintext_q0.read()), plaintext_q1.read());
}

void Blowfish_Encrypt::thread_right_5_fu_557_p2() {
    right_5_fu_557_p2 = (right_4_reg_422.read() ^ P_16_read.read());
}

void Blowfish_Encrypt::thread_right_fu_531_p2() {
    right_fu_531_p2 = (left_4_reg_412.read() ^ tmp_10_reg_877.read());
}

void Blowfish_Encrypt::thread_trunc_ln82_1_fu_539_p1() {
    trunc_ln82_1_fu_539_p1 = right_4_reg_422.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln82_2_fu_543_p1() {
    trunc_ln82_2_fu_543_p1 = P_16_read.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln82_3_fu_546_p1() {
    trunc_ln82_3_fu_546_p1 = right_4_reg_422.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln82_4_fu_550_p1() {
    trunc_ln82_4_fu_550_p1 = P_16_read.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln82_5_fu_553_p1() {
    trunc_ln82_5_fu_553_p1 = right_4_reg_422.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln82_fu_536_p1() {
    trunc_ln82_fu_536_p1 = P_16_read.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_1_fu_676_p1() {
    trunc_ln83_1_fu_676_p1 = left_4_reg_412.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_2_fu_577_p1() {
    trunc_ln83_2_fu_577_p1 = P_17_read.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_3_fu_580_p1() {
    trunc_ln83_3_fu_580_p1 = left_4_reg_412.read().range(24-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_4_fu_584_p1() {
    trunc_ln83_4_fu_584_p1 = P_17_read.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_5_fu_587_p1() {
    trunc_ln83_5_fu_587_p1 = left_4_reg_412.read().range(16-1, 0);
}

void Blowfish_Encrypt::thread_trunc_ln83_fu_574_p1() {
    trunc_ln83_fu_574_p1 = P_17_read.read().range(8-1, 0);
}

void Blowfish_Encrypt::thread_xor_ln244_fu_680_p2() {
    xor_ln244_fu_680_p2 = (trunc_ln83_1_fu_676_p1.read() ^ trunc_ln83_reg_887.read());
}

void Blowfish_Encrypt::thread_xor_ln248_fu_670_p2() {
    xor_ln248_fu_670_p2 = (trunc_ln82_1_fu_539_p1.read() ^ trunc_ln82_fu_536_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln82_1_fu_562_p2() {
    xor_ln82_1_fu_562_p2 = (trunc_ln82_5_fu_553_p1.read() ^ trunc_ln82_4_fu_550_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln82_2_fu_568_p2() {
    xor_ln82_2_fu_568_p2 = (trunc_ln82_3_fu_546_p1.read() ^ trunc_ln82_2_fu_543_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln83_1_fu_596_p2() {
    xor_ln83_1_fu_596_p2 = (trunc_ln83_5_fu_587_p1.read() ^ trunc_ln83_4_fu_584_p1.read());
}

void Blowfish_Encrypt::thread_xor_ln83_2_fu_602_p2() {
    xor_ln83_2_fu_602_p2 = (trunc_ln83_3_fu_580_p1.read() ^ trunc_ln83_2_fu_577_p1.read());
}

void Blowfish_Encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln76_fu_512_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln76_fu_512_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

}

