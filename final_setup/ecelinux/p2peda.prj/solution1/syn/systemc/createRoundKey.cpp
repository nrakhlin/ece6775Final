// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "createRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic createRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic createRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage3 = "1000";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage4 = "10000";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage5 = "100000";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage6 = "1000000";
const sc_lv<8> createRoundKey::ap_ST_fsm_pp0_stage7 = "10000000";
const bool createRoundKey::ap_const_boolean_1 = true;
const sc_lv<32> createRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool createRoundKey::ap_const_boolean_0 = false;
const sc_lv<32> createRoundKey::ap_const_lv32_7 = "111";
const sc_lv<32> createRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> createRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> createRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> createRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> createRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> createRoundKey::ap_const_lv32_6 = "110";
const sc_lv<8> createRoundKey::ap_const_lv8_1 = "1";
const sc_lv<8> createRoundKey::ap_const_lv8_2 = "10";
const sc_lv<8> createRoundKey::ap_const_lv8_3 = "11";
const sc_lv<8> createRoundKey::ap_const_lv8_4 = "100";
const sc_lv<8> createRoundKey::ap_const_lv8_5 = "101";
const sc_lv<8> createRoundKey::ap_const_lv8_6 = "110";
const sc_lv<8> createRoundKey::ap_const_lv8_7 = "111";
const sc_lv<8> createRoundKey::ap_const_lv8_8 = "1000";
const sc_lv<8> createRoundKey::ap_const_lv8_9 = "1001";
const sc_lv<8> createRoundKey::ap_const_lv8_A = "1010";
const sc_lv<8> createRoundKey::ap_const_lv8_B = "1011";
const sc_lv<8> createRoundKey::ap_const_lv8_C = "1100";
const sc_lv<8> createRoundKey::ap_const_lv8_D = "1101";
const sc_lv<8> createRoundKey::ap_const_lv8_E = "1110";
const sc_lv<8> createRoundKey::ap_const_lv8_F = "1111";

createRoundKey::createRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln318_10_fu_293_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_11_fu_303_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_12_fu_313_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_13_fu_323_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_14_fu_333_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_1_fu_203_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_2_fu_213_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_3_fu_223_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_4_fu_233_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_5_fu_243_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_6_fu_253_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_7_fu_263_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_8_fu_273_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_9_fu_283_p2);
    sensitive << ( trunc_ln318_reg_430 );

    SC_METHOD(thread_add_ln318_fu_192_p2);
    sensitive << ( trunc_ln318_fu_188_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_11001);

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_11001);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_11001);

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage7_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp0_1to1);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_reset_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_reg_453 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_4_reg_493 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_10_reg_553 );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( expandedKey_q0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_3_reg_478 );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_7_reg_518 );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_11_reg_558 );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( expandedKey_q1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_8_reg_533 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_12_reg_573 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_1_reg_458 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_5_reg_498 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_9_reg_538 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_13_reg_578 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_2_reg_473 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( expandedKey_load_6_reg_513 );

    SC_METHOD(thread_expandedKey_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( zext_ln318_fu_183_p1 );
    sensitive << ( zext_ln318_2_fu_208_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln318_4_fu_228_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln318_6_fu_248_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln318_8_fu_268_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( zext_ln318_10_fu_288_p1 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( zext_ln318_12_fu_308_p1 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( zext_ln318_14_fu_328_p1 );
    sensitive << ( ap_block_pp0_stage7 );

    SC_METHOD(thread_expandedKey_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( zext_ln318_1_fu_198_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln318_3_fu_218_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln318_5_fu_238_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln318_7_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( zext_ln318_9_fu_278_p1 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( zext_ln318_11_fu_298_p1 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( zext_ln318_13_fu_318_p1 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( zext_ln318_15_fu_338_p1 );

    SC_METHOD(thread_expandedKey_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_expandedKey_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_trunc_ln318_fu_188_p1);
    sensitive << ( ptr );

    SC_METHOD(thread_zext_ln318_10_fu_288_p1);
    sensitive << ( add_ln318_9_fu_283_p2 );

    SC_METHOD(thread_zext_ln318_11_fu_298_p1);
    sensitive << ( add_ln318_10_fu_293_p2 );

    SC_METHOD(thread_zext_ln318_12_fu_308_p1);
    sensitive << ( add_ln318_11_fu_303_p2 );

    SC_METHOD(thread_zext_ln318_13_fu_318_p1);
    sensitive << ( add_ln318_12_fu_313_p2 );

    SC_METHOD(thread_zext_ln318_14_fu_328_p1);
    sensitive << ( add_ln318_13_fu_323_p2 );

    SC_METHOD(thread_zext_ln318_15_fu_338_p1);
    sensitive << ( add_ln318_14_fu_333_p2 );

    SC_METHOD(thread_zext_ln318_1_fu_198_p1);
    sensitive << ( add_ln318_fu_192_p2 );

    SC_METHOD(thread_zext_ln318_2_fu_208_p1);
    sensitive << ( add_ln318_1_fu_203_p2 );

    SC_METHOD(thread_zext_ln318_3_fu_218_p1);
    sensitive << ( add_ln318_2_fu_213_p2 );

    SC_METHOD(thread_zext_ln318_4_fu_228_p1);
    sensitive << ( add_ln318_3_fu_223_p2 );

    SC_METHOD(thread_zext_ln318_5_fu_238_p1);
    sensitive << ( add_ln318_4_fu_233_p2 );

    SC_METHOD(thread_zext_ln318_6_fu_248_p1);
    sensitive << ( add_ln318_5_fu_243_p2 );

    SC_METHOD(thread_zext_ln318_7_fu_258_p1);
    sensitive << ( add_ln318_6_fu_253_p2 );

    SC_METHOD(thread_zext_ln318_8_fu_268_p1);
    sensitive << ( add_ln318_7_fu_263_p2 );

    SC_METHOD(thread_zext_ln318_9_fu_278_p1);
    sensitive << ( add_ln318_8_fu_273_p2 );

    SC_METHOD(thread_zext_ln318_fu_183_p1);
    sensitive << ( ptr );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_reset_start_pp0 );
    sensitive << ( ap_idle_pp0_1to1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );

    ap_CS_fsm = "00000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "createRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, expandedKey_address0, "(port)expandedKey_address0");
    sc_trace(mVcdFile, expandedKey_ce0, "(port)expandedKey_ce0");
    sc_trace(mVcdFile, expandedKey_q0, "(port)expandedKey_q0");
    sc_trace(mVcdFile, expandedKey_address1, "(port)expandedKey_address1");
    sc_trace(mVcdFile, expandedKey_ce1, "(port)expandedKey_ce1");
    sc_trace(mVcdFile, expandedKey_q1, "(port)expandedKey_q1");
    sc_trace(mVcdFile, ptr, "(port)ptr");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage7_iter0, "ap_block_state8_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter1, "ap_block_state9_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, trunc_ln318_fu_188_p1, "trunc_ln318_fu_188_p1");
    sc_trace(mVcdFile, trunc_ln318_reg_430, "trunc_ln318_reg_430");
    sc_trace(mVcdFile, expandedKey_load_reg_453, "expandedKey_load_reg_453");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, expandedKey_load_1_reg_458, "expandedKey_load_1_reg_458");
    sc_trace(mVcdFile, expandedKey_load_2_reg_473, "expandedKey_load_2_reg_473");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, expandedKey_load_3_reg_478, "expandedKey_load_3_reg_478");
    sc_trace(mVcdFile, expandedKey_load_4_reg_493, "expandedKey_load_4_reg_493");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage3_iter0, "ap_block_state4_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, expandedKey_load_5_reg_498, "expandedKey_load_5_reg_498");
    sc_trace(mVcdFile, expandedKey_load_6_reg_513, "expandedKey_load_6_reg_513");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage4_iter0, "ap_block_state5_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, expandedKey_load_7_reg_518, "expandedKey_load_7_reg_518");
    sc_trace(mVcdFile, expandedKey_load_8_reg_533, "expandedKey_load_8_reg_533");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage5_iter0, "ap_block_state6_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, expandedKey_load_9_reg_538, "expandedKey_load_9_reg_538");
    sc_trace(mVcdFile, expandedKey_load_10_reg_553, "expandedKey_load_10_reg_553");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage6_iter0, "ap_block_state7_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, expandedKey_load_11_reg_558, "expandedKey_load_11_reg_558");
    sc_trace(mVcdFile, expandedKey_load_12_reg_573, "expandedKey_load_12_reg_573");
    sc_trace(mVcdFile, expandedKey_load_13_reg_578, "expandedKey_load_13_reg_578");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, zext_ln318_fu_183_p1, "zext_ln318_fu_183_p1");
    sc_trace(mVcdFile, zext_ln318_1_fu_198_p1, "zext_ln318_1_fu_198_p1");
    sc_trace(mVcdFile, zext_ln318_2_fu_208_p1, "zext_ln318_2_fu_208_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, zext_ln318_3_fu_218_p1, "zext_ln318_3_fu_218_p1");
    sc_trace(mVcdFile, zext_ln318_4_fu_228_p1, "zext_ln318_4_fu_228_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, zext_ln318_5_fu_238_p1, "zext_ln318_5_fu_238_p1");
    sc_trace(mVcdFile, zext_ln318_6_fu_248_p1, "zext_ln318_6_fu_248_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, zext_ln318_7_fu_258_p1, "zext_ln318_7_fu_258_p1");
    sc_trace(mVcdFile, zext_ln318_8_fu_268_p1, "zext_ln318_8_fu_268_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, zext_ln318_9_fu_278_p1, "zext_ln318_9_fu_278_p1");
    sc_trace(mVcdFile, zext_ln318_10_fu_288_p1, "zext_ln318_10_fu_288_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, zext_ln318_11_fu_298_p1, "zext_ln318_11_fu_298_p1");
    sc_trace(mVcdFile, zext_ln318_12_fu_308_p1, "zext_ln318_12_fu_308_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, zext_ln318_13_fu_318_p1, "zext_ln318_13_fu_318_p1");
    sc_trace(mVcdFile, zext_ln318_14_fu_328_p1, "zext_ln318_14_fu_328_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, zext_ln318_15_fu_338_p1, "zext_ln318_15_fu_338_p1");
    sc_trace(mVcdFile, add_ln318_fu_192_p2, "add_ln318_fu_192_p2");
    sc_trace(mVcdFile, add_ln318_1_fu_203_p2, "add_ln318_1_fu_203_p2");
    sc_trace(mVcdFile, add_ln318_2_fu_213_p2, "add_ln318_2_fu_213_p2");
    sc_trace(mVcdFile, add_ln318_3_fu_223_p2, "add_ln318_3_fu_223_p2");
    sc_trace(mVcdFile, add_ln318_4_fu_233_p2, "add_ln318_4_fu_233_p2");
    sc_trace(mVcdFile, add_ln318_5_fu_243_p2, "add_ln318_5_fu_243_p2");
    sc_trace(mVcdFile, add_ln318_6_fu_253_p2, "add_ln318_6_fu_253_p2");
    sc_trace(mVcdFile, add_ln318_7_fu_263_p2, "add_ln318_7_fu_263_p2");
    sc_trace(mVcdFile, add_ln318_8_fu_273_p2, "add_ln318_8_fu_273_p2");
    sc_trace(mVcdFile, add_ln318_9_fu_283_p2, "add_ln318_9_fu_283_p2");
    sc_trace(mVcdFile, add_ln318_10_fu_293_p2, "add_ln318_10_fu_293_p2");
    sc_trace(mVcdFile, add_ln318_11_fu_303_p2, "add_ln318_11_fu_303_p2");
    sc_trace(mVcdFile, add_ln318_12_fu_313_p2, "add_ln318_12_fu_313_p2");
    sc_trace(mVcdFile, add_ln318_13_fu_323_p2, "add_ln318_13_fu_323_p2");
    sc_trace(mVcdFile, add_ln318_14_fu_333_p2, "add_ln318_14_fu_333_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_reset_start_pp0, "ap_reset_start_pp0");
    sc_trace(mVcdFile, ap_idle_pp0_1to1, "ap_idle_pp0_1to1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

createRoundKey::~createRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void createRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_10_reg_553 = expandedKey_q0.read();
        expandedKey_load_11_reg_558 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        expandedKey_load_12_reg_573 = expandedKey_q0.read();
        expandedKey_load_13_reg_578 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_1_reg_458 = expandedKey_q1.read();
        expandedKey_load_reg_453 = expandedKey_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_2_reg_473 = expandedKey_q0.read();
        expandedKey_load_3_reg_478 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_4_reg_493 = expandedKey_q0.read();
        expandedKey_load_5_reg_498 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_6_reg_513 = expandedKey_q0.read();
        expandedKey_load_7_reg_518 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        expandedKey_load_8_reg_533 = expandedKey_q0.read();
        expandedKey_load_9_reg_538 = expandedKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        trunc_ln318_reg_430 = trunc_ln318_fu_188_p1.read();
    }
}

void createRoundKey::thread_add_ln318_10_fu_293_p2() {
    add_ln318_10_fu_293_p2 = (!ap_const_lv8_B.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_B) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_11_fu_303_p2() {
    add_ln318_11_fu_303_p2 = (!ap_const_lv8_C.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_C) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_12_fu_313_p2() {
    add_ln318_12_fu_313_p2 = (!ap_const_lv8_D.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_D) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_13_fu_323_p2() {
    add_ln318_13_fu_323_p2 = (!ap_const_lv8_E.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_E) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_14_fu_333_p2() {
    add_ln318_14_fu_333_p2 = (!ap_const_lv8_F.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_F) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_1_fu_203_p2() {
    add_ln318_1_fu_203_p2 = (!ap_const_lv8_2.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_2) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_2_fu_213_p2() {
    add_ln318_2_fu_213_p2 = (!ap_const_lv8_3.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_3) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_3_fu_223_p2() {
    add_ln318_3_fu_223_p2 = (!ap_const_lv8_4.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_4) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_4_fu_233_p2() {
    add_ln318_4_fu_233_p2 = (!ap_const_lv8_5.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_5) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_5_fu_243_p2() {
    add_ln318_5_fu_243_p2 = (!ap_const_lv8_6.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_6) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_6_fu_253_p2() {
    add_ln318_6_fu_253_p2 = (!ap_const_lv8_7.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_7_fu_263_p2() {
    add_ln318_7_fu_263_p2 = (!ap_const_lv8_8.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_8) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_8_fu_273_p2() {
    add_ln318_8_fu_273_p2 = (!ap_const_lv8_9.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_9) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_9_fu_283_p2() {
    add_ln318_9_fu_283_p2 = (!ap_const_lv8_A.is_01() || !trunc_ln318_reg_430.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_A) + sc_biguint<8>(trunc_ln318_reg_430.read()));
}

void createRoundKey::thread_add_ln318_fu_192_p2() {
    add_ln318_fu_192_p2 = (!ap_const_lv8_1.is_01() || !trunc_ln318_fu_188_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(trunc_ln318_fu_188_p1.read()));
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[1];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[3];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[4];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[5];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[6];
}

void createRoundKey::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[7];
}

void createRoundKey::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void createRoundKey::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())));
}

void createRoundKey::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void createRoundKey::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void createRoundKey::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state4_pp0_stage3_iter0() {
    ap_block_state4_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state5_pp0_stage4_iter0() {
    ap_block_state5_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state6_pp0_stage5_iter0() {
    ap_block_state6_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state7_pp0_stage6_iter0() {
    ap_block_state7_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state8_pp0_stage7_iter0() {
    ap_block_state8_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_block_state9_pp0_stage0_iter1() {
    ap_block_state9_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void createRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void createRoundKey::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void createRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_idle_pp0_1to1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read())) {
        ap_idle_pp0_1to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to1 = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_reset_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_reset_start_pp0 = ap_const_logic_1;
    } else {
        ap_reset_start_pp0 = ap_const_logic_0;
    }
}

void createRoundKey::thread_ap_return_0() {
    ap_return_0 = expandedKey_load_reg_453.read();
}

void createRoundKey::thread_ap_return_1() {
    ap_return_1 = expandedKey_load_4_reg_493.read();
}

void createRoundKey::thread_ap_return_10() {
    ap_return_10 = expandedKey_load_10_reg_553.read();
}

void createRoundKey::thread_ap_return_11() {
    ap_return_11 = expandedKey_q0.read();
}

void createRoundKey::thread_ap_return_12() {
    ap_return_12 = expandedKey_load_3_reg_478.read();
}

void createRoundKey::thread_ap_return_13() {
    ap_return_13 = expandedKey_load_7_reg_518.read();
}

void createRoundKey::thread_ap_return_14() {
    ap_return_14 = expandedKey_load_11_reg_558.read();
}

void createRoundKey::thread_ap_return_15() {
    ap_return_15 = expandedKey_q1.read();
}

void createRoundKey::thread_ap_return_2() {
    ap_return_2 = expandedKey_load_8_reg_533.read();
}

void createRoundKey::thread_ap_return_3() {
    ap_return_3 = expandedKey_load_12_reg_573.read();
}

void createRoundKey::thread_ap_return_4() {
    ap_return_4 = expandedKey_load_1_reg_458.read();
}

void createRoundKey::thread_ap_return_5() {
    ap_return_5 = expandedKey_load_5_reg_498.read();
}

void createRoundKey::thread_ap_return_6() {
    ap_return_6 = expandedKey_load_9_reg_538.read();
}

void createRoundKey::thread_ap_return_7() {
    ap_return_7 = expandedKey_load_13_reg_578.read();
}

void createRoundKey::thread_ap_return_8() {
    ap_return_8 = expandedKey_load_2_reg_473.read();
}

void createRoundKey::thread_ap_return_9() {
    ap_return_9 = expandedKey_load_6_reg_513.read();
}

void createRoundKey::thread_expandedKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_14_fu_328_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_12_fu_308_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_10_fu_288_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_8_fu_268_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_6_fu_248_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_4_fu_228_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_2_fu_208_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            expandedKey_address0 =  (sc_lv<8>) (zext_ln318_fu_183_p1.read());
        } else {
            expandedKey_address0 = "XXXXXXXX";
        }
    } else {
        expandedKey_address0 = "XXXXXXXX";
    }
}

void createRoundKey::thread_expandedKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_15_fu_338_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_13_fu_318_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_11_fu_298_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_9_fu_278_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_7_fu_258_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_5_fu_238_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_3_fu_218_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            expandedKey_address1 =  (sc_lv<8>) (zext_ln318_1_fu_198_p1.read());
        } else {
            expandedKey_address1 = "XXXXXXXX";
        }
    } else {
        expandedKey_address1 = "XXXXXXXX";
    }
}

void createRoundKey::thread_expandedKey_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        expandedKey_ce0 = ap_const_logic_1;
    } else {
        expandedKey_ce0 = ap_const_logic_0;
    }
}

void createRoundKey::thread_expandedKey_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        expandedKey_ce1 = ap_const_logic_1;
    } else {
        expandedKey_ce1 = ap_const_logic_0;
    }
}

void createRoundKey::thread_trunc_ln318_fu_188_p1() {
    trunc_ln318_fu_188_p1 = ptr.read().range(8-1, 0);
}

void createRoundKey::thread_zext_ln318_10_fu_288_p1() {
    zext_ln318_10_fu_288_p1 = esl_zext<64,8>(add_ln318_9_fu_283_p2.read());
}

void createRoundKey::thread_zext_ln318_11_fu_298_p1() {
    zext_ln318_11_fu_298_p1 = esl_zext<64,8>(add_ln318_10_fu_293_p2.read());
}

void createRoundKey::thread_zext_ln318_12_fu_308_p1() {
    zext_ln318_12_fu_308_p1 = esl_zext<64,8>(add_ln318_11_fu_303_p2.read());
}

void createRoundKey::thread_zext_ln318_13_fu_318_p1() {
    zext_ln318_13_fu_318_p1 = esl_zext<64,8>(add_ln318_12_fu_313_p2.read());
}

void createRoundKey::thread_zext_ln318_14_fu_328_p1() {
    zext_ln318_14_fu_328_p1 = esl_zext<64,8>(add_ln318_13_fu_323_p2.read());
}

void createRoundKey::thread_zext_ln318_15_fu_338_p1() {
    zext_ln318_15_fu_338_p1 = esl_zext<64,8>(add_ln318_14_fu_333_p2.read());
}

void createRoundKey::thread_zext_ln318_1_fu_198_p1() {
    zext_ln318_1_fu_198_p1 = esl_zext<64,8>(add_ln318_fu_192_p2.read());
}

void createRoundKey::thread_zext_ln318_2_fu_208_p1() {
    zext_ln318_2_fu_208_p1 = esl_zext<64,8>(add_ln318_1_fu_203_p2.read());
}

void createRoundKey::thread_zext_ln318_3_fu_218_p1() {
    zext_ln318_3_fu_218_p1 = esl_zext<64,8>(add_ln318_2_fu_213_p2.read());
}

void createRoundKey::thread_zext_ln318_4_fu_228_p1() {
    zext_ln318_4_fu_228_p1 = esl_zext<64,8>(add_ln318_3_fu_223_p2.read());
}

void createRoundKey::thread_zext_ln318_5_fu_238_p1() {
    zext_ln318_5_fu_238_p1 = esl_zext<64,8>(add_ln318_4_fu_233_p2.read());
}

void createRoundKey::thread_zext_ln318_6_fu_248_p1() {
    zext_ln318_6_fu_248_p1 = esl_zext<64,8>(add_ln318_5_fu_243_p2.read());
}

void createRoundKey::thread_zext_ln318_7_fu_258_p1() {
    zext_ln318_7_fu_258_p1 = esl_zext<64,8>(add_ln318_6_fu_253_p2.read());
}

void createRoundKey::thread_zext_ln318_8_fu_268_p1() {
    zext_ln318_8_fu_268_p1 = esl_zext<64,8>(add_ln318_7_fu_263_p2.read());
}

void createRoundKey::thread_zext_ln318_9_fu_278_p1() {
    zext_ln318_9_fu_278_p1 = esl_zext<64,8>(add_ln318_8_fu_273_p2.read());
}

void createRoundKey::thread_zext_ln318_fu_183_p1() {
    zext_ln318_fu_183_p1 = esl_zext<64,9>(ptr.read());
}

void createRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0) && !(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_start_pp0.read())) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read())) || (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_start_pp0.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

