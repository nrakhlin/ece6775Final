// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Encrypt_SetKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Encrypt_SetKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Encrypt_SetKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state1 = "1";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state2 = "10";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state3 = "100";
const sc_lv<4> Encrypt_SetKey::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1 = "1";
const sc_lv<1> Encrypt_SetKey::ap_const_lv1_0 = "0";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_2 = "10";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_3 = "11";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_0 = "00000";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_1 = "1";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_2 = "10";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_3 = "11";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_4 = "100";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_5 = "101";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_6 = "110";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_7 = "111";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_8 = "1000";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_9 = "1001";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_A = "1010";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_B = "1011";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_C = "1100";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_D = "1101";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_E = "1110";
const sc_lv<5> Encrypt_SetKey::ap_const_lv5_10 = "10000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_18 = "11000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_1F = "11111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_10 = "10000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_17 = "10111";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_8 = "1000";
const sc_lv<32> Encrypt_SetKey::ap_const_lv32_F = "1111";
const sc_lv<1> Encrypt_SetKey::ap_const_lv1_1 = "1";
const bool Encrypt_SetKey::ap_const_boolean_1 = true;

Encrypt_SetKey::Encrypt_SetKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln81_fu_441_p1 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln81_2_fu_446_p1 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln81_3_fu_451_p1 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln81_4_fu_456_p1 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_a_fu_405_p4);
    sensitive << ( localLeft_fu_387_p2 );

    SC_METHOD(thread_add_ln81_fu_483_p2);
    sensitive << ( S_0_q0 );
    sensitive << ( S_1_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_387);
    sensitive << ( ap_phi_mux_i_0_phi_fu_307_p4 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_307_p4);
    sensitive << ( i_0_reg_303 );

    SC_METHOD(thread_ap_phi_mux_phi_ln19_phi_fu_317_p32);
    sensitive << ( P_0_read );
    sensitive << ( P_1_read );
    sensitive << ( P_2_read );
    sensitive << ( P_3_read );
    sensitive << ( P_4_read );
    sensitive << ( P_5_read );
    sensitive << ( P_6_read );
    sensitive << ( P_7_read );
    sensitive << ( P_8_read );
    sensitive << ( P_9_read );
    sensitive << ( P_10_read );
    sensitive << ( P_11_read );
    sensitive << ( P_12_read );
    sensitive << ( P_13_read );
    sensitive << ( P_14_read );
    sensitive << ( P_15_read );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_307_p4 );
    sensitive << ( ap_condition_387 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );
    sensitive << ( xor_ln27_fu_466_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );
    sensitive << ( xor_ln26_fu_461_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_b_fu_415_p4);
    sensitive << ( xor_ln19_2_fu_399_p2 );

    SC_METHOD(thread_c_fu_425_p4);
    sensitive << ( xor_ln19_1_fu_393_p2 );

    SC_METHOD(thread_d_fu_435_p2);
    sensitive << ( trunc_ln19_1_fu_367_p1 );
    sensitive << ( trunc_ln19_fu_363_p1 );

    SC_METHOD(thread_feistel_result_fu_495_p2);
    sensitive << ( S_3_q0 );
    sensitive << ( xor_ln81_fu_489_p2 );

    SC_METHOD(thread_i_fu_357_p2);
    sensitive << ( i_0_reg_303 );

    SC_METHOD(thread_icmp_ln18_fu_351_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_303 );

    SC_METHOD(thread_localLeft_fu_387_p2);
    sensitive << ( p_tmp_reg_284 );
    sensitive << ( ap_phi_mux_phi_ln19_phi_fu_317_p32 );

    SC_METHOD(thread_localRight_fu_501_p2);
    sensitive << ( feistel_result_reg_639 );
    sensitive << ( p_b_read_assign_reg_293 );

    SC_METHOD(thread_trunc_ln19_1_fu_367_p1);
    sensitive << ( ap_phi_mux_phi_ln19_phi_fu_317_p32 );

    SC_METHOD(thread_trunc_ln19_2_fu_371_p1);
    sensitive << ( p_tmp_reg_284 );

    SC_METHOD(thread_trunc_ln19_3_fu_375_p1);
    sensitive << ( ap_phi_mux_phi_ln19_phi_fu_317_p32 );

    SC_METHOD(thread_trunc_ln19_4_fu_379_p1);
    sensitive << ( p_tmp_reg_284 );

    SC_METHOD(thread_trunc_ln19_5_fu_383_p1);
    sensitive << ( ap_phi_mux_phi_ln19_phi_fu_317_p32 );

    SC_METHOD(thread_trunc_ln19_fu_363_p1);
    sensitive << ( p_tmp_reg_284 );

    SC_METHOD(thread_xor_ln19_1_fu_393_p2);
    sensitive << ( trunc_ln19_5_fu_383_p1 );
    sensitive << ( trunc_ln19_4_fu_379_p1 );

    SC_METHOD(thread_xor_ln19_2_fu_399_p2);
    sensitive << ( trunc_ln19_3_fu_375_p1 );
    sensitive << ( trunc_ln19_2_fu_371_p1 );

    SC_METHOD(thread_xor_ln26_fu_461_p2);
    sensitive << ( P_16_read );
    sensitive << ( p_tmp_reg_284 );

    SC_METHOD(thread_xor_ln27_fu_466_p2);
    sensitive << ( P_17_read );
    sensitive << ( p_b_read_assign_reg_293 );

    SC_METHOD(thread_xor_ln81_fu_489_p2);
    sensitive << ( S_2_q0 );
    sensitive << ( add_ln81_fu_483_p2 );

    SC_METHOD(thread_zext_ln81_2_fu_446_p1);
    sensitive << ( b_fu_415_p4 );

    SC_METHOD(thread_zext_ln81_3_fu_451_p1);
    sensitive << ( c_fu_425_p4 );

    SC_METHOD(thread_zext_ln81_4_fu_456_p1);
    sensitive << ( d_fu_435_p2 );

    SC_METHOD(thread_zext_ln81_fu_441_p1);
    sensitive << ( a_fu_405_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_351_p2 );

    ap_CS_fsm = "0001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Encrypt_SetKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, left_read, "(port)left_read");
    sc_trace(mVcdFile, right_read, "(port)right_read");
    sc_trace(mVcdFile, P_0_read, "(port)P_0_read");
    sc_trace(mVcdFile, P_1_read, "(port)P_1_read");
    sc_trace(mVcdFile, P_2_read, "(port)P_2_read");
    sc_trace(mVcdFile, P_3_read, "(port)P_3_read");
    sc_trace(mVcdFile, P_4_read, "(port)P_4_read");
    sc_trace(mVcdFile, P_5_read, "(port)P_5_read");
    sc_trace(mVcdFile, P_6_read, "(port)P_6_read");
    sc_trace(mVcdFile, P_7_read, "(port)P_7_read");
    sc_trace(mVcdFile, P_8_read, "(port)P_8_read");
    sc_trace(mVcdFile, P_9_read, "(port)P_9_read");
    sc_trace(mVcdFile, P_10_read, "(port)P_10_read");
    sc_trace(mVcdFile, P_11_read, "(port)P_11_read");
    sc_trace(mVcdFile, P_12_read, "(port)P_12_read");
    sc_trace(mVcdFile, P_13_read, "(port)P_13_read");
    sc_trace(mVcdFile, P_14_read, "(port)P_14_read");
    sc_trace(mVcdFile, P_15_read, "(port)P_15_read");
    sc_trace(mVcdFile, P_16_read, "(port)P_16_read");
    sc_trace(mVcdFile, P_17_read, "(port)P_17_read");
    sc_trace(mVcdFile, S_0_address0, "(port)S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "(port)S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "(port)S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "(port)S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "(port)S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "(port)S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "(port)S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "(port)S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "(port)S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "(port)S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "(port)S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "(port)S_3_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_357_p2, "i_fu_357_p2");
    sc_trace(mVcdFile, i_reg_609, "i_reg_609");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, localLeft_fu_387_p2, "localLeft_fu_387_p2");
    sc_trace(mVcdFile, localLeft_reg_614, "localLeft_reg_614");
    sc_trace(mVcdFile, icmp_ln18_fu_351_p2, "icmp_ln18_fu_351_p2");
    sc_trace(mVcdFile, feistel_result_fu_495_p2, "feistel_result_fu_495_p2");
    sc_trace(mVcdFile, feistel_result_reg_639, "feistel_result_reg_639");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, localRight_fu_501_p2, "localRight_fu_501_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, p_tmp_reg_284, "p_tmp_reg_284");
    sc_trace(mVcdFile, p_b_read_assign_reg_293, "p_b_read_assign_reg_293");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_307_p4, "ap_phi_mux_i_0_phi_fu_307_p4");
    sc_trace(mVcdFile, i_0_reg_303, "i_0_reg_303");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln19_phi_fu_317_p32, "ap_phi_mux_phi_ln19_phi_fu_317_p32");
    sc_trace(mVcdFile, zext_ln81_fu_441_p1, "zext_ln81_fu_441_p1");
    sc_trace(mVcdFile, zext_ln81_2_fu_446_p1, "zext_ln81_2_fu_446_p1");
    sc_trace(mVcdFile, zext_ln81_3_fu_451_p1, "zext_ln81_3_fu_451_p1");
    sc_trace(mVcdFile, zext_ln81_4_fu_456_p1, "zext_ln81_4_fu_456_p1");
    sc_trace(mVcdFile, trunc_ln19_5_fu_383_p1, "trunc_ln19_5_fu_383_p1");
    sc_trace(mVcdFile, trunc_ln19_4_fu_379_p1, "trunc_ln19_4_fu_379_p1");
    sc_trace(mVcdFile, trunc_ln19_3_fu_375_p1, "trunc_ln19_3_fu_375_p1");
    sc_trace(mVcdFile, trunc_ln19_2_fu_371_p1, "trunc_ln19_2_fu_371_p1");
    sc_trace(mVcdFile, xor_ln19_2_fu_399_p2, "xor_ln19_2_fu_399_p2");
    sc_trace(mVcdFile, xor_ln19_1_fu_393_p2, "xor_ln19_1_fu_393_p2");
    sc_trace(mVcdFile, trunc_ln19_1_fu_367_p1, "trunc_ln19_1_fu_367_p1");
    sc_trace(mVcdFile, trunc_ln19_fu_363_p1, "trunc_ln19_fu_363_p1");
    sc_trace(mVcdFile, a_fu_405_p4, "a_fu_405_p4");
    sc_trace(mVcdFile, b_fu_415_p4, "b_fu_415_p4");
    sc_trace(mVcdFile, c_fu_425_p4, "c_fu_425_p4");
    sc_trace(mVcdFile, d_fu_435_p2, "d_fu_435_p2");
    sc_trace(mVcdFile, xor_ln27_fu_466_p2, "xor_ln27_fu_466_p2");
    sc_trace(mVcdFile, xor_ln26_fu_461_p2, "xor_ln26_fu_461_p2");
    sc_trace(mVcdFile, add_ln81_fu_483_p2, "add_ln81_fu_483_p2");
    sc_trace(mVcdFile, xor_ln81_fu_489_p2, "xor_ln81_fu_489_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_387, "ap_condition_387");
#endif

    }
}

Encrypt_SetKey::~Encrypt_SetKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Encrypt_SetKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
            ap_return_0_preg = xor_ln27_fu_466_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
            ap_return_1_preg = xor_ln26_fu_461_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_reg_303 = i_reg_609.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_303 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_b_read_assign_reg_293 = localLeft_reg_614.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_b_read_assign_reg_293 = right_read.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_tmp_reg_284 = localRight_fu_501_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_tmp_reg_284 = left_read.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        feistel_result_reg_639 = feistel_result_fu_495_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_609 = i_fu_357_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_0))) {
        localLeft_reg_614 = localLeft_fu_387_p2.read();
    }
}

void Encrypt_SetKey::thread_S_0_address0() {
    S_0_address0 =  (sc_lv<8>) (zext_ln81_fu_441_p1.read());
}

void Encrypt_SetKey::thread_S_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_0_ce0 = ap_const_logic_1;
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_1_address0() {
    S_1_address0 =  (sc_lv<8>) (zext_ln81_2_fu_446_p1.read());
}

void Encrypt_SetKey::thread_S_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_1_ce0 = ap_const_logic_1;
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_2_address0() {
    S_2_address0 =  (sc_lv<8>) (zext_ln81_3_fu_451_p1.read());
}

void Encrypt_SetKey::thread_S_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_2_ce0 = ap_const_logic_1;
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_S_3_address0() {
    S_3_address0 =  (sc_lv<8>) (zext_ln81_4_fu_456_p1.read());
}

void Encrypt_SetKey::thread_S_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        S_3_ce0 = ap_const_logic_1;
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_a_fu_405_p4() {
    a_fu_405_p4 = localLeft_fu_387_p2.read().range(31, 24);
}

void Encrypt_SetKey::thread_add_ln81_fu_483_p2() {
    add_ln81_fu_483_p2 = (!S_0_q0.read().is_01() || !S_1_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_0_q0.read()) + sc_biguint<32>(S_1_q0.read()));
}

void Encrypt_SetKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Encrypt_SetKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Encrypt_SetKey::thread_ap_condition_387() {
    ap_condition_387 = (!esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_307_p4.read()) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_1) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_2) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_3) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_4) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_5) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_6) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_7) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_8) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_9) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_A) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_B) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_C) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_D) && !esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_E));
}

void Encrypt_SetKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_phi_mux_i_0_phi_fu_307_p4() {
    ap_phi_mux_i_0_phi_fu_307_p4 = i_0_reg_303.read();
}

void Encrypt_SetKey::thread_ap_phi_mux_phi_ln19_phi_fu_317_p32() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_0))) {
        if (esl_seteq<1,5,5>(ap_const_lv5_0, ap_phi_mux_i_0_phi_fu_307_p4.read())) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_0_read.read();
        } else if (esl_seteq<1,1,1>(ap_condition_387.read(), ap_const_boolean_1)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_15_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_E)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_14_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_D)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_13_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_C)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_12_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_B)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_11_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_A)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_10_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_9)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_9_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_8)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_8_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_7)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_7_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_6)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_6_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_5)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_5_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_4)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_4_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_3)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_3_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_2)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_2_read.read();
        } else if (esl_seteq<1,5,5>(ap_phi_mux_i_0_phi_fu_307_p4.read(), ap_const_lv5_1)) {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = P_1_read.read();
        } else {
            ap_phi_mux_phi_ln19_phi_fu_317_p32 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_phi_ln19_phi_fu_317_p32 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Encrypt_SetKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Encrypt_SetKey::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
        ap_return_0 = xor_ln27_fu_466_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void Encrypt_SetKey::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
        ap_return_1 = xor_ln26_fu_461_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void Encrypt_SetKey::thread_b_fu_415_p4() {
    b_fu_415_p4 = xor_ln19_2_fu_399_p2.read().range(23, 16);
}

void Encrypt_SetKey::thread_c_fu_425_p4() {
    c_fu_425_p4 = xor_ln19_1_fu_393_p2.read().range(15, 8);
}

void Encrypt_SetKey::thread_d_fu_435_p2() {
    d_fu_435_p2 = (trunc_ln19_1_fu_367_p1.read() ^ trunc_ln19_fu_363_p1.read());
}

void Encrypt_SetKey::thread_feistel_result_fu_495_p2() {
    feistel_result_fu_495_p2 = (!S_3_q0.read().is_01() || !xor_ln81_fu_489_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_3_q0.read()) + sc_biguint<32>(xor_ln81_fu_489_p2.read()));
}

void Encrypt_SetKey::thread_i_fu_357_p2() {
    i_fu_357_p2 = (!i_0_reg_303.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_303.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Encrypt_SetKey::thread_icmp_ln18_fu_351_p2() {
    icmp_ln18_fu_351_p2 = (!i_0_reg_303.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_303.read() == ap_const_lv5_10);
}

void Encrypt_SetKey::thread_localLeft_fu_387_p2() {
    localLeft_fu_387_p2 = (ap_phi_mux_phi_ln19_phi_fu_317_p32.read() ^ p_tmp_reg_284.read());
}

void Encrypt_SetKey::thread_localRight_fu_501_p2() {
    localRight_fu_501_p2 = (p_b_read_assign_reg_293.read() ^ feistel_result_reg_639.read());
}

void Encrypt_SetKey::thread_trunc_ln19_1_fu_367_p1() {
    trunc_ln19_1_fu_367_p1 = ap_phi_mux_phi_ln19_phi_fu_317_p32.read().range(8-1, 0);
}

void Encrypt_SetKey::thread_trunc_ln19_2_fu_371_p1() {
    trunc_ln19_2_fu_371_p1 = p_tmp_reg_284.read().range(24-1, 0);
}

void Encrypt_SetKey::thread_trunc_ln19_3_fu_375_p1() {
    trunc_ln19_3_fu_375_p1 = ap_phi_mux_phi_ln19_phi_fu_317_p32.read().range(24-1, 0);
}

void Encrypt_SetKey::thread_trunc_ln19_4_fu_379_p1() {
    trunc_ln19_4_fu_379_p1 = p_tmp_reg_284.read().range(16-1, 0);
}

void Encrypt_SetKey::thread_trunc_ln19_5_fu_383_p1() {
    trunc_ln19_5_fu_383_p1 = ap_phi_mux_phi_ln19_phi_fu_317_p32.read().range(16-1, 0);
}

void Encrypt_SetKey::thread_trunc_ln19_fu_363_p1() {
    trunc_ln19_fu_363_p1 = p_tmp_reg_284.read().range(8-1, 0);
}

void Encrypt_SetKey::thread_xor_ln19_1_fu_393_p2() {
    xor_ln19_1_fu_393_p2 = (trunc_ln19_5_fu_383_p1.read() ^ trunc_ln19_4_fu_379_p1.read());
}

void Encrypt_SetKey::thread_xor_ln19_2_fu_399_p2() {
    xor_ln19_2_fu_399_p2 = (trunc_ln19_3_fu_375_p1.read() ^ trunc_ln19_2_fu_371_p1.read());
}

void Encrypt_SetKey::thread_xor_ln26_fu_461_p2() {
    xor_ln26_fu_461_p2 = (p_tmp_reg_284.read() ^ P_16_read.read());
}

void Encrypt_SetKey::thread_xor_ln27_fu_466_p2() {
    xor_ln27_fu_466_p2 = (p_b_read_assign_reg_293.read() ^ P_17_read.read());
}

void Encrypt_SetKey::thread_xor_ln81_fu_489_p2() {
    xor_ln81_fu_489_p2 = (S_2_q0.read() ^ add_ln81_fu_483_p2.read());
}

void Encrypt_SetKey::thread_zext_ln81_2_fu_446_p1() {
    zext_ln81_2_fu_446_p1 = esl_zext<64,8>(b_fu_415_p4.read());
}

void Encrypt_SetKey::thread_zext_ln81_3_fu_451_p1() {
    zext_ln81_3_fu_451_p1 = esl_zext<64,8>(c_fu_425_p4.read());
}

void Encrypt_SetKey::thread_zext_ln81_4_fu_456_p1() {
    zext_ln81_4_fu_456_p1 = esl_zext<64,8>(d_fu_435_p2.read());
}

void Encrypt_SetKey::thread_zext_ln81_fu_441_p1() {
    zext_ln81_fu_441_p1 = esl_zext<64,8>(a_fu_405_p4.read());
}

void Encrypt_SetKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_351_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

