// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    expandedKey_ce0;
wire   [7:0] expandedKey_q0;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] reg_309;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
reg   [7:0] reg_315;
wire    ap_CS_fsm_state14;
wire   [4:0] i_8_fu_327_p2;
reg   [4:0] i_8_reg_421;
wire    ap_CS_fsm_state3;
reg   [3:0] state_addr_reg_426;
wire   [0:0] icmp_ln225_fu_321_p2;
wire   [8:0] zext_ln27_fu_360_p1;
reg   [8:0] zext_ln27_reg_439;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln25_fu_346_p2;
wire   [3:0] i_fu_365_p2;
reg   [3:0] i_reg_444;
wire   [4:0] i_9_fu_377_p2;
reg   [4:0] i_9_reg_452;
wire    ap_CS_fsm_state10;
reg   [3:0] state_addr_28_reg_457;
wire   [0:0] icmp_ln174_fu_371_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] state_addr_18_reg_480;
reg   [7:0] state_load_16_reg_490;
wire    ap_CS_fsm_state15;
reg   [7:0] state_load_19_reg_517;
wire    ap_CS_fsm_state16;
reg   [7:0] state_load_20_reg_522;
reg   [7:0] tmp_10_reg_539;
wire    ap_CS_fsm_state17;
wire   [3:0] state_addr_27_reg_549;
wire   [4:0] i_10_fu_399_p2;
reg   [4:0] i_10_reg_557;
wire    ap_CS_fsm_state22;
reg   [3:0] state_addr_29_reg_562;
wire   [0:0] icmp_ln225_1_fu_393_p2;
reg   [3:0] roundKey_address0;
reg    roundKey_ce0;
reg    roundKey_we0;
wire   [7:0] roundKey_q0;
wire    grp_aes_round_fu_289_ap_start;
wire    grp_aes_round_fu_289_ap_done;
wire    grp_aes_round_fu_289_ap_idle;
wire    grp_aes_round_fu_289_ap_ready;
wire   [3:0] grp_aes_round_fu_289_state_address0;
wire    grp_aes_round_fu_289_state_ce0;
wire    grp_aes_round_fu_289_state_we0;
wire   [7:0] grp_aes_round_fu_289_state_d0;
wire   [3:0] grp_aes_round_fu_289_state_address1;
wire    grp_aes_round_fu_289_state_ce1;
wire    grp_aes_round_fu_289_state_we1;
wire   [7:0] grp_aes_round_fu_289_state_d1;
wire   [3:0] grp_aes_round_fu_289_roundKey_address0;
wire    grp_aes_round_fu_289_roundKey_ce0;
wire    grp_createRoundKey_fu_298_ap_start;
wire    grp_createRoundKey_fu_298_ap_done;
wire    grp_createRoundKey_fu_298_ap_idle;
wire    grp_createRoundKey_fu_298_ap_ready;
wire   [7:0] grp_createRoundKey_fu_298_expandedKey_address0;
wire    grp_createRoundKey_fu_298_expandedKey_ce0;
wire   [3:0] grp_createRoundKey_fu_298_roundKey_address0;
wire    grp_createRoundKey_fu_298_roundKey_ce0;
wire    grp_createRoundKey_fu_298_roundKey_we0;
wire   [7:0] grp_createRoundKey_fu_298_roundKey_d0;
reg   [8:0] grp_createRoundKey_fu_298_ptr;
reg   [4:0] i_0_i_reg_245;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [3:0] i_0_reg_256;
wire    ap_CS_fsm_state8;
reg   [4:0] i_0_i1_reg_267;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
reg   [4:0] i_0_i7_reg_278;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
reg    grp_aes_round_fu_289_ap_start_reg;
wire    ap_CS_fsm_state7;
reg    grp_createRoundKey_fu_298_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln226_fu_333_p1;
wire   [63:0] zext_ln175_fu_383_p1;
wire   [63:0] zext_ln43_fu_388_p1;
wire   [63:0] zext_ln226_1_fu_405_p1;
wire   [7:0] xor_ln226_fu_339_p2;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [7:0] xor_ln226_1_fu_411_p2;
wire   [7:0] shl_ln_fu_352_p3;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 grp_aes_round_fu_289_ap_start_reg = 1'b0;
#0 grp_createRoundKey_fu_298_ap_start_reg = 1'b0;
end

aes_main_expandedbkb #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expandedKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_createRoundKey_fu_298_expandedKey_address0),
    .ce0(expandedKey_ce0),
    .q0(expandedKey_q0)
);

aes_round_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

aes_main_roundKey #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
roundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(roundKey_address0),
    .ce0(roundKey_ce0),
    .we0(roundKey_we0),
    .d0(grp_createRoundKey_fu_298_roundKey_d0),
    .q0(roundKey_q0)
);

aes_round grp_aes_round_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_round_fu_289_ap_start),
    .ap_done(grp_aes_round_fu_289_ap_done),
    .ap_idle(grp_aes_round_fu_289_ap_idle),
    .ap_ready(grp_aes_round_fu_289_ap_ready),
    .state_address0(grp_aes_round_fu_289_state_address0),
    .state_ce0(grp_aes_round_fu_289_state_ce0),
    .state_we0(grp_aes_round_fu_289_state_we0),
    .state_d0(grp_aes_round_fu_289_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_aes_round_fu_289_state_address1),
    .state_ce1(grp_aes_round_fu_289_state_ce1),
    .state_we1(grp_aes_round_fu_289_state_we1),
    .state_d1(grp_aes_round_fu_289_state_d1),
    .state_q1(state_q1),
    .roundKey_address0(grp_aes_round_fu_289_roundKey_address0),
    .roundKey_ce0(grp_aes_round_fu_289_roundKey_ce0),
    .roundKey_q0(roundKey_q0)
);

createRoundKey grp_createRoundKey_fu_298(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_createRoundKey_fu_298_ap_start),
    .ap_done(grp_createRoundKey_fu_298_ap_done),
    .ap_idle(grp_createRoundKey_fu_298_ap_idle),
    .ap_ready(grp_createRoundKey_fu_298_ap_ready),
    .expandedKey_address0(grp_createRoundKey_fu_298_expandedKey_address0),
    .expandedKey_ce0(grp_createRoundKey_fu_298_expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0),
    .roundKey_address0(grp_createRoundKey_fu_298_roundKey_address0),
    .roundKey_ce0(grp_createRoundKey_fu_298_roundKey_ce0),
    .roundKey_we0(grp_createRoundKey_fu_298_roundKey_we0),
    .roundKey_d0(grp_createRoundKey_fu_298_roundKey_d0),
    .ptr(grp_createRoundKey_fu_298_ptr)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_round_fu_289_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_aes_round_fu_289_ap_start_reg <= 1'b1;
        end else if ((grp_aes_round_fu_289_ap_ready == 1'b1)) begin
            grp_aes_round_fu_289_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_createRoundKey_fu_298_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_fu_346_p2 == 1'd1)) | ((icmp_ln25_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_createRoundKey_fu_298_ap_start_reg <= 1'b1;
        end else if ((grp_createRoundKey_fu_298_ap_ready == 1'b1)) begin
            grp_createRoundKey_fu_298_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_i1_reg_267 <= i_9_reg_452;
    end else if (((grp_createRoundKey_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_i1_reg_267 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_0_i7_reg_278 <= i_10_reg_557;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        i_0_i7_reg_278 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_245 <= i_8_reg_421;
    end else if (((grp_createRoundKey_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_245 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln225_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_256 <= 4'd1;
    end else if (((grp_aes_round_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_reg_256 <= i_reg_444;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        reg_315 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_315 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_10_reg_557 <= i_10_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_8_reg_421 <= i_8_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_9_reg_452 <= i_9_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_444 <= i_fu_365_p2;
        zext_ln27_reg_439[7 : 4] <= zext_ln27_fu_360_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_309 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        state_addr_28_reg_457 <= zext_ln175_fu_383_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln225_1_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        state_addr_29_reg_562 <= zext_ln226_1_fu_405_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln225_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_addr_reg_426 <= zext_ln226_fu_333_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        state_load_16_reg_490 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_load_19_reg_517 <= state_q1;
        state_load_20_reg_522 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_10_reg_539 <= state_q1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state22) & (icmp_ln225_1_fu_393_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln225_1_fu_393_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        expandedKey_ce0 = grp_createRoundKey_fu_298_expandedKey_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_createRoundKey_fu_298_ptr = 9'd160;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_createRoundKey_fu_298_ptr = zext_ln27_reg_439;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_createRoundKey_fu_298_ptr = 9'd0;
    end else begin
        grp_createRoundKey_fu_298_ptr = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        roundKey_address0 = zext_ln226_1_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_address0 = zext_ln226_fu_333_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_address0 = grp_createRoundKey_fu_298_roundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_address0 = grp_aes_round_fu_289_roundKey_address0;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state22))) begin
        roundKey_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_ce0 = grp_createRoundKey_fu_298_roundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_ce0 = grp_aes_round_fu_289_roundKey_ce0;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_we0 = grp_createRoundKey_fu_298_roundKey_we0;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sbox_address0 = zext_ln43_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = 8'd0;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sbox_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_ce0 = 1'b0;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = state_addr_27_reg_549;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln174_fu_371_p2 == 1'd1))) begin
        state_address0 = 64'd4;
    end else if (((icmp_ln174_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        state_address0 = zext_ln175_fu_383_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = state_addr_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = zext_ln226_fu_333_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = grp_aes_round_fu_289_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_address1 = state_addr_29_reg_562;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address1 = zext_ln226_1_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address1 = state_addr_18_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_28_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = grp_aes_round_fu_289_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln174_fu_371_p2 == 1'd1)) | ((icmp_ln174_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_ce0 = grp_aes_round_fu_289_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        state_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_ce1 = grp_aes_round_fu_289_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d0 = reg_309;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d0 = state_load_19_reg_517;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        state_d0 = reg_315;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d0 = state_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = xor_ln226_fu_339_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d0 = grp_aes_round_fu_289_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_d1 = xor_ln226_1_fu_411_p2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d1 = tmp_10_reg_539;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_d1 = state_load_20_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d1 = state_load_16_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = reg_309;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d1 = state_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = state_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = sbox_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d1 = grp_aes_round_fu_289_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_we0 = grp_aes_round_fu_289_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_we1 = grp_aes_round_fu_289_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_createRoundKey_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln225_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_createRoundKey_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_aes_round_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((grp_createRoundKey_fu_298_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln174_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln225_1_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_aes_round_fu_289_ap_start = grp_aes_round_fu_289_ap_start_reg;

assign grp_createRoundKey_fu_298_ap_start = grp_createRoundKey_fu_298_ap_start_reg;

assign i_10_fu_399_p2 = (i_0_i7_reg_278 + 5'd1);

assign i_8_fu_327_p2 = (i_0_i_reg_245 + 5'd1);

assign i_9_fu_377_p2 = (i_0_i1_reg_267 + 5'd1);

assign i_fu_365_p2 = (i_0_reg_256 + 4'd1);

assign icmp_ln174_fu_371_p2 = ((i_0_i1_reg_267 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln225_1_fu_393_p2 = ((i_0_i7_reg_278 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln225_fu_321_p2 = ((i_0_i_reg_245 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_346_p2 = ((i_0_reg_256 == 4'd10) ? 1'b1 : 1'b0);

assign shl_ln_fu_352_p3 = {{i_0_reg_256}, {4'd0}};

assign state_addr_18_reg_480 = 64'd6;

assign state_addr_27_reg_549 = 64'd15;

assign xor_ln226_1_fu_411_p2 = (state_q1 ^ roundKey_q0);

assign xor_ln226_fu_339_p2 = (state_q0 ^ roundKey_q0);

assign zext_ln175_fu_383_p1 = i_0_i1_reg_267;

assign zext_ln226_1_fu_405_p1 = i_0_i7_reg_278;

assign zext_ln226_fu_333_p1 = i_0_i_reg_245;

assign zext_ln27_fu_360_p1 = shl_ln_fu_352_p3;

assign zext_ln43_fu_388_p1 = state_q0;

always @ (posedge ap_clk) begin
    zext_ln27_reg_439[3:0] <= 4'b0000;
    zext_ln27_reg_439[8] <= 1'b0;
end

endmodule //aes_main
