// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_read,
        input_1_read,
        input_2_read,
        input_3_read,
        input_4_read,
        input_5_read,
        input_6_read,
        input_7_read,
        input_8_read,
        input_9_read,
        input_10_read,
        input_11_read,
        input_12_read,
        input_13_read,
        input_14_read,
        input_15_read,
        output_0_read,
        output_1_read,
        output_2_read,
        output_3_read,
        output_4_read,
        output_5_read,
        output_6_read,
        output_7_read,
        output_8_read,
        output_9_read,
        output_10_read,
        output_11_read,
        output_12_read,
        output_13_read,
        output_14_read,
        output_15_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_0_read;
input  [7:0] input_1_read;
input  [7:0] input_2_read;
input  [7:0] input_3_read;
input  [7:0] input_4_read;
input  [7:0] input_5_read;
input  [7:0] input_6_read;
input  [7:0] input_7_read;
input  [7:0] input_8_read;
input  [7:0] input_9_read;
input  [7:0] input_10_read;
input  [7:0] input_11_read;
input  [7:0] input_12_read;
input  [7:0] input_13_read;
input  [7:0] input_14_read;
input  [7:0] input_15_read;
input  [7:0] output_0_read;
input  [7:0] output_1_read;
input  [7:0] output_2_read;
input  [7:0] output_3_read;
input  [7:0] output_4_read;
input  [7:0] output_5_read;
input  [7:0] output_6_read;
input  [7:0] output_7_read;
input  [7:0] output_8_read;
input  [7:0] output_9_read;
input  [7:0] output_10_read;
input  [7:0] output_11_read;
input  [7:0] output_12_read;
input  [7:0] output_13_read;
input  [7:0] output_14_read;
input  [7:0] output_15_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] zext_ln49_fu_526_p1;
reg   [3:0] zext_ln49_reg_1395;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_536_p2;
reg   [2:0] i_reg_1403;
wire   [3:0] shl_ln_fu_546_p3;
reg   [3:0] shl_ln_reg_1408;
wire   [0:0] icmp_ln49_fu_530_p2;
wire   [2:0] j_fu_644_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] zext_ln65_fu_700_p1;
reg   [3:0] zext_ln65_reg_1629;
wire    ap_CS_fsm_state5;
wire   [2:0] i_13_fu_710_p2;
reg   [2:0] i_13_reg_1637;
wire   [3:0] shl_ln1_fu_720_p3;
reg   [3:0] shl_ln1_reg_1642;
wire   [0:0] icmp_ln65_fu_704_p2;
wire   [2:0] j_2_fu_1042_p2;
reg   [2:0] j_2_reg_1650;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln68_fu_1036_p2;
wire   [3:0] add_ln70_1_fu_1070_p2;
reg   [3:0] add_ln70_1_reg_1660;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
reg   [7:0] block_d0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire   [7:0] block_q1;
wire    grp_aes_main_fu_517_ap_start;
wire    grp_aes_main_fu_517_ap_done;
wire    grp_aes_main_fu_517_ap_idle;
wire    grp_aes_main_fu_517_ap_ready;
wire   [3:0] grp_aes_main_fu_517_state_address0;
wire    grp_aes_main_fu_517_state_ce0;
wire    grp_aes_main_fu_517_state_we0;
wire   [7:0] grp_aes_main_fu_517_state_d0;
wire   [3:0] grp_aes_main_fu_517_state_address1;
wire    grp_aes_main_fu_517_state_ce1;
wire    grp_aes_main_fu_517_state_we1;
wire   [7:0] grp_aes_main_fu_517_state_d1;
reg   [2:0] i_0_reg_473;
wire   [0:0] icmp_ln52_fu_638_p2;
reg   [2:0] j_0_reg_484;
reg   [2:0] i_1_reg_495;
wire    ap_CS_fsm_state4;
reg   [2:0] j_1_reg_506;
wire    ap_CS_fsm_state7;
reg    grp_aes_main_fu_517_ap_start_reg;
wire   [63:0] zext_ln54_fu_695_p1;
wire   [63:0] zext_ln70_fu_1065_p1;
reg   [7:0] output30_016_fu_134;
reg   [0:0] write_flag_0_fu_138;
reg   [0:0] write_flag45_0_fu_142;
reg   [7:0] output29_017_fu_146;
reg   [7:0] output_018_fu_150;
reg   [0:0] write_flag42_0_fu_154;
reg   [7:0] output28_019_fu_158;
reg   [0:0] write_flag3_0_fu_162;
reg   [0:0] write_flag39_0_fu_166;
reg   [7:0] output27_020_fu_170;
reg   [7:0] output16_021_fu_174;
reg   [0:0] write_flag36_0_fu_178;
reg   [7:0] output26_022_fu_182;
reg   [0:0] write_flag6_0_fu_186;
reg   [0:0] write_flag33_0_fu_190;
reg   [7:0] output25_023_fu_194;
reg   [7:0] output17_024_fu_198;
reg   [0:0] write_flag30_0_fu_202;
reg   [7:0] output24_025_fu_206;
reg   [0:0] write_flag9_0_fu_210;
reg   [0:0] write_flag27_0_fu_214;
reg   [7:0] output23_026_fu_218;
reg   [7:0] output18_027_fu_222;
reg   [0:0] write_flag24_0_fu_226;
reg   [7:0] output22_028_fu_230;
reg   [0:0] write_flag12_0_fu_234;
reg   [0:0] write_flag21_0_fu_238;
reg   [7:0] output21_029_fu_242;
reg   [7:0] output19_030_fu_246;
reg   [0:0] write_flag18_0_fu_250;
reg   [7:0] output20_031_fu_254;
reg   [0:0] write_flag15_0_fu_258;
wire   [7:0] tmp_fu_655_p18;
wire   [1:0] trunc_ln54_fu_542_p1;
wire   [3:0] zext_ln52_fu_634_p1;
wire   [3:0] tmp_fu_655_p17;
wire   [1:0] trunc_ln54_1_fu_678_p1;
wire   [3:0] shl_ln54_1_fu_682_p3;
wire   [3:0] add_ln54_1_fu_690_p2;
wire   [1:0] trunc_ln70_fu_716_p1;
wire   [7:0] select_ln73_fu_824_p3;
wire   [7:0] select_ln73_1_fu_831_p3;
wire   [7:0] select_ln73_2_fu_838_p3;
wire   [7:0] select_ln73_3_fu_845_p3;
wire   [7:0] select_ln73_4_fu_852_p3;
wire   [7:0] select_ln73_5_fu_859_p3;
wire   [7:0] select_ln73_6_fu_866_p3;
wire   [7:0] select_ln73_7_fu_873_p3;
wire   [7:0] select_ln73_8_fu_880_p3;
wire   [7:0] select_ln73_9_fu_887_p3;
wire   [7:0] select_ln73_10_fu_894_p3;
wire   [7:0] select_ln73_11_fu_901_p3;
wire   [7:0] select_ln73_12_fu_908_p3;
wire   [7:0] select_ln73_13_fu_915_p3;
wire   [7:0] select_ln73_14_fu_922_p3;
wire   [7:0] select_ln73_15_fu_929_p3;
wire   [1:0] trunc_ln70_2_fu_1048_p1;
wire   [3:0] shl_ln70_1_fu_1052_p3;
wire   [3:0] add_ln70_fu_1060_p2;
wire   [3:0] zext_ln68_fu_1032_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_aes_main_fu_517_ap_start_reg = 1'b0;
end

aes_encrypt_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(block_d0),
    .q0(block_q0),
    .address1(grp_aes_main_fu_517_state_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_aes_main_fu_517_state_d1),
    .q1(block_q1)
);

aes_main grp_aes_main_fu_517(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_main_fu_517_ap_start),
    .ap_done(grp_aes_main_fu_517_ap_done),
    .ap_idle(grp_aes_main_fu_517_ap_idle),
    .ap_ready(grp_aes_main_fu_517_ap_ready),
    .state_address0(grp_aes_main_fu_517_state_address0),
    .state_ce0(grp_aes_main_fu_517_state_ce0),
    .state_we0(grp_aes_main_fu_517_state_we0),
    .state_d0(grp_aes_main_fu_517_state_d0),
    .state_q0(block_q0),
    .state_address1(grp_aes_main_fu_517_state_address1),
    .state_ce1(grp_aes_main_fu_517_state_ce1),
    .state_we1(grp_aes_main_fu_517_state_we1),
    .state_d1(grp_aes_main_fu_517_state_d1),
    .state_q1(block_q1)
);

dut_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
dut_mux_164_8_1_1_U304(
    .din0(input_0_read),
    .din1(input_1_read),
    .din2(input_2_read),
    .din3(input_3_read),
    .din4(input_4_read),
    .din5(input_5_read),
    .din6(input_6_read),
    .din7(input_7_read),
    .din8(input_8_read),
    .din9(input_9_read),
    .din10(input_10_read),
    .din11(input_11_read),
    .din12(input_12_read),
    .din13(input_13_read),
    .din14(input_14_read),
    .din15(input_15_read),
    .din16(tmp_fu_655_p17),
    .dout(tmp_fu_655_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_main_fu_517_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
            grp_aes_main_fu_517_ap_start_reg <= 1'b1;
        end else if ((grp_aes_main_fu_517_ap_ready == 1'b1)) begin
            grp_aes_main_fu_517_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_473 <= i_reg_1403;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_473 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_1036_p2 == 1'd1))) begin
        i_1_reg_495 <= i_13_reg_1637;
    end else if (((grp_aes_main_fu_517_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_495 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd0))) begin
        j_0_reg_484 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln52_fu_638_p2 == 1'd0))) begin
        j_0_reg_484 <= j_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_506 <= j_2_reg_1650;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_704_p2 == 1'd0))) begin
        j_1_reg_506 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd4 == add_ln70_1_reg_1660))) begin
        write_flag12_0_fu_234 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag12_0_fu_234 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd5 == add_ln70_1_reg_1660))) begin
        write_flag15_0_fu_258 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag15_0_fu_258 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd6 == add_ln70_1_reg_1660))) begin
        write_flag18_0_fu_250 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag18_0_fu_250 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd7 == add_ln70_1_reg_1660))) begin
        write_flag21_0_fu_238 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag21_0_fu_238 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd8 == add_ln70_1_reg_1660))) begin
        write_flag24_0_fu_226 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag24_0_fu_226 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd9 == add_ln70_1_reg_1660))) begin
        write_flag27_0_fu_214 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag27_0_fu_214 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd10 == add_ln70_1_reg_1660))) begin
        write_flag30_0_fu_202 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag30_0_fu_202 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd11 == add_ln70_1_reg_1660))) begin
        write_flag33_0_fu_190 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag33_0_fu_190 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd12 == add_ln70_1_reg_1660))) begin
        write_flag36_0_fu_178 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag36_0_fu_178 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd13 == add_ln70_1_reg_1660))) begin
        write_flag39_0_fu_166 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag39_0_fu_166 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd1 == add_ln70_1_reg_1660))) begin
        write_flag3_0_fu_162 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag3_0_fu_162 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd14 == add_ln70_1_reg_1660))) begin
        write_flag42_0_fu_154 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag42_0_fu_154 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd15 == add_ln70_1_reg_1660))) begin
        write_flag45_0_fu_142 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag45_0_fu_142 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd2 == add_ln70_1_reg_1660))) begin
        write_flag6_0_fu_186 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag6_0_fu_186 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd3 == add_ln70_1_reg_1660))) begin
        write_flag9_0_fu_210 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag9_0_fu_210 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd0 == add_ln70_1_reg_1660))) begin
        write_flag_0_fu_138 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd1))) begin
        write_flag_0_fu_138 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_1036_p2 == 1'd0))) begin
        add_ln70_1_reg_1660 <= add_ln70_1_fu_1070_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_13_reg_1637 <= i_13_fu_710_p2;
        zext_ln65_reg_1629[2 : 0] <= zext_ln65_fu_700_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1403 <= i_fu_536_p2;
        zext_ln49_reg_1395[2 : 0] <= zext_ln49_fu_526_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_1650 <= j_2_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd1 == add_ln70_1_reg_1660))) begin
        output16_021_fu_174 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd2 == add_ln70_1_reg_1660))) begin
        output17_024_fu_198 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd3 == add_ln70_1_reg_1660))) begin
        output18_027_fu_222 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd4 == add_ln70_1_reg_1660))) begin
        output19_030_fu_246 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd5 == add_ln70_1_reg_1660))) begin
        output20_031_fu_254 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd6 == add_ln70_1_reg_1660))) begin
        output21_029_fu_242 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd7 == add_ln70_1_reg_1660))) begin
        output22_028_fu_230 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd8 == add_ln70_1_reg_1660))) begin
        output23_026_fu_218 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd9 == add_ln70_1_reg_1660))) begin
        output24_025_fu_206 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd10 == add_ln70_1_reg_1660))) begin
        output25_023_fu_194 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd11 == add_ln70_1_reg_1660))) begin
        output26_022_fu_182 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd12 == add_ln70_1_reg_1660))) begin
        output27_020_fu_170 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd13 == add_ln70_1_reg_1660))) begin
        output28_019_fu_158 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd14 == add_ln70_1_reg_1660))) begin
        output29_017_fu_146 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd15 == add_ln70_1_reg_1660))) begin
        output30_016_fu_134 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (4'd0 == add_ln70_1_reg_1660))) begin
        output_018_fu_150 <= block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_704_p2 == 1'd0))) begin
        shl_ln1_reg_1642[3 : 2] <= shl_ln1_fu_720_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd0))) begin
        shl_ln_reg_1408[3 : 2] <= shl_ln_fu_546_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_704_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_704_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_address0 = zext_ln70_fu_1065_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_address0 = zext_ln54_fu_695_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_address0 = grp_aes_main_fu_517_state_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_ce0 = grp_aes_main_fu_517_state_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_ce1 = grp_aes_main_fu_517_state_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_d0 = tmp_fu_655_p18;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_d0 = grp_aes_main_fu_517_state_d0;
    end else begin
        block_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln52_fu_638_p2 == 1'd0))) begin
        block_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_we0 = grp_aes_main_fu_517_state_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_we1 = grp_aes_main_fu_517_state_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln49_fu_530_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln52_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_aes_main_fu_517_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_704_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_1036_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_690_p2 = (zext_ln49_reg_1395 + shl_ln54_1_fu_682_p3);

assign add_ln70_1_fu_1070_p2 = (zext_ln68_fu_1032_p1 + shl_ln1_reg_1642);

assign add_ln70_fu_1060_p2 = (zext_ln65_reg_1629 + shl_ln70_1_fu_1052_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return_0 = select_ln73_fu_824_p3;

assign ap_return_1 = select_ln73_1_fu_831_p3;

assign ap_return_10 = select_ln73_10_fu_894_p3;

assign ap_return_11 = select_ln73_11_fu_901_p3;

assign ap_return_12 = select_ln73_12_fu_908_p3;

assign ap_return_13 = select_ln73_13_fu_915_p3;

assign ap_return_14 = select_ln73_14_fu_922_p3;

assign ap_return_15 = select_ln73_15_fu_929_p3;

assign ap_return_2 = select_ln73_2_fu_838_p3;

assign ap_return_3 = select_ln73_3_fu_845_p3;

assign ap_return_4 = select_ln73_4_fu_852_p3;

assign ap_return_5 = select_ln73_5_fu_859_p3;

assign ap_return_6 = select_ln73_6_fu_866_p3;

assign ap_return_7 = select_ln73_7_fu_873_p3;

assign ap_return_8 = select_ln73_8_fu_880_p3;

assign ap_return_9 = select_ln73_9_fu_887_p3;

assign grp_aes_main_fu_517_ap_start = grp_aes_main_fu_517_ap_start_reg;

assign i_13_fu_710_p2 = (i_1_reg_495 + 3'd1);

assign i_fu_536_p2 = (i_0_reg_473 + 3'd1);

assign icmp_ln49_fu_530_p2 = ((i_0_reg_473 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_638_p2 = ((j_0_reg_484 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_704_p2 = ((i_1_reg_495 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_1036_p2 = ((j_1_reg_506 == 3'd4) ? 1'b1 : 1'b0);

assign j_2_fu_1042_p2 = (j_1_reg_506 + 3'd1);

assign j_fu_644_p2 = (j_0_reg_484 + 3'd1);

assign select_ln73_10_fu_894_p3 = ((write_flag30_0_fu_202[0:0] === 1'b1) ? output25_023_fu_194 : output_10_read);

assign select_ln73_11_fu_901_p3 = ((write_flag33_0_fu_190[0:0] === 1'b1) ? output26_022_fu_182 : output_11_read);

assign select_ln73_12_fu_908_p3 = ((write_flag36_0_fu_178[0:0] === 1'b1) ? output27_020_fu_170 : output_12_read);

assign select_ln73_13_fu_915_p3 = ((write_flag39_0_fu_166[0:0] === 1'b1) ? output28_019_fu_158 : output_13_read);

assign select_ln73_14_fu_922_p3 = ((write_flag42_0_fu_154[0:0] === 1'b1) ? output29_017_fu_146 : output_14_read);

assign select_ln73_15_fu_929_p3 = ((write_flag45_0_fu_142[0:0] === 1'b1) ? output30_016_fu_134 : output_15_read);

assign select_ln73_1_fu_831_p3 = ((write_flag3_0_fu_162[0:0] === 1'b1) ? output16_021_fu_174 : output_1_read);

assign select_ln73_2_fu_838_p3 = ((write_flag6_0_fu_186[0:0] === 1'b1) ? output17_024_fu_198 : output_2_read);

assign select_ln73_3_fu_845_p3 = ((write_flag9_0_fu_210[0:0] === 1'b1) ? output18_027_fu_222 : output_3_read);

assign select_ln73_4_fu_852_p3 = ((write_flag12_0_fu_234[0:0] === 1'b1) ? output19_030_fu_246 : output_4_read);

assign select_ln73_5_fu_859_p3 = ((write_flag15_0_fu_258[0:0] === 1'b1) ? output20_031_fu_254 : output_5_read);

assign select_ln73_6_fu_866_p3 = ((write_flag18_0_fu_250[0:0] === 1'b1) ? output21_029_fu_242 : output_6_read);

assign select_ln73_7_fu_873_p3 = ((write_flag21_0_fu_238[0:0] === 1'b1) ? output22_028_fu_230 : output_7_read);

assign select_ln73_8_fu_880_p3 = ((write_flag24_0_fu_226[0:0] === 1'b1) ? output23_026_fu_218 : output_8_read);

assign select_ln73_9_fu_887_p3 = ((write_flag27_0_fu_214[0:0] === 1'b1) ? output24_025_fu_206 : output_9_read);

assign select_ln73_fu_824_p3 = ((write_flag_0_fu_138[0:0] === 1'b1) ? output_018_fu_150 : output_0_read);

assign shl_ln1_fu_720_p3 = {{trunc_ln70_fu_716_p1}, {2'd0}};

assign shl_ln54_1_fu_682_p3 = {{trunc_ln54_1_fu_678_p1}, {2'd0}};

assign shl_ln70_1_fu_1052_p3 = {{trunc_ln70_2_fu_1048_p1}, {2'd0}};

assign shl_ln_fu_546_p3 = {{trunc_ln54_fu_542_p1}, {2'd0}};

assign tmp_fu_655_p17 = (zext_ln52_fu_634_p1 + shl_ln_reg_1408);

assign trunc_ln54_1_fu_678_p1 = j_0_reg_484[1:0];

assign trunc_ln54_fu_542_p1 = i_0_reg_473[1:0];

assign trunc_ln70_2_fu_1048_p1 = j_1_reg_506[1:0];

assign trunc_ln70_fu_716_p1 = i_1_reg_495[1:0];

assign zext_ln49_fu_526_p1 = i_0_reg_473;

assign zext_ln52_fu_634_p1 = j_0_reg_484;

assign zext_ln54_fu_695_p1 = add_ln54_1_fu_690_p2;

assign zext_ln65_fu_700_p1 = i_1_reg_495;

assign zext_ln68_fu_1032_p1 = j_1_reg_506;

assign zext_ln70_fu_1065_p1 = add_ln70_fu_1060_p2;

always @ (posedge ap_clk) begin
    zext_ln49_reg_1395[3] <= 1'b0;
    shl_ln_reg_1408[1:0] <= 2'b00;
    zext_ln65_reg_1629[3] <= 1'b0;
    shl_ln1_reg_1642[1:0] <= 2'b00;
end

endmodule //aes_encrypt
