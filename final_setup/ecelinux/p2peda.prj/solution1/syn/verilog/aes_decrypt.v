// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_decrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [7:0] input_r_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [7:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] zext_ln72_fu_132_p1;
reg   [3:0] zext_ln72_reg_282;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_142_p2;
reg   [2:0] i_reg_290;
wire   [3:0] shl_ln_fu_152_p3;
reg   [3:0] shl_ln_reg_295;
wire   [0:0] icmp_ln72_fu_136_p2;
wire   [2:0] j_fu_170_p2;
reg   [2:0] j_reg_303;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln75_fu_164_p2;
wire   [3:0] add_ln77_1_fu_198_p2;
reg   [3:0] add_ln77_1_reg_313;
wire   [3:0] zext_ln88_fu_207_p1;
reg   [3:0] zext_ln88_reg_318;
wire    ap_CS_fsm_state6;
wire   [2:0] i_14_fu_217_p2;
reg   [2:0] i_14_reg_326;
wire   [3:0] shl_ln4_fu_227_p3;
reg   [3:0] shl_ln4_reg_331;
wire   [0:0] icmp_ln88_fu_211_p2;
wire   [2:0] j_5_fu_245_p2;
reg   [2:0] j_5_reg_339;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln91_fu_239_p2;
wire   [3:0] add_ln93_1_fu_273_p2;
reg   [3:0] add_ln93_1_reg_349;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
reg   [7:0] block_d0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire   [7:0] block_q1;
wire    grp_aes_invMain_fu_123_ap_start;
wire    grp_aes_invMain_fu_123_ap_done;
wire    grp_aes_invMain_fu_123_ap_idle;
wire    grp_aes_invMain_fu_123_ap_ready;
wire   [3:0] grp_aes_invMain_fu_123_state_address0;
wire    grp_aes_invMain_fu_123_state_ce0;
wire    grp_aes_invMain_fu_123_state_we0;
wire   [7:0] grp_aes_invMain_fu_123_state_d0;
wire   [3:0] grp_aes_invMain_fu_123_state_address1;
wire    grp_aes_invMain_fu_123_state_ce1;
wire    grp_aes_invMain_fu_123_state_we1;
wire   [7:0] grp_aes_invMain_fu_123_state_d1;
reg   [2:0] i_0_reg_79;
reg   [2:0] j_0_reg_90;
wire    ap_CS_fsm_state4;
reg   [2:0] i_1_reg_101;
wire    ap_CS_fsm_state5;
reg   [2:0] j_1_reg_112;
wire    ap_CS_fsm_state8;
reg    grp_aes_invMain_fu_123_ap_start_reg;
wire   [63:0] zext_ln77_fu_181_p1;
wire   [63:0] zext_ln77_1_fu_203_p1;
wire   [63:0] zext_ln93_fu_268_p1;
wire   [63:0] zext_ln93_1_fu_278_p1;
wire   [1:0] trunc_ln77_fu_148_p1;
wire   [3:0] zext_ln75_fu_160_p1;
wire   [3:0] add_ln77_fu_176_p2;
wire   [1:0] trunc_ln77_1_fu_186_p1;
wire   [3:0] shl_ln77_1_fu_190_p3;
wire   [1:0] trunc_ln93_fu_223_p1;
wire   [1:0] trunc_ln93_1_fu_251_p1;
wire   [3:0] shl_ln93_1_fu_255_p3;
wire   [3:0] add_ln93_fu_263_p2;
wire   [3:0] zext_ln91_fu_235_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_aes_invMain_fu_123_ap_start_reg = 1'b0;
end

aes_encrypt_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(block_d0),
    .q0(block_q0),
    .address1(grp_aes_invMain_fu_123_state_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_aes_invMain_fu_123_state_d1),
    .q1(block_q1)
);

aes_invMain grp_aes_invMain_fu_123(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_invMain_fu_123_ap_start),
    .ap_done(grp_aes_invMain_fu_123_ap_done),
    .ap_idle(grp_aes_invMain_fu_123_ap_idle),
    .ap_ready(grp_aes_invMain_fu_123_ap_ready),
    .state_address0(grp_aes_invMain_fu_123_state_address0),
    .state_ce0(grp_aes_invMain_fu_123_state_ce0),
    .state_we0(grp_aes_invMain_fu_123_state_we0),
    .state_d0(grp_aes_invMain_fu_123_state_d0),
    .state_q0(block_q0),
    .state_address1(grp_aes_invMain_fu_123_state_address1),
    .state_ce1(grp_aes_invMain_fu_123_state_ce1),
    .state_we1(grp_aes_invMain_fu_123_state_we1),
    .state_d1(grp_aes_invMain_fu_123_state_d1),
    .state_q1(block_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_invMain_fu_123_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln72_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_aes_invMain_fu_123_ap_start_reg <= 1'b1;
        end else if ((grp_aes_invMain_fu_123_ap_ready == 1'b1)) begin
            grp_aes_invMain_fu_123_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_79 <= i_reg_290;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_101 <= i_14_reg_326;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_aes_invMain_fu_123_ap_done == 1'b1))) begin
        i_1_reg_101 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_90 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_90 <= j_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_1_reg_112 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_112 <= j_5_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln77_1_reg_313 <= add_ln77_1_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln93_1_reg_349 <= add_ln93_1_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_14_reg_326 <= i_14_fu_217_p2;
        zext_ln88_reg_318[2 : 0] <= zext_ln88_fu_207_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_290 <= i_fu_142_p2;
        zext_ln72_reg_282[2 : 0] <= zext_ln72_fu_132_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_5_reg_339 <= j_5_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_303 <= j_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        shl_ln4_reg_331[3 : 2] <= shl_ln4_fu_227_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_295[3 : 2] <= shl_ln_fu_152_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln88_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        block_address0 = zext_ln93_fu_268_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_address0 = zext_ln77_1_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_address0 = grp_aes_invMain_fu_123_state_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_ce0 = grp_aes_invMain_fu_123_state_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_ce1 = grp_aes_invMain_fu_123_state_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_d0 = input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_d0 = grp_aes_invMain_fu_123_state_d0;
    end else begin
        block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_we0 = grp_aes_invMain_fu_123_state_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_we1 = grp_aes_invMain_fu_123_state_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln72_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln75_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_aes_invMain_fu_123_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln88_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln91_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln77_1_fu_198_p2 = (shl_ln77_1_fu_190_p3 + zext_ln72_reg_282);

assign add_ln77_fu_176_p2 = (zext_ln75_fu_160_p1 + shl_ln_reg_295);

assign add_ln93_1_fu_273_p2 = (zext_ln91_fu_235_p1 + shl_ln4_reg_331);

assign add_ln93_fu_263_p2 = (shl_ln93_1_fu_255_p3 + zext_ln88_reg_318);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_aes_invMain_fu_123_ap_start = grp_aes_invMain_fu_123_ap_start_reg;

assign i_14_fu_217_p2 = (i_1_reg_101 + 3'd1);

assign i_fu_142_p2 = (i_0_reg_79 + 3'd1);

assign icmp_ln72_fu_136_p2 = ((i_0_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_164_p2 = ((j_0_reg_90 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_211_p2 = ((i_1_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_239_p2 = ((j_1_reg_112 == 3'd4) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln77_fu_181_p1;

assign j_5_fu_245_p2 = (j_1_reg_112 + 3'd1);

assign j_fu_170_p2 = (j_0_reg_90 + 3'd1);

assign output_r_address0 = zext_ln93_1_fu_278_p1;

assign output_r_d0 = block_q0;

assign shl_ln4_fu_227_p3 = {{trunc_ln93_fu_223_p1}, {2'd0}};

assign shl_ln77_1_fu_190_p3 = {{trunc_ln77_1_fu_186_p1}, {2'd0}};

assign shl_ln93_1_fu_255_p3 = {{trunc_ln93_1_fu_251_p1}, {2'd0}};

assign shl_ln_fu_152_p3 = {{trunc_ln77_fu_148_p1}, {2'd0}};

assign trunc_ln77_1_fu_186_p1 = j_0_reg_90[1:0];

assign trunc_ln77_fu_148_p1 = i_0_reg_79[1:0];

assign trunc_ln93_1_fu_251_p1 = j_1_reg_112[1:0];

assign trunc_ln93_fu_223_p1 = i_1_reg_101[1:0];

assign zext_ln72_fu_132_p1 = i_0_reg_79;

assign zext_ln75_fu_160_p1 = j_0_reg_90;

assign zext_ln77_1_fu_203_p1 = add_ln77_1_reg_313;

assign zext_ln77_fu_181_p1 = add_ln77_fu_176_p2;

assign zext_ln88_fu_207_p1 = i_1_reg_101;

assign zext_ln91_fu_235_p1 = j_1_reg_112;

assign zext_ln93_1_fu_278_p1 = add_ln93_1_reg_349;

assign zext_ln93_fu_268_p1 = add_ln93_fu_263_p2;

always @ (posedge ap_clk) begin
    zext_ln72_reg_282[3] <= 1'b0;
    shl_ln_reg_295[1:0] <= 2'b00;
    zext_ln88_reg_318[3] <= 1'b0;
    shl_ln4_reg_331[1:0] <= 2'b00;
end

endmodule //aes_decrypt
