-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Encrypt_SetKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_read : IN STD_LOGIC_VECTOR (31 downto 0);
    right_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Encrypt_SetKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_609 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal localLeft_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal localLeft_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal feistel_result_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feistel_result_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal localRight_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_tmp_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_b_read_assign_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_307_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_phi_ln19_phi_fu_317_p32 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln81_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_2_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_4_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_5_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_4_fu_379_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_3_fu_375_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln19_2_fu_371_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln19_2_fu_399_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln19_1_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_1_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_fu_405_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln27_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln26_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln81_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_condition_387 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= xor_ln27_fu_466_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= xor_ln26_fu_461_p2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_303 <= i_reg_609;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_303 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_b_read_assign_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_b_read_assign_reg_293 <= localLeft_reg_614;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_b_read_assign_reg_293 <= right_read;
            end if; 
        end if;
    end process;

    p_tmp_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_tmp_reg_284 <= localRight_fu_501_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_tmp_reg_284 <= left_read;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                feistel_result_reg_639 <= feistel_result_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_609 <= i_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_0))) then
                localLeft_reg_614 <= localLeft_fu_387_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_351_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    S_0_address0 <= zext_ln81_fu_441_p1(8 - 1 downto 0);

    S_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_0_ce0 <= ap_const_logic_1;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= zext_ln81_2_fu_446_p1(8 - 1 downto 0);

    S_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_1_ce0 <= ap_const_logic_1;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= zext_ln81_3_fu_451_p1(8 - 1 downto 0);

    S_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_2_ce0 <= ap_const_logic_1;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= zext_ln81_4_fu_456_p1(8 - 1 downto 0);

    S_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_3_ce0 <= ap_const_logic_1;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_405_p4 <= localLeft_fu_387_p2(31 downto 24);
    add_ln81_fu_483_p2 <= std_logic_vector(unsigned(S_0_q0) + unsigned(S_1_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_condition_387_assign_proc : process(ap_phi_mux_i_0_phi_fu_307_p4)
    begin
                ap_condition_387 <= (not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_351_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_307_p4 <= i_0_reg_303;

    ap_phi_mux_phi_ln19_phi_fu_317_p32_assign_proc : process(P_0_read, P_1_read, P_2_read, P_3_read, P_4_read, P_5_read, P_6_read, P_7_read, P_8_read, P_9_read, P_10_read, P_11_read, P_12_read, P_13_read, P_14_read, P_15_read, ap_CS_fsm_state2, icmp_ln18_fu_351_p2, ap_phi_mux_i_0_phi_fu_307_p4, ap_condition_387)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_0))) then
            if ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_0_read;
            elsif ((ap_const_boolean_1 = ap_condition_387)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_15_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_14_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_13_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_12_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_11_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_10_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_9_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_8_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_7_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_6_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_5_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_4_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_3_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_2_read;
            elsif ((ap_phi_mux_i_0_phi_fu_307_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= P_1_read;
            else 
                ap_phi_mux_phi_ln19_phi_fu_317_p32 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln19_phi_fu_317_p32 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_351_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_351_p2, xor_ln27_fu_466_p2, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= xor_ln27_fu_466_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_351_p2, xor_ln26_fu_461_p2, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_351_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= xor_ln26_fu_461_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    b_fu_415_p4 <= xor_ln19_2_fu_399_p2(23 downto 16);
    c_fu_425_p4 <= xor_ln19_1_fu_393_p2(15 downto 8);
    d_fu_435_p2 <= (trunc_ln19_fu_363_p1 xor trunc_ln19_1_fu_367_p1);
    feistel_result_fu_495_p2 <= std_logic_vector(unsigned(S_3_q0) + unsigned(xor_ln81_fu_489_p2));
    i_fu_357_p2 <= std_logic_vector(unsigned(i_0_reg_303) + unsigned(ap_const_lv5_1));
    icmp_ln18_fu_351_p2 <= "1" when (i_0_reg_303 = ap_const_lv5_10) else "0";
    localLeft_fu_387_p2 <= (p_tmp_reg_284 xor ap_phi_mux_phi_ln19_phi_fu_317_p32);
    localRight_fu_501_p2 <= (p_b_read_assign_reg_293 xor feistel_result_reg_639);
    trunc_ln19_1_fu_367_p1 <= ap_phi_mux_phi_ln19_phi_fu_317_p32(8 - 1 downto 0);
    trunc_ln19_2_fu_371_p1 <= p_tmp_reg_284(24 - 1 downto 0);
    trunc_ln19_3_fu_375_p1 <= ap_phi_mux_phi_ln19_phi_fu_317_p32(24 - 1 downto 0);
    trunc_ln19_4_fu_379_p1 <= p_tmp_reg_284(16 - 1 downto 0);
    trunc_ln19_5_fu_383_p1 <= ap_phi_mux_phi_ln19_phi_fu_317_p32(16 - 1 downto 0);
    trunc_ln19_fu_363_p1 <= p_tmp_reg_284(8 - 1 downto 0);
    xor_ln19_1_fu_393_p2 <= (trunc_ln19_5_fu_383_p1 xor trunc_ln19_4_fu_379_p1);
    xor_ln19_2_fu_399_p2 <= (trunc_ln19_3_fu_375_p1 xor trunc_ln19_2_fu_371_p1);
    xor_ln26_fu_461_p2 <= (p_tmp_reg_284 xor P_16_read);
    xor_ln27_fu_466_p2 <= (p_b_read_assign_reg_293 xor P_17_read);
    xor_ln81_fu_489_p2 <= (add_ln81_fu_483_p2 xor S_2_q0);
    zext_ln81_2_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_415_p4),64));
    zext_ln81_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_425_p4),64));
    zext_ln81_4_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_435_p2),64));
    zext_ln81_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_405_p4),64));
end behav;
