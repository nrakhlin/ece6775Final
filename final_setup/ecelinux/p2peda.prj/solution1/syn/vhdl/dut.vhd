-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.358000,HLS_SYN_LAT=2974,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=4681,HLS_SYN_LUT=20091,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_1C : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lfsr_decrypt : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln146_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_339 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_predicate_op40_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1064 : STD_LOGIC_VECTOR (2 downto 0);
    signal reading_0_load_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln147_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln147_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln153_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_reg_1094 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_1_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_1_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_483_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encrypt_aes_fu_293_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal output_message_V_reg_1113 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_encrypt_aes_fu_293_ap_ready : STD_LOGIC;
    signal grp_encrypt_aes_fu_293_ap_done : STD_LOGIC;
    signal i_3_fu_597_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1122 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln186_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_reg_1127 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln177_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_word_V_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_word_V_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_aes_fu_284_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal output_message_V_2_reg_1137 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_decrypt_aes_fu_284_ap_ready : STD_LOGIC;
    signal grp_decrypt_aes_fu_284_ap_done : STD_LOGIC;
    signal lower_64_V_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lower_64_V_reg_1143 : STD_LOGIC_VECTOR (63 downto 0);
    signal upper_64_V_reg_1148 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_701_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1156 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln681_4_fu_790_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_4_reg_1161 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln292_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_800_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_reg_1166 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_836_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln681_7_fu_925_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_7_reg_1179 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln300_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_3_fu_935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_3_reg_1184 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_971_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_1192 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln215_fu_1004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln206_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_word_V_6_fu_1031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_word_V_6_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ciphertext1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext1_ce0 : STD_LOGIC;
    signal ciphertext1_we0 : STD_LOGIC;
    signal ciphertext1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext1_ce1 : STD_LOGIC;
    signal ciphertext1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext2_ce0 : STD_LOGIC;
    signal ciphertext2_we0 : STD_LOGIC;
    signal ciphertext2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_ce1 : STD_LOGIC;
    signal ciphertext2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_aes_fu_284_ap_start : STD_LOGIC;
    signal grp_decrypt_aes_fu_284_ap_idle : STD_LOGIC;
    signal grp_encrypt_aes_fu_293_ap_start : STD_LOGIC;
    signal grp_encrypt_aes_fu_293_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ap_start : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ap_done : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_302_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_302_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_we0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_we1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_302_decryptedtext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_ap_start : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_ap_done : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_we0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_we1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_318_decryptedtext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phi_mul_reg_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_0_reg_216 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul3_reg_227 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_i_reg_238 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i1_0_i_i_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i2_0_reg_262 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal phi_mul5_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_aes_fu_284_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call3 : BOOLEAN;
    signal grp_encrypt_aes_fu_293_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call0 : BOOLEAN;
    signal grp_Blowfish_Decrypt_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal grp_Blowfish_Decrypt_fu_318_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln296_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln304_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln193_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reading_0_fu_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln150_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_136 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_10_fu_463_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_11_fu_580_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln157_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln157_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln157_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln157_1_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_fu_459_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln647_1_fu_491_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln414_2_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_1_fu_498_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_3_fu_494_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln414_1_fu_510_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln414_fu_521_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_3_fu_527_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln414_2_fu_514_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln414_3_fu_518_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln414_1_fu_544_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln414_fu_550_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln414_fu_556_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln414_fu_562_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln414_3_fu_537_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln414_1_fu_568_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln414_2_fu_574_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_9_fu_609_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_1_fu_618_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln647_fu_636_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln647_fu_640_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln215_fu_645_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln180_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln296_fu_707_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_3_fu_711_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln296_fu_719_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln681_fu_731_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln681_4_fu_735_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln681_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_749_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_3_fu_761_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_739_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln681_fu_755_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_fu_767_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_4_fu_782_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_3_fu_775_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_5_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_6_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_2_fu_809_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_815_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln304_fu_842_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_4_fu_846_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln304_fu_854_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln681_7_fu_866_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln681_8_fu_870_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln681_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_5_fu_884_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_6_fu_896_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_874_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln681_1_fu_890_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_5_fu_902_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_7_fu_917_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_6_fu_910_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_9_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_10_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_4_fu_944_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_fu_950_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_983_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_fu_992_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln647_1_fu_1010_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln647_1_fu_1014_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln215_1_fu_1019_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln209_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_fu_1023_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component decrypt_aes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_V : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component encrypt_aes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_V : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component Blowfish_Decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce0 : OUT STD_LOGIC;
        decryptedtext_we0 : OUT STD_LOGIC;
        decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce1 : OUT STD_LOGIC;
        decryptedtext_we1 : OUT STD_LOGIC;
        decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_ciphertext1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_decryptedtext1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ciphertext1_U : component dut_ciphertext1
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ciphertext1_address0,
        ce0 => ciphertext1_ce0,
        we0 => ciphertext1_we0,
        d0 => ciphertext1_d0,
        q0 => ciphertext1_q0,
        address1 => grp_Blowfish_Decrypt_fu_302_ciphertext_address1,
        ce1 => ciphertext1_ce1,
        q1 => ciphertext1_q1);

    ciphertext2_U : component dut_ciphertext1
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ciphertext2_address0,
        ce0 => ciphertext2_ce0,
        we0 => ciphertext2_we0,
        d0 => ciphertext2_d0,
        q0 => ciphertext2_q0,
        address1 => grp_Blowfish_Decrypt_fu_318_ciphertext_address1,
        ce1 => ciphertext2_ce1,
        q1 => ciphertext2_q1);

    decryptedtext1_U : component dut_decryptedtext1
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_address0,
        ce0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_ce0,
        we0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_we0,
        d0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_d0,
        address1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_address1,
        ce1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_ce1,
        we1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_we1,
        d1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_d1);

    decryptedtext2_U : component dut_decryptedtext1
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_address0,
        ce0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_ce0,
        we0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_we0,
        d0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_d0,
        address1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_address1,
        ce1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_ce1,
        we1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_we1,
        d1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_d1);

    grp_decrypt_aes_fu_284 : component decrypt_aes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decrypt_aes_fu_284_ap_start,
        ap_done => grp_decrypt_aes_fu_284_ap_done,
        ap_idle => grp_decrypt_aes_fu_284_ap_idle,
        ap_ready => grp_decrypt_aes_fu_284_ap_ready,
        ciphertext_V => reg_339,
        ap_return => grp_decrypt_aes_fu_284_ap_return);

    grp_encrypt_aes_fu_293 : component encrypt_aes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encrypt_aes_fu_293_ap_start,
        ap_done => grp_encrypt_aes_fu_293_ap_done,
        ap_idle => grp_encrypt_aes_fu_293_ap_idle,
        ap_ready => grp_encrypt_aes_fu_293_ap_ready,
        plaintext_V => reg_339,
        ap_return => grp_encrypt_aes_fu_293_ap_return);

    grp_Blowfish_Decrypt_fu_302 : component Blowfish_Decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Decrypt_fu_302_ap_start,
        ap_done => grp_Blowfish_Decrypt_fu_302_ap_done,
        ap_idle => grp_Blowfish_Decrypt_fu_302_ap_idle,
        ap_ready => grp_Blowfish_Decrypt_fu_302_ap_ready,
        ciphertext_address0 => grp_Blowfish_Decrypt_fu_302_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Decrypt_fu_302_ciphertext_ce0,
        ciphertext_q0 => ciphertext1_q0,
        ciphertext_address1 => grp_Blowfish_Decrypt_fu_302_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Decrypt_fu_302_ciphertext_ce1,
        ciphertext_q1 => ciphertext1_q1,
        decryptedtext_address0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_address0,
        decryptedtext_ce0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_ce0,
        decryptedtext_we0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_we0,
        decryptedtext_d0 => grp_Blowfish_Decrypt_fu_302_decryptedtext_d0,
        decryptedtext_address1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_address1,
        decryptedtext_ce1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_ce1,
        decryptedtext_we1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_we1,
        decryptedtext_d1 => grp_Blowfish_Decrypt_fu_302_decryptedtext_d1);

    grp_Blowfish_Decrypt_fu_318 : component Blowfish_Decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Decrypt_fu_318_ap_start,
        ap_done => grp_Blowfish_Decrypt_fu_318_ap_done,
        ap_idle => grp_Blowfish_Decrypt_fu_318_ap_idle,
        ap_ready => grp_Blowfish_Decrypt_fu_318_ap_ready,
        ciphertext_address0 => grp_Blowfish_Decrypt_fu_318_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Decrypt_fu_318_ciphertext_ce0,
        ciphertext_q0 => ciphertext2_q0,
        ciphertext_address1 => grp_Blowfish_Decrypt_fu_318_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Decrypt_fu_318_ciphertext_ce1,
        ciphertext_q1 => ciphertext2_q1,
        decryptedtext_address0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_address0,
        decryptedtext_ce0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_ce0,
        decryptedtext_we0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_we0,
        decryptedtext_d0 => grp_Blowfish_Decrypt_fu_318_decryptedtext_d0,
        decryptedtext_address1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_address1,
        decryptedtext_ce1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_ce1,
        decryptedtext_we1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_we1,
        decryptedtext_d1 => grp_Blowfish_Decrypt_fu_318_decryptedtext_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Blowfish_Decrypt_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Decrypt_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln300_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_Blowfish_Decrypt_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Decrypt_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Decrypt_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Blowfish_Decrypt_fu_318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Decrypt_fu_318_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln300_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_Blowfish_Decrypt_fu_318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Decrypt_fu_318_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Decrypt_fu_318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_decrypt_aes_fu_284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decrypt_aes_fu_284_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (tmp_fu_483_p3 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_decrypt_aes_fu_284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decrypt_aes_fu_284_ap_ready = ap_const_logic_1)) then 
                    grp_decrypt_aes_fu_284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encrypt_aes_fu_293_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encrypt_aes_fu_293_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (tmp_fu_483_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encrypt_aes_fu_293_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encrypt_aes_fu_293_ap_ready = ap_const_logic_1)) then 
                    grp_encrypt_aes_fu_293_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_i_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i1_0_i_i_reg_250 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i1_0_i_i_reg_250 <= i_4_reg_1174;
            end if; 
        end if;
    end process;

    i1_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_0_reg_216 <= i_3_reg_1122;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_encrypt_aes_fu_293_ap_done = ap_const_logic_1))) then 
                i1_0_reg_216 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i2_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i2_0_reg_262 <= i_5_reg_1192;
            elsif (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i2_0_reg_262 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_i_i_reg_238 <= i_2_reg_1156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_decrypt_aes_fu_284_ap_done = ap_const_logic_1))) then 
                i_0_i_i_reg_238 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_193 <= i_reg_1064;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_193 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_1_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((reading_0_load_reg_1069 = ap_const_lv1_1) and (icmp_ln153_reg_1083 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_1_fu_136 <= p_Result_11_fu_580_p2;
            elsif ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln153_fu_395_p2 = ap_const_lv1_1) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_1_fu_136 <= p_Result_10_fu_463_p5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_1_fu_136 <= ap_const_lv128_lc_2;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_fu_132 <= strm_in_V_V_dout;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_s_fu_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul3_reg_227 <= add_ln186_reg_1127;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_encrypt_aes_fu_293_ap_done = ap_const_logic_1))) then 
                phi_mul3_reg_227 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                phi_mul5_reg_273 <= add_ln215_reg_1197;
            elsif (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                phi_mul5_reg_273 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_204 <= add_ln147_reg_1073;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_204 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    reading_0_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reading_0_fu_128 <= xor_ln150_fu_389_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reading_0_fu_128 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln147_reg_1073 <= add_ln147_fu_375_p2;
                reading_0_load_reg_1069 <= reading_0_fu_128;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln177_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln186_reg_1127 <= add_ln186_fu_630_p2;
                    output_word_V_reg_1132(29 downto 0) <= output_word_V_fu_657_p3(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1109 = ap_const_lv1_1) and (icmp_ln206_fu_965_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln215_reg_1197 <= add_ln215_fu_1004_p2;
                    output_word_V_6_reg_1202(29 downto 0) <= output_word_V_6_fu_1031_p3(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_2_reg_1156 <= i_2_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_1122 <= i_3_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_1174 <= i_4_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1109 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_5_reg_1192 <= i_5_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_1064 <= i_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln153_reg_1083 <= icmp_ln153_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln153_fu_395_p2 = ap_const_lv1_0) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln414_reg_1087 <= icmp_ln414_fu_429_p2;
                sub_ln414_1_reg_1104 <= sub_ln414_1_fu_453_p2;
                sub_ln414_reg_1099 <= sub_ln414_fu_439_p2;
                    zext_ln414_reg_1094(6 downto 0) <= zext_ln414_fu_435_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_decrypt_aes_fu_284_ap_done = ap_const_logic_1))) then
                lfsr_decrypt <= xor_ln193_fu_669_p2;
                lower_64_V_reg_1143 <= lower_64_V_fu_681_p1;
                output_message_V_2_reg_1137 <= grp_decrypt_aes_fu_284_ap_return;
                upper_64_V_reg_1148 <= reg_339(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_fu_830_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                lshr_ln681_3_reg_1184 <= lshr_ln681_3_fu_935_p2;
                    sub_ln681_7_reg_1179(6 downto 1) <= sub_ln681_7_fu_925_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_fu_695_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                lshr_ln681_reg_1166 <= lshr_ln681_fu_800_p2;
                    sub_ln681_4_reg_1161(6 downto 1) <= sub_ln681_4_fu_790_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_encrypt_aes_fu_293_ap_done = ap_const_logic_1))) then
                output_message_V_reg_1113 <= grp_encrypt_aes_fu_293_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_339 <= p_Val2_1_fu_136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_2_reg_1078 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1109 <= p_Val2_s_fu_132(30 downto 30);
            end if;
        end if;
    end process;
    zext_ln414_reg_1094(7) <= '0';
    output_word_V_reg_1132(31 downto 30) <= "01";
    sub_ln681_4_reg_1161(0) <= '0';
    sub_ln681_7_reg_1179(0) <= '0';
    output_word_V_6_reg_1202(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_CS_fsm_state2, icmp_ln146_fu_360_p2, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_predicate_op40_read_state2, tmp_fu_483_p3, tmp_reg_1109, ap_CS_fsm_state4, grp_encrypt_aes_fu_293_ap_done, ap_CS_fsm_state5, icmp_ln177_fu_591_p2, ap_CS_fsm_state7, grp_decrypt_aes_fu_284_ap_done, ap_CS_fsm_state8, icmp_ln292_fu_695_p2, ap_CS_fsm_state10, icmp_ln300_fu_830_p2, ap_CS_fsm_state13, icmp_ln206_fu_965_p2, ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (tmp_fu_483_p3 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_1) and (tmp_fu_483_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_encrypt_aes_fu_293_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln177_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_decrypt_aes_fu_284_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln292_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln300_fu_830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln206_fu_965_p2 = ap_const_lv1_1) or (tmp_reg_1109 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Lo_assign_3_fu_711_p3 <= (trunc_ln296_fu_707_p1 & ap_const_lv3_0);
    Lo_assign_4_fu_846_p3 <= (trunc_ln304_fu_842_p1 & ap_const_lv3_0);
    add_ln147_fu_375_p2 <= std_logic_vector(unsigned(phi_mul_reg_204) + unsigned(ap_const_lv8_1D));
    add_ln157_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv7_1C) + unsigned(trunc_ln157_fu_411_p1));
    add_ln186_fu_630_p2 <= std_logic_vector(unsigned(phi_mul3_reg_227) + unsigned(ap_const_lv8_1D));
    add_ln215_fu_1004_p2 <= std_logic_vector(unsigned(phi_mul5_reg_273) + unsigned(ap_const_lv8_1D));
    and_ln414_1_fu_568_p2 <= (xor_ln414_fu_562_p2 and reg_339);
    and_ln414_2_fu_574_p2 <= (select_ln414_3_fu_537_p3 and and_ln414_fu_556_p2);
    and_ln414_fu_556_p2 <= (shl_ln414_1_fu_544_p2 and lshr_ln414_fu_550_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_on_subcall_done_assign_proc : process(grp_Blowfish_Decrypt_fu_302_ap_done, grp_Blowfish_Decrypt_fu_318_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_Blowfish_Decrypt_fu_318_ap_done = ap_const_logic_0) or (grp_Blowfish_Decrypt_fu_302_ap_done = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(strm_in_V_V_empty_n, ap_predicate_op40_read_state2)
    begin
                ap_block_state2 <= ((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state2_ignore_call0_assign_proc : process(strm_in_V_V_empty_n, ap_predicate_op40_read_state2)
    begin
                ap_block_state2_ignore_call0 <= ((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state2_ignore_call3_assign_proc : process(strm_in_V_V_empty_n, ap_predicate_op40_read_state2)
    begin
                ap_block_state2_ignore_call3 <= ((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(tmp_reg_1109, ap_CS_fsm_state13, icmp_ln206_fu_965_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln206_fu_965_p2 = ap_const_lv1_1) or (tmp_reg_1109 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op40_read_state2_assign_proc : process(icmp_ln146_fu_360_p2, reading_0_fu_128)
    begin
                ap_predicate_op40_read_state2 <= ((reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(tmp_reg_1109, ap_CS_fsm_state13, icmp_ln206_fu_965_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln206_fu_965_p2 = ap_const_lv1_1) or (tmp_reg_1109 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext1_address0_assign_proc : process(grp_Blowfish_Decrypt_fu_302_ciphertext_address0, ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln296_fu_825_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ciphertext1_address0 <= zext_ln296_fu_825_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext1_address0 <= grp_Blowfish_Decrypt_fu_302_ciphertext_address0;
        else 
            ciphertext1_address0 <= "XXX";
        end if; 
    end process;


    ciphertext1_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_302_ciphertext_ce0, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ciphertext1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext1_ce0 <= grp_Blowfish_Decrypt_fu_302_ciphertext_ce0;
        else 
            ciphertext1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext1_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_302_ciphertext_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext1_ce1 <= grp_Blowfish_Decrypt_fu_302_ciphertext_ce1;
        else 
            ciphertext1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext1_d0 <= p_Result_s_fu_815_p2(8 - 1 downto 0);

    ciphertext1_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ciphertext1_we0 <= ap_const_logic_1;
        else 
            ciphertext1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext2_address0_assign_proc : process(grp_Blowfish_Decrypt_fu_318_ciphertext_address0, ap_CS_fsm_state11, ap_CS_fsm_state12, zext_ln304_fu_960_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext2_address0 <= zext_ln304_fu_960_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext2_address0 <= grp_Blowfish_Decrypt_fu_318_ciphertext_address0;
        else 
            ciphertext2_address0 <= "XXX";
        end if; 
    end process;


    ciphertext2_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_318_ciphertext_ce0, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext2_ce0 <= grp_Blowfish_Decrypt_fu_318_ciphertext_ce0;
        else 
            ciphertext2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext2_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_318_ciphertext_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext2_ce1 <= grp_Blowfish_Decrypt_fu_318_ciphertext_ce1;
        else 
            ciphertext2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext2_d0 <= p_Result_6_fu_950_p2(8 - 1 downto 0);

    ciphertext2_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext2_we0 <= ap_const_logic_1;
        else 
            ciphertext2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Blowfish_Decrypt_fu_302_ap_start <= grp_Blowfish_Decrypt_fu_302_ap_start_reg;
    grp_Blowfish_Decrypt_fu_318_ap_start <= grp_Blowfish_Decrypt_fu_318_ap_start_reg;
    grp_decrypt_aes_fu_284_ap_start <= grp_decrypt_aes_fu_284_ap_start_reg;
    grp_encrypt_aes_fu_293_ap_start <= grp_encrypt_aes_fu_293_ap_start_reg;
    i_2_fu_701_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_238) + unsigned(ap_const_lv4_1));
    i_3_fu_597_p2 <= std_logic_vector(unsigned(i1_0_reg_216) + unsigned(ap_const_lv3_1));
    i_4_fu_836_p2 <= std_logic_vector(unsigned(i1_0_i_i_reg_250) + unsigned(ap_const_lv4_1));
    i_5_fu_971_p2 <= std_logic_vector(unsigned(i2_0_reg_262) + unsigned(ap_const_lv3_1));
    i_fu_366_p2 <= std_logic_vector(unsigned(i_0_reg_193) + unsigned(ap_const_lv3_1));
    icmp_ln146_fu_360_p2 <= "1" when (i_0_reg_193 = ap_const_lv3_5) else "0";
    icmp_ln153_fu_395_p2 <= "1" when (i_0_reg_193 = ap_const_lv3_4) else "0";
    icmp_ln177_fu_591_p2 <= "1" when (i1_0_reg_216 = ap_const_lv3_5) else "0";
    icmp_ln180_fu_603_p2 <= "1" when (i1_0_reg_216 = ap_const_lv3_4) else "0";
    icmp_ln206_fu_965_p2 <= "1" when (i2_0_reg_262 = ap_const_lv3_5) else "0";
    icmp_ln209_fu_977_p2 <= "1" when (i2_0_reg_262 = ap_const_lv3_4) else "0";
    icmp_ln292_fu_695_p2 <= "1" when (i_0_i_i_reg_238 = ap_const_lv4_8) else "0";
    icmp_ln300_fu_830_p2 <= "1" when (i1_0_i_i_reg_250 = ap_const_lv4_8) else "0";
    icmp_ln414_fu_429_p2 <= "1" when (unsigned(zext_ln157_fu_415_p1) > unsigned(zext_ln157_1_fu_425_p1)) else "0";
    icmp_ln681_1_fu_860_p2 <= "1" when (unsigned(Lo_assign_4_fu_846_p3) > unsigned(or_ln304_fu_854_p2)) else "0";
    icmp_ln681_fu_725_p2 <= "1" when (unsigned(Lo_assign_3_fu_711_p3) > unsigned(or_ln296_fu_719_p2)) else "0";
    lower_64_V_fu_681_p1 <= reg_339(64 - 1 downto 0);
    lshr_ln414_fu_550_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln414_3_fu_518_p1(31-1 downto 0)))));
    lshr_ln647_1_fu_1014_p2 <= std_logic_vector(shift_right(unsigned(output_message_V_2_reg_1137),to_integer(unsigned('0' & zext_ln647_1_fu_1010_p1(31-1 downto 0)))));
    lshr_ln647_fu_640_p2 <= std_logic_vector(shift_right(unsigned(output_message_V_reg_1113),to_integer(unsigned('0' & zext_ln647_fu_636_p1(31-1 downto 0)))));
    lshr_ln681_2_fu_809_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_6_fu_806_p1(31-1 downto 0)))));
    lshr_ln681_3_fu_935_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_6_fu_910_p3),to_integer(unsigned('0' & zext_ln681_9_fu_931_p1(31-1 downto 0)))));
    lshr_ln681_4_fu_944_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_10_fu_941_p1(31-1 downto 0)))));
    lshr_ln681_fu_800_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_3_fu_775_p3),to_integer(unsigned('0' & zext_ln681_5_fu_796_p1(31-1 downto 0)))));
    or_ln296_fu_719_p2 <= (ap_const_lv6_7 or Lo_assign_3_fu_711_p3);
    or_ln304_fu_854_p2 <= (ap_const_lv6_7 or Lo_assign_4_fu_846_p3);
    output_word_V_6_fu_1031_p3 <= 
        p_Result_14_fu_996_p3 when (icmp_ln209_fu_977_p2(0) = '1') else 
        p_Result_15_fu_1023_p3;
    output_word_V_fu_657_p3 <= 
        p_Result_12_fu_622_p3 when (icmp_ln180_fu_603_p2(0) = '1') else 
        p_Result_13_fu_649_p3;
    p_Result_10_fu_463_p5 <= (trunc_ln647_fu_459_p1 & p_Val2_1_fu_136(115 downto 0));
    p_Result_11_fu_580_p2 <= (and_ln414_2_fu_574_p2 or and_ln414_1_fu_568_p2);
    p_Result_12_fu_622_p3 <= (ap_const_lv3_3 & zext_ln215_1_fu_618_p1);
    p_Result_13_fu_649_p3 <= (ap_const_lv3_2 & trunc_ln215_fu_645_p1);
    p_Result_14_fu_996_p3 <= (ap_const_lv3_1 & zext_ln215_fu_992_p1);
    p_Result_15_fu_1023_p3 <= (ap_const_lv3_0 & trunc_ln215_1_fu_1019_p1);
    p_Result_4_fu_983_p4 <= output_message_V_2_reg_1137(127 downto 116);
    p_Result_6_fu_950_p2 <= (lshr_ln681_4_fu_944_p2 and lshr_ln681_3_reg_1184);
    p_Result_9_fu_609_p4 <= output_message_V_reg_1113(127 downto 116);
    p_Result_s_fu_815_p2 <= (lshr_ln681_reg_1166 and lshr_ln681_2_fu_809_p2);
    select_ln414_1_fu_498_p3 <= 
        zext_ln414_reg_1094 when (icmp_ln414_reg_1087(0) = '1') else 
        phi_mul_reg_204;
    select_ln414_2_fu_504_p3 <= 
        sub_ln414_reg_1099 when (icmp_ln414_reg_1087(0) = '1') else 
        phi_mul_reg_204;
    select_ln414_3_fu_537_p3 <= 
        tmp_3_fu_527_p4 when (icmp_ln414_reg_1087(0) = '1') else 
        shl_ln414_fu_521_p2;
    select_ln414_fu_445_p3 <= 
        phi_mul_reg_204 when (icmp_ln414_fu_429_p2(0) = '1') else 
        zext_ln414_fu_435_p1;
    select_ln681_3_fu_775_p3 <= 
        tmp_4_fu_739_p4 when (icmp_ln681_fu_725_p2(0) = '1') else 
        lower_64_V_reg_1143;
    select_ln681_4_fu_782_p3 <= 
        xor_ln681_fu_755_p2 when (icmp_ln681_fu_725_p2(0) = '1') else 
        zext_ln681_fu_731_p1;
    select_ln681_5_fu_902_p3 <= 
        sub_ln681_5_fu_884_p2 when (icmp_ln681_1_fu_860_p2(0) = '1') else 
        sub_ln681_6_fu_896_p2;
    select_ln681_6_fu_910_p3 <= 
        tmp_5_fu_874_p4 when (icmp_ln681_1_fu_860_p2(0) = '1') else 
        upper_64_V_reg_1148;
    select_ln681_7_fu_917_p3 <= 
        xor_ln681_1_fu_890_p2 when (icmp_ln681_1_fu_860_p2(0) = '1') else 
        zext_ln681_7_fu_866_p1;
    select_ln681_fu_767_p3 <= 
        sub_ln681_fu_749_p2 when (icmp_ln681_fu_725_p2(0) = '1') else 
        sub_ln681_3_fu_761_p2;
    shl_ln414_1_fu_544_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln414_2_fu_514_p1(31-1 downto 0)))));
    shl_ln414_fu_521_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_3_fu_494_p1),to_integer(unsigned('0' & zext_ln414_1_fu_510_p1(31-1 downto 0)))));

    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln146_fu_360_p2, reading_0_fu_128)
    begin
        if (((reading_0_fu_128 = ap_const_lv1_1) and (icmp_ln146_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, ap_predicate_op40_read_state2)
    begin
        if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op40_read_state2 = ap_const_boolean_1))) and (ap_predicate_op40_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_V_din_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state14, output_word_V_reg_1132, output_word_V_6_reg_1202)
    begin
        if ((strm_out_V_V_full_n = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                strm_out_V_V_din <= output_word_V_6_reg_1202;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                strm_out_V_V_din <= output_word_V_reg_1132;
            else 
                strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln414_1_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln414_fu_445_p3));
    sub_ln414_fu_439_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(phi_mul_reg_204));
    sub_ln681_3_fu_761_p2 <= std_logic_vector(unsigned(zext_ln681_4_fu_735_p1) - unsigned(zext_ln681_fu_731_p1));
    sub_ln681_4_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_fu_767_p3));
    sub_ln681_5_fu_884_p2 <= std_logic_vector(unsigned(zext_ln681_7_fu_866_p1) - unsigned(zext_ln681_8_fu_870_p1));
    sub_ln681_6_fu_896_p2 <= std_logic_vector(unsigned(zext_ln681_8_fu_870_p1) - unsigned(zext_ln681_7_fu_866_p1));
    sub_ln681_7_fu_925_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_5_fu_902_p3));
    sub_ln681_fu_749_p2 <= std_logic_vector(unsigned(zext_ln681_fu_731_p1) - unsigned(zext_ln681_4_fu_735_p1));
    tmp_2_fu_381_p3 <= strm_in_V_V_dout(29 downto 29);
    
    tmp_3_fu_527_p4_proc : process(shl_ln414_fu_521_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_3_fu_527_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln414_fu_521_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_3_fu_527_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_3_fu_527_p4_i) := shl_ln414_fu_521_p2(128-1-tmp_3_fu_527_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_527_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_4_fu_739_p4_proc : process(reg_339)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_4_fu_739_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_3F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := reg_339;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_3F(7-1 downto 0)));
            for tmp_4_fu_739_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_4_fu_739_p4_i) := reg_339(128-1-tmp_4_fu_739_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_739_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_5_fu_874_p4_proc : process(reg_339)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_5_fu_874_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_40(7 - 1 downto 0);
        v0_cpy := reg_339;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_40(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_5_fu_874_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_5_fu_874_p4_i) := reg_339(128-1-tmp_5_fu_874_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_874_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_V_3_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_1_fu_491_p1),128));
    tmp_fu_483_p3 <= p_Val2_s_fu_132(30 downto 30);
    trunc_ln157_fu_411_p1 <= phi_mul_reg_204(7 - 1 downto 0);
    trunc_ln215_1_fu_1019_p1 <= lshr_ln647_1_fu_1014_p2(29 - 1 downto 0);
    trunc_ln215_fu_645_p1 <= lshr_ln647_fu_640_p2(29 - 1 downto 0);
    trunc_ln296_fu_707_p1 <= i_0_i_i_reg_238(3 - 1 downto 0);
    trunc_ln304_fu_842_p1 <= i1_0_i_i_reg_250(3 - 1 downto 0);
    trunc_ln647_1_fu_491_p1 <= tmp_V_2_reg_1078(29 - 1 downto 0);
    trunc_ln647_fu_459_p1 <= strm_in_V_V_dout(12 - 1 downto 0);
    xor_ln150_fu_389_p2 <= (tmp_2_fu_381_p3 xor ap_const_lv1_1);
    xor_ln193_fu_669_p2 <= (lfsr_decrypt xor ap_const_lv1_1);
    xor_ln414_fu_562_p2 <= (ap_const_lv128_lc_1 xor and_ln414_fu_556_p2);
    xor_ln681_1_fu_890_p2 <= (zext_ln681_7_fu_866_p1 xor ap_const_lv7_3F);
    xor_ln681_fu_755_p2 <= (zext_ln681_fu_731_p1 xor ap_const_lv7_3F);
    zext_ln157_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln157_fu_419_p2),32));
    zext_ln157_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_204),32));
    zext_ln215_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_609_p4),29));
    zext_ln215_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_983_p4),29));
    zext_ln296_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_238),64));
    zext_ln304_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_i_reg_250),64));
    zext_ln414_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_504_p3),128));
    zext_ln414_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_498_p3),128));
    zext_ln414_3_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_1_reg_1104),128));
    zext_ln414_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln157_fu_419_p2),8));
    zext_ln647_1_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul5_reg_273),128));
    zext_ln647_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul3_reg_227),128));
    zext_ln681_10_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_7_reg_1179),64));
    zext_ln681_4_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln296_fu_719_p2),7));
    zext_ln681_5_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_4_fu_782_p3),64));
    zext_ln681_6_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_4_reg_1161),64));
    zext_ln681_7_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_4_fu_846_p3),7));
    zext_ln681_8_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln304_fu_854_p2),7));
    zext_ln681_9_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_7_fu_917_p3),64));
    zext_ln681_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_3_fu_711_p3),7));
end behav;
