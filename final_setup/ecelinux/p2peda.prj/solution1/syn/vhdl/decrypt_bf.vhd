-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decrypt_bf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_V : IN STD_LOGIC_VECTOR (127 downto 0);
    P_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of decrypt_bf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln188_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal lower_64_V_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lower_64_V_reg_1086 : STD_LOGIC_VECTOR (63 downto 0);
    signal upper_64_V_reg_1091 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln681_9_fu_557_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_9_reg_1104 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln180_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_fu_603_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_1117 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln681_12_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_12_reg_1122 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln681_6_fu_701_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_6_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_10_fu_737_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_1135 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln202_fu_743_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln202_reg_1140 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln201_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_891_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_11_fu_903_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_1158 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln207_fu_909_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln207_reg_1163 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln206_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_1074_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ciphertext1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext1_ce0 : STD_LOGIC;
    signal ciphertext1_we0 : STD_LOGIC;
    signal ciphertext1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext1_ce1 : STD_LOGIC;
    signal ciphertext1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ciphertext2_ce0 : STD_LOGIC;
    signal ciphertext2_we0 : STD_LOGIC;
    signal ciphertext2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext2_ce1 : STD_LOGIC;
    signal ciphertext2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal decryptedtext1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal decryptedtext1_ce0 : STD_LOGIC;
    signal decryptedtext1_we0 : STD_LOGIC;
    signal decryptedtext1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal decryptedtext1_ce1 : STD_LOGIC;
    signal decryptedtext1_we1 : STD_LOGIC;
    signal decryptedtext2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal decryptedtext2_ce0 : STD_LOGIC;
    signal decryptedtext2_we0 : STD_LOGIC;
    signal decryptedtext2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal decryptedtext2_ce1 : STD_LOGIC;
    signal decryptedtext2_we1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ap_start : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ap_done : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ap_idle : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ap_ready : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_ciphertext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_we0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_we1 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_decryptedtext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_S_0_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_S_1_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_S_2_ce0 : STD_LOGIC;
    signal grp_Blowfish_Decrypt_fu_237_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_S_3_ce0 : STD_LOGIC;
    signal i_0_i_reg_168 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_i_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_12_reg_192 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_i25_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_13_reg_215 : STD_LOGIC_VECTOR (127 downto 0);
    signal i1_0_i31_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Blowfish_Decrypt_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln184_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln192_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln202_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_475_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_fu_479_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln184_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln681_fu_499_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln681_11_fu_503_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln681_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_516_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_8_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_507_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln681_fu_522_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_fu_534_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_9_fu_549_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_8_fu_542_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_12_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_13_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_5_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln192_fu_609_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_7_fu_613_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln192_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln681_14_fu_633_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln681_15_fu_637_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln681_2_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_10_fu_650_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_11_fu_662_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_641_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln681_2_fu_656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_10_fu_668_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_12_fu_683_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_11_fu_676_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_16_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_17_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_7_fu_710_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_14_fu_716_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Lo_assign_8_fu_752_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln202_fu_759_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln388_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln388_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln388_14_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_fu_789_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_12_fu_805_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_11_fu_797_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_8_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_765_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_15_fu_819_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_fu_831_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_20_fu_837_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_16_fu_823_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_17_fu_827_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_5_fu_855_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln388_fu_861_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_fu_867_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln388_9_fu_873_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln388_13_fu_847_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_8_fu_879_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_9_fu_885_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln_fu_918_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln207_fu_925_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Lo_assign_9_fu_939_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_9_fu_931_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln388_18_fu_958_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln388_2_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln388_19_fu_962_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_10_fu_966_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_14_fu_972_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_16_fu_988_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_15_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_11_fu_996_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_fu_948_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_20_fu_1002_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_6_fu_1014_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_21_fu_1020_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_21_fu_1006_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_22_fu_1010_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_7_fu_1038_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln388_2_fu_1044_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_10_fu_1050_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln388_12_fu_1056_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln388_17_fu_1030_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_11_fu_1062_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_12_fu_1068_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component Blowfish_Decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce0 : OUT STD_LOGIC;
        decryptedtext_we0 : OUT STD_LOGIC;
        decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        decryptedtext_ce1 : OUT STD_LOGIC;
        decryptedtext_we1 : OUT STD_LOGIC;
        decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component decrypt_bf_ciphercud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component decrypt_bf_decrypeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ciphertext1_U : component decrypt_bf_ciphercud
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ciphertext1_address0,
        ce0 => ciphertext1_ce0,
        we0 => ciphertext1_we0,
        d0 => ciphertext1_d0,
        q0 => ciphertext1_q0,
        address1 => grp_Blowfish_Decrypt_fu_237_ciphertext_address1,
        ce1 => ciphertext1_ce1,
        q1 => ciphertext1_q1);

    ciphertext2_U : component decrypt_bf_ciphercud
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ciphertext2_address0,
        ce0 => ciphertext2_ce0,
        we0 => ciphertext2_we0,
        d0 => ciphertext2_d0,
        q0 => ciphertext2_q0,
        address1 => grp_Blowfish_Decrypt_fu_237_ciphertext_address1,
        ce1 => ciphertext2_ce1,
        q1 => ciphertext2_q1);

    decryptedtext1_U : component decrypt_bf_decrypeOg
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decryptedtext1_address0,
        ce0 => decryptedtext1_ce0,
        we0 => decryptedtext1_we0,
        d0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d0,
        q0 => decryptedtext1_q0,
        address1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_address1,
        ce1 => decryptedtext1_ce1,
        we1 => decryptedtext1_we1,
        d1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d1);

    decryptedtext2_U : component decrypt_bf_decrypeOg
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decryptedtext2_address0,
        ce0 => decryptedtext2_ce0,
        we0 => decryptedtext2_we0,
        d0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d0,
        q0 => decryptedtext2_q0,
        address1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_address1,
        ce1 => decryptedtext2_ce1,
        we1 => decryptedtext2_we1,
        d1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d1);

    grp_Blowfish_Decrypt_fu_237 : component Blowfish_Decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Blowfish_Decrypt_fu_237_ap_start,
        ap_done => grp_Blowfish_Decrypt_fu_237_ap_done,
        ap_idle => grp_Blowfish_Decrypt_fu_237_ap_idle,
        ap_ready => grp_Blowfish_Decrypt_fu_237_ap_ready,
        ciphertext_address0 => grp_Blowfish_Decrypt_fu_237_ciphertext_address0,
        ciphertext_ce0 => grp_Blowfish_Decrypt_fu_237_ciphertext_ce0,
        ciphertext_q0 => grp_Blowfish_Decrypt_fu_237_ciphertext_q0,
        ciphertext_address1 => grp_Blowfish_Decrypt_fu_237_ciphertext_address1,
        ciphertext_ce1 => grp_Blowfish_Decrypt_fu_237_ciphertext_ce1,
        ciphertext_q1 => grp_Blowfish_Decrypt_fu_237_ciphertext_q1,
        decryptedtext_address0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_address0,
        decryptedtext_ce0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0,
        decryptedtext_we0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_we0,
        decryptedtext_d0 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d0,
        decryptedtext_address1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_address1,
        decryptedtext_ce1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1,
        decryptedtext_we1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_we1,
        decryptedtext_d1 => grp_Blowfish_Decrypt_fu_237_decryptedtext_d1,
        P_0_read => reg_359,
        P_1_read => reg_364,
        P_2_read => reg_369,
        P_3_read => reg_374,
        P_4_read => reg_379,
        P_5_read => reg_384,
        P_6_read => reg_389,
        P_7_read => reg_394,
        P_8_read => reg_399,
        P_9_read => reg_404,
        P_10_read => reg_409,
        P_11_read => reg_414,
        P_12_read => reg_419,
        P_13_read => reg_424,
        P_14_read => reg_429,
        P_15_read => reg_434,
        P_16_read => reg_439,
        P_17_read => reg_444,
        S_0_address0 => grp_Blowfish_Decrypt_fu_237_S_0_address0,
        S_0_ce0 => grp_Blowfish_Decrypt_fu_237_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_Blowfish_Decrypt_fu_237_S_1_address0,
        S_1_ce0 => grp_Blowfish_Decrypt_fu_237_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_Blowfish_Decrypt_fu_237_S_2_address0,
        S_2_ce0 => grp_Blowfish_Decrypt_fu_237_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_Blowfish_Decrypt_fu_237_S_3_address0,
        S_3_ce0 => grp_Blowfish_Decrypt_fu_237_S_3_ce0,
        S_3_q0 => S_3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_1;
            else
                if (((icmp_ln206_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_preg <= p_Val2_13_reg_215;
                end if; 
            end if;
        end if;
    end process;


    grp_Blowfish_Decrypt_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Blowfish_Decrypt_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln188_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_Blowfish_Decrypt_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Blowfish_Decrypt_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_Blowfish_Decrypt_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_i31_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln201_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i1_0_i31_reg_226 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_0_i31_reg_226 <= i_11_reg_1158;
            end if; 
        end if;
    end process;

    i1_0_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_i_reg_180 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_i_reg_180 <= i_9_reg_1117;
            end if; 
        end if;
    end process;

    i_0_i25_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_i25_reg_204 <= i_10_reg_1135;
            elsif (((grp_Blowfish_Decrypt_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i25_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_i_reg_168 <= i_reg_1099;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_168 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_12_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_12_reg_192 <= p_Result_17_fu_891_p2;
            elsif (((grp_Blowfish_Decrypt_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_Val2_12_reg_192 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    p_Val2_13_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln201_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_Val2_13_reg_215 <= p_Val2_12_reg_192;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_13_reg_215 <= p_Result_18_fu_1074_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_10_reg_1135 <= i_10_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_11_reg_1158 <= i_11_fu_903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_9_reg_1117 <= i_9_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1099 <= i_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                lower_64_V_reg_1086 <= lower_64_V_fu_449_p1;
                upper_64_V_reg_1091 <= ciphertext_V(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_597_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                lshr_ln681_6_reg_1127 <= lshr_ln681_6_fu_701_p2;
                    sub_ln681_12_reg_1122(6 downto 1) <= sub_ln681_12_fu_691_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln180_fu_463_p2 = ap_const_lv1_0))) then
                lshr_ln681_reg_1109 <= lshr_ln681_fu_567_p2;
                    sub_ln681_9_reg_1104(6 downto 1) <= sub_ln681_9_fu_557_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln188_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_359 <= P_0;
                reg_364 <= P_1;
                reg_369 <= P_2;
                reg_374 <= P_3;
                reg_379 <= P_4;
                reg_384 <= P_5;
                reg_389 <= P_6;
                reg_394 <= P_7;
                reg_399 <= P_8;
                reg_404 <= P_9;
                reg_409 <= P_10;
                reg_414 <= P_11;
                reg_419 <= P_12;
                reg_424 <= P_13;
                reg_429 <= P_14;
                reg_434 <= P_15;
                reg_439 <= P_16;
                reg_444 <= P_17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln201_fu_731_p2 = ap_const_lv1_0))) then
                trunc_ln202_reg_1140 <= trunc_ln202_fu_743_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln206_fu_897_p2 = ap_const_lv1_0))) then
                trunc_ln207_reg_1163 <= trunc_ln207_fu_909_p1;
            end if;
        end if;
    end process;
    sub_ln681_9_reg_1104(0) <= '0';
    sub_ln681_12_reg_1122(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln188_fu_597_p2, ap_CS_fsm_state2, icmp_ln180_fu_463_p2, ap_CS_fsm_state9, icmp_ln201_fu_731_p2, ap_CS_fsm_state11, icmp_ln206_fu_897_p2, grp_Blowfish_Decrypt_fu_237_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln180_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln188_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_Blowfish_Decrypt_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_Blowfish_Decrypt_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln201_fu_731_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln206_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_9_fu_931_p3 <= (ap_const_lv1_1 & or_ln207_fu_925_p2);
    Lo_assign_7_fu_613_p3 <= (trunc_ln192_fu_609_p1 & ap_const_lv3_0);
    Lo_assign_8_fu_752_p3 <= (trunc_ln202_reg_1140 & ap_const_lv3_0);
    Lo_assign_9_fu_939_p4 <= ((ap_const_lv1_1 & trunc_ln207_reg_1163) & ap_const_lv3_0);
    Lo_assign_fu_479_p3 <= (trunc_ln184_fu_475_p1 & ap_const_lv3_0);
    S_0_address0 <= grp_Blowfish_Decrypt_fu_237_S_0_address0;

    S_0_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_S_0_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            S_0_ce0 <= grp_Blowfish_Decrypt_fu_237_S_0_ce0;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= grp_Blowfish_Decrypt_fu_237_S_1_address0;

    S_1_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_S_1_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            S_1_ce0 <= grp_Blowfish_Decrypt_fu_237_S_1_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= grp_Blowfish_Decrypt_fu_237_S_2_address0;

    S_2_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_S_2_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            S_2_ce0 <= grp_Blowfish_Decrypt_fu_237_S_2_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= grp_Blowfish_Decrypt_fu_237_S_3_address0;

    S_3_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_S_3_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            S_3_ce0 <= grp_Blowfish_Decrypt_fu_237_S_3_ce0;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln388_10_fu_1050_p2 <= (shl_ln388_7_fu_1038_p2 and lshr_ln388_2_fu_1044_p2);
    and_ln388_11_fu_1062_p2 <= (xor_ln388_12_fu_1056_p2 and p_Val2_13_reg_215);
    and_ln388_12_fu_1068_p2 <= (select_ln388_17_fu_1030_p3 and and_ln388_10_fu_1050_p2);
    and_ln388_8_fu_879_p2 <= (xor_ln388_9_fu_873_p2 and p_Val2_12_reg_192);
    and_ln388_9_fu_885_p2 <= (select_ln388_13_fu_847_p3 and and_ln388_fu_867_p2);
    and_ln388_fu_867_p2 <= (shl_ln388_5_fu_855_p2 and lshr_ln388_fu_861_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln206_fu_897_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln206_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln206_fu_897_p2)
    begin
        if (((icmp_ln206_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state11, icmp_ln206_fu_897_p2, p_Val2_13_reg_215, ap_return_preg)
    begin
        if (((icmp_ln206_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return <= p_Val2_13_reg_215;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ciphertext1_address0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln184_fu_592_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext1_address0 <= zext_ln184_fu_592_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext1_address0 <= grp_Blowfish_Decrypt_fu_237_ciphertext_address0;
        else 
            ciphertext1_address0 <= "XXX";
        end if; 
    end process;


    ciphertext1_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext1_ce0 <= grp_Blowfish_Decrypt_fu_237_ciphertext_ce0;
        else 
            ciphertext1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext1_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ciphertext1_ce1 <= grp_Blowfish_Decrypt_fu_237_ciphertext_ce1;
        else 
            ciphertext1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext1_d0 <= p_Result_s_fu_582_p2(8 - 1 downto 0);

    ciphertext1_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext1_we0 <= ap_const_logic_1;
        else 
            ciphertext1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext2_address0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_address0, ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln192_fu_726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ciphertext2_address0 <= zext_ln192_fu_726_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ciphertext2_address0 <= grp_Blowfish_Decrypt_fu_237_ciphertext_address0;
        else 
            ciphertext2_address0 <= "XXX";
        end if; 
    end process;


    ciphertext2_ce0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ciphertext2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ciphertext2_ce0 <= grp_Blowfish_Decrypt_fu_237_ciphertext_ce0;
        else 
            ciphertext2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext2_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_ciphertext_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ciphertext2_ce1 <= grp_Blowfish_Decrypt_fu_237_ciphertext_ce1;
        else 
            ciphertext2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext2_d0 <= p_Result_14_fu_716_p2(8 - 1 downto 0);

    ciphertext2_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ciphertext2_we0 <= ap_const_logic_1;
        else 
            ciphertext2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext1_address0_assign_proc : process(ap_CS_fsm_state9, grp_Blowfish_Decrypt_fu_237_decryptedtext_address0, ap_CS_fsm_state6, zext_ln202_fu_747_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decryptedtext1_address0 <= zext_ln202_fu_747_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext1_address0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_address0;
        else 
            decryptedtext1_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext1_ce0_assign_proc : process(ap_CS_fsm_state9, grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decryptedtext1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext1_ce0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0;
        else 
            decryptedtext1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext1_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext1_ce1 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1;
        else 
            decryptedtext1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext1_we0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext1_we0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_we0;
        else 
            decryptedtext1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext1_we1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext1_we1 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_we1;
        else 
            decryptedtext1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext2_address0_assign_proc : process(ap_CS_fsm_state11, grp_Blowfish_Decrypt_fu_237_decryptedtext_address0, ap_CS_fsm_state8, zext_ln207_fu_913_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext2_address0 <= zext_ln207_fu_913_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            decryptedtext2_address0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_address0;
        else 
            decryptedtext2_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext2_ce0_assign_proc : process(ap_CS_fsm_state11, grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            decryptedtext2_ce0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_ce0;
        else 
            decryptedtext2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext2_ce1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            decryptedtext2_ce1 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_ce1;
        else 
            decryptedtext2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext2_we0_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            decryptedtext2_we0 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_we0;
        else 
            decryptedtext2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext2_we1_assign_proc : process(grp_Blowfish_Decrypt_fu_237_decryptedtext_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            decryptedtext2_we1 <= grp_Blowfish_Decrypt_fu_237_decryptedtext_we1;
        else 
            decryptedtext2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Blowfish_Decrypt_fu_237_ap_start <= grp_Blowfish_Decrypt_fu_237_ap_start_reg;

    grp_Blowfish_Decrypt_fu_237_ciphertext_q0_assign_proc : process(ciphertext1_q0, ciphertext2_q0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q0 <= ciphertext2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q0 <= ciphertext1_q0;
        else 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_Blowfish_Decrypt_fu_237_ciphertext_q1_assign_proc : process(ciphertext1_q1, ciphertext2_q1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q1 <= ciphertext2_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q1 <= ciphertext1_q1;
        else 
            grp_Blowfish_Decrypt_fu_237_ciphertext_q1 <= "XXXXXXXX";
        end if; 
    end process;

    i_10_fu_737_p2 <= std_logic_vector(unsigned(i_0_i25_reg_204) + unsigned(ap_const_lv4_1));
    i_11_fu_903_p2 <= std_logic_vector(unsigned(i1_0_i31_reg_226) + unsigned(ap_const_lv4_1));
    i_9_fu_603_p2 <= std_logic_vector(unsigned(i1_0_i_reg_180) + unsigned(ap_const_lv4_1));
    i_fu_469_p2 <= std_logic_vector(unsigned(i_0_i_reg_168) + unsigned(ap_const_lv4_1));
    icmp_ln180_fu_463_p2 <= "1" when (i_0_i_reg_168 = ap_const_lv4_8) else "0";
    icmp_ln188_fu_597_p2 <= "1" when (i1_0_i_reg_180 = ap_const_lv4_8) else "0";
    icmp_ln201_fu_731_p2 <= "1" when (i_0_i25_reg_204 = ap_const_lv4_8) else "0";
    icmp_ln206_fu_897_p2 <= "1" when (i1_0_i31_reg_226 = ap_const_lv4_8) else "0";
    icmp_ln388_2_fu_952_p2 <= "1" when (unsigned(Lo_assign_9_fu_939_p4) > unsigned(Hi_assign_9_fu_931_p3)) else "0";
    icmp_ln388_fu_769_p2 <= "1" when (unsigned(Lo_assign_8_fu_752_p3) > unsigned(or_ln202_fu_759_p2)) else "0";
    icmp_ln681_2_fu_627_p2 <= "1" when (unsigned(Lo_assign_7_fu_613_p3) > unsigned(or_ln192_fu_621_p2)) else "0";
    icmp_ln681_fu_493_p2 <= "1" when (unsigned(Lo_assign_fu_479_p3) > unsigned(or_ln184_fu_487_p2)) else "0";
    lower_64_V_fu_449_p1 <= ciphertext_V(64 - 1 downto 0);
    lshr_ln388_2_fu_1044_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln388_22_fu_1010_p1(31-1 downto 0)))));
    lshr_ln388_fu_861_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln388_17_fu_827_p1(31-1 downto 0)))));
    lshr_ln681_5_fu_576_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_13_fu_573_p1(31-1 downto 0)))));
    lshr_ln681_6_fu_701_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_11_fu_676_p3),to_integer(unsigned('0' & zext_ln681_16_fu_697_p1(31-1 downto 0)))));
    lshr_ln681_7_fu_710_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_17_fu_707_p1(31-1 downto 0)))));
    lshr_ln681_fu_567_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_8_fu_542_p3),to_integer(unsigned('0' & zext_ln681_12_fu_563_p1(31-1 downto 0)))));
    or_ln184_fu_487_p2 <= (ap_const_lv6_7 or Lo_assign_fu_479_p3);
    or_ln192_fu_621_p2 <= (ap_const_lv6_7 or Lo_assign_7_fu_613_p3);
    or_ln202_fu_759_p2 <= (ap_const_lv6_7 or Lo_assign_8_fu_752_p3);
    or_ln207_fu_925_p2 <= (shl_ln_fu_918_p3 or ap_const_lv6_7);
    p_Result_14_fu_716_p2 <= (lshr_ln681_7_fu_710_p2 and lshr_ln681_6_reg_1127);
    p_Result_17_fu_891_p2 <= (and_ln388_9_fu_885_p2 or and_ln388_8_fu_879_p2);
    p_Result_18_fu_1074_p2 <= (and_ln388_12_fu_1068_p2 or and_ln388_11_fu_1062_p2);
    p_Result_s_fu_582_p2 <= (lshr_ln681_reg_1109 and lshr_ln681_5_fu_576_p2);
    select_ln388_11_fu_797_p3 <= 
        zext_ln388_14_fu_779_p1 when (icmp_ln388_fu_769_p2(0) = '1') else 
        zext_ln388_fu_775_p1;
    select_ln388_12_fu_805_p3 <= 
        xor_ln388_fu_783_p2 when (icmp_ln388_fu_769_p2(0) = '1') else 
        zext_ln388_fu_775_p1;
    select_ln388_13_fu_847_p3 <= 
        tmp_20_fu_837_p4 when (icmp_ln388_fu_769_p2(0) = '1') else 
        shl_ln388_fu_831_p2;
    select_ln388_14_fu_972_p3 <= 
        zext_ln388_18_fu_958_p1 when (icmp_ln388_2_fu_952_p2(0) = '1') else 
        zext_ln388_19_fu_962_p1;
    select_ln388_15_fu_980_p3 <= 
        zext_ln388_19_fu_962_p1 when (icmp_ln388_2_fu_952_p2(0) = '1') else 
        zext_ln388_18_fu_958_p1;
    select_ln388_16_fu_988_p3 <= 
        xor_ln388_10_fu_966_p2 when (icmp_ln388_2_fu_952_p2(0) = '1') else 
        zext_ln388_18_fu_958_p1;
    select_ln388_17_fu_1030_p3 <= 
        tmp_21_fu_1020_p4 when (icmp_ln388_2_fu_952_p2(0) = '1') else 
        shl_ln388_6_fu_1014_p2;
    select_ln388_fu_789_p3 <= 
        zext_ln388_fu_775_p1 when (icmp_ln388_fu_769_p2(0) = '1') else 
        zext_ln388_14_fu_779_p1;
    select_ln681_10_fu_668_p3 <= 
        sub_ln681_10_fu_650_p2 when (icmp_ln681_2_fu_627_p2(0) = '1') else 
        sub_ln681_11_fu_662_p2;
    select_ln681_11_fu_676_p3 <= 
        tmp_19_fu_641_p4 when (icmp_ln681_2_fu_627_p2(0) = '1') else 
        upper_64_V_reg_1091;
    select_ln681_12_fu_683_p3 <= 
        xor_ln681_2_fu_656_p2 when (icmp_ln681_2_fu_627_p2(0) = '1') else 
        zext_ln681_14_fu_633_p1;
    select_ln681_8_fu_542_p3 <= 
        tmp_fu_507_p4 when (icmp_ln681_fu_493_p2(0) = '1') else 
        lower_64_V_reg_1086;
    select_ln681_9_fu_549_p3 <= 
        xor_ln681_fu_522_p2 when (icmp_ln681_fu_493_p2(0) = '1') else 
        zext_ln681_fu_499_p1;
    select_ln681_fu_534_p3 <= 
        sub_ln681_fu_516_p2 when (icmp_ln681_fu_493_p2(0) = '1') else 
        sub_ln681_8_fu_528_p2;
    shl_ln388_5_fu_855_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln388_16_fu_823_p1(31-1 downto 0)))));
    shl_ln388_6_fu_1014_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_5_fu_948_p1),to_integer(unsigned('0' & zext_ln388_20_fu_1002_p1(31-1 downto 0)))));
    shl_ln388_7_fu_1038_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln388_21_fu_1006_p1(31-1 downto 0)))));
    shl_ln388_fu_831_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_765_p1),to_integer(unsigned('0' & zext_ln388_15_fu_819_p1(31-1 downto 0)))));
    shl_ln_fu_918_p3 <= (trunc_ln207_reg_1163 & ap_const_lv3_0);
    sub_ln681_10_fu_650_p2 <= std_logic_vector(unsigned(zext_ln681_14_fu_633_p1) - unsigned(zext_ln681_15_fu_637_p1));
    sub_ln681_11_fu_662_p2 <= std_logic_vector(unsigned(zext_ln681_15_fu_637_p1) - unsigned(zext_ln681_14_fu_633_p1));
    sub_ln681_12_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_10_fu_668_p3));
    sub_ln681_8_fu_528_p2 <= std_logic_vector(unsigned(zext_ln681_11_fu_503_p1) - unsigned(zext_ln681_fu_499_p1));
    sub_ln681_9_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_fu_534_p3));
    sub_ln681_fu_516_p2 <= std_logic_vector(unsigned(zext_ln681_fu_499_p1) - unsigned(zext_ln681_11_fu_503_p1));
    
    tmp_19_fu_641_p4_proc : process(ciphertext_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_19_fu_641_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_40(7 - 1 downto 0);
        v0_cpy := ciphertext_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_40(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_19_fu_641_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_19_fu_641_p4_i) := ciphertext_V(128-1-tmp_19_fu_641_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_641_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_20_fu_837_p4_proc : process(shl_ln388_fu_831_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_20_fu_837_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln388_fu_831_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_20_fu_837_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_20_fu_837_p4_i) := shl_ln388_fu_831_p2(128-1-tmp_20_fu_837_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_837_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_21_fu_1020_p4_proc : process(shl_ln388_6_fu_1014_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_21_fu_1020_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln388_6_fu_1014_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_21_fu_1020_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_21_fu_1020_p4_i) := shl_ln388_6_fu_1014_p2(128-1-tmp_21_fu_1020_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_21_fu_1020_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_V_5_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decryptedtext2_q0),128));
    tmp_V_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decryptedtext1_q0),128));
    
    tmp_fu_507_p4_proc : process(ciphertext_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_507_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_3F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := ciphertext_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_3F(7-1 downto 0)));
            for tmp_fu_507_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_507_p4_i) := ciphertext_V(128-1-tmp_fu_507_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_507_p4 <= resvalue(64-1 downto 0);
    end process;

    trunc_ln184_fu_475_p1 <= i_0_i_reg_168(3 - 1 downto 0);
    trunc_ln192_fu_609_p1 <= i1_0_i_reg_180(3 - 1 downto 0);
    trunc_ln202_fu_743_p1 <= i_0_i25_reg_204(3 - 1 downto 0);
    trunc_ln207_fu_909_p1 <= i1_0_i31_reg_226(3 - 1 downto 0);
    xor_ln388_10_fu_966_p2 <= (zext_ln388_18_fu_958_p1 xor ap_const_lv8_7F);
    xor_ln388_11_fu_996_p2 <= (select_ln388_14_fu_972_p3 xor ap_const_lv8_7F);
    xor_ln388_12_fu_1056_p2 <= (ap_const_lv128_lc_2 xor and_ln388_10_fu_1050_p2);
    xor_ln388_8_fu_813_p2 <= (select_ln388_fu_789_p3 xor ap_const_lv8_7F);
    xor_ln388_9_fu_873_p2 <= (ap_const_lv128_lc_2 xor and_ln388_fu_867_p2);
    xor_ln388_fu_783_p2 <= (zext_ln388_fu_775_p1 xor ap_const_lv8_7F);
    xor_ln681_2_fu_656_p2 <= (zext_ln681_14_fu_633_p1 xor ap_const_lv7_3F);
    xor_ln681_fu_522_p2 <= (zext_ln681_fu_499_p1 xor ap_const_lv7_3F);
    zext_ln184_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_168),64));
    zext_ln192_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_180),64));
    zext_ln202_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i25_reg_204),64));
    zext_ln207_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i31_reg_226),64));
    zext_ln388_14_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln202_fu_759_p2),8));
    zext_ln388_15_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_12_fu_805_p3),128));
    zext_ln388_16_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_11_fu_797_p3),128));
    zext_ln388_17_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln388_8_fu_813_p2),128));
    zext_ln388_18_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_9_fu_939_p4),8));
    zext_ln388_19_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_9_fu_931_p3),8));
    zext_ln388_20_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_16_fu_988_p3),128));
    zext_ln388_21_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_15_fu_980_p3),128));
    zext_ln388_22_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln388_11_fu_996_p2),128));
    zext_ln388_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_8_fu_752_p3),8));
    zext_ln681_11_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln184_fu_487_p2),7));
    zext_ln681_12_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_9_fu_549_p3),64));
    zext_ln681_13_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_9_reg_1104),64));
    zext_ln681_14_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_7_fu_613_p3),7));
    zext_ln681_15_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln192_fu_621_p2),7));
    zext_ln681_16_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_12_fu_683_p3),64));
    zext_ln681_17_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_12_reg_1122),64));
    zext_ln681_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_479_p3),7));
end behav;
