-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decrypt_aes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_V : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of decrypt_aes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln46_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln47_fu_194_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_536 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln681_9_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_9_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln49_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_315_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_reg_546 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_6_fu_351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_554 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln56_fu_357_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln56_reg_559 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln55_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_505_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal aes_input_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aes_input_ce0 : STD_LOGIC;
    signal aes_input_we0 : STD_LOGIC;
    signal aes_input_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_input_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_decrypt_fu_167_ap_start : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_ap_done : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_ap_idle : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_ap_ready : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_decrypt_fu_167_input_r_ce0 : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_decrypt_fu_167_output_r_ce0 : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_output_r_we0 : STD_LOGIC;
    signal grp_aes_decrypt_fu_167_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln46_reg_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln46_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln47_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln47_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_s_reg_144 : STD_LOGIC_VECTOR (127 downto 0);
    signal i1_0_reg_156 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_decrypt_fu_167_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln46_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln50_1_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_223_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Lo_assign_fu_227_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln50_fu_235_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln681_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln681_11_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln681_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_8_fu_276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_255_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln681_fu_270_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_fu_282_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_9_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_8_fu_290_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln681_12_fu_311_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln681_13_fu_321_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_5_fu_324_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_330_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal Lo_assign_6_fu_366_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln56_fu_373_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln388_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln388_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln388_5_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_fu_403_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_5_fu_419_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_4_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln388_3_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_379_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_6_fu_433_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_fu_445_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_6_fu_451_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_7_fu_437_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln388_8_fu_441_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln388_2_fu_469_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln388_fu_475_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_fu_481_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln388_4_fu_487_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln388_6_fu_461_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_3_fu_493_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln388_4_fu_499_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component aes_decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_main_roundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    aes_input_U : component aes_main_roundKey
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aes_input_address0,
        ce0 => aes_input_ce0,
        we0 => aes_input_we0,
        d0 => aes_input_d0,
        q0 => aes_input_q0);

    output_U : component aes_main_roundKey
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0);

    grp_aes_decrypt_fu_167 : component aes_decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_decrypt_fu_167_ap_start,
        ap_done => grp_aes_decrypt_fu_167_ap_done,
        ap_idle => grp_aes_decrypt_fu_167_ap_idle,
        ap_ready => grp_aes_decrypt_fu_167_ap_ready,
        input_r_address0 => grp_aes_decrypt_fu_167_input_r_address0,
        input_r_ce0 => grp_aes_decrypt_fu_167_input_r_ce0,
        input_r_q0 => aes_input_q0,
        output_r_address0 => grp_aes_decrypt_fu_167_output_r_address0,
        output_r_ce0 => grp_aes_decrypt_fu_167_output_r_ce0,
        output_r_we0 => grp_aes_decrypt_fu_167_output_r_we0,
        output_r_d0 => grp_aes_decrypt_fu_167_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_2;
            else
                if (((icmp_ln55_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_preg <= p_Val2_s_reg_144;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_decrypt_fu_167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_decrypt_fu_167_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln49_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_aes_decrypt_fu_167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_decrypt_fu_167_ap_ready = ap_const_logic_1)) then 
                    grp_aes_decrypt_fu_167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i1_0_reg_156 <= i_6_reg_554;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_decrypt_fu_167_ap_done = ap_const_logic_1))) then 
                i1_0_reg_156 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln47_fu_205_p2 = ap_const_lv1_1))) then 
                i_0_reg_132 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_132 <= i_reg_536;
            end if; 
        end if;
    end process;

    phi_ln46_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln46_reg_110 <= add_ln46_fu_177_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln46_reg_110 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln47_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_188_p2 = ap_const_lv1_1))) then 
                phi_ln47_reg_121 <= ap_const_lv4_0;
            elsif (((icmp_ln47_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln47_reg_121 <= add_ln47_fu_194_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_6_reg_554 <= i_6_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_536 <= i_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                lshr_ln681_reg_546 <= lshr_ln681_fu_315_p2;
                    sub_ln681_9_reg_541(7 downto 1) <= sub_ln681_9_fu_305_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_s_reg_144 <= p_Result_17_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                trunc_ln56_reg_559 <= trunc_ln56_fu_357_p1;
            end if;
        end if;
    end process;
    sub_ln681_9_reg_541(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln49_fu_211_p2, ap_CS_fsm_state7, icmp_ln55_fu_345_p2, grp_aes_decrypt_fu_167_ap_done, icmp_ln46_fu_188_p2, icmp_ln47_fu_205_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln47_fu_205_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln49_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_decrypt_fu_167_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln55_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    Lo_assign_6_fu_366_p3 <= (trunc_ln56_reg_559 & ap_const_lv3_0);
    Lo_assign_fu_227_p3 <= (trunc_ln50_fu_223_p1 & ap_const_lv3_0);
    add_ln46_fu_177_p2 <= std_logic_vector(unsigned(phi_ln46_reg_110) + unsigned(ap_const_lv4_1));
    add_ln47_fu_194_p2 <= std_logic_vector(unsigned(phi_ln47_reg_121) + unsigned(ap_const_lv4_1));

    aes_input_address0_assign_proc : process(ap_CS_fsm_state2, grp_aes_decrypt_fu_167_input_r_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln46_fu_183_p1, zext_ln50_fu_340_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            aes_input_address0 <= zext_ln50_fu_340_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            aes_input_address0 <= zext_ln46_fu_183_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aes_input_address0 <= grp_aes_decrypt_fu_167_input_r_address0;
        else 
            aes_input_address0 <= "XXXX";
        end if; 
    end process;


    aes_input_ce0_assign_proc : process(ap_CS_fsm_state2, grp_aes_decrypt_fu_167_input_r_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            aes_input_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aes_input_ce0 <= grp_aes_decrypt_fu_167_input_r_ce0;
        else 
            aes_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_input_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, trunc_ln50_1_fu_335_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            aes_input_d0 <= trunc_ln50_1_fu_335_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            aes_input_d0 <= ap_const_lv8_0;
        else 
            aes_input_d0 <= "XXXXXXXX";
        end if; 
    end process;


    aes_input_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            aes_input_we0 <= ap_const_logic_1;
        else 
            aes_input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln388_3_fu_493_p2 <= (xor_ln388_4_fu_487_p2 and p_Val2_s_reg_144);
    and_ln388_4_fu_499_p2 <= (select_ln388_6_fu_461_p3 and and_ln388_fu_481_p2);
    and_ln388_fu_481_p2 <= (shl_ln388_2_fu_469_p2 and lshr_ln388_fu_475_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln55_fu_345_p2)
    begin
        if ((((icmp_ln55_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln55_fu_345_p2)
    begin
        if (((icmp_ln55_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state7, icmp_ln55_fu_345_p2, p_Val2_s_reg_144, ap_return_preg)
    begin
        if (((icmp_ln55_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return <= p_Val2_s_reg_144;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_aes_decrypt_fu_167_ap_start <= grp_aes_decrypt_fu_167_ap_start_reg;
    i_6_fu_351_p2 <= std_logic_vector(unsigned(i1_0_reg_156) + unsigned(ap_const_lv5_1));
    i_fu_217_p2 <= std_logic_vector(unsigned(i_0_reg_132) + unsigned(ap_const_lv5_1));
    icmp_ln388_fu_383_p2 <= "1" when (unsigned(Lo_assign_6_fu_366_p3) > unsigned(or_ln56_fu_373_p2)) else "0";
    icmp_ln46_fu_188_p2 <= "1" when (phi_ln46_reg_110 = ap_const_lv4_F) else "0";
    icmp_ln47_fu_205_p2 <= "1" when (phi_ln47_reg_121 = ap_const_lv4_F) else "0";
    icmp_ln49_fu_211_p2 <= "1" when (i_0_reg_132 = ap_const_lv5_10) else "0";
    icmp_ln55_fu_345_p2 <= "1" when (i1_0_reg_156 = ap_const_lv5_10) else "0";
    icmp_ln681_fu_241_p2 <= "1" when (unsigned(Lo_assign_fu_227_p3) > unsigned(or_ln50_fu_235_p2)) else "0";
    lshr_ln388_fu_475_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln388_8_fu_441_p1(31-1 downto 0)))));
    lshr_ln681_5_fu_324_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln681_13_fu_321_p1(31-1 downto 0)))));
    lshr_ln681_fu_315_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_8_fu_290_p3),to_integer(unsigned('0' & zext_ln681_12_fu_311_p1(31-1 downto 0)))));
    or_ln50_fu_235_p2 <= (ap_const_lv7_7 or Lo_assign_fu_227_p3);
    or_ln56_fu_373_p2 <= (ap_const_lv7_7 or Lo_assign_6_fu_366_p3);

    output_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_aes_decrypt_fu_167_output_r_address0, ap_CS_fsm_state6, zext_ln47_fu_200_p1, zext_ln56_fu_361_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_address0 <= zext_ln56_fu_361_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_address0 <= zext_ln47_fu_200_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_address0 <= grp_aes_decrypt_fu_167_output_r_address0;
        else 
            output_address0 <= "XXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_aes_decrypt_fu_167_output_r_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_ce0 <= grp_aes_decrypt_fu_167_output_r_ce0;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(ap_CS_fsm_state3, grp_aes_decrypt_fu_167_output_r_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_d0 <= grp_aes_decrypt_fu_167_output_r_d0;
        else 
            output_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state3, grp_aes_decrypt_fu_167_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_we0 <= grp_aes_decrypt_fu_167_output_r_we0;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_17_fu_505_p2 <= (and_ln388_4_fu_499_p2 or and_ln388_3_fu_493_p2);
    p_Result_s_fu_330_p2 <= (lshr_ln681_reg_546 and lshr_ln681_5_fu_324_p2);
    select_ln388_4_fu_411_p3 <= 
        zext_ln388_5_fu_393_p1 when (icmp_ln388_fu_383_p2(0) = '1') else 
        zext_ln388_fu_389_p1;
    select_ln388_5_fu_419_p3 <= 
        xor_ln388_fu_397_p2 when (icmp_ln388_fu_383_p2(0) = '1') else 
        zext_ln388_fu_389_p1;
    select_ln388_6_fu_461_p3 <= 
        tmp_6_fu_451_p4 when (icmp_ln388_fu_383_p2(0) = '1') else 
        shl_ln388_fu_445_p2;
    select_ln388_fu_403_p3 <= 
        zext_ln388_fu_389_p1 when (icmp_ln388_fu_383_p2(0) = '1') else 
        zext_ln388_5_fu_393_p1;
    select_ln681_8_fu_290_p3 <= 
        tmp_fu_255_p4 when (icmp_ln681_fu_241_p2(0) = '1') else 
        ciphertext_V;
    select_ln681_9_fu_297_p3 <= 
        xor_ln681_fu_270_p2 when (icmp_ln681_fu_241_p2(0) = '1') else 
        zext_ln681_fu_247_p1;
    select_ln681_fu_282_p3 <= 
        sub_ln681_fu_264_p2 when (icmp_ln681_fu_241_p2(0) = '1') else 
        sub_ln681_8_fu_276_p2;
    shl_ln388_2_fu_469_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln388_7_fu_437_p1(31-1 downto 0)))));
    shl_ln388_fu_445_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_379_p1),to_integer(unsigned('0' & zext_ln388_6_fu_433_p1(31-1 downto 0)))));
    sub_ln681_8_fu_276_p2 <= std_logic_vector(unsigned(zext_ln681_11_fu_251_p1) - unsigned(zext_ln681_fu_247_p1));
    sub_ln681_9_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln681_fu_282_p3));
    sub_ln681_fu_264_p2 <= std_logic_vector(unsigned(zext_ln681_fu_247_p1) - unsigned(zext_ln681_11_fu_251_p1));
    
    tmp_6_fu_451_p4_proc : process(shl_ln388_fu_445_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_6_fu_451_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln388_fu_445_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_6_fu_451_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_6_fu_451_p4_i) := shl_ln388_fu_445_p2(128-1-tmp_6_fu_451_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_451_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_V_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_q0),128));
    
    tmp_fu_255_p4_proc : process(ciphertext_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_255_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := ciphertext_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_255_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_255_p4_i) := ciphertext_V(128-1-tmp_fu_255_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_255_p4 <= resvalue(128-1 downto 0);
    end process;

    trunc_ln50_1_fu_335_p1 <= p_Result_s_fu_330_p2(8 - 1 downto 0);
    trunc_ln50_fu_223_p1 <= i_0_reg_132(4 - 1 downto 0);
    trunc_ln56_fu_357_p1 <= i1_0_reg_156(4 - 1 downto 0);
    xor_ln388_3_fu_427_p2 <= (select_ln388_fu_403_p3 xor ap_const_lv8_7F);
    xor_ln388_4_fu_487_p2 <= (ap_const_lv128_lc_1 xor and_ln388_fu_481_p2);
    xor_ln388_fu_397_p2 <= (zext_ln388_fu_389_p1 xor ap_const_lv8_7F);
    xor_ln681_fu_270_p2 <= (zext_ln681_fu_247_p1 xor ap_const_lv8_7F);
    zext_ln388_5_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_fu_373_p2),8));
    zext_ln388_6_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_5_fu_419_p3),128));
    zext_ln388_7_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_4_fu_411_p3),128));
    zext_ln388_8_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln388_3_fu_427_p2),128));
    zext_ln388_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_6_fu_366_p3),8));
    zext_ln46_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln46_reg_110),64));
    zext_ln47_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln47_reg_121),64));
    zext_ln50_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_132),64));
    zext_ln56_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_156),64));
    zext_ln681_11_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln50_fu_235_p2),8));
    zext_ln681_12_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_9_fu_297_p3),128));
    zext_ln681_13_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_9_reg_541),128));
    zext_ln681_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_227_p3),8));
end behav;
