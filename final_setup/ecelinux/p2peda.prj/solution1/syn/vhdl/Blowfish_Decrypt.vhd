-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce0 : OUT STD_LOGIC;
    decryptedtext_we0 : OUT STD_LOGIC;
    decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce1 : OUT STD_LOGIC;
    decryptedtext_we1 : OUT STD_LOGIC;
    decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_Decrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ciphertext_load_reg_848 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ciphertext_load_1_reg_853 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_2_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ciphertext_load_3_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_4_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ciphertext_load_5_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal left_8_fu_527_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_6_fu_535_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_reg_1017 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln58_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_reg_1022 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_12_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_12_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_725_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1052 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln81_4_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_4_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal right_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln8_reg_1067 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln9_reg_1072 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln10_reg_1077 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln172_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln172_reg_1082 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_9_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_7_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_482_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_478 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln59_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln81_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_8_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_9_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_10_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln168_fu_796_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_545_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln65_5_fu_574_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_4_fu_571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_3_fu_567_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_2_fu_564_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal left_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln65_2_fu_589_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln65_1_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln59_5_fu_647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln59_4_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln59_3_fu_639_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln59_2_fu_635_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln59_2_fu_663_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln59_1_fu_657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln59_1_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_fu_627_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_fu_669_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_679_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_689_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln81_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_5_fu_771_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln64_4_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln64_3_fu_764_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln64_2_fu_761_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_1_fu_792_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_8_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln64_2_fu_786_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln64_1_fu_780_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln64_1_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln64_fu_754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_603 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_478 <= i_reg_1052;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_478 <= ap_const_lv5_11;
            end if; 
        end if;
    end process;

    left_9_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                left_9_reg_458 <= left_12_reg_1027;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                left_9_reg_458 <= right_6_fu_535_p5;
            end if; 
        end if;
    end process;

    phi_ln59_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_555_p2 = ap_const_lv1_0))) then
                if ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_2)) then 
                    phi_ln59_reg_490 <= P_2_read;
                elsif ((ap_const_boolean_1 = ap_condition_603)) then 
                    phi_ln59_reg_490 <= P_17_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_10)) then 
                    phi_ln59_reg_490 <= P_16_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_F)) then 
                    phi_ln59_reg_490 <= P_15_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_E)) then 
                    phi_ln59_reg_490 <= P_14_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_D)) then 
                    phi_ln59_reg_490 <= P_13_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_C)) then 
                    phi_ln59_reg_490 <= P_12_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_B)) then 
                    phi_ln59_reg_490 <= P_11_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_A)) then 
                    phi_ln59_reg_490 <= P_10_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_9)) then 
                    phi_ln59_reg_490 <= P_9_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_8)) then 
                    phi_ln59_reg_490 <= P_8_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_7)) then 
                    phi_ln59_reg_490 <= P_7_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_6)) then 
                    phi_ln59_reg_490 <= P_6_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_5)) then 
                    phi_ln59_reg_490 <= P_5_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_4)) then 
                    phi_ln59_reg_490 <= P_4_read;
                elsif ((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_3)) then 
                    phi_ln59_reg_490 <= P_3_read;
                end if;
            end if; 
        end if;
    end process;

    right_7_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                right_7_reg_468 <= right_fu_749_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                right_7_reg_468 <= left_8_fu_527_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln81_4_reg_1057 <= add_ln81_4_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ciphertext_load_1_reg_853 <= ciphertext_q1;
                ciphertext_load_reg_848 <= ciphertext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ciphertext_load_2_reg_868 <= ciphertext_q0;
                ciphertext_load_3_reg_873 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ciphertext_load_4_reg_888 <= ciphertext_q0;
                ciphertext_load_5_reg_893 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_1052 <= i_fu_725_p2;
                left_12_reg_1027 <= left_12_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln10_reg_1077 <= xor_ln64_1_fu_780_p2(15 downto 8);
                trunc_ln8_reg_1067 <= right_8_fu_775_p2(31 downto 24);
                trunc_ln9_reg_1072 <= xor_ln64_2_fu_786_p2(23 downto 16);
                xor_ln172_reg_1082 <= xor_ln172_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_555_p2 = ap_const_lv1_1))) then
                trunc_ln65_reg_1017 <= trunc_ln65_fu_561_p1;
                trunc_ln7_reg_1022 <= xor_ln65_1_fu_583_p2(15 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln58_fu_555_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_555_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    S_0_address0 <= zext_ln81_fu_705_p1(8 - 1 downto 0);

    S_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_0_ce0 <= ap_const_logic_1;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= zext_ln81_8_fu_710_p1(8 - 1 downto 0);

    S_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_1_ce0 <= ap_const_logic_1;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= zext_ln81_9_fu_715_p1(8 - 1 downto 0);

    S_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_2_ce0 <= ap_const_logic_1;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= zext_ln81_10_fu_720_p1(8 - 1 downto 0);

    S_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_3_ce0 <= ap_const_logic_1;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_669_p4 <= left_12_fu_651_p2(31 downto 24);
    add_ln81_4_fu_743_p2 <= std_logic_vector(unsigned(S_3_q0) + unsigned(xor_ln81_fu_737_p2));
    add_ln81_fu_731_p2 <= std_logic_vector(unsigned(S_0_q0) + unsigned(S_1_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_603_assign_proc : process(ap_phi_mux_i_0_phi_fu_482_p4)
    begin
                ap_condition_603 <= (not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_0_phi_fu_482_p4 = ap_const_lv5_3)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_482_p4 <= i_0_reg_478;

    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_679_p4 <= xor_ln59_2_fu_663_p2(23 downto 16);
    c_fu_689_p4 <= xor_ln59_1_fu_657_p2(15 downto 8);

    ciphertext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_699_p2 <= (trunc_ln59_fu_627_p1 xor trunc_ln59_1_fu_631_p1);

    decryptedtext_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            decryptedtext_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            decryptedtext_address1 <= "XXX";
        end if; 
    end process;


    decryptedtext_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            decryptedtext_ce0 <= ap_const_logic_1;
        else 
            decryptedtext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            decryptedtext_ce1 <= ap_const_logic_1;
        else 
            decryptedtext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_d0_assign_proc : process(ap_CS_fsm_state6, trunc_ln7_reg_1022, trunc_ln8_reg_1067, ap_CS_fsm_state10, trunc_ln10_reg_1077, ap_CS_fsm_state11, ap_CS_fsm_state12, left_fu_578_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d0 <= trunc_ln10_reg_1077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d0 <= trunc_ln8_reg_1067;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d0 <= trunc_ln7_reg_1022;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_d0 <= left_fu_578_p2(31 downto 24);
        else 
            decryptedtext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_d1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, trunc_ln9_reg_1072, xor_ln172_reg_1082, ap_CS_fsm_state11, ap_CS_fsm_state12, xor_ln168_fu_796_p2, xor_ln65_2_fu_589_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d1 <= xor_ln172_reg_1082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d1 <= trunc_ln9_reg_1072;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d1 <= xor_ln168_fu_796_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_d1 <= xor_ln65_2_fu_589_p2(23 downto 16);
        else 
            decryptedtext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln58_fu_555_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_555_p2 = ap_const_lv1_1)))) then 
            decryptedtext_we0 <= ap_const_logic_1;
        else 
            decryptedtext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_we1_assign_proc : process(ap_CS_fsm_state6, icmp_ln58_fu_555_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_555_p2 = ap_const_lv1_1)))) then 
            decryptedtext_we1 <= ap_const_logic_1;
        else 
            decryptedtext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_725_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(i_0_reg_478));
    icmp_ln58_fu_555_p2 <= "1" when (tmp_fu_545_p4 = ap_const_lv4_0) else "0";
    left_12_fu_651_p2 <= (right_7_reg_468 xor phi_ln59_reg_490);
    left_8_fu_527_p5 <= (((ciphertext_load_reg_848 & ciphertext_load_1_reg_853) & ciphertext_load_2_reg_868) & ciphertext_load_3_reg_873);
    left_fu_578_p2 <= (left_9_reg_458 xor P_0_read);
    right_6_fu_535_p5 <= (((ciphertext_load_4_reg_888 & ciphertext_load_5_reg_893) & ciphertext_q0) & ciphertext_q1);
    right_8_fu_775_p2 <= (right_7_reg_468 xor P_1_read);
    right_fu_749_p2 <= (left_9_reg_458 xor add_ln81_4_reg_1057);
    tmp_fu_545_p4 <= i_0_reg_478(4 downto 1);
    trunc_ln59_1_fu_631_p1 <= right_7_reg_468(8 - 1 downto 0);
    trunc_ln59_2_fu_635_p1 <= phi_ln59_reg_490(24 - 1 downto 0);
    trunc_ln59_3_fu_639_p1 <= right_7_reg_468(24 - 1 downto 0);
    trunc_ln59_4_fu_643_p1 <= phi_ln59_reg_490(16 - 1 downto 0);
    trunc_ln59_5_fu_647_p1 <= right_7_reg_468(16 - 1 downto 0);
    trunc_ln59_fu_627_p1 <= phi_ln59_reg_490(8 - 1 downto 0);
    trunc_ln64_1_fu_757_p1 <= right_7_reg_468(8 - 1 downto 0);
    trunc_ln64_2_fu_761_p1 <= P_1_read(24 - 1 downto 0);
    trunc_ln64_3_fu_764_p1 <= right_7_reg_468(24 - 1 downto 0);
    trunc_ln64_4_fu_768_p1 <= P_1_read(16 - 1 downto 0);
    trunc_ln64_5_fu_771_p1 <= right_7_reg_468(16 - 1 downto 0);
    trunc_ln64_fu_754_p1 <= P_1_read(8 - 1 downto 0);
    trunc_ln65_1_fu_792_p1 <= left_9_reg_458(8 - 1 downto 0);
    trunc_ln65_2_fu_564_p1 <= P_0_read(24 - 1 downto 0);
    trunc_ln65_3_fu_567_p1 <= left_9_reg_458(24 - 1 downto 0);
    trunc_ln65_4_fu_571_p1 <= P_0_read(16 - 1 downto 0);
    trunc_ln65_5_fu_574_p1 <= left_9_reg_458(16 - 1 downto 0);
    trunc_ln65_fu_561_p1 <= P_0_read(8 - 1 downto 0);
    xor_ln168_fu_796_p2 <= (trunc_ln65_reg_1017 xor trunc_ln65_1_fu_792_p1);
    xor_ln172_fu_832_p2 <= (trunc_ln64_fu_754_p1 xor trunc_ln64_1_fu_757_p1);
    xor_ln59_1_fu_657_p2 <= (trunc_ln59_5_fu_647_p1 xor trunc_ln59_4_fu_643_p1);
    xor_ln59_2_fu_663_p2 <= (trunc_ln59_3_fu_639_p1 xor trunc_ln59_2_fu_635_p1);
    xor_ln64_1_fu_780_p2 <= (trunc_ln64_5_fu_771_p1 xor trunc_ln64_4_fu_768_p1);
    xor_ln64_2_fu_786_p2 <= (trunc_ln64_3_fu_764_p1 xor trunc_ln64_2_fu_761_p1);
    xor_ln65_1_fu_583_p2 <= (trunc_ln65_5_fu_574_p1 xor trunc_ln65_4_fu_571_p1);
    xor_ln65_2_fu_589_p2 <= (trunc_ln65_3_fu_567_p1 xor trunc_ln65_2_fu_564_p1);
    xor_ln81_fu_737_p2 <= (add_ln81_fu_731_p2 xor S_2_q0);
    zext_ln81_10_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_699_p2),64));
    zext_ln81_8_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_679_p4),64));
    zext_ln81_9_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_689_p4),64));
    zext_ln81_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_669_p4),64));
end behav;
