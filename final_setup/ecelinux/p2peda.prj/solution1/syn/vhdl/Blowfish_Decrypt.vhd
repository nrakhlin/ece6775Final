-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce0 : OUT STD_LOGIC;
    decryptedtext_we0 : OUT STD_LOGIC;
    decryptedtext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    decryptedtext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    decryptedtext_ce1 : OUT STD_LOGIC;
    decryptedtext_we1 : OUT STD_LOGIC;
    decryptedtext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Blowfish_Decrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_E7 : STD_LOGIC_VECTOR (7 downto 0) := "11100111";
    constant ap_const_lv8_61 : STD_LOGIC_VECTOR (7 downto 0) := "01100001";
    constant ap_const_lv8_4F : STD_LOGIC_VECTOR (7 downto 0) := "01001111";
    constant ap_const_lv8_4D : STD_LOGIC_VECTOR (7 downto 0) := "01001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_0_ce0 : STD_LOGIC;
    signal S_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_1_ce0 : STD_LOGIC;
    signal S_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_2_ce0 : STD_LOGIC;
    signal S_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_3_ce0 : STD_LOGIC;
    signal S_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ciphertext_load_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ciphertext_load_1_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_2_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ciphertext_load_3_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_load_4_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ciphertext_load_5_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_fu_344_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal right_1_fu_352_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln109_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_720 : STD_LOGIC_VECTOR (4 downto 0);
    signal left_4_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_4_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln140_1_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln140_1_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal right_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln115_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln115_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln268_1_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_1_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_2_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln110_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_1_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_2_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_3_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln262_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln263_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln264_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln267_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln268_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln269_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_362_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln262_1_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln263_1_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln110_5_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln110_4_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln110_3_fu_435_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln110_2_fu_431_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln110_2_fu_459_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln110_1_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln110_1_fu_427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln110_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln140_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln140_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_1_fu_548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_fu_544_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln266_1_fu_576_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln267_1_fu_593_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component Blowfish_Decrypt_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Decrypt_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Decrypt_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Decrypt_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_Decrypt_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    P_U : component Blowfish_Decrypt_P
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    S_0_U : component Blowfish_Decrypt_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_0_address0,
        ce0 => S_0_ce0,
        q0 => S_0_q0);

    S_1_U : component Blowfish_Decrypt_hbi
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_1_address0,
        ce0 => S_1_ce0,
        q0 => S_1_q0);

    S_2_U : component Blowfish_Decrypt_ibs
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_2_address0,
        ce0 => S_2_ce0,
        q0 => S_2_q0);

    S_3_U : component Blowfish_Decrypt_jbC
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_3_address0,
        ce0 => S_3_ce0,
        q0 => S_3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_333 <= i_reg_720;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_333 <= ap_const_lv5_11;
            end if; 
        end if;
    end process;

    left_1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                left_1_reg_313 <= left_4_reg_725;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                left_1_reg_313 <= right_1_fu_352_p5;
            end if; 
        end if;
    end process;

    right_2_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                right_2_reg_323 <= right_fu_539_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                right_2_reg_323 <= left_fu_344_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln140_1_reg_750 <= add_ln140_1_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ciphertext_load_1_reg_647 <= ciphertext_q1;
                ciphertext_load_reg_642 <= ciphertext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ciphertext_load_2_reg_662 <= ciphertext_q0;
                ciphertext_load_3_reg_667 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ciphertext_load_4_reg_682 <= ciphertext_q0;
                ciphertext_load_5_reg_687 <= ciphertext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln109_fu_372_p2 = ap_const_lv1_0))) then
                i_reg_720 <= i_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                left_4_reg_725 <= left_4_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln115_reg_760 <= trunc_ln115_fu_572_p1;
                trunc_ln268_1_reg_765 <= right_2_reg_323(15 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln109_fu_372_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln109_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    P_address0 <= zext_ln110_fu_378_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_address0 <= zext_ln140_fu_501_p1(8 - 1 downto 0);

    S_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_0_ce0 <= ap_const_logic_1;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_address0 <= zext_ln140_1_fu_506_p1(8 - 1 downto 0);

    S_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_1_ce0 <= ap_const_logic_1;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= zext_ln140_2_fu_511_p1(8 - 1 downto 0);

    S_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_2_ce0 <= ap_const_logic_1;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= zext_ln140_3_fu_516_p1(8 - 1 downto 0);

    S_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_3_ce0 <= ap_const_logic_1;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_465_p4 <= left_4_fu_447_p2(31 downto 24);
    add_ln140_1_fu_533_p2 <= std_logic_vector(unsigned(S_3_q0) + unsigned(xor_ln140_fu_527_p2));
    add_ln140_fu_521_p2 <= std_logic_vector(unsigned(S_0_q0) + unsigned(S_1_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_475_p4 <= xor_ln110_2_fu_459_p2(23 downto 16);
    c_fu_485_p4 <= xor_ln110_1_fu_453_p2(15 downto 8);

    ciphertext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_495_p2 <= (trunc_ln110_fu_423_p1 xor trunc_ln110_1_fu_427_p1);

    decryptedtext_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            decryptedtext_address0 <= "XXX";
        end if; 
    end process;


    decryptedtext_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            decryptedtext_address1 <= "XXX";
        end if; 
    end process;


    decryptedtext_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            decryptedtext_ce0 <= ap_const_logic_1;
        else 
            decryptedtext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            decryptedtext_ce1 <= ap_const_logic_1;
        else 
            decryptedtext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, xor_ln262_fu_399_p2, xor_ln264_fu_558_p2, xor_ln266_fu_586_p2, xor_ln268_fu_620_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d0 <= xor_ln268_fu_620_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d0 <= xor_ln266_fu_586_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d0 <= xor_ln264_fu_558_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_d0 <= xor_ln262_fu_399_p2;
        else 
            decryptedtext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_d1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, xor_ln263_fu_416_p2, xor_ln265_fu_565_p2, xor_ln267_fu_603_p2, xor_ln269_fu_626_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decryptedtext_d1 <= xor_ln269_fu_626_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            decryptedtext_d1 <= xor_ln267_fu_603_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            decryptedtext_d1 <= xor_ln265_fu_565_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            decryptedtext_d1 <= xor_ln263_fu_416_p2;
        else 
            decryptedtext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    decryptedtext_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_372_p2, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln109_fu_372_p2 = ap_const_lv1_1)))) then 
            decryptedtext_we0 <= ap_const_logic_1;
        else 
            decryptedtext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decryptedtext_we1_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_372_p2, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln109_fu_372_p2 = ap_const_lv1_1)))) then 
            decryptedtext_we1 <= ap_const_logic_1;
        else 
            decryptedtext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_383_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(i_0_reg_333));
    icmp_ln109_fu_372_p2 <= "1" when (tmp_fu_362_p4 = ap_const_lv4_0) else "0";
    left_4_fu_447_p2 <= (right_2_reg_323 xor P_q0);
    left_fu_344_p5 <= (((ciphertext_load_reg_642 & ciphertext_load_1_reg_647) & ciphertext_load_2_reg_662) & ciphertext_load_3_reg_667);
    right_1_fu_352_p5 <= (((ciphertext_load_4_reg_682 & ciphertext_load_5_reg_687) & ciphertext_q0) & ciphertext_q1);
    right_fu_539_p2 <= (left_1_reg_313 xor add_ln140_1_reg_750);
    tmp_fu_362_p4 <= i_0_reg_333(4 downto 1);
    trunc_ln110_1_fu_427_p1 <= right_2_reg_323(8 - 1 downto 0);
    trunc_ln110_2_fu_431_p1 <= right_2_reg_323(24 - 1 downto 0);
    trunc_ln110_3_fu_435_p1 <= P_q0(24 - 1 downto 0);
    trunc_ln110_4_fu_439_p1 <= right_2_reg_323(16 - 1 downto 0);
    trunc_ln110_5_fu_443_p1 <= P_q0(16 - 1 downto 0);
    trunc_ln110_fu_423_p1 <= P_q0(8 - 1 downto 0);
    trunc_ln115_fu_572_p1 <= right_2_reg_323(8 - 1 downto 0);
    trunc_ln116_fu_544_p1 <= left_1_reg_313(8 - 1 downto 0);
    trunc_ln262_1_fu_389_p4 <= left_1_reg_313(31 downto 24);
    trunc_ln263_1_fu_406_p4 <= left_1_reg_313(23 downto 16);
    trunc_ln264_1_fu_548_p4 <= left_1_reg_313(15 downto 8);
    trunc_ln266_1_fu_576_p4 <= right_2_reg_323(31 downto 24);
    trunc_ln267_1_fu_593_p4 <= right_2_reg_323(23 downto 16);
    xor_ln110_1_fu_453_p2 <= (trunc_ln110_5_fu_443_p1 xor trunc_ln110_4_fu_439_p1);
    xor_ln110_2_fu_459_p2 <= (trunc_ln110_3_fu_435_p1 xor trunc_ln110_2_fu_431_p1);
    xor_ln140_fu_527_p2 <= (add_ln140_fu_521_p2 xor S_2_q0);
    xor_ln262_fu_399_p2 <= (trunc_ln262_1_fu_389_p4 xor ap_const_lv8_E1);
    xor_ln263_fu_416_p2 <= (trunc_ln263_1_fu_406_p4 xor ap_const_lv8_A0);
    xor_ln264_fu_558_p2 <= (trunc_ln264_1_fu_548_p4 xor ap_const_lv8_2D);
    xor_ln265_fu_565_p2 <= (trunc_ln116_fu_544_p1 xor ap_const_lv8_C);
    xor_ln266_fu_586_p2 <= (trunc_ln266_1_fu_576_p4 xor ap_const_lv8_E7);
    xor_ln267_fu_603_p2 <= (trunc_ln267_1_fu_593_p4 xor ap_const_lv8_61);
    xor_ln268_fu_620_p2 <= (trunc_ln268_1_reg_765 xor ap_const_lv8_4F);
    xor_ln269_fu_626_p2 <= (trunc_ln115_reg_760 xor ap_const_lv8_4D);
    zext_ln110_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_333),64));
    zext_ln140_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_475_p4),64));
    zext_ln140_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_485_p4),64));
    zext_ln140_3_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_495_p2),64));
    zext_ln140_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_465_p4),64));
end behav;
