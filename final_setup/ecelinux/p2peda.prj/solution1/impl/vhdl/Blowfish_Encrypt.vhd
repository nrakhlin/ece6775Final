-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_Encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce1 : OUT STD_LOGIC;
    plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_we0 : OUT STD_LOGIC;
    ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_we1 : OUT STD_LOGIC;
    ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_0_ce0 : OUT STD_LOGIC;
    S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_1_ce0 : OUT STD_LOGIC;
    S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_2_ce0 : OUT STD_LOGIC;
    S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    S_3_ce0 : OUT STD_LOGIC;
    S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Blowfish_Encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal left_4_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_4_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_432 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal plaintext_load_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal plaintext_load_1_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_load_2_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal plaintext_load_3_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_load_4_reg_736 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal plaintext_load_5_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal left_3_fu_494_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_3_fu_502_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_862_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_518_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_866 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal left_7_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_7_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_feistel_fu_481_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal trunc_ln83_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln2_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln248_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln248_reg_912 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_feistel_fu_481_ap_start : STD_LOGIC;
    signal grp_feistel_fu_481_ap_done : STD_LOGIC;
    signal grp_feistel_fu_481_ap_idle : STD_LOGIC;
    signal grp_feistel_fu_481_ap_ready : STD_LOGIC;
    signal grp_feistel_fu_481_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feistel_fu_481_S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_481_S_0_ce0 : STD_LOGIC;
    signal grp_feistel_fu_481_S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_481_S_1_ce0 : STD_LOGIC;
    signal grp_feistel_fu_481_S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_481_S_2_ce0 : STD_LOGIC;
    signal grp_feistel_fu_481_S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feistel_fu_481_S_3_ce0 : STD_LOGIC;
    signal ap_phi_mux_right_4_phi_fu_425_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_436_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_phi_ln77_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feistel_fu_481_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln244_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln82_5_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln82_4_fu_550_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln82_3_fu_546_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln82_2_fu_543_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln83_5_fu_587_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln83_4_fu_584_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln83_3_fu_580_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln83_2_fu_577_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal left_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln83_2_fu_602_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln83_1_fu_596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal right_5_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln82_2_fu_568_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln82_1_fu_562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln82_1_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln82_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_1_fu_676_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_613 : BOOLEAN;
    signal ap_condition_398 : BOOLEAN;

    component feistel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        S_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_0_ce0 : OUT STD_LOGIC;
        S_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_1_ce0 : OUT STD_LOGIC;
        S_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_2_ce0 : OUT STD_LOGIC;
        S_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        S_3_ce0 : OUT STD_LOGIC;
        S_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_feistel_fu_481 : component feistel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feistel_fu_481_ap_start,
        ap_done => grp_feistel_fu_481_ap_done,
        ap_idle => grp_feistel_fu_481_ap_idle,
        ap_ready => grp_feistel_fu_481_ap_ready,
        x => grp_feistel_fu_481_x,
        S_0_address0 => grp_feistel_fu_481_S_0_address0,
        S_0_ce0 => grp_feistel_fu_481_S_0_ce0,
        S_0_q0 => S_0_q0,
        S_1_address0 => grp_feistel_fu_481_S_1_address0,
        S_1_ce0 => grp_feistel_fu_481_S_1_ce0,
        S_1_q0 => S_1_q0,
        S_2_address0 => grp_feistel_fu_481_S_2_address0,
        S_2_ce0 => grp_feistel_fu_481_S_2_ce0,
        S_2_q0 => S_2_q0,
        S_3_address0 => grp_feistel_fu_481_S_3_address0,
        S_3_ce0 => grp_feistel_fu_481_S_3_ce0,
        S_3_q0 => S_3_q0,
        ap_return => grp_feistel_fu_481_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_feistel_fu_481_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feistel_fu_481_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_512_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_feistel_fu_481_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feistel_fu_481_ap_ready = ap_const_logic_1)) then 
                    grp_feistel_fu_481_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_phi_ln77_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_398)) then
                if ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_0)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_0_read;
                elsif ((ap_const_boolean_1 = ap_condition_613)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_15_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_E)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_14_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_D)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_13_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_C)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_12_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_B)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_11_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_A)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_10_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_9)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_9_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_8)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_8_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_7)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_7_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_6)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_6_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_5)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_5_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_4)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_4_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_3)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_3_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_2)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_2_read;
                elsif ((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_1)) then 
                    ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_1_read;
                end if;
            end if; 
        end if;
    end process;

    i_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_reg_862 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_432 <= i_reg_866;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_432 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    left_4_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln76_reg_862_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                left_4_reg_412 <= left_7_reg_871;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                left_4_reg_412 <= right_3_fu_502_p5;
            end if; 
        end if;
    end process;

    right_4_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln76_reg_862_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                right_4_reg_422 <= right_fu_531_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                right_4_reg_422 <= left_3_fu_494_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_866 <= i_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln76_reg_862 <= icmp_ln76_fu_512_p2;
                icmp_ln76_reg_862_pp0_iter1_reg <= icmp_ln76_reg_862;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_reg_862 = ap_const_lv1_0))) then
                left_7_reg_871 <= left_7_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                plaintext_load_1_reg_701 <= plaintext_q1;
                plaintext_load_reg_696 <= plaintext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                plaintext_load_2_reg_716 <= plaintext_q0;
                plaintext_load_3_reg_721 <= plaintext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                plaintext_load_4_reg_736 <= plaintext_q0;
                plaintext_load_5_reg_741 <= plaintext_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_reg_862 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_877 <= grp_feistel_fu_481_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln2_reg_892 <= xor_ln83_1_fu_596_p2(15 downto 8);
                trunc_ln3_reg_897 <= right_5_fu_557_p2(31 downto 24);
                trunc_ln4_reg_902 <= xor_ln82_2_fu_568_p2(23 downto 16);
                trunc_ln5_reg_907 <= xor_ln82_1_fu_562_p2(15 downto 8);
                trunc_ln83_reg_887 <= trunc_ln83_fu_574_p1;
                xor_ln248_reg_912 <= xor_ln248_fu_670_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln76_fu_512_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_512_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_512_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    S_0_address0 <= grp_feistel_fu_481_S_0_address0;
    S_0_ce0 <= grp_feistel_fu_481_S_0_ce0;
    S_1_address0 <= grp_feistel_fu_481_S_1_address0;
    S_1_ce0 <= grp_feistel_fu_481_S_1_ce0;
    S_2_address0 <= grp_feistel_fu_481_S_2_address0;
    S_2_ce0 <= grp_feistel_fu_481_S_2_ce0;
    S_3_address0 <= grp_feistel_fu_481_S_3_address0;
    S_3_ce0 <= grp_feistel_fu_481_S_3_ce0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_398_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln76_fu_512_p2, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_398 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_512_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_613_assign_proc : process(ap_phi_mux_i_0_phi_fu_436_p4)
    begin
                ap_condition_613 <= (not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_1)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln76_fu_512_p2)
    begin
        if ((icmp_ln76_fu_512_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_436_p4_assign_proc : process(i_0_reg_432, ap_CS_fsm_pp0_stage0, icmp_ln76_reg_862, i_reg_866, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_reg_862 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_436_p4 <= i_reg_866;
        else 
            ap_phi_mux_i_0_phi_fu_436_p4 <= i_0_reg_432;
        end if; 
    end process;


    ap_phi_mux_right_4_phi_fu_425_p4_assign_proc : process(right_4_reg_422, icmp_ln76_reg_862_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, right_fu_531_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln76_reg_862_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_right_4_phi_fu_425_p4 <= right_fu_531_p2;
        else 
            ap_phi_mux_right_4_phi_fu_425_p4 <= right_4_reg_422;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            ciphertext_address0 <= "XXX";
        end if; 
    end process;


    ciphertext_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            ciphertext_address1 <= "XXX";
        end if; 
    end process;


    ciphertext_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_ce0 <= ap_const_logic_1;
        else 
            ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_ce1 <= ap_const_logic_1;
        else 
            ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_d0_assign_proc : process(ap_CS_fsm_state10, trunc_ln2_reg_892, trunc_ln3_reg_897, trunc_ln5_reg_907, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, left_fu_591_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_d0 <= trunc_ln5_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_d0 <= trunc_ln3_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_d0 <= trunc_ln2_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_d0 <= left_fu_591_p2(31 downto 24);
        else 
            ciphertext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ciphertext_d1_assign_proc : process(ap_CS_fsm_state10, trunc_ln4_reg_902, xor_ln248_reg_912, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, xor_ln244_fu_680_p2, xor_ln83_2_fu_602_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ciphertext_d1 <= xor_ln248_reg_912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertext_d1 <= trunc_ln4_reg_902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ciphertext_d1 <= xor_ln244_fu_680_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ciphertext_d1 <= xor_ln83_2_fu_602_p2(23 downto 16);
        else 
            ciphertext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ciphertext_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_we0 <= ap_const_logic_1;
        else 
            ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ciphertext_we1 <= ap_const_logic_1;
        else 
            ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_feistel_fu_481_ap_start <= grp_feistel_fu_481_ap_start_reg;
    grp_feistel_fu_481_x <= (ap_phi_reg_pp0_iter0_phi_ln77_reg_444 xor ap_phi_mux_right_4_phi_fu_425_p4);
    i_fu_518_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_436_p4) + unsigned(ap_const_lv5_1));
    icmp_ln76_fu_512_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_436_p4 = ap_const_lv5_10) else "0";
    left_3_fu_494_p5 <= (((plaintext_load_reg_696 & plaintext_load_1_reg_701) & plaintext_load_2_reg_716) & plaintext_load_3_reg_721);
    left_7_fu_524_p2 <= (ap_phi_reg_pp0_iter0_phi_ln77_reg_444 xor ap_phi_mux_right_4_phi_fu_425_p4);
    left_fu_591_p2 <= (left_4_reg_412 xor P_17_read);

    plaintext_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            plaintext_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            plaintext_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            plaintext_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            plaintext_address0 <= "XXX";
        end if; 
    end process;


    plaintext_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            plaintext_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            plaintext_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            plaintext_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            plaintext_address1 <= "XXX";
        end if; 
    end process;


    plaintext_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            plaintext_ce0 <= ap_const_logic_1;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            plaintext_ce1 <= ap_const_logic_1;
        else 
            plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    right_3_fu_502_p5 <= (((plaintext_load_4_reg_736 & plaintext_load_5_reg_741) & plaintext_q0) & plaintext_q1);
    right_5_fu_557_p2 <= (right_4_reg_422 xor P_16_read);
    right_fu_531_p2 <= (tmp_10_reg_877 xor left_4_reg_412);
    trunc_ln82_1_fu_539_p1 <= right_4_reg_422(8 - 1 downto 0);
    trunc_ln82_2_fu_543_p1 <= P_16_read(24 - 1 downto 0);
    trunc_ln82_3_fu_546_p1 <= right_4_reg_422(24 - 1 downto 0);
    trunc_ln82_4_fu_550_p1 <= P_16_read(16 - 1 downto 0);
    trunc_ln82_5_fu_553_p1 <= right_4_reg_422(16 - 1 downto 0);
    trunc_ln82_fu_536_p1 <= P_16_read(8 - 1 downto 0);
    trunc_ln83_1_fu_676_p1 <= left_4_reg_412(8 - 1 downto 0);
    trunc_ln83_2_fu_577_p1 <= P_17_read(24 - 1 downto 0);
    trunc_ln83_3_fu_580_p1 <= left_4_reg_412(24 - 1 downto 0);
    trunc_ln83_4_fu_584_p1 <= P_17_read(16 - 1 downto 0);
    trunc_ln83_5_fu_587_p1 <= left_4_reg_412(16 - 1 downto 0);
    trunc_ln83_fu_574_p1 <= P_17_read(8 - 1 downto 0);
    xor_ln244_fu_680_p2 <= (trunc_ln83_reg_887 xor trunc_ln83_1_fu_676_p1);
    xor_ln248_fu_670_p2 <= (trunc_ln82_fu_536_p1 xor trunc_ln82_1_fu_539_p1);
    xor_ln82_1_fu_562_p2 <= (trunc_ln82_5_fu_553_p1 xor trunc_ln82_4_fu_550_p1);
    xor_ln82_2_fu_568_p2 <= (trunc_ln82_3_fu_546_p1 xor trunc_ln82_2_fu_543_p1);
    xor_ln83_1_fu_596_p2 <= (trunc_ln83_5_fu_587_p1 xor trunc_ln83_4_fu_584_p1);
    xor_ln83_2_fu_602_p2 <= (trunc_ln83_3_fu_580_p1 xor trunc_ln83_2_fu_577_p1);
end behav;
