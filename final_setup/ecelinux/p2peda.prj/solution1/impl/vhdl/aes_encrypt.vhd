-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln47_fu_132_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln47_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_290 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_152_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln47_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_170_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln50_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_1_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_1_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_fu_207_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_13_fu_217_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_13_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_fu_227_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln3_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln63_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_245_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln66_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_1_fu_273_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_1_reg_349 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_123_ap_start : STD_LOGIC;
    signal grp_aes_main_fu_123_ap_done : STD_LOGIC;
    signal grp_aes_main_fu_123_ap_idle : STD_LOGIC;
    signal grp_aes_main_fu_123_ap_ready : STD_LOGIC;
    signal grp_aes_main_fu_123_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_123_state_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_123_state_we0 : STD_LOGIC;
    signal grp_aes_main_fu_123_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_123_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_123_state_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_123_state_we1 : STD_LOGIC;
    signal grp_aes_main_fu_123_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_1_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes_main_fu_123_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln52_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln52_fu_148_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln50_fu_160_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_fu_176_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln52_1_fu_186_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln52_1_fu_190_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln68_fu_223_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln68_1_fu_251_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln68_1_fu_255_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln66_fu_235_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component aes_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component aes_encrypt_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => block_d0,
        q0 => block_q0,
        address1 => grp_aes_main_fu_123_state_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_aes_main_fu_123_state_d1,
        q1 => block_q1);

    grp_aes_main_fu_123 : component aes_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_main_fu_123_ap_start,
        ap_done => grp_aes_main_fu_123_ap_done,
        ap_idle => grp_aes_main_fu_123_ap_idle,
        ap_ready => grp_aes_main_fu_123_ap_ready,
        state_address0 => grp_aes_main_fu_123_state_address0,
        state_ce0 => grp_aes_main_fu_123_state_ce0,
        state_we0 => grp_aes_main_fu_123_state_we0,
        state_d0 => grp_aes_main_fu_123_state_d0,
        state_q0 => block_q0,
        state_address1 => grp_aes_main_fu_123_state_address1,
        state_ce1 => grp_aes_main_fu_123_state_ce1,
        state_we1 => grp_aes_main_fu_123_state_we1,
        state_d1 => grp_aes_main_fu_123_state_d1,
        state_q1 => block_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_main_fu_123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_main_fu_123_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln47_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_aes_main_fu_123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_main_fu_123_ap_ready = ap_const_logic_1)) then 
                    grp_aes_main_fu_123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_79 <= i_reg_290;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_reg_101 <= i_13_reg_326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_aes_main_fu_123_ap_done = ap_const_logic_1))) then 
                i_1_reg_101 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_90 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_90 <= j_reg_303;
            end if; 
        end if;
    end process;

    j_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_112 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_112 <= j_4_reg_339;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln52_1_reg_313 <= add_ln52_1_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln68_1_reg_349 <= add_ln68_1_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_13_reg_326 <= i_13_fu_217_p2;
                    zext_ln63_reg_318(2 downto 0) <= zext_ln63_fu_207_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_290 <= i_fu_142_p2;
                    zext_ln47_reg_282(2 downto 0) <= zext_ln47_fu_132_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_4_reg_339 <= j_4_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_303 <= j_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    shl_ln3_reg_331(3 downto 2) <= shl_ln3_fu_227_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_295(3 downto 2) <= shl_ln_fu_152_p3(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln47_reg_282(3) <= '0';
    shl_ln_reg_295(1 downto 0) <= "00";
    zext_ln63_reg_318(3) <= '0';
    shl_ln3_reg_331(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln47_fu_136_p2, ap_CS_fsm_state3, icmp_ln50_fu_164_p2, ap_CS_fsm_state6, icmp_ln63_fu_211_p2, ap_CS_fsm_state7, icmp_ln66_fu_239_p2, grp_aes_main_fu_123_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln47_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln50_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_aes_main_fu_123_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln63_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln66_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln52_1_fu_198_p2 <= std_logic_vector(unsigned(shl_ln52_1_fu_190_p3) + unsigned(zext_ln47_reg_282));
    add_ln52_fu_176_p2 <= std_logic_vector(unsigned(zext_ln50_fu_160_p1) + unsigned(shl_ln_reg_295));
    add_ln68_1_fu_273_p2 <= std_logic_vector(unsigned(zext_ln66_fu_235_p1) + unsigned(shl_ln3_reg_331));
    add_ln68_fu_263_p2 <= std_logic_vector(unsigned(shl_ln68_1_fu_255_p3) + unsigned(zext_ln63_reg_318));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln63_fu_211_p2)
    begin
        if ((((icmp_ln63_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln63_fu_211_p2)
    begin
        if (((icmp_ln63_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(ap_CS_fsm_state7, grp_aes_main_fu_123_state_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln52_1_fu_203_p1, zext_ln68_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            block_address0 <= zext_ln68_fu_268_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_address0 <= zext_ln52_1_fu_203_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_address0 <= grp_aes_main_fu_123_state_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state7, grp_aes_main_fu_123_state_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_ce0 <= grp_aes_main_fu_123_state_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_aes_main_fu_123_state_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_ce1 <= grp_aes_main_fu_123_state_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_d0_assign_proc : process(input_r_q0, grp_aes_main_fu_123_state_d0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_d0 <= grp_aes_main_fu_123_state_d0;
        else 
            block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_we0_assign_proc : process(grp_aes_main_fu_123_state_we0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_we0 <= grp_aes_main_fu_123_state_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_aes_main_fu_123_state_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_we1 <= grp_aes_main_fu_123_state_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_main_fu_123_ap_start <= grp_aes_main_fu_123_ap_start_reg;
    i_13_fu_217_p2 <= std_logic_vector(unsigned(i_1_reg_101) + unsigned(ap_const_lv3_1));
    i_fu_142_p2 <= std_logic_vector(unsigned(i_0_reg_79) + unsigned(ap_const_lv3_1));
    icmp_ln47_fu_136_p2 <= "1" when (i_0_reg_79 = ap_const_lv3_4) else "0";
    icmp_ln50_fu_164_p2 <= "1" when (j_0_reg_90 = ap_const_lv3_4) else "0";
    icmp_ln63_fu_211_p2 <= "1" when (i_1_reg_101 = ap_const_lv3_4) else "0";
    icmp_ln66_fu_239_p2 <= "1" when (j_1_reg_112 = ap_const_lv3_4) else "0";
    input_r_address0 <= zext_ln52_fu_181_p1(4 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_245_p2 <= std_logic_vector(unsigned(j_1_reg_112) + unsigned(ap_const_lv3_1));
    j_fu_170_p2 <= std_logic_vector(unsigned(j_0_reg_90) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln68_1_fu_278_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= block_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln3_fu_227_p3 <= (trunc_ln68_fu_223_p1 & ap_const_lv2_0);
    shl_ln52_1_fu_190_p3 <= (trunc_ln52_1_fu_186_p1 & ap_const_lv2_0);
    shl_ln68_1_fu_255_p3 <= (trunc_ln68_1_fu_251_p1 & ap_const_lv2_0);
    shl_ln_fu_152_p3 <= (trunc_ln52_fu_148_p1 & ap_const_lv2_0);
    trunc_ln52_1_fu_186_p1 <= j_0_reg_90(2 - 1 downto 0);
    trunc_ln52_fu_148_p1 <= i_0_reg_79(2 - 1 downto 0);
    trunc_ln68_1_fu_251_p1 <= j_1_reg_112(2 - 1 downto 0);
    trunc_ln68_fu_223_p1 <= i_1_reg_101(2 - 1 downto 0);
    zext_ln47_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_79),4));
    zext_ln50_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_90),4));
    zext_ln52_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_reg_313),64));
    zext_ln52_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_176_p2),64));
    zext_ln63_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_101),4));
    zext_ln66_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_112),4));
    zext_ln68_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_1_reg_349),64));
    zext_ln68_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_263_p2),64));
end behav;
