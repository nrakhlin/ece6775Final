-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    input_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    output_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln49_fu_526_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln49_reg_1395 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_536_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1403 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_546_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_1408 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln49_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_644_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln65_fu_700_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_reg_1629 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_13_fu_710_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_13_reg_1637 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_720_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_1642 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln65_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1042_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_1650 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln68_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_1_fu_1070_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_1_reg_1660 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_517_ap_start : STD_LOGIC;
    signal grp_aes_main_fu_517_ap_done : STD_LOGIC;
    signal grp_aes_main_fu_517_ap_idle : STD_LOGIC;
    signal grp_aes_main_fu_517_ap_ready : STD_LOGIC;
    signal grp_aes_main_fu_517_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_517_state_ce0 : STD_LOGIC;
    signal grp_aes_main_fu_517_state_we0 : STD_LOGIC;
    signal grp_aes_main_fu_517_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_main_fu_517_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_main_fu_517_state_ce1 : STD_LOGIC;
    signal grp_aes_main_fu_517_state_we1 : STD_LOGIC;
    signal grp_aes_main_fu_517_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_473 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln52_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_484 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_506 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes_main_fu_517_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln54_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output30_016_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag_0_fu_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_0_fu_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal output29_017_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_018_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag42_0_fu_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal output28_019_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag3_0_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_0_fu_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal output27_020_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal output16_021_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag36_0_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal output26_022_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag6_0_fu_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_0_fu_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal output25_023_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal output17_024_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag30_0_fu_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal output24_025_fu_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag9_0_fu_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_0_fu_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal output23_026_fu_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal output18_027_fu_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag24_0_fu_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal output22_028_fu_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag12_0_fu_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_0_fu_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal output21_029_fu_242 : STD_LOGIC_VECTOR (7 downto 0);
    signal output19_030_fu_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag18_0_fu_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal output20_031_fu_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag15_0_fu_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_655_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_fu_542_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln52_fu_634_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_655_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln54_1_fu_678_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln54_1_fu_682_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln54_1_fu_690_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln70_fu_716_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_1_fu_831_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_2_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_3_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_4_fu_852_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_5_fu_859_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_6_fu_866_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_7_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_8_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_9_fu_887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_10_fu_894_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_11_fu_901_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_12_fu_908_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_13_fu_915_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_14_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_15_fu_929_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_2_fu_1048_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln70_1_fu_1052_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_fu_1060_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_fu_1032_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component aes_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_mux_164_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_encrypt_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component aes_encrypt_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => block_d0,
        q0 => block_q0,
        address1 => grp_aes_main_fu_517_state_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_aes_main_fu_517_state_d1,
        q1 => block_q1);

    grp_aes_main_fu_517 : component aes_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_main_fu_517_ap_start,
        ap_done => grp_aes_main_fu_517_ap_done,
        ap_idle => grp_aes_main_fu_517_ap_idle,
        ap_ready => grp_aes_main_fu_517_ap_ready,
        state_address0 => grp_aes_main_fu_517_state_address0,
        state_ce0 => grp_aes_main_fu_517_state_ce0,
        state_we0 => grp_aes_main_fu_517_state_we0,
        state_d0 => grp_aes_main_fu_517_state_d0,
        state_q0 => block_q0,
        state_address1 => grp_aes_main_fu_517_state_address1,
        state_ce1 => grp_aes_main_fu_517_state_ce1,
        state_we1 => grp_aes_main_fu_517_state_we1,
        state_d1 => grp_aes_main_fu_517_state_d1,
        state_q1 => block_q1);

    dut_mux_164_8_1_1_U304 : component dut_mux_164_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => input_0_read,
        din1 => input_1_read,
        din2 => input_2_read,
        din3 => input_3_read,
        din4 => input_4_read,
        din5 => input_5_read,
        din6 => input_6_read,
        din7 => input_7_read,
        din8 => input_8_read,
        din9 => input_9_read,
        din10 => input_10_read,
        din11 => input_11_read,
        din12 => input_12_read,
        din13 => input_13_read,
        din14 => input_14_read,
        din15 => input_15_read,
        din16 => tmp_fu_655_p17,
        dout => tmp_fu_655_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_main_fu_517_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_main_fu_517_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                    grp_aes_main_fu_517_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_main_fu_517_ap_ready = ap_const_logic_1)) then 
                    grp_aes_main_fu_517_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_638_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_473 <= i_reg_1403;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_473 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_1036_p2 = ap_const_lv1_1))) then 
                i_1_reg_495 <= i_13_reg_1637;
            elsif (((grp_aes_main_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_495 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_0))) then 
                j_0_reg_484 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_638_p2 = ap_const_lv1_0))) then 
                j_0_reg_484 <= j_fu_644_p2;
            end if; 
        end if;
    end process;

    j_1_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_1_reg_506 <= j_2_reg_1650;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_704_p2 = ap_const_lv1_0))) then 
                j_1_reg_506 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag12_0_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_4 = add_ln70_1_reg_1660))) then 
                write_flag12_0_fu_234 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag12_0_fu_234 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag15_0_fu_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_5 = add_ln70_1_reg_1660))) then 
                write_flag15_0_fu_258 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag15_0_fu_258 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag18_0_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_6 = add_ln70_1_reg_1660))) then 
                write_flag18_0_fu_250 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag18_0_fu_250 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag21_0_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_7 = add_ln70_1_reg_1660))) then 
                write_flag21_0_fu_238 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag21_0_fu_238 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag24_0_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_8 = add_ln70_1_reg_1660))) then 
                write_flag24_0_fu_226 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag24_0_fu_226 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag27_0_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_9 = add_ln70_1_reg_1660))) then 
                write_flag27_0_fu_214 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag27_0_fu_214 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag30_0_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_A = add_ln70_1_reg_1660))) then 
                write_flag30_0_fu_202 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag30_0_fu_202 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag33_0_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_B = add_ln70_1_reg_1660))) then 
                write_flag33_0_fu_190 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag33_0_fu_190 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag36_0_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_C = add_ln70_1_reg_1660))) then 
                write_flag36_0_fu_178 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag36_0_fu_178 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag39_0_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_D = add_ln70_1_reg_1660))) then 
                write_flag39_0_fu_166 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag39_0_fu_166 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_1 = add_ln70_1_reg_1660))) then 
                write_flag3_0_fu_162 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag3_0_fu_162 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag42_0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_E = add_ln70_1_reg_1660))) then 
                write_flag42_0_fu_154 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag42_0_fu_154 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag45_0_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_F = add_ln70_1_reg_1660))) then 
                write_flag45_0_fu_142 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag45_0_fu_142 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_2 = add_ln70_1_reg_1660))) then 
                write_flag6_0_fu_186 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag6_0_fu_186 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_0_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_3 = add_ln70_1_reg_1660))) then 
                write_flag9_0_fu_210 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag9_0_fu_210 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_0 = add_ln70_1_reg_1660))) then 
                write_flag_0_fu_138 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_1))) then 
                write_flag_0_fu_138 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_1036_p2 = ap_const_lv1_0))) then
                add_ln70_1_reg_1660 <= add_ln70_1_fu_1070_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_13_reg_1637 <= i_13_fu_710_p2;
                    zext_ln65_reg_1629(2 downto 0) <= zext_ln65_fu_700_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1403 <= i_fu_536_p2;
                    zext_ln49_reg_1395(2 downto 0) <= zext_ln49_fu_526_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_1650 <= j_2_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_1 = add_ln70_1_reg_1660))) then
                output16_021_fu_174 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_2 = add_ln70_1_reg_1660))) then
                output17_024_fu_198 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_3 = add_ln70_1_reg_1660))) then
                output18_027_fu_222 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_4 = add_ln70_1_reg_1660))) then
                output19_030_fu_246 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_5 = add_ln70_1_reg_1660))) then
                output20_031_fu_254 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_6 = add_ln70_1_reg_1660))) then
                output21_029_fu_242 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_7 = add_ln70_1_reg_1660))) then
                output22_028_fu_230 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_8 = add_ln70_1_reg_1660))) then
                output23_026_fu_218 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_9 = add_ln70_1_reg_1660))) then
                output24_025_fu_206 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_A = add_ln70_1_reg_1660))) then
                output25_023_fu_194 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_B = add_ln70_1_reg_1660))) then
                output26_022_fu_182 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_C = add_ln70_1_reg_1660))) then
                output27_020_fu_170 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_D = add_ln70_1_reg_1660))) then
                output28_019_fu_158 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_E = add_ln70_1_reg_1660))) then
                output29_017_fu_146 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_F = add_ln70_1_reg_1660))) then
                output30_016_fu_134 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv4_0 = add_ln70_1_reg_1660))) then
                output_018_fu_150 <= block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_704_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_1642(3 downto 2) <= shl_ln1_fu_720_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1408(3 downto 2) <= shl_ln_fu_546_p3(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln49_reg_1395(3) <= '0';
    shl_ln_reg_1408(1 downto 0) <= "00";
    zext_ln65_reg_1629(3) <= '0';
    shl_ln1_reg_1642(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln49_fu_530_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln65_fu_704_p2, ap_CS_fsm_state6, icmp_ln68_fu_1036_p2, grp_aes_main_fu_517_ap_done, icmp_ln52_fu_638_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln49_fu_530_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_638_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_aes_main_fu_517_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_704_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_1036_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln54_1_fu_690_p2 <= std_logic_vector(unsigned(zext_ln49_reg_1395) + unsigned(shl_ln54_1_fu_682_p3));
    add_ln70_1_fu_1070_p2 <= std_logic_vector(unsigned(zext_ln68_fu_1032_p1) + unsigned(shl_ln1_reg_1642));
    add_ln70_fu_1060_p2 <= std_logic_vector(unsigned(zext_ln65_reg_1629) + unsigned(shl_ln70_1_fu_1052_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln65_fu_704_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_704_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln65_fu_704_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_704_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln73_fu_824_p3;
    ap_return_1 <= select_ln73_1_fu_831_p3;
    ap_return_10 <= select_ln73_10_fu_894_p3;
    ap_return_11 <= select_ln73_11_fu_901_p3;
    ap_return_12 <= select_ln73_12_fu_908_p3;
    ap_return_13 <= select_ln73_13_fu_915_p3;
    ap_return_14 <= select_ln73_14_fu_922_p3;
    ap_return_15 <= select_ln73_15_fu_929_p3;
    ap_return_2 <= select_ln73_2_fu_838_p3;
    ap_return_3 <= select_ln73_3_fu_845_p3;
    ap_return_4 <= select_ln73_4_fu_852_p3;
    ap_return_5 <= select_ln73_5_fu_859_p3;
    ap_return_6 <= select_ln73_6_fu_866_p3;
    ap_return_7 <= select_ln73_7_fu_873_p3;
    ap_return_8 <= select_ln73_8_fu_880_p3;
    ap_return_9 <= select_ln73_9_fu_887_p3;

    block_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, grp_aes_main_fu_517_state_address0, ap_CS_fsm_state4, zext_ln54_fu_695_p1, zext_ln70_fu_1065_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= zext_ln70_fu_1065_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_address0 <= zext_ln54_fu_695_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_address0 <= grp_aes_main_fu_517_state_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, grp_aes_main_fu_517_state_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_ce0 <= grp_aes_main_fu_517_state_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_aes_main_fu_517_state_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_ce1 <= grp_aes_main_fu_517_state_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_d0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_517_state_d0, ap_CS_fsm_state4, tmp_fu_655_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_d0 <= tmp_fu_655_p18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_d0 <= grp_aes_main_fu_517_state_d0;
        else 
            block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_we0_assign_proc : process(ap_CS_fsm_state3, grp_aes_main_fu_517_state_we0, icmp_ln52_fu_638_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_638_p2 = ap_const_lv1_0))) then 
            block_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_we0 <= grp_aes_main_fu_517_state_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_aes_main_fu_517_state_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_we1 <= grp_aes_main_fu_517_state_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_main_fu_517_ap_start <= grp_aes_main_fu_517_ap_start_reg;
    i_13_fu_710_p2 <= std_logic_vector(unsigned(i_1_reg_495) + unsigned(ap_const_lv3_1));
    i_fu_536_p2 <= std_logic_vector(unsigned(i_0_reg_473) + unsigned(ap_const_lv3_1));
    icmp_ln49_fu_530_p2 <= "1" when (i_0_reg_473 = ap_const_lv3_4) else "0";
    icmp_ln52_fu_638_p2 <= "1" when (j_0_reg_484 = ap_const_lv3_4) else "0";
    icmp_ln65_fu_704_p2 <= "1" when (i_1_reg_495 = ap_const_lv3_4) else "0";
    icmp_ln68_fu_1036_p2 <= "1" when (j_1_reg_506 = ap_const_lv3_4) else "0";
    j_2_fu_1042_p2 <= std_logic_vector(unsigned(j_1_reg_506) + unsigned(ap_const_lv3_1));
    j_fu_644_p2 <= std_logic_vector(unsigned(j_0_reg_484) + unsigned(ap_const_lv3_1));
    select_ln73_10_fu_894_p3 <= 
        output25_023_fu_194 when (write_flag30_0_fu_202(0) = '1') else 
        output_10_read;
    select_ln73_11_fu_901_p3 <= 
        output26_022_fu_182 when (write_flag33_0_fu_190(0) = '1') else 
        output_11_read;
    select_ln73_12_fu_908_p3 <= 
        output27_020_fu_170 when (write_flag36_0_fu_178(0) = '1') else 
        output_12_read;
    select_ln73_13_fu_915_p3 <= 
        output28_019_fu_158 when (write_flag39_0_fu_166(0) = '1') else 
        output_13_read;
    select_ln73_14_fu_922_p3 <= 
        output29_017_fu_146 when (write_flag42_0_fu_154(0) = '1') else 
        output_14_read;
    select_ln73_15_fu_929_p3 <= 
        output30_016_fu_134 when (write_flag45_0_fu_142(0) = '1') else 
        output_15_read;
    select_ln73_1_fu_831_p3 <= 
        output16_021_fu_174 when (write_flag3_0_fu_162(0) = '1') else 
        output_1_read;
    select_ln73_2_fu_838_p3 <= 
        output17_024_fu_198 when (write_flag6_0_fu_186(0) = '1') else 
        output_2_read;
    select_ln73_3_fu_845_p3 <= 
        output18_027_fu_222 when (write_flag9_0_fu_210(0) = '1') else 
        output_3_read;
    select_ln73_4_fu_852_p3 <= 
        output19_030_fu_246 when (write_flag12_0_fu_234(0) = '1') else 
        output_4_read;
    select_ln73_5_fu_859_p3 <= 
        output20_031_fu_254 when (write_flag15_0_fu_258(0) = '1') else 
        output_5_read;
    select_ln73_6_fu_866_p3 <= 
        output21_029_fu_242 when (write_flag18_0_fu_250(0) = '1') else 
        output_6_read;
    select_ln73_7_fu_873_p3 <= 
        output22_028_fu_230 when (write_flag21_0_fu_238(0) = '1') else 
        output_7_read;
    select_ln73_8_fu_880_p3 <= 
        output23_026_fu_218 when (write_flag24_0_fu_226(0) = '1') else 
        output_8_read;
    select_ln73_9_fu_887_p3 <= 
        output24_025_fu_206 when (write_flag27_0_fu_214(0) = '1') else 
        output_9_read;
    select_ln73_fu_824_p3 <= 
        output_018_fu_150 when (write_flag_0_fu_138(0) = '1') else 
        output_0_read;
    shl_ln1_fu_720_p3 <= (trunc_ln70_fu_716_p1 & ap_const_lv2_0);
    shl_ln54_1_fu_682_p3 <= (trunc_ln54_1_fu_678_p1 & ap_const_lv2_0);
    shl_ln70_1_fu_1052_p3 <= (trunc_ln70_2_fu_1048_p1 & ap_const_lv2_0);
    shl_ln_fu_546_p3 <= (trunc_ln54_fu_542_p1 & ap_const_lv2_0);
    tmp_fu_655_p17 <= std_logic_vector(unsigned(zext_ln52_fu_634_p1) + unsigned(shl_ln_reg_1408));
    trunc_ln54_1_fu_678_p1 <= j_0_reg_484(2 - 1 downto 0);
    trunc_ln54_fu_542_p1 <= i_0_reg_473(2 - 1 downto 0);
    trunc_ln70_2_fu_1048_p1 <= j_1_reg_506(2 - 1 downto 0);
    trunc_ln70_fu_716_p1 <= i_1_reg_495(2 - 1 downto 0);
    zext_ln49_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_473),4));
    zext_ln52_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_484),4));
    zext_ln54_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_690_p2),64));
    zext_ln65_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_495),4));
    zext_ln68_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_506),4));
    zext_ln70_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_1060_p2),64));
end behav;
