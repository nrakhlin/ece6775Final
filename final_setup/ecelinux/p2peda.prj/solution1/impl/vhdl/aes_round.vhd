-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_round is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_round is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_468 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_479 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal state_addr_reg_744 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_15_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_10_reg_760 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_3_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_14_reg_780 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_2_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_13_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_13_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_4_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_4_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_1_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_12_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_6_reg_868 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_7_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_11_reg_883 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_11_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal xor_ln236_7_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_7_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_15_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_15_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln236_6_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_6_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_14_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_14_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_9_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_9_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal xor_ln236_13_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_13_reg_963 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read11 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read12 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read13 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read14 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_ap_ready : STD_LOGIC;
    signal grp_mixColumn_fu_454_column_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_column_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_column_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mixColumn_fu_454_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_15_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_10_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_5_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_14_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_3_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_9_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_4_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_13_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_2_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_8_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_7_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_6_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_11_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_12_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln236_8_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_12_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_3_fu_602_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_11_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_2_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_10_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_1_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln236_5_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component mixColumn IS
    port (
        ap_ready : OUT STD_LOGIC;
        column_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        column_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_round_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes_round_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    grp_mixColumn_fu_454 : component mixColumn
    port map (
        ap_ready => grp_mixColumn_fu_454_ap_ready,
        column_0_read => grp_mixColumn_fu_454_column_0_read,
        column_1_read => grp_mixColumn_fu_454_column_1_read,
        column_2_read => reg_495,
        column_3_read => grp_mixColumn_fu_454_column_3_read,
        ap_return_0 => grp_mixColumn_fu_454_ap_return_0,
        ap_return_1 => grp_mixColumn_fu_454_ap_return_1,
        ap_return_2 => grp_mixColumn_fu_454_ap_return_2,
        ap_return_3 => grp_mixColumn_fu_454_ap_return_3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_468 <= state_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_468 <= state_q1;
            end if; 
        end if;
    end process;

    reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_485 <= state_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_485 <= state_q1;
            end if; 
        end if;
    end process;

    reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_490 <= state_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_490 <= state_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_p_read <= p_read;
                ap_port_reg_p_read1 <= p_read1;
                ap_port_reg_p_read10 <= p_read10;
                ap_port_reg_p_read11 <= p_read11;
                ap_port_reg_p_read12 <= p_read12;
                ap_port_reg_p_read13 <= p_read13;
                ap_port_reg_p_read14 <= p_read14;
                ap_port_reg_p_read15 <= p_read15;
                ap_port_reg_p_read2 <= p_read2;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read4 <= p_read4;
                ap_port_reg_p_read5 <= p_read5;
                ap_port_reg_p_read6 <= p_read6;
                ap_port_reg_p_read7 <= p_read7;
                ap_port_reg_p_read8 <= p_read8;
                ap_port_reg_p_read9 <= p_read9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_464 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_473 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_479 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_495 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                state_load_11_reg_893 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                state_load_12_reg_863 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                state_load_13_reg_827 <= state_q1;
                xor_ln236_4_reg_842 <= xor_ln236_4_fu_547_p2;
                xor_ln236_reg_837 <= xor_ln236_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                state_load_7_reg_873 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                xor_ln236_13_reg_963 <= xor_ln236_13_fu_738_p2;
                xor_ln236_9_reg_958 <= xor_ln236_9_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                xor_ln236_14_reg_938 <= xor_ln236_14_fu_683_p2;
                xor_ln236_6_reg_933 <= xor_ln236_6_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                xor_ln236_15_reg_908 <= xor_ln236_15_fu_622_p2;
                xor_ln236_7_reg_903 <= xor_ln236_7_fu_609_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_mixColumn_fu_454_column_0_read_assign_proc : process(reg_473, reg_479, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mixColumn_fu_454_column_0_read <= reg_473;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_mixColumn_fu_454_column_0_read <= reg_479;
        else 
            grp_mixColumn_fu_454_column_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_mixColumn_fu_454_column_1_read_assign_proc : process(sbox_q0, reg_479, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mixColumn_fu_454_column_1_read <= reg_479;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_mixColumn_fu_454_column_1_read <= sbox_q0;
        else 
            grp_mixColumn_fu_454_column_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_mixColumn_fu_454_column_3_read_assign_proc : process(sbox_q0, reg_473, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mixColumn_fu_454_column_3_read <= sbox_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_mixColumn_fu_454_column_3_read <= reg_473;
        else 
            grp_mixColumn_fu_454_column_3_read <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln46_15_fu_500_p1, zext_ln46_fu_505_p1, zext_ln46_10_fu_510_p1, zext_ln46_5_fu_515_p1, zext_ln46_14_fu_520_p1, zext_ln46_3_fu_567_p1, zext_ln46_9_fu_572_p1, zext_ln46_4_fu_577_p1, zext_ln46_13_fu_582_p1, zext_ln46_2_fu_628_p1, zext_ln46_8_fu_633_p1, zext_ln46_7_fu_638_p1, zext_ln46_1_fu_642_p1, zext_ln46_6_fu_689_p1, zext_ln46_11_fu_694_p1, zext_ln46_12_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sbox_address0 <= zext_ln46_12_fu_698_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sbox_address0 <= zext_ln46_11_fu_694_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sbox_address0 <= zext_ln46_6_fu_689_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sbox_address0 <= zext_ln46_1_fu_642_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_address0 <= zext_ln46_7_fu_638_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_address0 <= zext_ln46_8_fu_633_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sbox_address0 <= zext_ln46_2_fu_628_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= zext_ln46_13_fu_582_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= zext_ln46_4_fu_577_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= zext_ln46_9_fu_572_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address0 <= zext_ln46_3_fu_567_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address0 <= zext_ln46_14_fu_520_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address0 <= zext_ln46_5_fu_515_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address0 <= zext_ln46_10_fu_510_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sbox_address0 <= zext_ln46_fu_505_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sbox_address0 <= zext_ln46_15_fu_500_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_10_reg_760 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_11_reg_883 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_13_reg_812 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_14_reg_780 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_15_reg_749 <= ap_const_lv64_F(4 - 1 downto 0);
    state_addr_1_reg_847 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_2_reg_802 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_3_reg_775 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_6_reg_868 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_reg_744 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state6, state_addr_reg_744, state_addr_3_reg_775, state_addr_2_reg_802, state_addr_1_reg_847, state_addr_6_reg_868, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0 <= state_addr_1_reg_847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_6_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_2_reg_802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_3_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= state_addr_reg_744;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state6, state_addr_15_reg_749, state_addr_10_reg_760, state_addr_14_reg_780, state_addr_13_reg_812, state_addr_11_reg_883, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address1 <= state_addr_13_reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= state_addr_14_reg_780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= state_addr_10_reg_760;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= state_addr_15_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= state_addr_11_reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state6, xor_ln236_reg_837, ap_CS_fsm_state10, xor_ln236_7_reg_903, ap_CS_fsm_state14, xor_ln236_6_reg_933, xor_ln236_9_reg_958, ap_CS_fsm_state18, xor_ln236_8_fu_553_p2, xor_ln236_3_fu_602_p2, xor_ln236_2_fu_663_p2, xor_ln236_1_fu_718_p2, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d0 <= xor_ln236_9_reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d0 <= xor_ln236_1_fu_718_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= xor_ln236_6_reg_933;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= xor_ln236_2_fu_663_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= xor_ln236_7_reg_903;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= xor_ln236_3_fu_602_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= xor_ln236_reg_837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d0 <= xor_ln236_8_fu_553_p2;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state6, xor_ln236_4_reg_842, ap_CS_fsm_state10, xor_ln236_15_reg_908, ap_CS_fsm_state14, xor_ln236_14_reg_938, ap_CS_fsm_state18, xor_ln236_13_reg_963, xor_ln236_12_fu_560_p2, xor_ln236_11_fu_615_p2, xor_ln236_10_fu_676_p2, xor_ln236_5_fu_725_p2, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d1 <= xor_ln236_13_reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d1 <= xor_ln236_5_fu_725_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= xor_ln236_14_reg_938;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= xor_ln236_10_fu_676_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= xor_ln236_15_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d1 <= xor_ln236_11_fu_615_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= xor_ln236_4_reg_842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d1 <= xor_ln236_12_fu_560_p2;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln236_10_fu_676_p2 <= (grp_mixColumn_fu_454_ap_return_2 xor ap_port_reg_p_read10);
    xor_ln236_11_fu_615_p2 <= (grp_mixColumn_fu_454_ap_return_2 xor ap_port_reg_p_read11);
    xor_ln236_12_fu_560_p2 <= (grp_mixColumn_fu_454_ap_return_3 xor ap_port_reg_p_read12);
    xor_ln236_13_fu_738_p2 <= (grp_mixColumn_fu_454_ap_return_3 xor ap_port_reg_p_read13);
    xor_ln236_14_fu_683_p2 <= (grp_mixColumn_fu_454_ap_return_3 xor ap_port_reg_p_read14);
    xor_ln236_15_fu_622_p2 <= (grp_mixColumn_fu_454_ap_return_3 xor ap_port_reg_p_read15);
    xor_ln236_1_fu_718_p2 <= (grp_mixColumn_fu_454_ap_return_0 xor ap_port_reg_p_read1);
    xor_ln236_2_fu_663_p2 <= (grp_mixColumn_fu_454_ap_return_0 xor ap_port_reg_p_read2);
    xor_ln236_3_fu_602_p2 <= (grp_mixColumn_fu_454_ap_return_0 xor ap_port_reg_p_read3);
    xor_ln236_4_fu_547_p2 <= (grp_mixColumn_fu_454_ap_return_1 xor ap_port_reg_p_read4);
    xor_ln236_5_fu_725_p2 <= (grp_mixColumn_fu_454_ap_return_1 xor ap_port_reg_p_read5);
    xor_ln236_6_fu_670_p2 <= (grp_mixColumn_fu_454_ap_return_1 xor ap_port_reg_p_read6);
    xor_ln236_7_fu_609_p2 <= (grp_mixColumn_fu_454_ap_return_1 xor ap_port_reg_p_read7);
    xor_ln236_8_fu_553_p2 <= (grp_mixColumn_fu_454_ap_return_2 xor ap_port_reg_p_read8);
    xor_ln236_9_fu_732_p2 <= (grp_mixColumn_fu_454_ap_return_2 xor ap_port_reg_p_read9);
    xor_ln236_fu_541_p2 <= (grp_mixColumn_fu_454_ap_return_0 xor ap_port_reg_p_read);
    zext_ln46_10_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_468),64));
    zext_ln46_11_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_load_11_reg_893),64));
    zext_ln46_12_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_load_12_reg_863),64));
    zext_ln46_13_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_load_13_reg_827),64));
    zext_ln46_14_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_485),64));
    zext_ln46_15_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q1),64));
    zext_ln46_1_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_490),64));
    zext_ln46_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_485),64));
    zext_ln46_3_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_468),64));
    zext_ln46_4_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),64));
    zext_ln46_5_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),64));
    zext_ln46_6_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),64));
    zext_ln46_7_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_load_7_reg_873),64));
    zext_ln46_8_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_468),64));
    zext_ln46_9_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_490),64));
    zext_ln46_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),64));
end behav;
