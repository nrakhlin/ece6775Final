-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixColumn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    column_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    column_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    column_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    column_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of mixColumn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cpy_3_load_reg_396 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln250_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cpy_3_1_load_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_2_load_reg_410 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_3_load_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_91_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_91_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_91_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_91_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_91_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_98_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_98_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_98_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_98_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_98_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_105_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_105_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_105_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_105_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_105_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_112_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_112_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_112_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_112_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_112_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_119_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_119_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_119_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_119_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_119_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_126_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_126_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_126_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_126_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_126_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_133_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_133_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_133_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_133_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_133_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_140_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_140_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_140_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_140_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_140_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_147_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_147_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_147_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_147_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_147_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_154_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_154_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_154_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_154_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_154_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_161_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_161_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_161_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_161_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_161_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_galois_multiplicatio_fu_168_ap_start : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_168_ap_done : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_168_ap_idle : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_168_ap_ready : STD_LOGIC;
    signal grp_galois_multiplicatio_fu_168_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_80 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_galois_multiplicatio_fu_91_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_galois_multiplicatio_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_105_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_119_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_133_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_140_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal grp_galois_multiplicatio_fu_168_ap_start_reg : STD_LOGIC := '0';
    signal cpy_3_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_0_fu_191_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln252_fu_187_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal cpy_3_1_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_2_fu_48 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_3_3_fu_52 : STD_LOGIC_VECTOR (7 downto 0);
    signal cpy_0_fu_191_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln257_1_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln257_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln262_1_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln262_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln267_1_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln267_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln272_1_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln272_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln257_2_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln262_2_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln267_2_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln272_2_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component galois_multiplicatio IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        b : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_galois_multiplicatio_fu_91 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_91_ap_start,
        ap_done => grp_galois_multiplicatio_fu_91_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_91_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_91_ap_ready,
        a => cpy_3_load_reg_396,
        b => ap_const_lv5_2,
        ap_return => grp_galois_multiplicatio_fu_91_ap_return);

    grp_galois_multiplicatio_fu_98 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_98_ap_start,
        ap_done => grp_galois_multiplicatio_fu_98_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_98_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_98_ap_ready,
        a => cpy_3_3_load_reg_417,
        b => ap_const_lv5_1,
        ap_return => grp_galois_multiplicatio_fu_98_ap_return);

    grp_galois_multiplicatio_fu_105 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_105_ap_start,
        ap_done => grp_galois_multiplicatio_fu_105_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_105_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_105_ap_ready,
        a => cpy_3_2_load_reg_410,
        b => ap_const_lv5_1,
        ap_return => grp_galois_multiplicatio_fu_105_ap_return);

    grp_galois_multiplicatio_fu_112 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_112_ap_start,
        ap_done => grp_galois_multiplicatio_fu_112_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_112_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_112_ap_ready,
        a => cpy_3_1_load_reg_403,
        b => ap_const_lv5_3,
        ap_return => grp_galois_multiplicatio_fu_112_ap_return);

    grp_galois_multiplicatio_fu_119 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_119_ap_start,
        ap_done => grp_galois_multiplicatio_fu_119_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_119_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_119_ap_ready,
        a => cpy_3_1_load_reg_403,
        b => ap_const_lv5_2,
        ap_return => grp_galois_multiplicatio_fu_119_ap_return);

    grp_galois_multiplicatio_fu_126 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_126_ap_start,
        ap_done => grp_galois_multiplicatio_fu_126_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_126_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_126_ap_ready,
        a => cpy_3_load_reg_396,
        b => ap_const_lv5_1,
        ap_return => grp_galois_multiplicatio_fu_126_ap_return);

    grp_galois_multiplicatio_fu_133 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_133_ap_start,
        ap_done => grp_galois_multiplicatio_fu_133_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_133_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_133_ap_ready,
        a => cpy_3_2_load_reg_410,
        b => ap_const_lv5_3,
        ap_return => grp_galois_multiplicatio_fu_133_ap_return);

    grp_galois_multiplicatio_fu_140 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_140_ap_start,
        ap_done => grp_galois_multiplicatio_fu_140_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_140_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_140_ap_ready,
        a => cpy_3_2_load_reg_410,
        b => ap_const_lv5_2,
        ap_return => grp_galois_multiplicatio_fu_140_ap_return);

    grp_galois_multiplicatio_fu_147 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_147_ap_start,
        ap_done => grp_galois_multiplicatio_fu_147_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_147_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_147_ap_ready,
        a => cpy_3_1_load_reg_403,
        b => ap_const_lv5_1,
        ap_return => grp_galois_multiplicatio_fu_147_ap_return);

    grp_galois_multiplicatio_fu_154 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_154_ap_start,
        ap_done => grp_galois_multiplicatio_fu_154_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_154_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_154_ap_ready,
        a => cpy_3_3_load_reg_417,
        b => ap_const_lv5_3,
        ap_return => grp_galois_multiplicatio_fu_154_ap_return);

    grp_galois_multiplicatio_fu_161 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_161_ap_start,
        ap_done => grp_galois_multiplicatio_fu_161_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_161_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_161_ap_ready,
        a => cpy_3_3_load_reg_417,
        b => ap_const_lv5_2,
        ap_return => grp_galois_multiplicatio_fu_161_ap_return);

    grp_galois_multiplicatio_fu_168 : component galois_multiplicatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_galois_multiplicatio_fu_168_ap_start,
        ap_done => grp_galois_multiplicatio_fu_168_ap_done,
        ap_idle => grp_galois_multiplicatio_fu_168_ap_idle,
        ap_ready => grp_galois_multiplicatio_fu_168_ap_ready,
        a => cpy_3_load_reg_396,
        b => ap_const_lv5_3,
        ap_return => grp_galois_multiplicatio_fu_168_ap_return);

    dut_mux_42_8_1_1_U6 : component dut_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => column_0_read,
        din1 => column_1_read,
        din2 => column_2_read,
        din3 => column_3_read,
        din4 => cpy_0_fu_191_p5,
        dout => cpy_0_fu_191_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= xor_ln257_2_fu_257_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= xor_ln262_2_fu_275_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_2_preg <= xor_ln267_2_fu_293_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_3_preg <= xor_ln272_2_fu_311_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_105_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_105_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_119_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_119_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_119_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_119_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_119_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_133_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_133_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_133_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_133_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_133_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_140_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_140_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_140_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_140_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_140_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_168_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_168_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_91_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_91_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_91_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_91_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_91_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_galois_multiplicatio_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_galois_multiplicatio_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_galois_multiplicatio_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_galois_multiplicatio_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_galois_multiplicatio_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_80 <= i_fu_181_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_80 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln252_fu_187_p1 = ap_const_lv2_1))) then
                cpy_3_1_fu_44 <= cpy_0_fu_191_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                cpy_3_1_load_reg_403 <= cpy_3_1_fu_44;
                cpy_3_2_load_reg_410 <= cpy_3_2_fu_48;
                cpy_3_3_load_reg_417 <= cpy_3_3_fu_52;
                cpy_3_load_reg_396 <= cpy_3_fu_40;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln252_fu_187_p1 = ap_const_lv2_2))) then
                cpy_3_2_fu_48 <= cpy_0_fu_191_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln252_fu_187_p1 = ap_const_lv2_3))) then
                cpy_3_3_fu_52 <= cpy_0_fu_191_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln252_fu_187_p1 = ap_const_lv2_0))) then
                cpy_3_fu_40 <= cpy_0_fu_191_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln250_fu_175_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln250_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_galois_multiplicatio_fu_91_ap_done, grp_galois_multiplicatio_fu_98_ap_done, grp_galois_multiplicatio_fu_105_ap_done, grp_galois_multiplicatio_fu_112_ap_done, grp_galois_multiplicatio_fu_119_ap_done, grp_galois_multiplicatio_fu_126_ap_done, grp_galois_multiplicatio_fu_133_ap_done, grp_galois_multiplicatio_fu_140_ap_done, grp_galois_multiplicatio_fu_147_ap_done, grp_galois_multiplicatio_fu_154_ap_done, grp_galois_multiplicatio_fu_161_ap_done, grp_galois_multiplicatio_fu_168_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_galois_multiplicatio_fu_119_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_112_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_105_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_98_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_91_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_168_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_161_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_154_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_147_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_140_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_133_ap_done = ap_const_logic_0) or (grp_galois_multiplicatio_fu_126_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, xor_ln257_2_fu_257_p2, ap_return_0_preg, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= xor_ln257_2_fu_257_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, xor_ln262_2_fu_275_p2, ap_block_state3_on_subcall_done, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= xor_ln262_2_fu_275_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, xor_ln267_2_fu_293_p2, ap_block_state3_on_subcall_done, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_2 <= xor_ln267_2_fu_293_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state3, xor_ln272_2_fu_311_p2, ap_block_state3_on_subcall_done, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_3 <= xor_ln272_2_fu_311_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    cpy_0_fu_191_p5 <= i_0_reg_80(2 - 1 downto 0);
    grp_galois_multiplicatio_fu_105_ap_start <= grp_galois_multiplicatio_fu_105_ap_start_reg;
    grp_galois_multiplicatio_fu_112_ap_start <= grp_galois_multiplicatio_fu_112_ap_start_reg;
    grp_galois_multiplicatio_fu_119_ap_start <= grp_galois_multiplicatio_fu_119_ap_start_reg;
    grp_galois_multiplicatio_fu_126_ap_start <= grp_galois_multiplicatio_fu_126_ap_start_reg;
    grp_galois_multiplicatio_fu_133_ap_start <= grp_galois_multiplicatio_fu_133_ap_start_reg;
    grp_galois_multiplicatio_fu_140_ap_start <= grp_galois_multiplicatio_fu_140_ap_start_reg;
    grp_galois_multiplicatio_fu_147_ap_start <= grp_galois_multiplicatio_fu_147_ap_start_reg;
    grp_galois_multiplicatio_fu_154_ap_start <= grp_galois_multiplicatio_fu_154_ap_start_reg;
    grp_galois_multiplicatio_fu_161_ap_start <= grp_galois_multiplicatio_fu_161_ap_start_reg;
    grp_galois_multiplicatio_fu_168_ap_start <= grp_galois_multiplicatio_fu_168_ap_start_reg;
    grp_galois_multiplicatio_fu_91_ap_start <= grp_galois_multiplicatio_fu_91_ap_start_reg;
    grp_galois_multiplicatio_fu_98_ap_start <= grp_galois_multiplicatio_fu_98_ap_start_reg;
    i_fu_181_p2 <= std_logic_vector(unsigned(i_0_reg_80) + unsigned(ap_const_lv3_1));
    icmp_ln250_fu_175_p2 <= "1" when (i_0_reg_80 = ap_const_lv3_4) else "0";
    trunc_ln252_fu_187_p1 <= i_0_reg_80(2 - 1 downto 0);
    xor_ln257_1_fu_251_p2 <= (grp_galois_multiplicatio_fu_112_ap_return xor grp_galois_multiplicatio_fu_105_ap_return);
    xor_ln257_2_fu_257_p2 <= (xor_ln257_fu_245_p2 xor xor_ln257_1_fu_251_p2);
    xor_ln257_fu_245_p2 <= (grp_galois_multiplicatio_fu_98_ap_return xor grp_galois_multiplicatio_fu_91_ap_return);
    xor_ln262_1_fu_269_p2 <= (grp_galois_multiplicatio_fu_98_ap_return xor grp_galois_multiplicatio_fu_133_ap_return);
    xor_ln262_2_fu_275_p2 <= (xor_ln262_fu_263_p2 xor xor_ln262_1_fu_269_p2);
    xor_ln262_fu_263_p2 <= (grp_galois_multiplicatio_fu_126_ap_return xor grp_galois_multiplicatio_fu_119_ap_return);
    xor_ln267_1_fu_287_p2 <= (grp_galois_multiplicatio_fu_154_ap_return xor grp_galois_multiplicatio_fu_126_ap_return);
    xor_ln267_2_fu_293_p2 <= (xor_ln267_fu_281_p2 xor xor_ln267_1_fu_287_p2);
    xor_ln267_fu_281_p2 <= (grp_galois_multiplicatio_fu_147_ap_return xor grp_galois_multiplicatio_fu_140_ap_return);
    xor_ln272_1_fu_305_p2 <= (grp_galois_multiplicatio_fu_168_ap_return xor grp_galois_multiplicatio_fu_147_ap_return);
    xor_ln272_2_fu_311_p2 <= (xor_ln272_fu_299_p2 xor xor_ln272_1_fu_305_p2);
    xor_ln272_fu_299_p2 <= (grp_galois_multiplicatio_fu_161_ap_return xor grp_galois_multiplicatio_fu_105_ap_return);
end behav;
