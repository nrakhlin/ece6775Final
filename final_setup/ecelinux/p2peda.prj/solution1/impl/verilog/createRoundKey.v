// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module createRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_q0,
        roundKey_address0,
        roundKey_ce0,
        roundKey_we0,
        roundKey_d0,
        ptr
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
input  [7:0] expandedKey_q0;
output  [3:0] roundKey_address0;
output   roundKey_ce0;
output   roundKey_we0;
output  [7:0] roundKey_d0;
input  [8:0] ptr;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg expandedKey_ce0;
reg roundKey_ce0;
reg roundKey_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] trunc_ln318_fu_79_p1;
reg   [7:0] trunc_ln318_reg_167;
wire   [3:0] zext_ln314_fu_83_p1;
reg   [3:0] zext_ln314_reg_172;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_93_p2;
reg   [2:0] i_reg_180;
wire   [7:0] zext_ln318_1_fu_111_p1;
reg   [7:0] zext_ln318_1_reg_185;
wire   [0:0] icmp_ln314_fu_87_p2;
wire   [2:0] j_fu_125_p2;
reg   [2:0] j_reg_193;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln317_fu_119_p2;
wire   [3:0] add_ln318_2_fu_158_p2;
reg   [3:0] add_ln318_2_reg_203;
reg   [2:0] i_0_reg_57;
reg   [2:0] j_0_reg_68;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln318_2_fu_141_p1;
wire   [63:0] zext_ln318_fu_163_p1;
wire   [1:0] trunc_ln318_1_fu_99_p1;
wire   [3:0] shl_ln_fu_103_p3;
wire   [7:0] zext_ln317_fu_115_p1;
wire   [7:0] add_ln318_fu_131_p2;
wire   [7:0] add_ln318_1_fu_136_p2;
wire   [1:0] trunc_ln318_2_fu_146_p1;
wire   [3:0] shl_ln318_1_fu_150_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_57 <= i_reg_180;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_57 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln314_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_68 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_68 <= j_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln318_2_reg_203 <= add_ln318_2_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_180 <= i_fu_93_p2;
        zext_ln314_reg_172[2 : 0] <= zext_ln314_fu_83_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_193 <= j_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln318_reg_167 <= trunc_ln318_fu_79_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln314_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln318_1_reg_185[3 : 2] <= zext_ln318_1_fu_111_p1[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln314_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln314_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_ce0 = 1'b1;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_we0 = 1'b1;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln314_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln317_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_1_fu_136_p2 = (zext_ln318_1_reg_185 + add_ln318_fu_131_p2);

assign add_ln318_2_fu_158_p2 = (zext_ln314_reg_172 + shl_ln318_1_fu_150_p3);

assign add_ln318_fu_131_p2 = (trunc_ln318_reg_167 + zext_ln317_fu_115_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign expandedKey_address0 = zext_ln318_2_fu_141_p1;

assign i_fu_93_p2 = (i_0_reg_57 + 3'd1);

assign icmp_ln314_fu_87_p2 = ((i_0_reg_57 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_119_p2 = ((j_0_reg_68 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_125_p2 = (j_0_reg_68 + 3'd1);

assign roundKey_address0 = zext_ln318_fu_163_p1;

assign roundKey_d0 = expandedKey_q0;

assign shl_ln318_1_fu_150_p3 = {{trunc_ln318_2_fu_146_p1}, {2'd0}};

assign shl_ln_fu_103_p3 = {{trunc_ln318_1_fu_99_p1}, {2'd0}};

assign trunc_ln318_1_fu_99_p1 = i_0_reg_57[1:0];

assign trunc_ln318_2_fu_146_p1 = j_0_reg_68[1:0];

assign trunc_ln318_fu_79_p1 = ptr[7:0];

assign zext_ln314_fu_83_p1 = i_0_reg_57;

assign zext_ln317_fu_115_p1 = j_0_reg_68;

assign zext_ln318_1_fu_111_p1 = shl_ln_fu_103_p3;

assign zext_ln318_2_fu_141_p1 = add_ln318_1_fu_136_p2;

assign zext_ln318_fu_163_p1 = add_ln318_2_reg_203;

always @ (posedge ap_clk) begin
    zext_ln314_reg_172[3] <= 1'b0;
    zext_ln318_1_reg_185[1:0] <= 2'b00;
    zext_ln318_1_reg_185[7:4] <= 4'b0000;
end

endmodule //createRoundKey
