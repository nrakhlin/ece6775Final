// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Blowfish_Encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        plaintext_address1,
        plaintext_ce1,
        plaintext_q1,
        ciphertext_address0,
        ciphertext_ce0,
        ciphertext_we0,
        ciphertext_d0,
        ciphertext_address1,
        ciphertext_ce1,
        ciphertext_we1,
        ciphertext_d1,
        P_0_read,
        P_1_read,
        P_2_read,
        P_3_read,
        P_4_read,
        P_5_read,
        P_6_read,
        P_7_read,
        P_8_read,
        P_9_read,
        P_10_read,
        P_11_read,
        P_12_read,
        P_13_read,
        P_14_read,
        P_15_read,
        P_16_read,
        P_17_read,
        S_0_address0,
        S_0_ce0,
        S_0_q0,
        S_1_address0,
        S_1_ce0,
        S_1_q0,
        S_2_address0,
        S_2_ce0,
        S_2_q0,
        S_3_address0,
        S_3_ce0,
        S_3_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_pp0_stage1 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [7:0] plaintext_q0;
output  [2:0] plaintext_address1;
output   plaintext_ce1;
input  [7:0] plaintext_q1;
output  [2:0] ciphertext_address0;
output   ciphertext_ce0;
output   ciphertext_we0;
output  [7:0] ciphertext_d0;
output  [2:0] ciphertext_address1;
output   ciphertext_ce1;
output   ciphertext_we1;
output  [7:0] ciphertext_d1;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
input  [31:0] P_3_read;
input  [31:0] P_4_read;
input  [31:0] P_5_read;
input  [31:0] P_6_read;
input  [31:0] P_7_read;
input  [31:0] P_8_read;
input  [31:0] P_9_read;
input  [31:0] P_10_read;
input  [31:0] P_11_read;
input  [31:0] P_12_read;
input  [31:0] P_13_read;
input  [31:0] P_14_read;
input  [31:0] P_15_read;
input  [31:0] P_16_read;
input  [31:0] P_17_read;
output  [7:0] S_0_address0;
output   S_0_ce0;
input  [31:0] S_0_q0;
output  [7:0] S_1_address0;
output   S_1_ce0;
input  [31:0] S_1_q0;
output  [7:0] S_2_address0;
output   S_2_ce0;
input  [31:0] S_2_q0;
output  [7:0] S_3_address0;
output   S_3_ce0;
input  [31:0] S_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] plaintext_address0;
reg plaintext_ce0;
reg[2:0] plaintext_address1;
reg plaintext_ce1;
reg[2:0] ciphertext_address0;
reg ciphertext_ce0;
reg ciphertext_we0;
reg[7:0] ciphertext_d0;
reg[2:0] ciphertext_address1;
reg ciphertext_ce1;
reg ciphertext_we1;
reg[7:0] ciphertext_d1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] left_4_reg_412;
reg   [31:0] right_4_reg_422;
reg   [4:0] i_0_reg_432;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] plaintext_load_reg_696;
wire    ap_CS_fsm_state2;
reg   [7:0] plaintext_load_1_reg_701;
reg   [7:0] plaintext_load_2_reg_716;
wire    ap_CS_fsm_state3;
reg   [7:0] plaintext_load_3_reg_721;
reg   [7:0] plaintext_load_4_reg_736;
wire    ap_CS_fsm_state4;
reg   [7:0] plaintext_load_5_reg_741;
wire    ap_CS_fsm_state5;
wire   [31:0] left_3_fu_494_p5;
wire   [31:0] right_3_fu_502_p5;
wire   [0:0] icmp_ln76_fu_512_p2;
reg   [0:0] icmp_ln76_reg_862;
reg   [0:0] icmp_ln76_reg_862_pp0_iter1_reg;
wire   [4:0] i_fu_518_p2;
reg   [4:0] i_reg_866;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] left_7_fu_524_p2;
reg   [31:0] left_7_reg_871;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_feistel_fu_481_ap_return;
reg   [31:0] tmp_10_reg_877;
wire   [31:0] right_fu_531_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] trunc_ln83_fu_574_p1;
reg   [7:0] trunc_ln83_reg_887;
wire    ap_CS_fsm_state10;
reg   [7:0] trunc_ln2_reg_892;
reg   [7:0] trunc_ln3_reg_897;
reg   [7:0] trunc_ln4_reg_902;
reg   [7:0] trunc_ln5_reg_907;
wire   [7:0] xor_ln248_fu_670_p2;
reg   [7:0] xor_ln248_reg_912;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    ap_block_pp0_stage1_subdone;
wire    grp_feistel_fu_481_ap_start;
wire    grp_feistel_fu_481_ap_done;
wire    grp_feistel_fu_481_ap_idle;
wire    grp_feistel_fu_481_ap_ready;
wire   [31:0] grp_feistel_fu_481_x;
wire   [7:0] grp_feistel_fu_481_S_0_address0;
wire    grp_feistel_fu_481_S_0_ce0;
wire   [7:0] grp_feistel_fu_481_S_1_address0;
wire    grp_feistel_fu_481_S_1_ce0;
wire   [7:0] grp_feistel_fu_481_S_2_address0;
wire    grp_feistel_fu_481_S_2_ce0;
wire   [7:0] grp_feistel_fu_481_S_3_address0;
wire    grp_feistel_fu_481_S_3_ce0;
reg   [31:0] ap_phi_mux_right_4_phi_fu_425_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_i_0_phi_fu_436_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_reg_pp0_iter0_phi_ln77_reg_444;
reg    grp_feistel_fu_481_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [7:0] xor_ln244_fu_680_p2;
wire   [15:0] trunc_ln82_5_fu_553_p1;
wire   [15:0] trunc_ln82_4_fu_550_p1;
wire   [23:0] trunc_ln82_3_fu_546_p1;
wire   [23:0] trunc_ln82_2_fu_543_p1;
wire   [15:0] trunc_ln83_5_fu_587_p1;
wire   [15:0] trunc_ln83_4_fu_584_p1;
wire   [23:0] trunc_ln83_3_fu_580_p1;
wire   [23:0] trunc_ln83_2_fu_577_p1;
wire   [31:0] left_fu_591_p2;
wire   [23:0] xor_ln83_2_fu_602_p2;
wire   [15:0] xor_ln83_1_fu_596_p2;
wire   [31:0] right_5_fu_557_p2;
wire   [23:0] xor_ln82_2_fu_568_p2;
wire   [15:0] xor_ln82_1_fu_562_p2;
wire   [7:0] trunc_ln82_1_fu_539_p1;
wire   [7:0] trunc_ln82_fu_536_p1;
wire   [7:0] trunc_ln83_1_fu_676_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_613;
reg    ap_condition_398;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_feistel_fu_481_ap_start_reg = 1'b0;
end

feistel grp_feistel_fu_481(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_feistel_fu_481_ap_start),
    .ap_done(grp_feistel_fu_481_ap_done),
    .ap_idle(grp_feistel_fu_481_ap_idle),
    .ap_ready(grp_feistel_fu_481_ap_ready),
    .x(grp_feistel_fu_481_x),
    .S_0_address0(grp_feistel_fu_481_S_0_address0),
    .S_0_ce0(grp_feistel_fu_481_S_0_ce0),
    .S_0_q0(S_0_q0),
    .S_1_address0(grp_feistel_fu_481_S_1_address0),
    .S_1_ce0(grp_feistel_fu_481_S_1_ce0),
    .S_1_q0(S_1_q0),
    .S_2_address0(grp_feistel_fu_481_S_2_address0),
    .S_2_ce0(grp_feistel_fu_481_S_2_ce0),
    .S_2_q0(S_2_q0),
    .S_3_address0(grp_feistel_fu_481_S_3_address0),
    .S_3_ce0(grp_feistel_fu_481_S_3_ce0),
    .S_3_q0(S_3_q0),
    .ap_return(grp_feistel_fu_481_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_feistel_fu_481_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_512_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            grp_feistel_fu_481_ap_start_reg <= 1'b1;
        end else if ((grp_feistel_fu_481_ap_ready == 1'b1)) begin
            grp_feistel_fu_481_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_398)) begin
        if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd0)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_0_read;
        end else if ((1'b1 == ap_condition_613)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_15_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd14)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_14_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd13)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_13_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd12)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_12_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd11)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_11_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd10)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_10_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd9)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_9_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd8)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_8_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd7)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_7_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd6)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_6_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd5)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_5_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd4)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_4_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd3)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_3_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd2)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_2_read;
        end else if ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd1)) begin
            ap_phi_reg_pp0_iter0_phi_ln77_reg_444 <= P_1_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_432 <= i_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_432 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln76_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        left_4_reg_412 <= left_7_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        left_4_reg_412 <= right_3_fu_502_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln76_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        right_4_reg_422 <= right_fu_531_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        right_4_reg_422 <= left_3_fu_494_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_866 <= i_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln76_reg_862 <= icmp_ln76_fu_512_p2;
        icmp_ln76_reg_862_pp0_iter1_reg <= icmp_ln76_reg_862;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln76_reg_862 == 1'd0))) begin
        left_7_reg_871 <= left_7_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_load_1_reg_701 <= plaintext_q1;
        plaintext_load_reg_696 <= plaintext_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_load_2_reg_716 <= plaintext_q0;
        plaintext_load_3_reg_721 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_load_4_reg_736 <= plaintext_q0;
        plaintext_load_5_reg_741 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_877 <= grp_feistel_fu_481_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln2_reg_892 <= {{xor_ln83_1_fu_596_p2[15:8]}};
        trunc_ln3_reg_897 <= {{right_5_fu_557_p2[31:24]}};
        trunc_ln4_reg_902 <= {{xor_ln82_2_fu_568_p2[23:16]}};
        trunc_ln5_reg_907 <= {{xor_ln82_1_fu_562_p2[15:8]}};
        trunc_ln83_reg_887 <= trunc_ln83_fu_574_p1;
        xor_ln248_reg_912 <= xor_ln248_fu_670_p2;
    end
end

always @ (*) begin
    if ((icmp_ln76_fu_512_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_reg_862 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_436_p4 = i_reg_866;
    end else begin
        ap_phi_mux_i_0_phi_fu_436_p4 = i_0_reg_432;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln76_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_right_4_phi_fu_425_p4 = right_fu_531_p2;
    end else begin
        ap_phi_mux_right_4_phi_fu_425_p4 = right_4_reg_422;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address0 = 64'd0;
    end else begin
        ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address1 = 64'd1;
    end else begin
        ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_ce0 = 1'b1;
    end else begin
        ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_ce1 = 1'b1;
    end else begin
        ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_d0 = trunc_ln5_reg_907;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d0 = trunc_ln3_reg_897;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d0 = trunc_ln2_reg_892;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d0 = {{left_fu_591_p2[31:24]}};
    end else begin
        ciphertext_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ciphertext_d1 = xor_ln248_reg_912;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d1 = trunc_ln4_reg_902;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d1 = xor_ln244_fu_680_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d1 = {{xor_ln83_2_fu_602_p2[23:16]}};
    end else begin
        ciphertext_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_we0 = 1'b1;
    end else begin
        ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ciphertext_we1 = 1'b1;
    end else begin
        ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address0 = 64'd0;
    end else begin
        plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address1 = 64'd1;
    end else begin
        plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce1 = 1'b1;
    end else begin
        plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln76_fu_512_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln76_fu_512_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_0_address0 = grp_feistel_fu_481_S_0_address0;

assign S_0_ce0 = grp_feistel_fu_481_S_0_ce0;

assign S_1_address0 = grp_feistel_fu_481_S_1_address0;

assign S_1_ce0 = grp_feistel_fu_481_S_1_ce0;

assign S_2_address0 = grp_feistel_fu_481_S_2_address0;

assign S_2_ce0 = grp_feistel_fu_481_S_2_ce0;

assign S_3_address0 = grp_feistel_fu_481_S_3_address0;

assign S_3_ce0 = grp_feistel_fu_481_S_3_ce0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_398 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_512_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_613 = (~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd0) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd14) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd13) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd12) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd11) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd10) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd9) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd8) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd7) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd6) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd5) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd4) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd3) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd2) & ~(ap_phi_mux_i_0_phi_fu_436_p4 == 5'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_feistel_fu_481_ap_start = grp_feistel_fu_481_ap_start_reg;

assign grp_feistel_fu_481_x = (ap_phi_reg_pp0_iter0_phi_ln77_reg_444 ^ ap_phi_mux_right_4_phi_fu_425_p4);

assign i_fu_518_p2 = (ap_phi_mux_i_0_phi_fu_436_p4 + 5'd1);

assign icmp_ln76_fu_512_p2 = ((ap_phi_mux_i_0_phi_fu_436_p4 == 5'd16) ? 1'b1 : 1'b0);

assign left_3_fu_494_p5 = {{{{plaintext_load_reg_696}, {plaintext_load_1_reg_701}}, {plaintext_load_2_reg_716}}, {plaintext_load_3_reg_721}};

assign left_7_fu_524_p2 = (ap_phi_reg_pp0_iter0_phi_ln77_reg_444 ^ ap_phi_mux_right_4_phi_fu_425_p4);

assign left_fu_591_p2 = (left_4_reg_412 ^ P_17_read);

assign right_3_fu_502_p5 = {{{{plaintext_load_4_reg_736}, {plaintext_load_5_reg_741}}, {plaintext_q0}}, {plaintext_q1}};

assign right_5_fu_557_p2 = (right_4_reg_422 ^ P_16_read);

assign right_fu_531_p2 = (tmp_10_reg_877 ^ left_4_reg_412);

assign trunc_ln82_1_fu_539_p1 = right_4_reg_422[7:0];

assign trunc_ln82_2_fu_543_p1 = P_16_read[23:0];

assign trunc_ln82_3_fu_546_p1 = right_4_reg_422[23:0];

assign trunc_ln82_4_fu_550_p1 = P_16_read[15:0];

assign trunc_ln82_5_fu_553_p1 = right_4_reg_422[15:0];

assign trunc_ln82_fu_536_p1 = P_16_read[7:0];

assign trunc_ln83_1_fu_676_p1 = left_4_reg_412[7:0];

assign trunc_ln83_2_fu_577_p1 = P_17_read[23:0];

assign trunc_ln83_3_fu_580_p1 = left_4_reg_412[23:0];

assign trunc_ln83_4_fu_584_p1 = P_17_read[15:0];

assign trunc_ln83_5_fu_587_p1 = left_4_reg_412[15:0];

assign trunc_ln83_fu_574_p1 = P_17_read[7:0];

assign xor_ln244_fu_680_p2 = (trunc_ln83_reg_887 ^ trunc_ln83_1_fu_676_p1);

assign xor_ln248_fu_670_p2 = (trunc_ln82_fu_536_p1 ^ trunc_ln82_1_fu_539_p1);

assign xor_ln82_1_fu_562_p2 = (trunc_ln82_5_fu_553_p1 ^ trunc_ln82_4_fu_550_p1);

assign xor_ln82_2_fu_568_p2 = (trunc_ln82_3_fu_546_p1 ^ trunc_ln82_2_fu_543_p1);

assign xor_ln83_1_fu_596_p2 = (trunc_ln83_5_fu_587_p1 ^ trunc_ln83_4_fu_584_p1);

assign xor_ln83_2_fu_602_p2 = (trunc_ln83_3_fu_580_p1 ^ trunc_ln83_2_fu_577_p1);

endmodule //Blowfish_Encrypt
