// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Blowfish_Decrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ciphertext_address0,
        ciphertext_ce0,
        ciphertext_q0,
        ciphertext_address1,
        ciphertext_ce1,
        ciphertext_q1,
        decryptedtext_address0,
        decryptedtext_ce0,
        decryptedtext_we0,
        decryptedtext_d0,
        decryptedtext_address1,
        decryptedtext_ce1,
        decryptedtext_we1,
        decryptedtext_d1,
        P_0_read,
        P_1_read,
        P_2_read,
        P_3_read,
        P_4_read,
        P_5_read,
        P_6_read,
        P_7_read,
        P_8_read,
        P_9_read,
        P_10_read,
        P_11_read,
        P_12_read,
        P_13_read,
        P_14_read,
        P_15_read,
        P_16_read,
        P_17_read,
        S_0_address0,
        S_0_ce0,
        S_0_q0,
        S_1_address0,
        S_1_ce0,
        S_1_q0,
        S_2_address0,
        S_2_ce0,
        S_2_q0,
        S_3_address0,
        S_3_ce0,
        S_3_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] ciphertext_address0;
output   ciphertext_ce0;
input  [7:0] ciphertext_q0;
output  [2:0] ciphertext_address1;
output   ciphertext_ce1;
input  [7:0] ciphertext_q1;
output  [2:0] decryptedtext_address0;
output   decryptedtext_ce0;
output   decryptedtext_we0;
output  [7:0] decryptedtext_d0;
output  [2:0] decryptedtext_address1;
output   decryptedtext_ce1;
output   decryptedtext_we1;
output  [7:0] decryptedtext_d1;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
input  [31:0] P_3_read;
input  [31:0] P_4_read;
input  [31:0] P_5_read;
input  [31:0] P_6_read;
input  [31:0] P_7_read;
input  [31:0] P_8_read;
input  [31:0] P_9_read;
input  [31:0] P_10_read;
input  [31:0] P_11_read;
input  [31:0] P_12_read;
input  [31:0] P_13_read;
input  [31:0] P_14_read;
input  [31:0] P_15_read;
input  [31:0] P_16_read;
input  [31:0] P_17_read;
output  [7:0] S_0_address0;
output   S_0_ce0;
input  [31:0] S_0_q0;
output  [7:0] S_1_address0;
output   S_1_ce0;
input  [31:0] S_1_q0;
output  [7:0] S_2_address0;
output   S_2_ce0;
input  [31:0] S_2_q0;
output  [7:0] S_3_address0;
output   S_3_ce0;
input  [31:0] S_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] ciphertext_address0;
reg ciphertext_ce0;
reg[2:0] ciphertext_address1;
reg ciphertext_ce1;
reg[2:0] decryptedtext_address0;
reg decryptedtext_ce0;
reg decryptedtext_we0;
reg[7:0] decryptedtext_d0;
reg[2:0] decryptedtext_address1;
reg decryptedtext_ce1;
reg decryptedtext_we1;
reg[7:0] decryptedtext_d1;
reg S_0_ce0;
reg S_1_ce0;
reg S_2_ce0;
reg S_3_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] ciphertext_load_reg_848;
wire    ap_CS_fsm_state2;
reg   [7:0] ciphertext_load_1_reg_853;
reg   [7:0] ciphertext_load_2_reg_868;
wire    ap_CS_fsm_state3;
reg   [7:0] ciphertext_load_3_reg_873;
reg   [7:0] ciphertext_load_4_reg_888;
wire    ap_CS_fsm_state4;
reg   [7:0] ciphertext_load_5_reg_893;
wire    ap_CS_fsm_state5;
wire   [31:0] left_8_fu_527_p5;
wire   [31:0] right_6_fu_535_p5;
wire   [7:0] trunc_ln65_fu_561_p1;
reg   [7:0] trunc_ln65_reg_1017;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln58_fu_555_p2;
reg   [7:0] trunc_ln7_reg_1022;
wire   [31:0] left_12_fu_651_p2;
reg   [31:0] left_12_reg_1027;
wire    ap_CS_fsm_state7;
wire   [4:0] i_fu_725_p2;
reg   [4:0] i_reg_1052;
wire   [31:0] add_ln81_4_fu_743_p2;
reg   [31:0] add_ln81_4_reg_1057;
wire    ap_CS_fsm_state8;
wire   [31:0] right_fu_749_p2;
wire    ap_CS_fsm_state9;
reg   [7:0] trunc_ln8_reg_1067;
wire    ap_CS_fsm_state10;
reg   [7:0] trunc_ln9_reg_1072;
reg   [7:0] trunc_ln10_reg_1077;
wire   [7:0] xor_ln172_fu_832_p2;
reg   [7:0] xor_ln172_reg_1082;
reg   [31:0] left_9_reg_458;
reg   [31:0] right_7_reg_468;
wire   [4:0] ap_phi_mux_i_0_phi_fu_482_p4;
reg   [4:0] i_0_reg_478;
reg   [31:0] phi_ln59_reg_490;
wire   [63:0] zext_ln81_fu_705_p1;
wire   [63:0] zext_ln81_8_fu_710_p1;
wire   [63:0] zext_ln81_9_fu_715_p1;
wire   [63:0] zext_ln81_10_fu_720_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [7:0] xor_ln168_fu_796_p2;
wire   [3:0] tmp_fu_545_p4;
wire   [15:0] trunc_ln65_5_fu_574_p1;
wire   [15:0] trunc_ln65_4_fu_571_p1;
wire   [23:0] trunc_ln65_3_fu_567_p1;
wire   [23:0] trunc_ln65_2_fu_564_p1;
wire   [31:0] left_fu_578_p2;
wire   [23:0] xor_ln65_2_fu_589_p2;
wire   [15:0] xor_ln65_1_fu_583_p2;
wire   [15:0] trunc_ln59_5_fu_647_p1;
wire   [15:0] trunc_ln59_4_fu_643_p1;
wire   [23:0] trunc_ln59_3_fu_639_p1;
wire   [23:0] trunc_ln59_2_fu_635_p1;
wire   [23:0] xor_ln59_2_fu_663_p2;
wire   [15:0] xor_ln59_1_fu_657_p2;
wire   [7:0] trunc_ln59_1_fu_631_p1;
wire   [7:0] trunc_ln59_fu_627_p1;
wire   [7:0] a_fu_669_p4;
wire   [7:0] b_fu_679_p4;
wire   [7:0] c_fu_689_p4;
wire   [7:0] d_fu_699_p2;
wire   [31:0] add_ln81_fu_731_p2;
wire   [31:0] xor_ln81_fu_737_p2;
wire   [15:0] trunc_ln64_5_fu_771_p1;
wire   [15:0] trunc_ln64_4_fu_768_p1;
wire   [23:0] trunc_ln64_3_fu_764_p1;
wire   [23:0] trunc_ln64_2_fu_761_p1;
wire   [7:0] trunc_ln65_1_fu_792_p1;
wire   [31:0] right_8_fu_775_p2;
wire   [23:0] xor_ln64_2_fu_786_p2;
wire   [15:0] xor_ln64_1_fu_780_p2;
wire   [7:0] trunc_ln64_1_fu_757_p1;
wire   [7:0] trunc_ln64_fu_754_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_condition_603;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_478 <= i_reg_1052;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_478 <= 5'd17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        left_9_reg_458 <= left_12_reg_1027;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        left_9_reg_458 <= right_6_fu_535_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln58_fu_555_p2 == 1'd0))) begin
        if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd2)) begin
            phi_ln59_reg_490 <= P_2_read;
        end else if ((1'b1 == ap_condition_603)) begin
            phi_ln59_reg_490 <= P_17_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd16)) begin
            phi_ln59_reg_490 <= P_16_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd15)) begin
            phi_ln59_reg_490 <= P_15_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd14)) begin
            phi_ln59_reg_490 <= P_14_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd13)) begin
            phi_ln59_reg_490 <= P_13_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd12)) begin
            phi_ln59_reg_490 <= P_12_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd11)) begin
            phi_ln59_reg_490 <= P_11_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd10)) begin
            phi_ln59_reg_490 <= P_10_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd9)) begin
            phi_ln59_reg_490 <= P_9_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd8)) begin
            phi_ln59_reg_490 <= P_8_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd7)) begin
            phi_ln59_reg_490 <= P_7_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd6)) begin
            phi_ln59_reg_490 <= P_6_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd5)) begin
            phi_ln59_reg_490 <= P_5_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd4)) begin
            phi_ln59_reg_490 <= P_4_read;
        end else if ((ap_phi_mux_i_0_phi_fu_482_p4 == 5'd3)) begin
            phi_ln59_reg_490 <= P_3_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        right_7_reg_468 <= right_fu_749_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        right_7_reg_468 <= left_8_fu_527_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln81_4_reg_1057 <= add_ln81_4_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ciphertext_load_1_reg_853 <= ciphertext_q1;
        ciphertext_load_reg_848 <= ciphertext_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext_load_2_reg_868 <= ciphertext_q0;
        ciphertext_load_3_reg_873 <= ciphertext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext_load_4_reg_888 <= ciphertext_q0;
        ciphertext_load_5_reg_893 <= ciphertext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_1052 <= i_fu_725_p2;
        left_12_reg_1027 <= left_12_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln10_reg_1077 <= {{xor_ln64_1_fu_780_p2[15:8]}};
        trunc_ln8_reg_1067 <= {{right_8_fu_775_p2[31:24]}};
        trunc_ln9_reg_1072 <= {{xor_ln64_2_fu_786_p2[23:16]}};
        xor_ln172_reg_1082 <= xor_ln172_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln58_fu_555_p2 == 1'd1))) begin
        trunc_ln65_reg_1017 <= trunc_ln65_fu_561_p1;
        trunc_ln7_reg_1022 <= {{xor_ln65_1_fu_583_p2[15:8]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_0_ce0 = 1'b1;
    end else begin
        S_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_1_ce0 = 1'b1;
    end else begin
        S_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_2_ce0 = 1'b1;
    end else begin
        S_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_3_ce0 = 1'b1;
    end else begin
        S_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ciphertext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ciphertext_address0 = 64'd0;
    end else begin
        ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ciphertext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ciphertext_address1 = 64'd1;
    end else begin
        ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ciphertext_ce0 = 1'b1;
    end else begin
        ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ciphertext_ce1 = 1'b1;
    end else begin
        ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        decryptedtext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decryptedtext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decryptedtext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext_address0 = 64'd0;
    end else begin
        decryptedtext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        decryptedtext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decryptedtext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decryptedtext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext_address1 = 64'd1;
    end else begin
        decryptedtext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        decryptedtext_ce0 = 1'b1;
    end else begin
        decryptedtext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        decryptedtext_ce1 = 1'b1;
    end else begin
        decryptedtext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        decryptedtext_d0 = trunc_ln10_reg_1077;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decryptedtext_d0 = trunc_ln8_reg_1067;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decryptedtext_d0 = trunc_ln7_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext_d0 = {{left_fu_578_p2[31:24]}};
    end else begin
        decryptedtext_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        decryptedtext_d1 = xor_ln172_reg_1082;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decryptedtext_d1 = trunc_ln9_reg_1072;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decryptedtext_d1 = xor_ln168_fu_796_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext_d1 = {{xor_ln65_2_fu_589_p2[23:16]}};
    end else begin
        decryptedtext_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln58_fu_555_p2 == 1'd1)))) begin
        decryptedtext_we0 = 1'b1;
    end else begin
        decryptedtext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln58_fu_555_p2 == 1'd1)))) begin
        decryptedtext_we1 = 1'b1;
    end else begin
        decryptedtext_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln58_fu_555_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_0_address0 = zext_ln81_fu_705_p1;

assign S_1_address0 = zext_ln81_8_fu_710_p1;

assign S_2_address0 = zext_ln81_9_fu_715_p1;

assign S_3_address0 = zext_ln81_10_fu_720_p1;

assign a_fu_669_p4 = {{left_12_fu_651_p2[31:24]}};

assign add_ln81_4_fu_743_p2 = (S_3_q0 + xor_ln81_fu_737_p2);

assign add_ln81_fu_731_p2 = (S_0_q0 + S_1_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_603 = (~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd2) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd16) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd15) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd14) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd13) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd12) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd11) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd10) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd9) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd8) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd7) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd6) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd5) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd4) & ~(ap_phi_mux_i_0_phi_fu_482_p4 == 5'd3));
end

assign ap_phi_mux_i_0_phi_fu_482_p4 = i_0_reg_478;

assign b_fu_679_p4 = {{xor_ln59_2_fu_663_p2[23:16]}};

assign c_fu_689_p4 = {{xor_ln59_1_fu_657_p2[15:8]}};

assign d_fu_699_p2 = (trunc_ln59_fu_627_p1 ^ trunc_ln59_1_fu_631_p1);

assign i_fu_725_p2 = ($signed(5'd31) + $signed(i_0_reg_478));

assign icmp_ln58_fu_555_p2 = ((tmp_fu_545_p4 == 4'd0) ? 1'b1 : 1'b0);

assign left_12_fu_651_p2 = (right_7_reg_468 ^ phi_ln59_reg_490);

assign left_8_fu_527_p5 = {{{{ciphertext_load_reg_848}, {ciphertext_load_1_reg_853}}, {ciphertext_load_2_reg_868}}, {ciphertext_load_3_reg_873}};

assign left_fu_578_p2 = (left_9_reg_458 ^ P_0_read);

assign right_6_fu_535_p5 = {{{{ciphertext_load_4_reg_888}, {ciphertext_load_5_reg_893}}, {ciphertext_q0}}, {ciphertext_q1}};

assign right_8_fu_775_p2 = (right_7_reg_468 ^ P_1_read);

assign right_fu_749_p2 = (left_9_reg_458 ^ add_ln81_4_reg_1057);

assign tmp_fu_545_p4 = {{i_0_reg_478[4:1]}};

assign trunc_ln59_1_fu_631_p1 = right_7_reg_468[7:0];

assign trunc_ln59_2_fu_635_p1 = phi_ln59_reg_490[23:0];

assign trunc_ln59_3_fu_639_p1 = right_7_reg_468[23:0];

assign trunc_ln59_4_fu_643_p1 = phi_ln59_reg_490[15:0];

assign trunc_ln59_5_fu_647_p1 = right_7_reg_468[15:0];

assign trunc_ln59_fu_627_p1 = phi_ln59_reg_490[7:0];

assign trunc_ln64_1_fu_757_p1 = right_7_reg_468[7:0];

assign trunc_ln64_2_fu_761_p1 = P_1_read[23:0];

assign trunc_ln64_3_fu_764_p1 = right_7_reg_468[23:0];

assign trunc_ln64_4_fu_768_p1 = P_1_read[15:0];

assign trunc_ln64_5_fu_771_p1 = right_7_reg_468[15:0];

assign trunc_ln64_fu_754_p1 = P_1_read[7:0];

assign trunc_ln65_1_fu_792_p1 = left_9_reg_458[7:0];

assign trunc_ln65_2_fu_564_p1 = P_0_read[23:0];

assign trunc_ln65_3_fu_567_p1 = left_9_reg_458[23:0];

assign trunc_ln65_4_fu_571_p1 = P_0_read[15:0];

assign trunc_ln65_5_fu_574_p1 = left_9_reg_458[15:0];

assign trunc_ln65_fu_561_p1 = P_0_read[7:0];

assign xor_ln168_fu_796_p2 = (trunc_ln65_reg_1017 ^ trunc_ln65_1_fu_792_p1);

assign xor_ln172_fu_832_p2 = (trunc_ln64_fu_754_p1 ^ trunc_ln64_1_fu_757_p1);

assign xor_ln59_1_fu_657_p2 = (trunc_ln59_5_fu_647_p1 ^ trunc_ln59_4_fu_643_p1);

assign xor_ln59_2_fu_663_p2 = (trunc_ln59_3_fu_639_p1 ^ trunc_ln59_2_fu_635_p1);

assign xor_ln64_1_fu_780_p2 = (trunc_ln64_5_fu_771_p1 ^ trunc_ln64_4_fu_768_p1);

assign xor_ln64_2_fu_786_p2 = (trunc_ln64_3_fu_764_p1 ^ trunc_ln64_2_fu_761_p1);

assign xor_ln65_1_fu_583_p2 = (trunc_ln65_5_fu_574_p1 ^ trunc_ln65_4_fu_571_p1);

assign xor_ln65_2_fu_589_p2 = (trunc_ln65_3_fu_567_p1 ^ trunc_ln65_2_fu_564_p1);

assign xor_ln81_fu_737_p2 = (add_ln81_fu_731_p2 ^ S_2_q0);

assign zext_ln81_10_fu_720_p1 = d_fu_699_p2;

assign zext_ln81_8_fu_710_p1 = b_fu_679_p4;

assign zext_ln81_9_fu_715_p1 = c_fu_689_p4;

assign zext_ln81_fu_705_p1 = a_fu_669_p4;

endmodule //Blowfish_Decrypt
