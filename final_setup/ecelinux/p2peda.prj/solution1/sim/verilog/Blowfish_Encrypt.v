// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Blowfish_Encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        plaintext_address1,
        plaintext_ce1,
        plaintext_q1,
        ciphertext_address0,
        ciphertext_ce0,
        ciphertext_we0,
        ciphertext_d0,
        ciphertext_address1,
        ciphertext_ce1,
        ciphertext_we1,
        ciphertext_d1,
        P_0_read,
        P_1_read,
        P_2_read,
        P_3_read,
        P_4_read,
        P_5_read,
        P_6_read,
        P_7_read,
        P_8_read,
        P_9_read,
        P_10_read,
        P_11_read,
        P_12_read,
        P_13_read,
        P_14_read,
        P_15_read,
        P_16_read,
        P_17_read,
        S_0_address0,
        S_0_ce0,
        S_0_q0,
        S_1_address0,
        S_1_ce0,
        S_1_q0,
        S_2_address0,
        S_2_ce0,
        S_2_q0,
        S_3_address0,
        S_3_ce0,
        S_3_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [7:0] plaintext_q0;
output  [2:0] plaintext_address1;
output   plaintext_ce1;
input  [7:0] plaintext_q1;
output  [2:0] ciphertext_address0;
output   ciphertext_ce0;
output   ciphertext_we0;
output  [7:0] ciphertext_d0;
output  [2:0] ciphertext_address1;
output   ciphertext_ce1;
output   ciphertext_we1;
output  [7:0] ciphertext_d1;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
input  [31:0] P_3_read;
input  [31:0] P_4_read;
input  [31:0] P_5_read;
input  [31:0] P_6_read;
input  [31:0] P_7_read;
input  [31:0] P_8_read;
input  [31:0] P_9_read;
input  [31:0] P_10_read;
input  [31:0] P_11_read;
input  [31:0] P_12_read;
input  [31:0] P_13_read;
input  [31:0] P_14_read;
input  [31:0] P_15_read;
input  [31:0] P_16_read;
input  [31:0] P_17_read;
output  [7:0] S_0_address0;
output   S_0_ce0;
input  [31:0] S_0_q0;
output  [7:0] S_1_address0;
output   S_1_ce0;
input  [31:0] S_1_q0;
output  [7:0] S_2_address0;
output   S_2_ce0;
input  [31:0] S_2_q0;
output  [7:0] S_3_address0;
output   S_3_ce0;
input  [31:0] S_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] plaintext_address0;
reg plaintext_ce0;
reg[2:0] plaintext_address1;
reg plaintext_ce1;
reg[2:0] ciphertext_address0;
reg ciphertext_ce0;
reg ciphertext_we0;
reg[7:0] ciphertext_d0;
reg[2:0] ciphertext_address1;
reg ciphertext_ce1;
reg ciphertext_we1;
reg[7:0] ciphertext_d1;
reg S_0_ce0;
reg S_1_ce0;
reg S_2_ce0;
reg S_3_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] plaintext_load_reg_827;
wire    ap_CS_fsm_state2;
reg   [7:0] plaintext_load_1_reg_832;
reg   [7:0] plaintext_load_2_reg_847;
wire    ap_CS_fsm_state3;
reg   [7:0] plaintext_load_3_reg_852;
reg   [7:0] plaintext_load_4_reg_867;
wire    ap_CS_fsm_state4;
reg   [7:0] plaintext_load_5_reg_872;
wire    ap_CS_fsm_state5;
wire   [31:0] left_3_fu_516_p5;
wire   [31:0] right_3_fu_524_p5;
wire   [4:0] i_fu_540_p2;
reg   [4:0] i_reg_996;
wire    ap_CS_fsm_state6;
wire   [7:0] trunc_ln45_fu_546_p1;
reg   [7:0] trunc_ln45_reg_1001;
wire   [0:0] icmp_ln38_fu_534_p2;
reg   [7:0] trunc_ln2_reg_1006;
wire   [31:0] left_7_fu_636_p2;
reg   [31:0] left_7_reg_1011;
wire    ap_CS_fsm_state7;
wire   [31:0] add_ln81_3_fu_722_p2;
reg   [31:0] add_ln81_3_reg_1036;
wire    ap_CS_fsm_state8;
wire   [31:0] right_fu_728_p2;
wire    ap_CS_fsm_state9;
reg   [7:0] trunc_ln3_reg_1046;
wire    ap_CS_fsm_state10;
reg   [7:0] trunc_ln4_reg_1051;
reg   [7:0] trunc_ln5_reg_1056;
wire   [7:0] xor_ln172_fu_811_p2;
reg   [7:0] xor_ln172_reg_1061;
reg   [31:0] left_4_reg_448;
reg   [31:0] right_4_reg_458;
wire   [4:0] ap_phi_mux_i_0_phi_fu_472_p4;
reg   [4:0] i_0_reg_468;
reg   [31:0] phi_ln39_reg_479;
wire   [63:0] zext_ln81_fu_690_p1;
wire   [63:0] zext_ln81_5_fu_695_p1;
wire   [63:0] zext_ln81_6_fu_700_p1;
wire   [63:0] zext_ln81_7_fu_705_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [7:0] xor_ln168_fu_775_p2;
wire   [15:0] trunc_ln45_5_fu_559_p1;
wire   [15:0] trunc_ln45_4_fu_556_p1;
wire   [23:0] trunc_ln45_3_fu_552_p1;
wire   [23:0] trunc_ln45_2_fu_549_p1;
wire   [31:0] left_fu_563_p2;
wire   [23:0] xor_ln45_2_fu_574_p2;
wire   [15:0] xor_ln45_1_fu_568_p2;
wire   [15:0] trunc_ln39_5_fu_632_p1;
wire   [15:0] trunc_ln39_4_fu_628_p1;
wire   [23:0] trunc_ln39_3_fu_624_p1;
wire   [23:0] trunc_ln39_2_fu_620_p1;
wire   [23:0] xor_ln39_2_fu_648_p2;
wire   [15:0] xor_ln39_1_fu_642_p2;
wire   [7:0] trunc_ln39_1_fu_616_p1;
wire   [7:0] trunc_ln39_fu_612_p1;
wire   [7:0] a_fu_654_p4;
wire   [7:0] b_fu_664_p4;
wire   [7:0] c_fu_674_p4;
wire   [7:0] d_fu_684_p2;
wire   [31:0] add_ln81_fu_710_p2;
wire   [31:0] xor_ln81_fu_716_p2;
wire   [15:0] trunc_ln44_5_fu_750_p1;
wire   [15:0] trunc_ln44_4_fu_747_p1;
wire   [23:0] trunc_ln44_3_fu_743_p1;
wire   [23:0] trunc_ln44_2_fu_740_p1;
wire   [7:0] trunc_ln45_1_fu_771_p1;
wire   [31:0] right_5_fu_754_p2;
wire   [23:0] xor_ln44_2_fu_765_p2;
wire   [15:0] xor_ln44_1_fu_759_p2;
wire   [7:0] trunc_ln44_1_fu_736_p1;
wire   [7:0] trunc_ln44_fu_733_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_condition_596;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_468 <= i_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_468 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        left_4_reg_448 <= left_7_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        left_4_reg_448 <= right_3_fu_524_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_534_p2 == 1'd0))) begin
        if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd0)) begin
            phi_ln39_reg_479 <= P_0_read;
        end else if ((1'b1 == ap_condition_596)) begin
            phi_ln39_reg_479 <= P_15_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd14)) begin
            phi_ln39_reg_479 <= P_14_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd13)) begin
            phi_ln39_reg_479 <= P_13_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd12)) begin
            phi_ln39_reg_479 <= P_12_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd11)) begin
            phi_ln39_reg_479 <= P_11_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd10)) begin
            phi_ln39_reg_479 <= P_10_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd9)) begin
            phi_ln39_reg_479 <= P_9_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd8)) begin
            phi_ln39_reg_479 <= P_8_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd7)) begin
            phi_ln39_reg_479 <= P_7_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd6)) begin
            phi_ln39_reg_479 <= P_6_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd5)) begin
            phi_ln39_reg_479 <= P_5_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd4)) begin
            phi_ln39_reg_479 <= P_4_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd3)) begin
            phi_ln39_reg_479 <= P_3_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd2)) begin
            phi_ln39_reg_479 <= P_2_read;
        end else if ((ap_phi_mux_i_0_phi_fu_472_p4 == 5'd1)) begin
            phi_ln39_reg_479 <= P_1_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        right_4_reg_458 <= right_fu_728_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        right_4_reg_458 <= left_3_fu_516_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln81_3_reg_1036 <= add_ln81_3_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_996 <= i_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        left_7_reg_1011 <= left_7_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_load_1_reg_832 <= plaintext_q1;
        plaintext_load_reg_827 <= plaintext_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_load_2_reg_847 <= plaintext_q0;
        plaintext_load_3_reg_852 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_load_4_reg_867 <= plaintext_q0;
        plaintext_load_5_reg_872 <= plaintext_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_534_p2 == 1'd1))) begin
        trunc_ln2_reg_1006 <= {{xor_ln45_1_fu_568_p2[15:8]}};
        trunc_ln45_reg_1001 <= trunc_ln45_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln3_reg_1046 <= {{right_5_fu_754_p2[31:24]}};
        trunc_ln4_reg_1051 <= {{xor_ln44_2_fu_765_p2[23:16]}};
        trunc_ln5_reg_1056 <= {{xor_ln44_1_fu_759_p2[15:8]}};
        xor_ln172_reg_1061 <= xor_ln172_fu_811_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_0_ce0 = 1'b1;
    end else begin
        S_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_1_ce0 = 1'b1;
    end else begin
        S_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_2_ce0 = 1'b1;
    end else begin
        S_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        S_3_ce0 = 1'b1;
    end else begin
        S_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext_address0 = 64'd0;
    end else begin
        ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext_address1 = 64'd1;
    end else begin
        ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        ciphertext_ce0 = 1'b1;
    end else begin
        ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        ciphertext_ce1 = 1'b1;
    end else begin
        ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d0 = trunc_ln5_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d0 = trunc_ln3_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d0 = trunc_ln2_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext_d0 = {{left_fu_563_p2[31:24]}};
    end else begin
        ciphertext_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ciphertext_d1 = xor_ln172_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ciphertext_d1 = trunc_ln4_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ciphertext_d1 = xor_ln168_fu_775_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext_d1 = {{xor_ln45_2_fu_574_p2[23:16]}};
    end else begin
        ciphertext_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_534_p2 == 1'd1)))) begin
        ciphertext_we0 = 1'b1;
    end else begin
        ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_534_p2 == 1'd1)))) begin
        ciphertext_we1 = 1'b1;
    end else begin
        ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address0 = 64'd0;
    end else begin
        plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        plaintext_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        plaintext_address1 = 64'd1;
    end else begin
        plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        plaintext_ce1 = 1'b1;
    end else begin
        plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_534_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_0_address0 = zext_ln81_fu_690_p1;

assign S_1_address0 = zext_ln81_5_fu_695_p1;

assign S_2_address0 = zext_ln81_6_fu_700_p1;

assign S_3_address0 = zext_ln81_7_fu_705_p1;

assign a_fu_654_p4 = {{left_7_fu_636_p2[31:24]}};

assign add_ln81_3_fu_722_p2 = (S_3_q0 + xor_ln81_fu_716_p2);

assign add_ln81_fu_710_p2 = (S_0_q0 + S_1_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_596 = (~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd0) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd14) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd13) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd12) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd11) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd10) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd9) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd8) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd7) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd6) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd5) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd4) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd3) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd2) & ~(ap_phi_mux_i_0_phi_fu_472_p4 == 5'd1));
end

assign ap_phi_mux_i_0_phi_fu_472_p4 = i_0_reg_468;

assign b_fu_664_p4 = {{xor_ln39_2_fu_648_p2[23:16]}};

assign c_fu_674_p4 = {{xor_ln39_1_fu_642_p2[15:8]}};

assign d_fu_684_p2 = (trunc_ln39_fu_612_p1 ^ trunc_ln39_1_fu_616_p1);

assign i_fu_540_p2 = (i_0_reg_468 + 5'd1);

assign icmp_ln38_fu_534_p2 = ((i_0_reg_468 == 5'd16) ? 1'b1 : 1'b0);

assign left_3_fu_516_p5 = {{{{plaintext_load_reg_827}, {plaintext_load_1_reg_832}}, {plaintext_load_2_reg_847}}, {plaintext_load_3_reg_852}};

assign left_7_fu_636_p2 = (right_4_reg_458 ^ phi_ln39_reg_479);

assign left_fu_563_p2 = (left_4_reg_448 ^ P_17_read);

assign right_3_fu_524_p5 = {{{{plaintext_load_4_reg_867}, {plaintext_load_5_reg_872}}, {plaintext_q0}}, {plaintext_q1}};

assign right_5_fu_754_p2 = (right_4_reg_458 ^ P_16_read);

assign right_fu_728_p2 = (left_4_reg_448 ^ add_ln81_3_reg_1036);

assign trunc_ln39_1_fu_616_p1 = right_4_reg_458[7:0];

assign trunc_ln39_2_fu_620_p1 = phi_ln39_reg_479[23:0];

assign trunc_ln39_3_fu_624_p1 = right_4_reg_458[23:0];

assign trunc_ln39_4_fu_628_p1 = phi_ln39_reg_479[15:0];

assign trunc_ln39_5_fu_632_p1 = right_4_reg_458[15:0];

assign trunc_ln39_fu_612_p1 = phi_ln39_reg_479[7:0];

assign trunc_ln44_1_fu_736_p1 = right_4_reg_458[7:0];

assign trunc_ln44_2_fu_740_p1 = P_16_read[23:0];

assign trunc_ln44_3_fu_743_p1 = right_4_reg_458[23:0];

assign trunc_ln44_4_fu_747_p1 = P_16_read[15:0];

assign trunc_ln44_5_fu_750_p1 = right_4_reg_458[15:0];

assign trunc_ln44_fu_733_p1 = P_16_read[7:0];

assign trunc_ln45_1_fu_771_p1 = left_4_reg_448[7:0];

assign trunc_ln45_2_fu_549_p1 = P_17_read[23:0];

assign trunc_ln45_3_fu_552_p1 = left_4_reg_448[23:0];

assign trunc_ln45_4_fu_556_p1 = P_17_read[15:0];

assign trunc_ln45_5_fu_559_p1 = left_4_reg_448[15:0];

assign trunc_ln45_fu_546_p1 = P_17_read[7:0];

assign xor_ln168_fu_775_p2 = (trunc_ln45_reg_1001 ^ trunc_ln45_1_fu_771_p1);

assign xor_ln172_fu_811_p2 = (trunc_ln44_fu_733_p1 ^ trunc_ln44_1_fu_736_p1);

assign xor_ln39_1_fu_642_p2 = (trunc_ln39_5_fu_632_p1 ^ trunc_ln39_4_fu_628_p1);

assign xor_ln39_2_fu_648_p2 = (trunc_ln39_3_fu_624_p1 ^ trunc_ln39_2_fu_620_p1);

assign xor_ln44_1_fu_759_p2 = (trunc_ln44_5_fu_750_p1 ^ trunc_ln44_4_fu_747_p1);

assign xor_ln44_2_fu_765_p2 = (trunc_ln44_3_fu_743_p1 ^ trunc_ln44_2_fu_740_p1);

assign xor_ln45_1_fu_568_p2 = (trunc_ln45_5_fu_559_p1 ^ trunc_ln45_4_fu_556_p1);

assign xor_ln45_2_fu_574_p2 = (trunc_ln45_3_fu_552_p1 ^ trunc_ln45_2_fu_549_p1);

assign xor_ln81_fu_716_p2 = (add_ln81_fu_710_p2 ^ S_2_q0);

assign zext_ln81_5_fu_695_p1 = b_fu_664_p4;

assign zext_ln81_6_fu_700_p1 = c_fu_674_p4;

assign zext_ln81_7_fu_705_p1 = d_fu_684_p2;

assign zext_ln81_fu_690_p1 = a_fu_654_p4;

endmodule //Blowfish_Encrypt
