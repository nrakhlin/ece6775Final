// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encrypt_bf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] plaintext_V;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] lower_64_V_fu_227_p1;
reg   [63:0] lower_64_V_reg_676;
reg   [63:0] upper_64_V_reg_681;
wire   [3:0] i_fu_247_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_1_fu_290_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i_2_fu_333_p2;
reg   [3:0] i_2_reg_705;
wire    ap_CS_fsm_state5;
wire   [2:0] trunc_ln297_fu_339_p1;
reg   [2:0] trunc_ln297_reg_710;
wire   [0:0] icmp_ln296_fu_327_p2;
wire   [127:0] p_Result_s_fu_487_p2;
wire    ap_CS_fsm_state6;
wire   [3:0] i_3_fu_499_p2;
reg   [3:0] i_3_reg_728;
wire    ap_CS_fsm_state7;
wire   [2:0] trunc_ln302_fu_505_p1;
reg   [2:0] trunc_ln302_reg_733;
wire   [0:0] icmp_ln301_fu_493_p2;
wire   [127:0] p_Result_1_fu_670_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] plaintext1_address0;
reg    plaintext1_ce0;
reg    plaintext1_we0;
wire   [7:0] plaintext1_d0;
wire   [7:0] plaintext1_q0;
reg    plaintext1_ce1;
wire   [7:0] plaintext1_q1;
reg   [2:0] plaintext2_address0;
reg    plaintext2_ce0;
reg    plaintext2_we0;
wire   [7:0] plaintext2_d0;
wire   [7:0] plaintext2_q0;
reg    plaintext2_ce1;
wire   [7:0] plaintext2_q1;
reg   [2:0] ciphertext1_address0;
reg    ciphertext1_ce0;
reg    ciphertext1_we0;
wire   [7:0] ciphertext1_q0;
reg    ciphertext1_ce1;
reg    ciphertext1_we1;
reg   [2:0] ciphertext2_address0;
reg    ciphertext2_ce0;
reg    ciphertext2_we0;
wire   [7:0] ciphertext2_q0;
reg    ciphertext2_ce1;
reg    ciphertext2_we1;
wire    grp_Blowfish_Encrypt_fu_195_ap_start;
wire    grp_Blowfish_Encrypt_fu_195_ap_done;
wire    grp_Blowfish_Encrypt_fu_195_ap_idle;
wire    grp_Blowfish_Encrypt_fu_195_ap_ready;
wire   [2:0] grp_Blowfish_Encrypt_fu_195_plaintext_address0;
wire    grp_Blowfish_Encrypt_fu_195_plaintext_ce0;
wire   [2:0] grp_Blowfish_Encrypt_fu_195_plaintext_address1;
wire    grp_Blowfish_Encrypt_fu_195_plaintext_ce1;
wire   [2:0] grp_Blowfish_Encrypt_fu_195_ciphertext_address0;
wire    grp_Blowfish_Encrypt_fu_195_ciphertext_ce0;
wire    grp_Blowfish_Encrypt_fu_195_ciphertext_we0;
wire   [7:0] grp_Blowfish_Encrypt_fu_195_ciphertext_d0;
wire   [2:0] grp_Blowfish_Encrypt_fu_195_ciphertext_address1;
wire    grp_Blowfish_Encrypt_fu_195_ciphertext_ce1;
wire    grp_Blowfish_Encrypt_fu_195_ciphertext_we1;
wire   [7:0] grp_Blowfish_Encrypt_fu_195_ciphertext_d1;
wire    grp_Blowfish_Encrypt_fu_211_ap_start;
wire    grp_Blowfish_Encrypt_fu_211_ap_done;
wire    grp_Blowfish_Encrypt_fu_211_ap_idle;
wire    grp_Blowfish_Encrypt_fu_211_ap_ready;
wire   [2:0] grp_Blowfish_Encrypt_fu_211_plaintext_address0;
wire    grp_Blowfish_Encrypt_fu_211_plaintext_ce0;
wire   [2:0] grp_Blowfish_Encrypt_fu_211_plaintext_address1;
wire    grp_Blowfish_Encrypt_fu_211_plaintext_ce1;
wire   [2:0] grp_Blowfish_Encrypt_fu_211_ciphertext_address0;
wire    grp_Blowfish_Encrypt_fu_211_ciphertext_ce0;
wire    grp_Blowfish_Encrypt_fu_211_ciphertext_we0;
wire   [7:0] grp_Blowfish_Encrypt_fu_211_ciphertext_d0;
wire   [2:0] grp_Blowfish_Encrypt_fu_211_ciphertext_address1;
wire    grp_Blowfish_Encrypt_fu_211_ciphertext_ce1;
wire    grp_Blowfish_Encrypt_fu_211_ciphertext_we1;
wire   [7:0] grp_Blowfish_Encrypt_fu_211_ciphertext_d1;
reg   [3:0] i_0_i_reg_128;
wire   [0:0] icmp_ln279_fu_241_p2;
reg   [3:0] i1_0_i_reg_139;
wire   [0:0] icmp_ln285_fu_284_p2;
reg   [127:0] p_Val2_s_reg_150;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
reg   [3:0] i_0_i3_reg_162;
reg   [127:0] p_Val2_1_reg_173;
reg   [3:0] i1_0_i6_reg_184;
reg    grp_Blowfish_Encrypt_fu_195_ap_start_reg;
reg    grp_Blowfish_Encrypt_fu_211_ap_start_reg;
wire   [63:0] zext_ln281_fu_279_p1;
wire   [63:0] zext_ln287_fu_322_p1;
wire   [63:0] zext_ln297_fu_343_p1;
wire   [63:0] zext_ln302_fu_509_p1;
wire   [2:0] trunc_ln281_fu_253_p1;
wire   [5:0] op2_assign_fu_257_p3;
wire   [63:0] zext_ln1503_fu_265_p1;
wire   [63:0] lshr_ln1503_fu_269_p2;
wire   [2:0] trunc_ln287_fu_296_p1;
wire   [5:0] op2_assign_1_fu_300_p3;
wire   [63:0] zext_ln1503_1_fu_308_p1;
wire   [63:0] lshr_ln1503_1_fu_312_p2;
wire   [5:0] Lo_assign_fu_348_p3;
wire   [5:0] or_ln297_fu_355_p2;
wire   [7:0] zext_ln388_fu_371_p1;
wire   [0:0] icmp_ln388_fu_365_p2;
wire   [7:0] zext_ln388_1_fu_375_p1;
wire   [7:0] xor_ln388_fu_379_p2;
wire   [7:0] select_ln388_fu_385_p3;
wire   [7:0] select_ln388_2_fu_401_p3;
wire   [7:0] select_ln388_1_fu_393_p3;
wire   [7:0] xor_ln388_1_fu_409_p2;
wire   [127:0] tmp_V_fu_361_p1;
wire   [127:0] zext_ln388_2_fu_415_p1;
wire   [127:0] shl_ln388_fu_427_p2;
reg   [127:0] tmp_fu_433_p4;
wire   [127:0] zext_ln388_3_fu_419_p1;
wire   [127:0] zext_ln388_4_fu_423_p1;
wire   [127:0] shl_ln388_1_fu_451_p2;
wire   [127:0] lshr_ln388_fu_457_p2;
wire   [127:0] and_ln388_fu_463_p2;
wire   [127:0] xor_ln388_2_fu_469_p2;
wire   [127:0] select_ln388_3_fu_443_p3;
wire   [127:0] and_ln388_1_fu_475_p2;
wire   [127:0] and_ln388_2_fu_481_p2;
wire   [5:0] shl_ln_fu_514_p3;
wire   [5:0] or_ln302_fu_521_p2;
wire   [6:0] Lo_assign_1_fu_535_p4;
wire   [6:0] Hi_assign_1_fu_527_p3;
wire   [7:0] zext_ln388_5_fu_554_p1;
wire   [0:0] icmp_ln388_1_fu_548_p2;
wire   [7:0] zext_ln388_6_fu_558_p1;
wire   [7:0] xor_ln388_3_fu_562_p2;
wire   [7:0] select_ln388_4_fu_568_p3;
wire   [7:0] select_ln388_6_fu_584_p3;
wire   [7:0] select_ln388_5_fu_576_p3;
wire   [7:0] xor_ln388_4_fu_592_p2;
wire   [127:0] tmp_V_1_fu_544_p1;
wire   [127:0] zext_ln388_7_fu_598_p1;
wire   [127:0] shl_ln388_2_fu_610_p2;
reg   [127:0] tmp_1_fu_616_p4;
wire   [127:0] zext_ln388_8_fu_602_p1;
wire   [127:0] zext_ln388_9_fu_606_p1;
wire   [127:0] shl_ln388_3_fu_634_p2;
wire   [127:0] lshr_ln388_1_fu_640_p2;
wire   [127:0] and_ln388_3_fu_646_p2;
wire   [127:0] xor_ln388_5_fu_652_p2;
wire   [127:0] select_ln388_7_fu_626_p3;
wire   [127:0] and_ln388_4_fu_658_p2;
wire   [127:0] and_ln388_5_fu_664_p2;
reg   [127:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_Blowfish_Encrypt_fu_195_ap_start_reg = 1'b0;
#0 grp_Blowfish_Encrypt_fu_211_ap_start_reg = 1'b0;
#0 ap_return_preg = 128'd0;
end

encrypt_bf_plaintfYi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
plaintext1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(plaintext1_address0),
    .ce0(plaintext1_ce0),
    .we0(plaintext1_we0),
    .d0(plaintext1_d0),
    .q0(plaintext1_q0),
    .address1(grp_Blowfish_Encrypt_fu_195_plaintext_address1),
    .ce1(plaintext1_ce1),
    .q1(plaintext1_q1)
);

encrypt_bf_plaintfYi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
plaintext2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(plaintext2_address0),
    .ce0(plaintext2_ce0),
    .we0(plaintext2_we0),
    .d0(plaintext2_d0),
    .q0(plaintext2_q0),
    .address1(grp_Blowfish_Encrypt_fu_211_plaintext_address1),
    .ce1(plaintext2_ce1),
    .q1(plaintext2_q1)
);

encrypt_bf_cipherhbi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ciphertext1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ciphertext1_address0),
    .ce0(ciphertext1_ce0),
    .we0(ciphertext1_we0),
    .d0(grp_Blowfish_Encrypt_fu_195_ciphertext_d0),
    .q0(ciphertext1_q0),
    .address1(grp_Blowfish_Encrypt_fu_195_ciphertext_address1),
    .ce1(ciphertext1_ce1),
    .we1(ciphertext1_we1),
    .d1(grp_Blowfish_Encrypt_fu_195_ciphertext_d1)
);

encrypt_bf_cipherhbi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ciphertext2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ciphertext2_address0),
    .ce0(ciphertext2_ce0),
    .we0(ciphertext2_we0),
    .d0(grp_Blowfish_Encrypt_fu_211_ciphertext_d0),
    .q0(ciphertext2_q0),
    .address1(grp_Blowfish_Encrypt_fu_211_ciphertext_address1),
    .ce1(ciphertext2_ce1),
    .we1(ciphertext2_we1),
    .d1(grp_Blowfish_Encrypt_fu_211_ciphertext_d1)
);

Blowfish_Encrypt grp_Blowfish_Encrypt_fu_195(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Blowfish_Encrypt_fu_195_ap_start),
    .ap_done(grp_Blowfish_Encrypt_fu_195_ap_done),
    .ap_idle(grp_Blowfish_Encrypt_fu_195_ap_idle),
    .ap_ready(grp_Blowfish_Encrypt_fu_195_ap_ready),
    .plaintext_address0(grp_Blowfish_Encrypt_fu_195_plaintext_address0),
    .plaintext_ce0(grp_Blowfish_Encrypt_fu_195_plaintext_ce0),
    .plaintext_q0(plaintext1_q0),
    .plaintext_address1(grp_Blowfish_Encrypt_fu_195_plaintext_address1),
    .plaintext_ce1(grp_Blowfish_Encrypt_fu_195_plaintext_ce1),
    .plaintext_q1(plaintext1_q1),
    .ciphertext_address0(grp_Blowfish_Encrypt_fu_195_ciphertext_address0),
    .ciphertext_ce0(grp_Blowfish_Encrypt_fu_195_ciphertext_ce0),
    .ciphertext_we0(grp_Blowfish_Encrypt_fu_195_ciphertext_we0),
    .ciphertext_d0(grp_Blowfish_Encrypt_fu_195_ciphertext_d0),
    .ciphertext_address1(grp_Blowfish_Encrypt_fu_195_ciphertext_address1),
    .ciphertext_ce1(grp_Blowfish_Encrypt_fu_195_ciphertext_ce1),
    .ciphertext_we1(grp_Blowfish_Encrypt_fu_195_ciphertext_we1),
    .ciphertext_d1(grp_Blowfish_Encrypt_fu_195_ciphertext_d1)
);

Blowfish_Encrypt grp_Blowfish_Encrypt_fu_211(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Blowfish_Encrypt_fu_211_ap_start),
    .ap_done(grp_Blowfish_Encrypt_fu_211_ap_done),
    .ap_idle(grp_Blowfish_Encrypt_fu_211_ap_idle),
    .ap_ready(grp_Blowfish_Encrypt_fu_211_ap_ready),
    .plaintext_address0(grp_Blowfish_Encrypt_fu_211_plaintext_address0),
    .plaintext_ce0(grp_Blowfish_Encrypt_fu_211_plaintext_ce0),
    .plaintext_q0(plaintext2_q0),
    .plaintext_address1(grp_Blowfish_Encrypt_fu_211_plaintext_address1),
    .plaintext_ce1(grp_Blowfish_Encrypt_fu_211_plaintext_ce1),
    .plaintext_q1(plaintext2_q1),
    .ciphertext_address0(grp_Blowfish_Encrypt_fu_211_ciphertext_address0),
    .ciphertext_ce0(grp_Blowfish_Encrypt_fu_211_ciphertext_ce0),
    .ciphertext_we0(grp_Blowfish_Encrypt_fu_211_ciphertext_we0),
    .ciphertext_d0(grp_Blowfish_Encrypt_fu_211_ciphertext_d0),
    .ciphertext_address1(grp_Blowfish_Encrypt_fu_211_ciphertext_address1),
    .ciphertext_ce1(grp_Blowfish_Encrypt_fu_211_ciphertext_ce1),
    .ciphertext_we1(grp_Blowfish_Encrypt_fu_211_ciphertext_we1),
    .ciphertext_d1(grp_Blowfish_Encrypt_fu_211_ciphertext_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 128'd0;
    end else begin
        if (((icmp_ln301_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_return_preg <= p_Val2_1_reg_173;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Blowfish_Encrypt_fu_195_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln285_fu_284_p2 == 1'd1))) begin
            grp_Blowfish_Encrypt_fu_195_ap_start_reg <= 1'b1;
        end else if ((grp_Blowfish_Encrypt_fu_195_ap_ready == 1'b1)) begin
            grp_Blowfish_Encrypt_fu_195_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Blowfish_Encrypt_fu_211_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln285_fu_284_p2 == 1'd1))) begin
            grp_Blowfish_Encrypt_fu_211_ap_start_reg <= 1'b1;
        end else if ((grp_Blowfish_Encrypt_fu_211_ap_ready == 1'b1)) begin
            grp_Blowfish_Encrypt_fu_211_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln296_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_i6_reg_184 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_0_i6_reg_184 <= i_3_reg_728;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln279_fu_241_p2 == 1'd1))) begin
        i1_0_i_reg_139 <= 4'd0;
    end else if (((icmp_ln285_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_i_reg_139 <= i_1_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i3_reg_162 <= i_2_reg_705;
    end else if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i3_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_128 <= i_fu_247_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln296_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_1_reg_173 <= p_Val2_s_reg_150;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_1_reg_173 <= p_Result_1_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_150 <= p_Result_s_fu_487_p2;
    end else if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_150 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_705 <= i_2_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_3_reg_728 <= i_3_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lower_64_V_reg_676 <= lower_64_V_fu_227_p1;
        upper_64_V_reg_681 <= {{plaintext_V[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln296_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        trunc_ln297_reg_710 <= trunc_ln297_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln301_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        trunc_ln302_reg_733 <= trunc_ln302_fu_505_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln301_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln301_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln301_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_return = p_Val2_1_reg_173;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ciphertext1_address0 = zext_ln297_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext1_address0 = grp_Blowfish_Encrypt_fu_195_ciphertext_address0;
    end else begin
        ciphertext1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ciphertext1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext1_ce0 = grp_Blowfish_Encrypt_fu_195_ciphertext_ce0;
    end else begin
        ciphertext1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext1_ce1 = grp_Blowfish_Encrypt_fu_195_ciphertext_ce1;
    end else begin
        ciphertext1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext1_we0 = grp_Blowfish_Encrypt_fu_195_ciphertext_we0;
    end else begin
        ciphertext1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext1_we1 = grp_Blowfish_Encrypt_fu_195_ciphertext_we1;
    end else begin
        ciphertext1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ciphertext2_address0 = zext_ln302_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext2_address0 = grp_Blowfish_Encrypt_fu_211_ciphertext_address0;
    end else begin
        ciphertext2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ciphertext2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext2_ce0 = grp_Blowfish_Encrypt_fu_211_ciphertext_ce0;
    end else begin
        ciphertext2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext2_ce1 = grp_Blowfish_Encrypt_fu_211_ciphertext_ce1;
    end else begin
        ciphertext2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext2_we0 = grp_Blowfish_Encrypt_fu_211_ciphertext_we0;
    end else begin
        ciphertext2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ciphertext2_we1 = grp_Blowfish_Encrypt_fu_211_ciphertext_we1;
    end else begin
        ciphertext2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext1_address0 = zext_ln281_fu_279_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext1_address0 = grp_Blowfish_Encrypt_fu_195_plaintext_address0;
    end else begin
        plaintext1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext1_ce0 = grp_Blowfish_Encrypt_fu_195_plaintext_ce0;
    end else begin
        plaintext1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext1_ce1 = grp_Blowfish_Encrypt_fu_195_plaintext_ce1;
    end else begin
        plaintext1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln279_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        plaintext1_we0 = 1'b1;
    end else begin
        plaintext1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln285_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        plaintext2_address0 = zext_ln287_fu_322_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext2_address0 = grp_Blowfish_Encrypt_fu_211_plaintext_address0;
    end else begin
        plaintext2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln285_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        plaintext2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext2_ce0 = grp_Blowfish_Encrypt_fu_211_plaintext_ce0;
    end else begin
        plaintext2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        plaintext2_ce1 = grp_Blowfish_Encrypt_fu_211_plaintext_ce1;
    end else begin
        plaintext2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln285_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        plaintext2_we0 = 1'b1;
    end else begin
        plaintext2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln279_fu_241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln285_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln296_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln301_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_1_fu_527_p3 = {{1'd1}, {or_ln302_fu_521_p2}};

assign Lo_assign_1_fu_535_p4 = {{{{1'd1}, {trunc_ln302_reg_733}}}, {3'd0}};

assign Lo_assign_fu_348_p3 = {{trunc_ln297_reg_710}, {3'd0}};

assign and_ln388_1_fu_475_p2 = (xor_ln388_2_fu_469_p2 & p_Val2_s_reg_150);

assign and_ln388_2_fu_481_p2 = (select_ln388_3_fu_443_p3 & and_ln388_fu_463_p2);

assign and_ln388_3_fu_646_p2 = (shl_ln388_3_fu_634_p2 & lshr_ln388_1_fu_640_p2);

assign and_ln388_4_fu_658_p2 = (xor_ln388_5_fu_652_p2 & p_Val2_1_reg_173);

assign and_ln388_5_fu_664_p2 = (select_ln388_7_fu_626_p3 & and_ln388_3_fu_646_p2);

assign and_ln388_fu_463_p2 = (shl_ln388_1_fu_451_p2 & lshr_ln388_fu_457_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_Blowfish_Encrypt_fu_211_ap_done == 1'b0) | (grp_Blowfish_Encrypt_fu_195_ap_done == 1'b0));
end

assign grp_Blowfish_Encrypt_fu_195_ap_start = grp_Blowfish_Encrypt_fu_195_ap_start_reg;

assign grp_Blowfish_Encrypt_fu_211_ap_start = grp_Blowfish_Encrypt_fu_211_ap_start_reg;

assign i_1_fu_290_p2 = (i1_0_i_reg_139 + 4'd1);

assign i_2_fu_333_p2 = (i_0_i3_reg_162 + 4'd1);

assign i_3_fu_499_p2 = (i1_0_i6_reg_184 + 4'd1);

assign i_fu_247_p2 = (i_0_i_reg_128 + 4'd1);

assign icmp_ln279_fu_241_p2 = ((i_0_i_reg_128 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_284_p2 = ((i1_0_i_reg_139 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln296_fu_327_p2 = ((i_0_i3_reg_162 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln301_fu_493_p2 = ((i1_0_i6_reg_184 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln388_1_fu_548_p2 = ((Lo_assign_1_fu_535_p4 > Hi_assign_1_fu_527_p3) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_365_p2 = ((Lo_assign_fu_348_p3 > or_ln297_fu_355_p2) ? 1'b1 : 1'b0);

assign lower_64_V_fu_227_p1 = plaintext_V[63:0];

assign lshr_ln1503_1_fu_312_p2 = upper_64_V_reg_681 >> zext_ln1503_1_fu_308_p1;

assign lshr_ln1503_fu_269_p2 = lower_64_V_reg_676 >> zext_ln1503_fu_265_p1;

assign lshr_ln388_1_fu_640_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln388_9_fu_606_p1;

assign lshr_ln388_fu_457_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln388_4_fu_423_p1;

assign op2_assign_1_fu_300_p3 = {{trunc_ln287_fu_296_p1}, {3'd0}};

assign op2_assign_fu_257_p3 = {{trunc_ln281_fu_253_p1}, {3'd0}};

assign or_ln297_fu_355_p2 = (6'd7 | Lo_assign_fu_348_p3);

assign or_ln302_fu_521_p2 = (shl_ln_fu_514_p3 | 6'd7);

assign p_Result_1_fu_670_p2 = (and_ln388_5_fu_664_p2 | and_ln388_4_fu_658_p2);

assign p_Result_s_fu_487_p2 = (and_ln388_2_fu_481_p2 | and_ln388_1_fu_475_p2);

assign plaintext1_d0 = lshr_ln1503_fu_269_p2[7:0];

assign plaintext2_d0 = lshr_ln1503_1_fu_312_p2[7:0];

assign select_ln388_1_fu_393_p3 = ((icmp_ln388_fu_365_p2[0:0] === 1'b1) ? zext_ln388_1_fu_375_p1 : zext_ln388_fu_371_p1);

assign select_ln388_2_fu_401_p3 = ((icmp_ln388_fu_365_p2[0:0] === 1'b1) ? xor_ln388_fu_379_p2 : zext_ln388_fu_371_p1);

assign select_ln388_3_fu_443_p3 = ((icmp_ln388_fu_365_p2[0:0] === 1'b1) ? tmp_fu_433_p4 : shl_ln388_fu_427_p2);

assign select_ln388_4_fu_568_p3 = ((icmp_ln388_1_fu_548_p2[0:0] === 1'b1) ? zext_ln388_5_fu_554_p1 : zext_ln388_6_fu_558_p1);

assign select_ln388_5_fu_576_p3 = ((icmp_ln388_1_fu_548_p2[0:0] === 1'b1) ? zext_ln388_6_fu_558_p1 : zext_ln388_5_fu_554_p1);

assign select_ln388_6_fu_584_p3 = ((icmp_ln388_1_fu_548_p2[0:0] === 1'b1) ? xor_ln388_3_fu_562_p2 : zext_ln388_5_fu_554_p1);

assign select_ln388_7_fu_626_p3 = ((icmp_ln388_1_fu_548_p2[0:0] === 1'b1) ? tmp_1_fu_616_p4 : shl_ln388_2_fu_610_p2);

assign select_ln388_fu_385_p3 = ((icmp_ln388_fu_365_p2[0:0] === 1'b1) ? zext_ln388_fu_371_p1 : zext_ln388_1_fu_375_p1);

assign shl_ln388_1_fu_451_p2 = 128'd340282366920938463463374607431768211455 << zext_ln388_3_fu_419_p1;

assign shl_ln388_2_fu_610_p2 = tmp_V_1_fu_544_p1 << zext_ln388_7_fu_598_p1;

assign shl_ln388_3_fu_634_p2 = 128'd340282366920938463463374607431768211455 << zext_ln388_8_fu_602_p1;

assign shl_ln388_fu_427_p2 = tmp_V_fu_361_p1 << zext_ln388_2_fu_415_p1;

assign shl_ln_fu_514_p3 = {{trunc_ln302_reg_733}, {3'd0}};

integer ap_tvar_int_0;

always @ (shl_ln388_2_fu_610_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_1_fu_616_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_616_p4[ap_tvar_int_0] = shl_ln388_2_fu_610_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_1_fu_544_p1 = ciphertext2_q0;

assign tmp_V_fu_361_p1 = ciphertext1_q0;

integer ap_tvar_int_1;

always @ (shl_ln388_fu_427_p2) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_fu_433_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_433_p4[ap_tvar_int_1] = shl_ln388_fu_427_p2[127 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln281_fu_253_p1 = i_0_i_reg_128[2:0];

assign trunc_ln287_fu_296_p1 = i1_0_i_reg_139[2:0];

assign trunc_ln297_fu_339_p1 = i_0_i3_reg_162[2:0];

assign trunc_ln302_fu_505_p1 = i1_0_i6_reg_184[2:0];

assign xor_ln388_1_fu_409_p2 = (select_ln388_fu_385_p3 ^ 8'd127);

assign xor_ln388_2_fu_469_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln388_fu_463_p2);

assign xor_ln388_3_fu_562_p2 = (zext_ln388_5_fu_554_p1 ^ 8'd127);

assign xor_ln388_4_fu_592_p2 = (select_ln388_4_fu_568_p3 ^ 8'd127);

assign xor_ln388_5_fu_652_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln388_3_fu_646_p2);

assign xor_ln388_fu_379_p2 = (zext_ln388_fu_371_p1 ^ 8'd127);

assign zext_ln1503_1_fu_308_p1 = op2_assign_1_fu_300_p3;

assign zext_ln1503_fu_265_p1 = op2_assign_fu_257_p3;

assign zext_ln281_fu_279_p1 = i_0_i_reg_128;

assign zext_ln287_fu_322_p1 = i1_0_i_reg_139;

assign zext_ln297_fu_343_p1 = i_0_i3_reg_162;

assign zext_ln302_fu_509_p1 = i1_0_i6_reg_184;

assign zext_ln388_1_fu_375_p1 = or_ln297_fu_355_p2;

assign zext_ln388_2_fu_415_p1 = select_ln388_2_fu_401_p3;

assign zext_ln388_3_fu_419_p1 = select_ln388_1_fu_393_p3;

assign zext_ln388_4_fu_423_p1 = xor_ln388_1_fu_409_p2;

assign zext_ln388_5_fu_554_p1 = Lo_assign_1_fu_535_p4;

assign zext_ln388_6_fu_558_p1 = Hi_assign_1_fu_527_p3;

assign zext_ln388_7_fu_598_p1 = select_ln388_6_fu_584_p3;

assign zext_ln388_8_fu_602_p1 = select_ln388_5_fu_576_p3;

assign zext_ln388_9_fu_606_p1 = xor_ln388_4_fu_592_p2;

assign zext_ln388_fu_371_p1 = Lo_assign_fu_348_p3;

endmodule //encrypt_bf
