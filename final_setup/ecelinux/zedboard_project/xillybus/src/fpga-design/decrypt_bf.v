// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decrypt_bf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ciphertext_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] ciphertext_V;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] ap_return;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] lower_64_V_fu_235_p1;
reg   [63:0] lower_64_V_reg_872;
reg   [63:0] upper_64_V_reg_877;
wire   [3:0] i_fu_255_p2;
reg   [3:0] i_reg_885;
wire    ap_CS_fsm_state2;
wire   [6:0] sub_ln681_9_fu_343_p2;
reg   [6:0] sub_ln681_9_reg_890;
wire   [0:0] icmp_ln292_fu_249_p2;
wire   [63:0] lshr_ln681_fu_353_p2;
reg   [63:0] lshr_ln681_reg_895;
wire   [3:0] i_7_fu_389_p2;
reg   [3:0] i_7_reg_903;
wire    ap_CS_fsm_state4;
wire   [6:0] sub_ln681_12_fu_477_p2;
reg   [6:0] sub_ln681_12_reg_908;
wire   [0:0] icmp_ln300_fu_383_p2;
wire   [63:0] lshr_ln681_6_fu_487_p2;
reg   [63:0] lshr_ln681_6_reg_913;
wire   [3:0] i_8_fu_523_p2;
reg   [3:0] i_8_reg_921;
wire    ap_CS_fsm_state7;
wire   [2:0] trunc_ln314_fu_529_p1;
reg   [2:0] trunc_ln314_reg_926;
wire   [0:0] icmp_ln313_fu_517_p2;
wire   [127:0] p_Result_18_fu_677_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] i_9_fu_689_p2;
reg   [3:0] i_9_reg_944;
wire    ap_CS_fsm_state9;
wire   [2:0] trunc_ln319_fu_695_p1;
reg   [2:0] trunc_ln319_reg_949;
wire   [0:0] icmp_ln318_fu_683_p2;
wire   [127:0] p_Result_19_fu_860_p2;
wire    ap_CS_fsm_state10;
reg   [2:0] ciphertext1_address0;
reg    ciphertext1_ce0;
reg    ciphertext1_we0;
wire   [7:0] ciphertext1_d0;
wire   [7:0] ciphertext1_q0;
reg    ciphertext1_ce1;
wire   [7:0] ciphertext1_q1;
reg   [2:0] ciphertext2_address0;
reg    ciphertext2_ce0;
reg    ciphertext2_we0;
wire   [7:0] ciphertext2_d0;
wire   [7:0] ciphertext2_q0;
reg    ciphertext2_ce1;
wire   [7:0] ciphertext2_q1;
reg   [2:0] decryptedtext1_address0;
reg    decryptedtext1_ce0;
reg    decryptedtext1_we0;
wire   [7:0] decryptedtext1_q0;
reg    decryptedtext1_ce1;
reg    decryptedtext1_we1;
reg   [2:0] decryptedtext2_address0;
reg    decryptedtext2_ce0;
reg    decryptedtext2_we0;
wire   [7:0] decryptedtext2_q0;
reg    decryptedtext2_ce1;
reg    decryptedtext2_we1;
wire    grp_Blowfish_Decrypt_fu_203_ap_start;
wire    grp_Blowfish_Decrypt_fu_203_ap_done;
wire    grp_Blowfish_Decrypt_fu_203_ap_idle;
wire    grp_Blowfish_Decrypt_fu_203_ap_ready;
wire   [2:0] grp_Blowfish_Decrypt_fu_203_ciphertext_address0;
wire    grp_Blowfish_Decrypt_fu_203_ciphertext_ce0;
wire   [2:0] grp_Blowfish_Decrypt_fu_203_ciphertext_address1;
wire    grp_Blowfish_Decrypt_fu_203_ciphertext_ce1;
wire   [2:0] grp_Blowfish_Decrypt_fu_203_decryptedtext_address0;
wire    grp_Blowfish_Decrypt_fu_203_decryptedtext_ce0;
wire    grp_Blowfish_Decrypt_fu_203_decryptedtext_we0;
wire   [7:0] grp_Blowfish_Decrypt_fu_203_decryptedtext_d0;
wire   [2:0] grp_Blowfish_Decrypt_fu_203_decryptedtext_address1;
wire    grp_Blowfish_Decrypt_fu_203_decryptedtext_ce1;
wire    grp_Blowfish_Decrypt_fu_203_decryptedtext_we1;
wire   [7:0] grp_Blowfish_Decrypt_fu_203_decryptedtext_d1;
wire    grp_Blowfish_Decrypt_fu_219_ap_start;
wire    grp_Blowfish_Decrypt_fu_219_ap_done;
wire    grp_Blowfish_Decrypt_fu_219_ap_idle;
wire    grp_Blowfish_Decrypt_fu_219_ap_ready;
wire   [2:0] grp_Blowfish_Decrypt_fu_219_ciphertext_address0;
wire    grp_Blowfish_Decrypt_fu_219_ciphertext_ce0;
wire   [2:0] grp_Blowfish_Decrypt_fu_219_ciphertext_address1;
wire    grp_Blowfish_Decrypt_fu_219_ciphertext_ce1;
wire   [2:0] grp_Blowfish_Decrypt_fu_219_decryptedtext_address0;
wire    grp_Blowfish_Decrypt_fu_219_decryptedtext_ce0;
wire    grp_Blowfish_Decrypt_fu_219_decryptedtext_we0;
wire   [7:0] grp_Blowfish_Decrypt_fu_219_decryptedtext_d0;
wire   [2:0] grp_Blowfish_Decrypt_fu_219_decryptedtext_address1;
wire    grp_Blowfish_Decrypt_fu_219_decryptedtext_ce1;
wire    grp_Blowfish_Decrypt_fu_219_decryptedtext_we1;
wire   [7:0] grp_Blowfish_Decrypt_fu_219_decryptedtext_d1;
reg   [3:0] i_0_i_reg_134;
wire    ap_CS_fsm_state3;
reg   [3:0] i1_0_i_reg_146;
wire    ap_CS_fsm_state5;
reg   [127:0] p_Val2_8_reg_158;
wire    ap_CS_fsm_state6;
reg    ap_block_state6_on_subcall_done;
reg   [3:0] i_0_i3_reg_170;
reg   [127:0] p_Val2_9_reg_181;
reg   [3:0] i1_0_i9_reg_192;
reg    grp_Blowfish_Decrypt_fu_203_ap_start_reg;
reg    grp_Blowfish_Decrypt_fu_219_ap_start_reg;
wire   [63:0] zext_ln296_fu_378_p1;
wire   [63:0] zext_ln304_fu_512_p1;
wire   [63:0] zext_ln314_fu_533_p1;
wire   [63:0] zext_ln319_fu_699_p1;
wire   [2:0] trunc_ln296_fu_261_p1;
wire   [5:0] Lo_assign_fu_265_p3;
wire   [5:0] or_ln296_fu_273_p2;
wire   [6:0] zext_ln681_fu_285_p1;
wire   [6:0] zext_ln681_11_fu_289_p1;
wire   [0:0] icmp_ln681_fu_279_p2;
wire   [6:0] sub_ln681_fu_302_p2;
wire   [6:0] sub_ln681_8_fu_314_p2;
reg   [63:0] tmp_fu_293_p4;
wire   [6:0] xor_ln681_fu_308_p2;
wire   [6:0] select_ln681_fu_320_p3;
wire   [6:0] select_ln681_9_fu_335_p3;
wire   [63:0] select_ln681_8_fu_328_p3;
wire   [63:0] zext_ln681_12_fu_349_p1;
wire   [63:0] zext_ln681_13_fu_359_p1;
wire   [63:0] lshr_ln681_5_fu_362_p2;
wire   [63:0] p_Result_s_fu_368_p2;
wire   [2:0] trunc_ln304_fu_395_p1;
wire   [5:0] Lo_assign_7_fu_399_p3;
wire   [5:0] or_ln304_fu_407_p2;
wire   [6:0] zext_ln681_14_fu_419_p1;
wire   [6:0] zext_ln681_15_fu_423_p1;
wire   [0:0] icmp_ln681_2_fu_413_p2;
wire   [6:0] sub_ln681_10_fu_436_p2;
wire   [6:0] sub_ln681_11_fu_448_p2;
reg   [63:0] tmp_7_fu_427_p4;
wire   [6:0] xor_ln681_2_fu_442_p2;
wire   [6:0] select_ln681_10_fu_454_p3;
wire   [6:0] select_ln681_12_fu_469_p3;
wire   [63:0] select_ln681_11_fu_462_p3;
wire   [63:0] zext_ln681_16_fu_483_p1;
wire   [63:0] zext_ln681_17_fu_493_p1;
wire   [63:0] lshr_ln681_7_fu_496_p2;
wire   [63:0] p_Result_15_fu_502_p2;
wire   [5:0] Lo_assign_8_fu_538_p3;
wire   [5:0] or_ln314_fu_545_p2;
wire   [7:0] zext_ln388_fu_561_p1;
wire   [0:0] icmp_ln388_fu_555_p2;
wire   [7:0] zext_ln388_10_fu_565_p1;
wire   [7:0] xor_ln388_fu_569_p2;
wire   [7:0] select_ln388_fu_575_p3;
wire   [7:0] select_ln388_9_fu_591_p3;
wire   [7:0] select_ln388_8_fu_583_p3;
wire   [7:0] xor_ln388_6_fu_599_p2;
wire   [127:0] tmp_V_fu_551_p1;
wire   [127:0] zext_ln388_11_fu_605_p1;
wire   [127:0] shl_ln388_fu_617_p2;
reg   [127:0] tmp_8_fu_623_p4;
wire   [127:0] zext_ln388_12_fu_609_p1;
wire   [127:0] zext_ln388_13_fu_613_p1;
wire   [127:0] shl_ln388_4_fu_641_p2;
wire   [127:0] lshr_ln388_fu_647_p2;
wire   [127:0] and_ln388_fu_653_p2;
wire   [127:0] xor_ln388_7_fu_659_p2;
wire   [127:0] select_ln388_10_fu_633_p3;
wire   [127:0] and_ln388_6_fu_665_p2;
wire   [127:0] and_ln388_7_fu_671_p2;
wire   [5:0] shl_ln_fu_704_p3;
wire   [5:0] or_ln319_fu_711_p2;
wire   [6:0] Lo_assign_9_fu_725_p4;
wire   [6:0] Hi_assign_9_fu_717_p3;
wire   [7:0] zext_ln388_14_fu_744_p1;
wire   [0:0] icmp_ln388_2_fu_738_p2;
wire   [7:0] zext_ln388_15_fu_748_p1;
wire   [7:0] xor_ln388_8_fu_752_p2;
wire   [7:0] select_ln388_11_fu_758_p3;
wire   [7:0] select_ln388_13_fu_774_p3;
wire   [7:0] select_ln388_12_fu_766_p3;
wire   [7:0] xor_ln388_9_fu_782_p2;
wire   [127:0] tmp_V_5_fu_734_p1;
wire   [127:0] zext_ln388_16_fu_788_p1;
wire   [127:0] shl_ln388_5_fu_800_p2;
reg   [127:0] tmp_9_fu_806_p4;
wire   [127:0] zext_ln388_17_fu_792_p1;
wire   [127:0] zext_ln388_18_fu_796_p1;
wire   [127:0] shl_ln388_6_fu_824_p2;
wire   [127:0] lshr_ln388_2_fu_830_p2;
wire   [127:0] and_ln388_8_fu_836_p2;
wire   [127:0] xor_ln388_10_fu_842_p2;
wire   [127:0] select_ln388_14_fu_816_p3;
wire   [127:0] and_ln388_9_fu_848_p2;
wire   [127:0] and_ln388_10_fu_854_p2;
reg   [127:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_Blowfish_Decrypt_fu_203_ap_start_reg = 1'b0;
#0 grp_Blowfish_Decrypt_fu_219_ap_start_reg = 1'b0;
#0 ap_return_preg = 128'd0;
end

encrypt_bf_plaintfYi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ciphertext1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ciphertext1_address0),
    .ce0(ciphertext1_ce0),
    .we0(ciphertext1_we0),
    .d0(ciphertext1_d0),
    .q0(ciphertext1_q0),
    .address1(grp_Blowfish_Decrypt_fu_203_ciphertext_address1),
    .ce1(ciphertext1_ce1),
    .q1(ciphertext1_q1)
);

encrypt_bf_plaintfYi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ciphertext2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ciphertext2_address0),
    .ce0(ciphertext2_ce0),
    .we0(ciphertext2_we0),
    .d0(ciphertext2_d0),
    .q0(ciphertext2_q0),
    .address1(grp_Blowfish_Decrypt_fu_219_ciphertext_address1),
    .ce1(ciphertext2_ce1),
    .q1(ciphertext2_q1)
);

encrypt_bf_cipherhbi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
decryptedtext1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decryptedtext1_address0),
    .ce0(decryptedtext1_ce0),
    .we0(decryptedtext1_we0),
    .d0(grp_Blowfish_Decrypt_fu_203_decryptedtext_d0),
    .q0(decryptedtext1_q0),
    .address1(grp_Blowfish_Decrypt_fu_203_decryptedtext_address1),
    .ce1(decryptedtext1_ce1),
    .we1(decryptedtext1_we1),
    .d1(grp_Blowfish_Decrypt_fu_203_decryptedtext_d1)
);

encrypt_bf_cipherhbi #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
decryptedtext2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decryptedtext2_address0),
    .ce0(decryptedtext2_ce0),
    .we0(decryptedtext2_we0),
    .d0(grp_Blowfish_Decrypt_fu_219_decryptedtext_d0),
    .q0(decryptedtext2_q0),
    .address1(grp_Blowfish_Decrypt_fu_219_decryptedtext_address1),
    .ce1(decryptedtext2_ce1),
    .we1(decryptedtext2_we1),
    .d1(grp_Blowfish_Decrypt_fu_219_decryptedtext_d1)
);

Blowfish_Decrypt grp_Blowfish_Decrypt_fu_203(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Blowfish_Decrypt_fu_203_ap_start),
    .ap_done(grp_Blowfish_Decrypt_fu_203_ap_done),
    .ap_idle(grp_Blowfish_Decrypt_fu_203_ap_idle),
    .ap_ready(grp_Blowfish_Decrypt_fu_203_ap_ready),
    .ciphertext_address0(grp_Blowfish_Decrypt_fu_203_ciphertext_address0),
    .ciphertext_ce0(grp_Blowfish_Decrypt_fu_203_ciphertext_ce0),
    .ciphertext_q0(ciphertext1_q0),
    .ciphertext_address1(grp_Blowfish_Decrypt_fu_203_ciphertext_address1),
    .ciphertext_ce1(grp_Blowfish_Decrypt_fu_203_ciphertext_ce1),
    .ciphertext_q1(ciphertext1_q1),
    .decryptedtext_address0(grp_Blowfish_Decrypt_fu_203_decryptedtext_address0),
    .decryptedtext_ce0(grp_Blowfish_Decrypt_fu_203_decryptedtext_ce0),
    .decryptedtext_we0(grp_Blowfish_Decrypt_fu_203_decryptedtext_we0),
    .decryptedtext_d0(grp_Blowfish_Decrypt_fu_203_decryptedtext_d0),
    .decryptedtext_address1(grp_Blowfish_Decrypt_fu_203_decryptedtext_address1),
    .decryptedtext_ce1(grp_Blowfish_Decrypt_fu_203_decryptedtext_ce1),
    .decryptedtext_we1(grp_Blowfish_Decrypt_fu_203_decryptedtext_we1),
    .decryptedtext_d1(grp_Blowfish_Decrypt_fu_203_decryptedtext_d1)
);

Blowfish_Decrypt grp_Blowfish_Decrypt_fu_219(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Blowfish_Decrypt_fu_219_ap_start),
    .ap_done(grp_Blowfish_Decrypt_fu_219_ap_done),
    .ap_idle(grp_Blowfish_Decrypt_fu_219_ap_idle),
    .ap_ready(grp_Blowfish_Decrypt_fu_219_ap_ready),
    .ciphertext_address0(grp_Blowfish_Decrypt_fu_219_ciphertext_address0),
    .ciphertext_ce0(grp_Blowfish_Decrypt_fu_219_ciphertext_ce0),
    .ciphertext_q0(ciphertext2_q0),
    .ciphertext_address1(grp_Blowfish_Decrypt_fu_219_ciphertext_address1),
    .ciphertext_ce1(grp_Blowfish_Decrypt_fu_219_ciphertext_ce1),
    .ciphertext_q1(ciphertext2_q1),
    .decryptedtext_address0(grp_Blowfish_Decrypt_fu_219_decryptedtext_address0),
    .decryptedtext_ce0(grp_Blowfish_Decrypt_fu_219_decryptedtext_ce0),
    .decryptedtext_we0(grp_Blowfish_Decrypt_fu_219_decryptedtext_we0),
    .decryptedtext_d0(grp_Blowfish_Decrypt_fu_219_decryptedtext_d0),
    .decryptedtext_address1(grp_Blowfish_Decrypt_fu_219_decryptedtext_address1),
    .decryptedtext_ce1(grp_Blowfish_Decrypt_fu_219_decryptedtext_ce1),
    .decryptedtext_we1(grp_Blowfish_Decrypt_fu_219_decryptedtext_we1),
    .decryptedtext_d1(grp_Blowfish_Decrypt_fu_219_decryptedtext_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 128'd0;
    end else begin
        if (((icmp_ln318_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_return_preg <= p_Val2_9_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Blowfish_Decrypt_fu_203_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln300_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_Blowfish_Decrypt_fu_203_ap_start_reg <= 1'b1;
        end else if ((grp_Blowfish_Decrypt_fu_203_ap_ready == 1'b1)) begin
            grp_Blowfish_Decrypt_fu_203_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Blowfish_Decrypt_fu_219_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln300_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_Blowfish_Decrypt_fu_219_ap_start_reg <= 1'b1;
        end else if ((grp_Blowfish_Decrypt_fu_219_ap_ready == 1'b1)) begin
            grp_Blowfish_Decrypt_fu_219_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln313_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i1_0_i9_reg_192 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i1_0_i9_reg_192 <= i_9_reg_944;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_i_reg_146 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_i_reg_146 <= i_7_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i3_reg_170 <= i_8_reg_921;
    end else if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i3_reg_170 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_134 <= i_reg_885;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_134 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_8_reg_158 <= p_Result_18_fu_677_p2;
    end else if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Val2_8_reg_158 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln313_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_9_reg_181 <= p_Val2_8_reg_158;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_9_reg_181 <= p_Result_19_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_7_reg_903 <= i_7_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_8_reg_921 <= i_8_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_9_reg_944 <= i_9_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_885 <= i_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lower_64_V_reg_872 <= lower_64_V_fu_235_p1;
        upper_64_V_reg_877 <= {{ciphertext_V[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        lshr_ln681_6_reg_913 <= lshr_ln681_6_fu_487_p2;
        sub_ln681_12_reg_908[6 : 1] <= sub_ln681_12_fu_477_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lshr_ln681_reg_895 <= lshr_ln681_fu_353_p2;
        sub_ln681_9_reg_890[6 : 1] <= sub_ln681_9_fu_343_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln313_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        trunc_ln314_reg_926 <= trunc_ln314_fu_529_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_683_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        trunc_ln319_reg_949 <= trunc_ln319_fu_695_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln318_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_return = p_Val2_9_reg_181;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext1_address0 = zext_ln296_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext1_address0 = grp_Blowfish_Decrypt_fu_203_ciphertext_address0;
    end else begin
        ciphertext1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext1_ce0 = grp_Blowfish_Decrypt_fu_203_ciphertext_ce0;
    end else begin
        ciphertext1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext1_ce1 = grp_Blowfish_Decrypt_fu_203_ciphertext_ce1;
    end else begin
        ciphertext1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ciphertext1_we0 = 1'b1;
    end else begin
        ciphertext1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ciphertext2_address0 = zext_ln304_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext2_address0 = grp_Blowfish_Decrypt_fu_219_ciphertext_address0;
    end else begin
        ciphertext2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ciphertext2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext2_ce0 = grp_Blowfish_Decrypt_fu_219_ciphertext_ce0;
    end else begin
        ciphertext2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ciphertext2_ce1 = grp_Blowfish_Decrypt_fu_219_ciphertext_ce1;
    end else begin
        ciphertext2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ciphertext2_we0 = 1'b1;
    end else begin
        ciphertext2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        decryptedtext1_address0 = zext_ln314_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext1_address0 = grp_Blowfish_Decrypt_fu_203_decryptedtext_address0;
    end else begin
        decryptedtext1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        decryptedtext1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext1_ce0 = grp_Blowfish_Decrypt_fu_203_decryptedtext_ce0;
    end else begin
        decryptedtext1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext1_ce1 = grp_Blowfish_Decrypt_fu_203_decryptedtext_ce1;
    end else begin
        decryptedtext1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext1_we0 = grp_Blowfish_Decrypt_fu_203_decryptedtext_we0;
    end else begin
        decryptedtext1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext1_we1 = grp_Blowfish_Decrypt_fu_203_decryptedtext_we1;
    end else begin
        decryptedtext1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        decryptedtext2_address0 = zext_ln319_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext2_address0 = grp_Blowfish_Decrypt_fu_219_decryptedtext_address0;
    end else begin
        decryptedtext2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        decryptedtext2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext2_ce0 = grp_Blowfish_Decrypt_fu_219_decryptedtext_ce0;
    end else begin
        decryptedtext2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext2_ce1 = grp_Blowfish_Decrypt_fu_219_decryptedtext_ce1;
    end else begin
        decryptedtext2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext2_we0 = grp_Blowfish_Decrypt_fu_219_decryptedtext_we0;
    end else begin
        decryptedtext2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        decryptedtext2_we1 = grp_Blowfish_Decrypt_fu_219_decryptedtext_we1;
    end else begin
        decryptedtext2_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln292_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln300_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln313_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln318_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_9_fu_717_p3 = {{1'd1}, {or_ln319_fu_711_p2}};

assign Lo_assign_7_fu_399_p3 = {{trunc_ln304_fu_395_p1}, {3'd0}};

assign Lo_assign_8_fu_538_p3 = {{trunc_ln314_reg_926}, {3'd0}};

assign Lo_assign_9_fu_725_p4 = {{{{1'd1}, {trunc_ln319_reg_949}}}, {3'd0}};

assign Lo_assign_fu_265_p3 = {{trunc_ln296_fu_261_p1}, {3'd0}};

assign and_ln388_10_fu_854_p2 = (select_ln388_14_fu_816_p3 & and_ln388_8_fu_836_p2);

assign and_ln388_6_fu_665_p2 = (xor_ln388_7_fu_659_p2 & p_Val2_8_reg_158);

assign and_ln388_7_fu_671_p2 = (select_ln388_10_fu_633_p3 & and_ln388_fu_653_p2);

assign and_ln388_8_fu_836_p2 = (shl_ln388_6_fu_824_p2 & lshr_ln388_2_fu_830_p2);

assign and_ln388_9_fu_848_p2 = (xor_ln388_10_fu_842_p2 & p_Val2_9_reg_181);

assign and_ln388_fu_653_p2 = (shl_ln388_4_fu_641_p2 & lshr_ln388_fu_647_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_Blowfish_Decrypt_fu_219_ap_done == 1'b0) | (grp_Blowfish_Decrypt_fu_203_ap_done == 1'b0));
end

assign ciphertext1_d0 = p_Result_s_fu_368_p2[7:0];

assign ciphertext2_d0 = p_Result_15_fu_502_p2[7:0];

assign grp_Blowfish_Decrypt_fu_203_ap_start = grp_Blowfish_Decrypt_fu_203_ap_start_reg;

assign grp_Blowfish_Decrypt_fu_219_ap_start = grp_Blowfish_Decrypt_fu_219_ap_start_reg;

assign i_7_fu_389_p2 = (i1_0_i_reg_146 + 4'd1);

assign i_8_fu_523_p2 = (i_0_i3_reg_170 + 4'd1);

assign i_9_fu_689_p2 = (i1_0_i9_reg_192 + 4'd1);

assign i_fu_255_p2 = (i_0_i_reg_134 + 4'd1);

assign icmp_ln292_fu_249_p2 = ((i_0_i_reg_134 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_383_p2 = ((i1_0_i_reg_146 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln313_fu_517_p2 = ((i_0_i3_reg_170 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_683_p2 = ((i1_0_i9_reg_192 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln388_2_fu_738_p2 = ((Lo_assign_9_fu_725_p4 > Hi_assign_9_fu_717_p3) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_555_p2 = ((Lo_assign_8_fu_538_p3 > or_ln314_fu_545_p2) ? 1'b1 : 1'b0);

assign icmp_ln681_2_fu_413_p2 = ((Lo_assign_7_fu_399_p3 > or_ln304_fu_407_p2) ? 1'b1 : 1'b0);

assign icmp_ln681_fu_279_p2 = ((Lo_assign_fu_265_p3 > or_ln296_fu_273_p2) ? 1'b1 : 1'b0);

assign lower_64_V_fu_235_p1 = ciphertext_V[63:0];

assign lshr_ln388_2_fu_830_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln388_18_fu_796_p1;

assign lshr_ln388_fu_647_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln388_13_fu_613_p1;

assign lshr_ln681_5_fu_362_p2 = 64'd18446744073709551615 >> zext_ln681_13_fu_359_p1;

assign lshr_ln681_6_fu_487_p2 = select_ln681_11_fu_462_p3 >> zext_ln681_16_fu_483_p1;

assign lshr_ln681_7_fu_496_p2 = 64'd18446744073709551615 >> zext_ln681_17_fu_493_p1;

assign lshr_ln681_fu_353_p2 = select_ln681_8_fu_328_p3 >> zext_ln681_12_fu_349_p1;

assign or_ln296_fu_273_p2 = (6'd7 | Lo_assign_fu_265_p3);

assign or_ln304_fu_407_p2 = (6'd7 | Lo_assign_7_fu_399_p3);

assign or_ln314_fu_545_p2 = (6'd7 | Lo_assign_8_fu_538_p3);

assign or_ln319_fu_711_p2 = (shl_ln_fu_704_p3 | 6'd7);

assign p_Result_15_fu_502_p2 = (lshr_ln681_7_fu_496_p2 & lshr_ln681_6_reg_913);

assign p_Result_18_fu_677_p2 = (and_ln388_7_fu_671_p2 | and_ln388_6_fu_665_p2);

assign p_Result_19_fu_860_p2 = (and_ln388_9_fu_848_p2 | and_ln388_10_fu_854_p2);

assign p_Result_s_fu_368_p2 = (lshr_ln681_reg_895 & lshr_ln681_5_fu_362_p2);

assign select_ln388_10_fu_633_p3 = ((icmp_ln388_fu_555_p2[0:0] === 1'b1) ? tmp_8_fu_623_p4 : shl_ln388_fu_617_p2);

assign select_ln388_11_fu_758_p3 = ((icmp_ln388_2_fu_738_p2[0:0] === 1'b1) ? zext_ln388_14_fu_744_p1 : zext_ln388_15_fu_748_p1);

assign select_ln388_12_fu_766_p3 = ((icmp_ln388_2_fu_738_p2[0:0] === 1'b1) ? zext_ln388_15_fu_748_p1 : zext_ln388_14_fu_744_p1);

assign select_ln388_13_fu_774_p3 = ((icmp_ln388_2_fu_738_p2[0:0] === 1'b1) ? xor_ln388_8_fu_752_p2 : zext_ln388_14_fu_744_p1);

assign select_ln388_14_fu_816_p3 = ((icmp_ln388_2_fu_738_p2[0:0] === 1'b1) ? tmp_9_fu_806_p4 : shl_ln388_5_fu_800_p2);

assign select_ln388_8_fu_583_p3 = ((icmp_ln388_fu_555_p2[0:0] === 1'b1) ? zext_ln388_10_fu_565_p1 : zext_ln388_fu_561_p1);

assign select_ln388_9_fu_591_p3 = ((icmp_ln388_fu_555_p2[0:0] === 1'b1) ? xor_ln388_fu_569_p2 : zext_ln388_fu_561_p1);

assign select_ln388_fu_575_p3 = ((icmp_ln388_fu_555_p2[0:0] === 1'b1) ? zext_ln388_fu_561_p1 : zext_ln388_10_fu_565_p1);

assign select_ln681_10_fu_454_p3 = ((icmp_ln681_2_fu_413_p2[0:0] === 1'b1) ? sub_ln681_10_fu_436_p2 : sub_ln681_11_fu_448_p2);

assign select_ln681_11_fu_462_p3 = ((icmp_ln681_2_fu_413_p2[0:0] === 1'b1) ? tmp_7_fu_427_p4 : upper_64_V_reg_877);

assign select_ln681_12_fu_469_p3 = ((icmp_ln681_2_fu_413_p2[0:0] === 1'b1) ? xor_ln681_2_fu_442_p2 : zext_ln681_14_fu_419_p1);

assign select_ln681_8_fu_328_p3 = ((icmp_ln681_fu_279_p2[0:0] === 1'b1) ? tmp_fu_293_p4 : lower_64_V_reg_872);

assign select_ln681_9_fu_335_p3 = ((icmp_ln681_fu_279_p2[0:0] === 1'b1) ? xor_ln681_fu_308_p2 : zext_ln681_fu_285_p1);

assign select_ln681_fu_320_p3 = ((icmp_ln681_fu_279_p2[0:0] === 1'b1) ? sub_ln681_fu_302_p2 : sub_ln681_8_fu_314_p2);

assign shl_ln388_4_fu_641_p2 = 128'd340282366920938463463374607431768211455 << zext_ln388_12_fu_609_p1;

assign shl_ln388_5_fu_800_p2 = tmp_V_5_fu_734_p1 << zext_ln388_16_fu_788_p1;

assign shl_ln388_6_fu_824_p2 = 128'd340282366920938463463374607431768211455 << zext_ln388_17_fu_792_p1;

assign shl_ln388_fu_617_p2 = tmp_V_fu_551_p1 << zext_ln388_11_fu_605_p1;

assign shl_ln_fu_704_p3 = {{trunc_ln319_reg_949}, {3'd0}};

assign sub_ln681_10_fu_436_p2 = (zext_ln681_14_fu_419_p1 - zext_ln681_15_fu_423_p1);

assign sub_ln681_11_fu_448_p2 = (zext_ln681_15_fu_423_p1 - zext_ln681_14_fu_419_p1);

assign sub_ln681_12_fu_477_p2 = (7'd63 - select_ln681_10_fu_454_p3);

assign sub_ln681_8_fu_314_p2 = (zext_ln681_11_fu_289_p1 - zext_ln681_fu_285_p1);

assign sub_ln681_9_fu_343_p2 = (7'd63 - select_ln681_fu_320_p3);

assign sub_ln681_fu_302_p2 = (zext_ln681_fu_285_p1 - zext_ln681_11_fu_289_p1);

integer ap_tvar_int_0;

always @ (ciphertext_V) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 64) begin
            tmp_7_fu_427_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_7_fu_427_p4[ap_tvar_int_0] = ciphertext_V[127 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln388_fu_617_p2) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_8_fu_623_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_8_fu_623_p4[ap_tvar_int_1] = shl_ln388_fu_617_p2[127 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (shl_ln388_5_fu_800_p2) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_9_fu_806_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_9_fu_806_p4[ap_tvar_int_2] = shl_ln388_5_fu_800_p2[127 - ap_tvar_int_2];
        end
    end
end

assign tmp_V_5_fu_734_p1 = decryptedtext2_q0;

assign tmp_V_fu_551_p1 = decryptedtext1_q0;

integer ap_tvar_int_3;

always @ (ciphertext_V) begin
    for (ap_tvar_int_3 = 64 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 63 - 0) begin
            tmp_fu_293_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_fu_293_p4[ap_tvar_int_3] = ciphertext_V[63 - ap_tvar_int_3];
        end
    end
end

assign trunc_ln296_fu_261_p1 = i_0_i_reg_134[2:0];

assign trunc_ln304_fu_395_p1 = i1_0_i_reg_146[2:0];

assign trunc_ln314_fu_529_p1 = i_0_i3_reg_170[2:0];

assign trunc_ln319_fu_695_p1 = i1_0_i9_reg_192[2:0];

assign xor_ln388_10_fu_842_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln388_8_fu_836_p2);

assign xor_ln388_6_fu_599_p2 = (select_ln388_fu_575_p3 ^ 8'd127);

assign xor_ln388_7_fu_659_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln388_fu_653_p2);

assign xor_ln388_8_fu_752_p2 = (zext_ln388_14_fu_744_p1 ^ 8'd127);

assign xor_ln388_9_fu_782_p2 = (select_ln388_11_fu_758_p3 ^ 8'd127);

assign xor_ln388_fu_569_p2 = (zext_ln388_fu_561_p1 ^ 8'd127);

assign xor_ln681_2_fu_442_p2 = (zext_ln681_14_fu_419_p1 ^ 7'd63);

assign xor_ln681_fu_308_p2 = (zext_ln681_fu_285_p1 ^ 7'd63);

assign zext_ln296_fu_378_p1 = i_0_i_reg_134;

assign zext_ln304_fu_512_p1 = i1_0_i_reg_146;

assign zext_ln314_fu_533_p1 = i_0_i3_reg_170;

assign zext_ln319_fu_699_p1 = i1_0_i9_reg_192;

assign zext_ln388_10_fu_565_p1 = or_ln314_fu_545_p2;

assign zext_ln388_11_fu_605_p1 = select_ln388_9_fu_591_p3;

assign zext_ln388_12_fu_609_p1 = select_ln388_8_fu_583_p3;

assign zext_ln388_13_fu_613_p1 = xor_ln388_6_fu_599_p2;

assign zext_ln388_14_fu_744_p1 = Lo_assign_9_fu_725_p4;

assign zext_ln388_15_fu_748_p1 = Hi_assign_9_fu_717_p3;

assign zext_ln388_16_fu_788_p1 = select_ln388_13_fu_774_p3;

assign zext_ln388_17_fu_792_p1 = select_ln388_12_fu_766_p3;

assign zext_ln388_18_fu_796_p1 = xor_ln388_9_fu_782_p2;

assign zext_ln388_fu_561_p1 = Lo_assign_8_fu_538_p3;

assign zext_ln681_11_fu_289_p1 = or_ln296_fu_273_p2;

assign zext_ln681_12_fu_349_p1 = select_ln681_9_fu_335_p3;

assign zext_ln681_13_fu_359_p1 = sub_ln681_9_reg_890;

assign zext_ln681_14_fu_419_p1 = Lo_assign_7_fu_399_p3;

assign zext_ln681_15_fu_423_p1 = or_ln304_fu_407_p2;

assign zext_ln681_16_fu_483_p1 = select_ln681_12_fu_469_p3;

assign zext_ln681_17_fu_493_p1 = sub_ln681_12_reg_908;

assign zext_ln681_fu_285_p1 = Lo_assign_fu_265_p3;

always @ (posedge ap_clk) begin
    sub_ln681_9_reg_890[0] <= 1'b0;
    sub_ln681_12_reg_908[0] <= 1'b0;
end

endmodule //decrypt_bf
