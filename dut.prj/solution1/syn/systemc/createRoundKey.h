// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _createRoundKey_HH_
#define _createRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "createRoundKey_embkb.h"

namespace ap_rtl {

struct createRoundKey : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<9> > expandedKey_offset;
    sc_out< sc_lv<4> > roundKey_address0;
    sc_out< sc_logic > roundKey_ce0;
    sc_out< sc_logic > roundKey_we0;
    sc_out< sc_lv<8> > roundKey_d0;


    // Module declarations
    createRoundKey(sc_module_name name);
    SC_HAS_PROCESS(createRoundKey);

    ~createRoundKey();

    sc_trace_file* mVcdFile;

    createRoundKey_embkb* empty_U;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > empty_address0;
    sc_signal< sc_logic > empty_ce0;
    sc_signal< sc_lv<8> > empty_q0;
    sc_signal< sc_lv<8> > trunc_ln391_fu_79_p1;
    sc_signal< sc_lv<8> > trunc_ln391_reg_167;
    sc_signal< sc_lv<4> > zext_ln387_fu_83_p1;
    sc_signal< sc_lv<4> > zext_ln387_reg_172;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_fu_93_p2;
    sc_signal< sc_lv<3> > i_reg_180;
    sc_signal< sc_lv<4> > shl_ln_fu_103_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_185;
    sc_signal< sc_lv<1> > icmp_ln387_fu_87_p2;
    sc_signal< sc_lv<3> > j_fu_121_p2;
    sc_signal< sc_lv<3> > j_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln390_fu_115_p2;
    sc_signal< sc_lv<4> > add_ln391_1_fu_158_p2;
    sc_signal< sc_lv<4> > add_ln391_1_reg_203;
    sc_signal< sc_lv<3> > i_0_reg_57;
    sc_signal< sc_lv<3> > j_0_reg_68;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln391_2_fu_141_p1;
    sc_signal< sc_lv<64> > zext_ln391_1_fu_163_p1;
    sc_signal< sc_lv<2> > trunc_ln391_1_fu_99_p1;
    sc_signal< sc_lv<4> > zext_ln390_fu_111_p1;
    sc_signal< sc_lv<4> > add_ln391_fu_127_p2;
    sc_signal< sc_lv<8> > zext_ln391_fu_132_p1;
    sc_signal< sc_lv<8> > add_ln391_2_fu_136_p2;
    sc_signal< sc_lv<2> > trunc_ln391_2_fu_146_p1;
    sc_signal< sc_lv<4> > shl_ln391_1_fu_150_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln391_1_fu_158_p2();
    void thread_add_ln391_2_fu_136_p2();
    void thread_add_ln391_fu_127_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_empty_address0();
    void thread_empty_ce0();
    void thread_i_fu_93_p2();
    void thread_icmp_ln387_fu_87_p2();
    void thread_icmp_ln390_fu_115_p2();
    void thread_j_fu_121_p2();
    void thread_roundKey_address0();
    void thread_roundKey_ce0();
    void thread_roundKey_d0();
    void thread_roundKey_we0();
    void thread_shl_ln391_1_fu_150_p3();
    void thread_shl_ln_fu_103_p3();
    void thread_trunc_ln391_1_fu_99_p1();
    void thread_trunc_ln391_2_fu_146_p1();
    void thread_trunc_ln391_fu_79_p1();
    void thread_zext_ln387_fu_83_p1();
    void thread_zext_ln390_fu_111_p1();
    void thread_zext_ln391_1_fu_163_p1();
    void thread_zext_ln391_2_fu_141_p1();
    void thread_zext_ln391_fu_132_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
